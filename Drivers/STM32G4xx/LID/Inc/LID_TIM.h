#ifndef LID_TIM_H
#define LID_TIM_H

#include <stdint.h>
#include <stm32g4xx.h>

#define LID_TIM_N_TIM 7
#define LID_TIM_N_TIM_CHANNELS 128

typedef enum {
	LID_TIM_TIM1 = 0,
	LID_TIM_TIM2 = 1,
	LID_TIM_TIM3 = 2,
	LID_TIM_TIM4 = 3,
	LID_TIM_TIM8 = 4,
} LID_TIM_TimerId_t;

typedef enum {
	/*TIM1 Channels */
	LID_TIM_TIM1_CH1N_PA7,
	LID_TIM_TIM1_CH1_PA8,
	LID_TIM_TIM1_CH2_PA9,
	LID_TIM_TIM1_CH3_PA10,
	LID_TIM_TIM1_CH1N_PA11,
	LID_TIM_TIM1_CH4_PA11,
	LID_TIM_TIM1_CH2N_PA12,

	LID_TIM_TIM1_CH2N_PB0,
	LID_TIM_TIM1_CH3N_PB1,
	LID_TIM_TIM1_CH3N_PB9,
	LID_TIM_TIM1_CH1N_PB13,
	LID_TIM_TIM1_CH2N_PB14,
	LID_TIM_TIM1_CH3N_PB15,

	LID_TIM_TIM1_CH1_PC0,
	LID_TIM_TIM1_CH2_PC1,
	LID_TIM_TIM1_CH3_PC2,
	LID_TIM_TIM1_CH4_PC3,
	LID_TIM_TIM1_CH4N_PC5,
	LID_TIM_TIM1_CH1N_PC13,

	LID_TIM_TIM1_CH1N_PE8,
	LID_TIM_TIM1_CH1_PE9,
	LID_TIM_TIM1_CH2N_PE10,
	LID_TIM_TIM1_CH2_PE11,
	LID_TIM_TIM1_CH3N_PE12,
	LID_TIM_TIM1_CH3_PE13,
	LID_TIM_TIM1_CH4_PE14,
	LID_TIM_TIM1_CH4N_PE15,

	LID_TIM_TIM1_CH3N_PF0,

	/*TIM2 Channels */
	LID_TIM_TIM2_CH1_PA0,
	LID_TIM_TIM2_CH2_PA1,
	LID_TIM_TIM2_CH3_PA2,
	LID_TIM_TIM2_CH4_PA3,
	LID_TIM_TIM2_CH1_PA5,
	LID_TIM_TIM2_CH3_PA9,
	LID_TIM_TIM2_CH4_PA10,
	LID_TIM_TIM2_CH1_PA15,

	LID_TIM_TIM2_CH2_PB3,
	LID_TIM_TIM2_CH3_PB10,
	LID_TIM_TIM2_CH4_PB11,

	LID_TIM_TIM2_CH1_PD3,
	LID_TIM_TIM2_CH2_PD4,
	LID_TIM_TIM2_CH4_PD6,
	LID_TIM_TIM2_CH3_PD7,

	/*TIM3 Channels*/
	LID_TIM_TIM3_CH2_PA4,
	LID_TIM_TIM3_CH1_PA6,
	LID_TIM_TIM3_CH2_PA7,

	LID_TIM_TIM3_CH3_PB0,
	LID_TIM_TIM3_CH4_PB1,
	LID_TIM_TIM3_CH1_PB4,
	LID_TIM_TIM3_CH2_PB5,
	LID_TIM_TIM3_CH4_PB7,

	LID_TIM_TIM3_CH1_PC6,
	LID_TIM_TIM3_CH2_PC7,
	LID_TIM_TIM3_CH3_PC8,
	LID_TIM_TIM3_CH4_PC9,

	LID_TIM_TIM3_CH1_PE2,
	LID_TIM_TIM3_CH2_PE3,
	LID_TIM_TIM3_CH3_PE4,
	LID_TIM_TIM3_CH4_PE5,

	/*TIM4 Channels*/
	LID_TIM_TIM4_CH1_PA11,
	LID_TIM_TIM4_CH2_PA12,
	LID_TIM_TIM4_CH3_PA13,

	LID_TIM_TIM4_CH1_PB6,
	LID_TIM_TIM4_CH2_PB7,
	LID_TIM_TIM4_CH3_PB8,
	LID_TIM_TIM4_CH4_PB9,

	LID_TIM_TIM4_CH1_PD12,
	LID_TIM_TIM4_CH2_PD13,
	LID_TIM_TIM4_CH3_PD14,
	LID_TIM_TIM4_CH4_PD15,

	/*TIM8 Channels*/
	LID_TIM_TIM8_CH1N_PA7,
	LID_TIM_TIM8_CH2_PA14,
	LID_TIM_TIM8_CH1_PA15,


	LID_TIM_TIM8_CH2N_PB0,
	LID_TIM_TIM8_CH3N_PB1,
	LID_TIM_TIM8_CH1N_PB3,
	LID_TIM_TIM8_CH2N_PB4,
	LID_TIM_TIM8_CH3N_PB5,
	LID_TIM_TIM8_CH1_PB6,
	LID_TIM_TIM8_CH2_PB8,
	LID_TIM_TIM8_CH3_PB9,

	LID_TIM_TIM8_CH1_PC6,
	LID_TIM_TIM8_CH2_PC7,
	LID_TIM_TIM8_CH3_PC8,
	LID_TIM_TIM8_CH4_PC9,
	LID_TIM_TIM8_CH1N_PC10,
	LID_TIM_TIM8_CH2N_PC11,
	LID_TIM_TIM8_CH3N_PC12,
	LID_TIM_TIM8_CH4N_PC13,

	LID_TIM_TIM8_CH4N_PD0,
	LID_TIM_TIM8_CH4_PD1,
} LID_TIM_ChannelId_t;


typedef enum {
	LID_TIM_PWM_CHANNELTYPE_SO, //single out channel
	LID_TIM_PWM_CHANNELTYPE_IN, //input measure duty cycle
} LID_TIM_PWM_ChannelType_t;

typedef struct {
	LID_TIM_ChannelId_t channelId;
	LID_TIM_PWM_ChannelType_t type;
} LID_TIM_PWM_Channel_t;


void LID_TIM_Init();
void LID_TIM_Run();

int32_t LID_TIM_PWM_Init(LID_TIM_TimerId_t id, uint16_t psc, uint16_t res);
int LID_TIM_PWM_AddChannel(LID_TIM_PWM_Channel_t *pwmChannel, LID_TIM_ChannelId_t channelId, LID_TIM_PWM_ChannelType_t pwmType);
int32_t LID_TIM_PWM_Read(LID_TIM_PWM_Channel_t *pwmChannel, uint16_t *duty);
int32_t LID_TIM_PWM_SetFreq(LID_TIM_TimerId_t id, uint16_t psc, uint16_t res);
int32_t LID_TIM_PWM_SetDuty(LID_TIM_PWM_Channel_t *pwmChannel, uint16_t duty) ;
int LID_TIM_PWM_Enable(LID_TIM_PWM_Channel_t *pwmChannel, int enable);



#endif /*LID_TIM_H*/
