
firmware_liquids.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b44  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000122c  08006d1c  08006d1c  00016d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f48  08007f48  00020784  2**0
                  CONTENTS
  4 .ARM          00000000  08007f48  08007f48  00020784  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007f48  08007f48  00020784  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f48  08007f48  00017f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f4c  08007f4c  00017f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000784  20000000  08007f50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000038c  20000788  080086d4  00020788  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000b14  080086d4  00020b14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020784  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002209c  00000000  00000000  000207b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000568d  00000000  00000000  00042850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001478  00000000  00000000  00047ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b0  00000000  00000000  00049358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002962b  00000000  00000000  0004a608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b9c  00000000  00000000  00073c33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dbf2d  00000000  00000000  000887cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001646fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005924  00000000  00000000  00164750  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000788 	.word	0x20000788
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006d04 	.word	0x08006d04

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000078c 	.word	0x2000078c
 8000214:	08006d04 	.word	0x08006d04

08000218 <_ZN11AbstractComC1Em>:
#include <AbstractCom.h>

AbstractCom::AbstractCom(uint32_t nodeId) :
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
		nodeId(nodeId)
 8000222:	4a06      	ldr	r2, [pc, #24]	; (800023c <_ZN11AbstractComC1Em+0x24>)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	601a      	str	r2, [r3, #0]
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	683a      	ldr	r2, [r7, #0]
 800022c:	605a      	str	r2, [r3, #4]
{
}
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	4618      	mov	r0, r3
 8000232:	370c      	adds	r7, #12
 8000234:	46bd      	mov	sp, r7
 8000236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023a:	4770      	bx	lr
 800023c:	08006e34 	.word	0x08006e34

08000240 <_ZN3CanC1Em>:
#include <cstdio>

Com_Receptor_t Can::standardReceptor = nullptr;
uint32_t Can::_nodeId = 0; // TODO fix this pfusch

Can::Can(uint32_t nodeId) :
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
 8000248:	6039      	str	r1, [r7, #0]
		AbstractCom(nodeId)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	6839      	ldr	r1, [r7, #0]
 800024e:	4618      	mov	r0, r3
 8000250:	f7ff ffe2 	bl	8000218 <_ZN11AbstractComC1Em>
 8000254:	4a03      	ldr	r2, [pc, #12]	; (8000264 <_ZN3CanC1Em+0x24>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	601a      	str	r2, [r3, #0]
{
}
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	4618      	mov	r0, r3
 800025e:	3708      	adds	r7, #8
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	08006e44 	.word	0x08006e44

08000268 <_ZN3Can8instanceEm>:

Can& Can::instance(uint32_t nodeId)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
	static Can can(nodeId);
 8000270:	4b15      	ldr	r3, [pc, #84]	; (80002c8 <_ZN3Can8instanceEm+0x60>)
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	f3bf 8f5b 	dmb	ish
 8000278:	b2db      	uxtb	r3, r3
 800027a:	f003 0301 	and.w	r3, r3, #1
 800027e:	2b00      	cmp	r3, #0
 8000280:	bf0c      	ite	eq
 8000282:	2301      	moveq	r3, #1
 8000284:	2300      	movne	r3, #0
 8000286:	b2db      	uxtb	r3, r3
 8000288:	2b00      	cmp	r3, #0
 800028a:	d011      	beq.n	80002b0 <_ZN3Can8instanceEm+0x48>
 800028c:	480e      	ldr	r0, [pc, #56]	; (80002c8 <_ZN3Can8instanceEm+0x60>)
 800028e:	f006 fc23 	bl	8006ad8 <__cxa_guard_acquire>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	bf14      	ite	ne
 8000298:	2301      	movne	r3, #1
 800029a:	2300      	moveq	r3, #0
 800029c:	b2db      	uxtb	r3, r3
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d006      	beq.n	80002b0 <_ZN3Can8instanceEm+0x48>
 80002a2:	6879      	ldr	r1, [r7, #4]
 80002a4:	4809      	ldr	r0, [pc, #36]	; (80002cc <_ZN3Can8instanceEm+0x64>)
 80002a6:	f7ff ffcb 	bl	8000240 <_ZN3CanC1Em>
 80002aa:	4807      	ldr	r0, [pc, #28]	; (80002c8 <_ZN3Can8instanceEm+0x60>)
 80002ac:	f006 fc20 	bl	8006af0 <__cxa_guard_release>

	if (nodeId != 0)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d002      	beq.n	80002bc <_ZN3Can8instanceEm+0x54>
		_nodeId = nodeId;
 80002b6:	4a06      	ldr	r2, [pc, #24]	; (80002d0 <_ZN3Can8instanceEm+0x68>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	6013      	str	r3, [r2, #0]

	return can;
 80002bc:	4b03      	ldr	r3, [pc, #12]	; (80002cc <_ZN3Can8instanceEm+0x64>)
}
 80002be:	4618      	mov	r0, r3
 80002c0:	3708      	adds	r7, #8
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	200007b4 	.word	0x200007b4
 80002cc:	200007ac 	.word	0x200007ac
 80002d0:	200007a8 	.word	0x200007a8

080002d4 <_ZN3Can4initEPFvmPhmEPFvvE>:

int Can::init(Com_Receptor_t receptor, Com_Heartbeat_t heartbeat)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
 80002da:	60f8      	str	r0, [r7, #12]
 80002dc:	60b9      	str	r1, [r7, #8]
 80002de:	607a      	str	r2, [r7, #4]
	return Can::init(receptor, heartbeat, COMMode::STANDARD_COM_MODE);
 80002e0:	2300      	movs	r3, #0
 80002e2:	687a      	ldr	r2, [r7, #4]
 80002e4:	68b9      	ldr	r1, [r7, #8]
 80002e6:	68f8      	ldr	r0, [r7, #12]
 80002e8:	f000 f806 	bl	80002f8 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode>
 80002ec:	4603      	mov	r3, r0
}
 80002ee:	4618      	mov	r0, r3
 80002f0:	3710      	adds	r7, #16
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
	...

080002f8 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode>:

int Can::init(Com_Receptor_t receptor, Com_Heartbeat_t heartbeat, COMMode mode)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b0a4      	sub	sp, #144	; 0x90
 80002fc:	af02      	add	r7, sp, #8
 80002fe:	60f8      	str	r0, [r7, #12]
 8000300:	60b9      	str	r1, [r7, #8]
 8000302:	607a      	str	r2, [r7, #4]
 8000304:	603b      	str	r3, [r7, #0]
	if(nodeId == 0)
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	685b      	ldr	r3, [r3, #4]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d102      	bne.n	8000314 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x1c>
		return -1;
 800030e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000312:	e18e      	b.n	8000632 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x33a>

	standardReceptor = receptor;
 8000314:	4ac3      	ldr	r2, [pc, #780]	; (8000624 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x32c>)
 8000316:	68bb      	ldr	r3, [r7, #8]
 8000318:	6013      	str	r3, [r2, #0]

	if (STRHAL_CAN_Instance_Init(STRHAL_FDCAN1) != 0)
 800031a:	2000      	movs	r0, #0
 800031c:	f004 fb64 	bl	80049e8 <STRHAL_CAN_Instance_Init>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	bf14      	ite	ne
 8000326:	2301      	movne	r3, #1
 8000328:	2300      	moveq	r3, #0
 800032a:	b2db      	uxtb	r3, r3
 800032c:	2b00      	cmp	r3, #0
 800032e:	d002      	beq.n	8000336 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x3e>
		return -1;
 8000330:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000334:	e17d      	b.n	8000632 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x33a>

	if (STRHAL_CAN_Instance_Init(STRHAL_FDCAN2) != 0)
 8000336:	2001      	movs	r0, #1
 8000338:	f004 fb56 	bl	80049e8 <STRHAL_CAN_Instance_Init>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	bf14      	ite	ne
 8000342:	2301      	movne	r3, #1
 8000344:	2300      	moveq	r3, #0
 8000346:	b2db      	uxtb	r3, r3
 8000348:	2b00      	cmp	r3, #0
 800034a:	d002      	beq.n	8000352 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x5a>
		return -1;
 800034c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000350:	e16f      	b.n	8000632 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x33a>

	if (STRHAL_TIM_Heartbeat_Init(STRHAL_TIM_TIM7, 1600, 1000) != 100)
 8000352:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000356:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800035a:	2001      	movs	r0, #1
 800035c:	f005 ffa8 	bl	80062b0 <STRHAL_TIM_Heartbeat_Init>
 8000360:	4603      	mov	r3, r0
 8000362:	2b64      	cmp	r3, #100	; 0x64
 8000364:	bf14      	ite	ne
 8000366:	2301      	movne	r3, #1
 8000368:	2300      	moveq	r3, #0
 800036a:	b2db      	uxtb	r3, r3
 800036c:	2b00      	cmp	r3, #0
 800036e:	d002      	beq.n	8000376 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x7e>
		return -1;
 8000370:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000374:	e15d      	b.n	8000632 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x33a>

	if (STRHAL_TIM_Heartbeat_Subscribe(STRHAL_TIM_TIM7, heartbeat) != 0)
 8000376:	6879      	ldr	r1, [r7, #4]
 8000378:	2001      	movs	r0, #1
 800037a:	f005 fff5 	bl	8006368 <STRHAL_TIM_Heartbeat_Subscribe>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	bf14      	ite	ne
 8000384:	2301      	movne	r3, #1
 8000386:	2300      	moveq	r3, #0
 8000388:	b2db      	uxtb	r3, r3
 800038a:	2b00      	cmp	r3, #0
 800038c:	d002      	beq.n	8000394 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x9c>
		return -1;
 800038e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000392:	e14e      	b.n	8000632 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x33a>

	if (mode == COMMode::STANDARD_COM_MODE)
 8000394:	683b      	ldr	r3, [r7, #0]
 8000396:	2b00      	cmp	r3, #0
 8000398:	d16f      	bne.n	800047a <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x182>
	{
		Can_MessageId_t mask =
 800039a:	2300      	movs	r3, #0
 800039c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		{ 0 };
		mask.info.direction = 0x1;
 80003a0:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80003a4:	f043 0301 	orr.w	r3, r3, #1
 80003a8:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
		mask.info.node_id = 0x3F;
 80003ac:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80003b0:	f043 037e 	orr.w	r3, r3, #126	; 0x7e
 80003b4:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
		mask.info.special_cmd = 0x3;
 80003b8:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80003bc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80003c0:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

		Can_MessageId_t id =
 80003c4:	2300      	movs	r3, #0
 80003c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		{ 0 };
		id.info.direction = MASTER2NODE_DIRECTION;
 80003ca:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80003ce:	f36f 0300 	bfc	r3, #0, #1
 80003d2:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
		id.info.special_cmd = STANDARD_SPECIAL_CMD;
 80003d6:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 80003da:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80003de:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
		id.info.node_id = nodeId;
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	685b      	ldr	r3, [r3, #4]
 80003e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80003ea:	b2da      	uxtb	r2, r3
 80003ec:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80003f0:	f362 0346 	bfi	r3, r2, #1, #6
 80003f4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
		Can_MessageId_t id2 =
 80003f8:	2300      	movs	r3, #0
 80003fa:	67fb      	str	r3, [r7, #124]	; 0x7c
		{ 0 };
		id2.info.direction = MASTER2NODE_DIRECTION;
 80003fc:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8000400:	f36f 0300 	bfc	r3, #0, #1
 8000404:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
		id2.info.special_cmd = STANDARD_SPECIAL_CMD;
 8000408:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800040c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8000410:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
		id2.info.node_id = 0;
 8000414:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8000418:	f36f 0346 	bfc	r3, #1, #6
 800041c:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c

		STRHAL_FDCAN_Filter_t mainFilter[] =
 8000420:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000424:	2200      	movs	r2, #0
 8000426:	601a      	str	r2, [r3, #0]
 8000428:	605a      	str	r2, [r3, #4]
 800042a:	609a      	str	r2, [r3, #8]
 800042c:	60da      	str	r2, [r3, #12]
 800042e:	611a      	str	r2, [r3, #16]
 8000430:	615a      	str	r2, [r3, #20]
 8000432:	2302      	movs	r3, #2
 8000434:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000436:	2302      	movs	r3, #2
 8000438:	67bb      	str	r3, [r7, #120]	; 0x78
		{
		{ .value_id1 = id.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
 800043a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
		{ .value_id1 = id2.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK } };
 800043e:	667b      	str	r3, [r7, #100]	; 0x64
		{ .value_id1 = id.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
 8000440:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
		{ .value_id1 = id2.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK } };
 8000444:	66bb      	str	r3, [r7, #104]	; 0x68
 8000446:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000448:	673b      	str	r3, [r7, #112]	; 0x70
 800044a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800044e:	677b      	str	r3, [r7, #116]	; 0x74

		if (STRHAL_CAN_Subscribe(STRHAL_FDCAN1, STRHAL_FDCAN_RX0, mainFilter, 2, receptor) != 2)
 8000450:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8000454:	68bb      	ldr	r3, [r7, #8]
 8000456:	9300      	str	r3, [sp, #0]
 8000458:	2302      	movs	r3, #2
 800045a:	2100      	movs	r1, #0
 800045c:	2000      	movs	r0, #0
 800045e:	f004 fbc7 	bl	8004bf0 <STRHAL_CAN_Subscribe>
 8000462:	4603      	mov	r3, r0
 8000464:	2b02      	cmp	r3, #2
 8000466:	bf14      	ite	ne
 8000468:	2301      	movne	r3, #1
 800046a:	2300      	moveq	r3, #0
 800046c:	b2db      	uxtb	r3, r3
 800046e:	2b00      	cmp	r3, #0
 8000470:	f000 80de 	beq.w	8000630 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x338>
			return -1;
 8000474:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000478:	e0db      	b.n	8000632 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x33a>
	}
	else if (mode == COMMode::LISTENER_COM_MODE)
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	2b02      	cmp	r3, #2
 800047e:	f040 809f 	bne.w	80005c0 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x2c8>
	{
		Can_MessageId_t mask =
 8000482:	2300      	movs	r3, #0
 8000484:	663b      	str	r3, [r7, #96]	; 0x60
		{ 0 };
		mask.info.direction = 0x1;
 8000486:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800048a:	f043 0301 	orr.w	r3, r3, #1
 800048e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
		mask.info.node_id = 0x1F;
 8000492:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8000496:	221f      	movs	r2, #31
 8000498:	f362 0346 	bfi	r3, r2, #1, #6
 800049c:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
		mask.info.special_cmd = 0x3;
 80004a0:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80004a4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80004a8:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60

		Can_MessageId_t id =
 80004ac:	2300      	movs	r3, #0
 80004ae:	65fb      	str	r3, [r7, #92]	; 0x5c
		{ 0 };
		id.info.direction = MASTER2NODE_DIRECTION;
 80004b0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80004b4:	f36f 0300 	bfc	r3, #0, #1
 80004b8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
		id.info.special_cmd = STANDARD_SPECIAL_CMD;
 80004bc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80004c0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80004c4:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
		id.info.node_id = nodeId;
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	685b      	ldr	r3, [r3, #4]
 80004cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80004d0:	b2da      	uxtb	r2, r3
 80004d2:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80004d6:	f362 0346 	bfi	r3, r2, #1, #6
 80004da:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

		Can_MessageId_t id2 =
 80004de:	2300      	movs	r3, #0
 80004e0:	65bb      	str	r3, [r7, #88]	; 0x58
		{ 0 };
		id2.info.direction = MASTER2NODE_DIRECTION;
 80004e2:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80004e6:	f36f 0300 	bfc	r3, #0, #1
 80004ea:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		id2.info.special_cmd = STANDARD_SPECIAL_CMD;
 80004ee:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80004f2:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80004f6:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
		id2.info.node_id = 0;
 80004fa:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80004fe:	f36f 0346 	bfc	r3, #1, #6
 8000502:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

		Can_MessageId_t id3 =
 8000506:	2300      	movs	r3, #0
 8000508:	657b      	str	r3, [r7, #84]	; 0x54
		{ 0 };
		id3.info.direction = NODE2MASTER_DIRECTION;
 800050a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800050e:	f043 0301 	orr.w	r3, r3, #1
 8000512:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
		id3.info.special_cmd = STANDARD_SPECIAL_CMD;
 8000516:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800051a:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800051e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
		id3.info.node_id = 6;
 8000522:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000526:	2206      	movs	r2, #6
 8000528:	f362 0346 	bfi	r3, r2, #1, #6
 800052c:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

		Can_MessageId_t id4 =
 8000530:	2300      	movs	r3, #0
 8000532:	653b      	str	r3, [r7, #80]	; 0x50
		{ 0 };
		id4.info.direction = NODE2MASTER_DIRECTION;
 8000534:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000538:	f043 0301 	orr.w	r3, r3, #1
 800053c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
		id4.info.special_cmd = STANDARD_SPECIAL_CMD;
 8000540:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8000544:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8000548:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
		id4.info.node_id = 7;
 800054c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000550:	2207      	movs	r2, #7
 8000552:	f362 0346 	bfi	r3, r2, #1, #6
 8000556:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

		STRHAL_FDCAN_Filter_t mainFilter[] =
 800055a:	f107 0314 	add.w	r3, r7, #20
 800055e:	2230      	movs	r2, #48	; 0x30
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f006 fb24 	bl	8006bb0 <memset>
 8000568:	2302      	movs	r3, #2
 800056a:	61fb      	str	r3, [r7, #28]
 800056c:	2302      	movs	r3, #2
 800056e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000570:	2302      	movs	r3, #2
 8000572:	637b      	str	r3, [r7, #52]	; 0x34
 8000574:	2302      	movs	r3, #2
 8000576:	643b      	str	r3, [r7, #64]	; 0x40
		{
		{ .value_id1 = id.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
 8000578:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
		{ .value_id1 = id2.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
		{ .value_id1 = id3.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
		{ .value_id1 = id4.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK } };
 800057a:	617b      	str	r3, [r7, #20]
		{ .value_id1 = id.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
 800057c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
		{ .value_id1 = id4.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK } };
 800057e:	61bb      	str	r3, [r7, #24]
		{ .value_id1 = id2.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
 8000580:	6dbb      	ldr	r3, [r7, #88]	; 0x58
		{ .value_id1 = id4.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK } };
 8000582:	623b      	str	r3, [r7, #32]
		{ .value_id1 = id2.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
 8000584:	6e3b      	ldr	r3, [r7, #96]	; 0x60
		{ .value_id1 = id4.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK } };
 8000586:	627b      	str	r3, [r7, #36]	; 0x24
		{ .value_id1 = id3.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
 8000588:	6d7b      	ldr	r3, [r7, #84]	; 0x54
		{ .value_id1 = id4.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK } };
 800058a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{ .value_id1 = id3.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
 800058c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
		{ .value_id1 = id4.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK } };
 800058e:	633b      	str	r3, [r7, #48]	; 0x30
 8000590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000592:	63bb      	str	r3, [r7, #56]	; 0x38
 8000594:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000596:	63fb      	str	r3, [r7, #60]	; 0x3c

		if (STRHAL_CAN_Subscribe(STRHAL_FDCAN1, STRHAL_FDCAN_RX0, mainFilter, 4, receptor) != 4)
 8000598:	f107 0214 	add.w	r2, r7, #20
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	2304      	movs	r3, #4
 80005a2:	2100      	movs	r1, #0
 80005a4:	2000      	movs	r0, #0
 80005a6:	f004 fb23 	bl	8004bf0 <STRHAL_CAN_Subscribe>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b04      	cmp	r3, #4
 80005ae:	bf14      	ite	ne
 80005b0:	2301      	movne	r3, #1
 80005b2:	2300      	moveq	r3, #0
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d03a      	beq.n	8000630 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x338>
			return -1;
 80005ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005be:	e038      	b.n	8000632 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x33a>
	}
	else if (mode == COMMode::BRIDGE_COM_MODE)
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	2b01      	cmp	r3, #1
 80005c4:	d134      	bne.n	8000630 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x338>
	{
		STRHAL_FDCAN_Filter_t mainFilter[] =
 80005c6:	2300      	movs	r3, #0
 80005c8:	647b      	str	r3, [r7, #68]	; 0x44
 80005ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80005d0:	2300      	movs	r3, #0
 80005d2:	64fb      	str	r3, [r7, #76]	; 0x4c
		{
		{ .value_id1 = 0x00, .mask_id2 = 0xFFFF, .type = FDCAN_FILTER_RANGE } };

		if (STRHAL_CAN_Subscribe(STRHAL_FDCAN1, STRHAL_FDCAN_RX0, mainFilter, 1, Can::internalReceptor) != 1)
 80005d4:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80005d8:	4b13      	ldr	r3, [pc, #76]	; (8000628 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x330>)
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	2301      	movs	r3, #1
 80005de:	2100      	movs	r1, #0
 80005e0:	2000      	movs	r0, #0
 80005e2:	f004 fb05 	bl	8004bf0 <STRHAL_CAN_Subscribe>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	bf14      	ite	ne
 80005ec:	2301      	movne	r3, #1
 80005ee:	2300      	moveq	r3, #0
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d002      	beq.n	80005fc <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x304>
			return -1;
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005fa:	e01a      	b.n	8000632 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x33a>

		if (STRHAL_CAN_Subscribe(STRHAL_FDCAN2, STRHAL_FDCAN_RX0, mainFilter, 1, Can::externalReceptor) != 1)
 80005fc:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000600:	4b0a      	ldr	r3, [pc, #40]	; (800062c <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x334>)
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	2301      	movs	r3, #1
 8000606:	2100      	movs	r1, #0
 8000608:	2001      	movs	r0, #1
 800060a:	f004 faf1 	bl	8004bf0 <STRHAL_CAN_Subscribe>
 800060e:	4603      	mov	r3, r0
 8000610:	2b01      	cmp	r3, #1
 8000612:	bf14      	ite	ne
 8000614:	2301      	movne	r3, #1
 8000616:	2300      	moveq	r3, #0
 8000618:	b2db      	uxtb	r3, r3
 800061a:	2b00      	cmp	r3, #0
 800061c:	d008      	beq.n	8000630 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x338>
			return -1;
 800061e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000622:	e006      	b.n	8000632 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x33a>
 8000624:	200007a4 	.word	0x200007a4
 8000628:	0800078d 	.word	0x0800078d
 800062c:	080007ad 	.word	0x080007ad
	}

	return 0;
 8000630:	2300      	movs	r3, #0
}
 8000632:	4618      	mov	r0, r3
 8000634:	3788      	adds	r7, #136	; 0x88
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop

0800063c <_ZN3Can4execEv>:

int Can::exec()
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	STRHAL_CAN_Run();
 8000644:	f004 fc8c 	bl	8004f60 <STRHAL_CAN_Run>
	if (STRHAL_TIM_Heartbeat_StartHeartbeat(STRHAL_TIM_TIM7) != 0)
 8000648:	2001      	movs	r0, #1
 800064a:	f005 feb5 	bl	80063b8 <STRHAL_TIM_Heartbeat_StartHeartbeat>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	bf14      	ite	ne
 8000654:	2301      	movne	r3, #1
 8000656:	2300      	moveq	r3, #0
 8000658:	b2db      	uxtb	r3, r3
 800065a:	2b00      	cmp	r3, #0
 800065c:	d002      	beq.n	8000664 <_ZN3Can4execEv+0x28>
		return -1;
 800065e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000662:	e000      	b.n	8000666 <_ZN3Can4execEv+0x2a>

	return 0;
 8000664:	2300      	movs	r3, #0
}
 8000666:	4618      	mov	r0, r3
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
	...

08000670 <_ZN3Can4sendEmPhh>:

int Can::send(uint32_t id, uint8_t *data, uint8_t n)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b096      	sub	sp, #88	; 0x58
 8000674:	af00      	add	r7, sp, #0
 8000676:	60f8      	str	r0, [r7, #12]
 8000678:	60b9      	str	r1, [r7, #8]
 800067a:	4613      	mov	r3, r2
 800067c:	71fb      	strb	r3, [r7, #7]
	Can_MessageId_t msgId =
 800067e:	2300      	movs	r3, #0
 8000680:	657b      	str	r3, [r7, #84]	; 0x54
	{ 0 };
	msgId.info.special_cmd = STANDARD_SPECIAL_CMD;
 8000682:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000686:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800068a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	msgId.info.direction = NODE2MASTER_DIRECTION;
 800068e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000692:	f043 0301 	orr.w	r3, r3, #1
 8000696:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	if (id == 0)
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d10b      	bne.n	80006b8 <_ZN3Can4sendEmPhh+0x48>
	{
		msgId.info.node_id = _nodeId;
 80006a0:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <_ZN3Can4sendEmPhh+0xa0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80006a8:	b2da      	uxtb	r2, r3
 80006aa:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80006ae:	f362 0346 	bfi	r3, r2, #1, #6
 80006b2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 80006b6:	e009      	b.n	80006cc <_ZN3Can4sendEmPhh+0x5c>
	}
	else
	{
		msgId.info.node_id = id;
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80006c4:	f362 0346 	bfi	r3, r2, #1, #6
 80006c8:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	}
	msgId.info.priority = STANDARD_PRIORITY;
 80006cc:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80006d0:	2202      	movs	r2, #2
 80006d2:	f362 0342 	bfi	r3, r2, #1, #2
 80006d6:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

	Can_MessageData_t msgData =
 80006da:	f107 0310 	add.w	r3, r7, #16
 80006de:	2242      	movs	r2, #66	; 0x42
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f006 fa64 	bl	8006bb0 <memset>
	{ 0 };

	memcpy(msgData.uint8, data, n);
 80006e8:	79fa      	ldrb	r2, [r7, #7]
 80006ea:	f107 0310 	add.w	r3, r7, #16
 80006ee:	68b9      	ldr	r1, [r7, #8]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f006 fa4f 	bl	8006b94 <memcpy>

	(void) STRHAL_CAN_Send(STRHAL_FDCAN1, msgId.uint32, msgData.uint8, n);
 80006f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	f107 0210 	add.w	r2, r7, #16
 80006fe:	2000      	movs	r0, #0
 8000700:	f004 fb5a 	bl	8004db8 <STRHAL_CAN_Send>
	return 0;
 8000704:	2300      	movs	r3, #0
}
 8000706:	4618      	mov	r0, r3
 8000708:	3758      	adds	r7, #88	; 0x58
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200007a8 	.word	0x200007a8

08000714 <_ZN3Can14bridgeReceptorE17STRHAL_FDCAN_Id_tmPhm>:

	(void) STRHAL_CAN_Send(STRHAL_FDCAN1, msgId.uint32, msgData.uint8, n);
}

void Can::bridgeReceptor(STRHAL_FDCAN_Id_t bus_id, uint32_t id, uint8_t *data, uint32_t n)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b086      	sub	sp, #24
 8000718:	af00      	add	r7, sp, #0
 800071a:	60b9      	str	r1, [r7, #8]
 800071c:	607a      	str	r2, [r7, #4]
 800071e:	603b      	str	r3, [r7, #0]
 8000720:	4603      	mov	r3, r0
 8000722:	73fb      	strb	r3, [r7, #15]
	Can_MessageId_t incoming_id;
	incoming_id.uint32 = id;
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	617b      	str	r3, [r7, #20]

	if (incoming_id.info.node_id == _nodeId)
 8000728:	7d3b      	ldrb	r3, [r7, #20]
 800072a:	f3c3 0345 	ubfx	r3, r3, #1, #6
 800072e:	b2db      	uxtb	r3, r3
 8000730:	461a      	mov	r2, r3
 8000732:	4b14      	ldr	r3, [pc, #80]	; (8000784 <_ZN3Can14bridgeReceptorE17STRHAL_FDCAN_Id_tmPhm+0x70>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	429a      	cmp	r2, r3
 8000738:	d106      	bne.n	8000748 <_ZN3Can14bridgeReceptorE17STRHAL_FDCAN_Id_tmPhm+0x34>
	{
		Can::standardReceptor(id, data, n);
 800073a:	4b13      	ldr	r3, [pc, #76]	; (8000788 <_ZN3Can14bridgeReceptorE17STRHAL_FDCAN_Id_tmPhm+0x74>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	683a      	ldr	r2, [r7, #0]
 8000740:	6879      	ldr	r1, [r7, #4]
 8000742:	68b8      	ldr	r0, [r7, #8]
 8000744:	4798      	blx	r3
	}
	else
	{
		STRHAL_CAN_Send(bus_id, id, data, n);
	}
}
 8000746:	e018      	b.n	800077a <_ZN3Can14bridgeReceptorE17STRHAL_FDCAN_Id_tmPhm+0x66>
	else if (incoming_id.info.node_id == 0)
 8000748:	7d3b      	ldrb	r3, [r7, #20]
 800074a:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800074e:	b2db      	uxtb	r3, r3
 8000750:	2b00      	cmp	r3, #0
 8000752:	d10c      	bne.n	800076e <_ZN3Can14bridgeReceptorE17STRHAL_FDCAN_Id_tmPhm+0x5a>
		STRHAL_CAN_Send(bus_id, id, data, n);
 8000754:	7bf8      	ldrb	r0, [r7, #15]
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	68b9      	ldr	r1, [r7, #8]
 800075c:	f004 fb2c 	bl	8004db8 <STRHAL_CAN_Send>
		Can::standardReceptor(id, data, n);
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <_ZN3Can14bridgeReceptorE17STRHAL_FDCAN_Id_tmPhm+0x74>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	683a      	ldr	r2, [r7, #0]
 8000766:	6879      	ldr	r1, [r7, #4]
 8000768:	68b8      	ldr	r0, [r7, #8]
 800076a:	4798      	blx	r3
}
 800076c:	e005      	b.n	800077a <_ZN3Can14bridgeReceptorE17STRHAL_FDCAN_Id_tmPhm+0x66>
		STRHAL_CAN_Send(bus_id, id, data, n);
 800076e:	7bf8      	ldrb	r0, [r7, #15]
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	687a      	ldr	r2, [r7, #4]
 8000774:	68b9      	ldr	r1, [r7, #8]
 8000776:	f004 fb1f 	bl	8004db8 <STRHAL_CAN_Send>
}
 800077a:	bf00      	nop
 800077c:	3718      	adds	r7, #24
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	200007a8 	.word	0x200007a8
 8000788:	200007a4 	.word	0x200007a4

0800078c <_ZN3Can16internalReceptorEmPhm>:

void Can::internalReceptor(uint32_t id, uint8_t *data, uint32_t n)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	607a      	str	r2, [r7, #4]
	//Can::bridgeReceptor(STRHAL_FDCAN2, id, data, n);
	STRHAL_CAN_Send(STRHAL_FDCAN2, id, data, n);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	68ba      	ldr	r2, [r7, #8]
 800079c:	68f9      	ldr	r1, [r7, #12]
 800079e:	2001      	movs	r0, #1
 80007a0:	f004 fb0a 	bl	8004db8 <STRHAL_CAN_Send>
}
 80007a4:	bf00      	nop
 80007a6:	3710      	adds	r7, #16
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <_ZN3Can16externalReceptorEmPhm>:

void Can::externalReceptor(uint32_t id, uint8_t *data, uint32_t n)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
	Can::bridgeReceptor(STRHAL_FDCAN1, id, data, n);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	68ba      	ldr	r2, [r7, #8]
 80007bc:	68f9      	ldr	r1, [r7, #12]
 80007be:	2000      	movs	r0, #0
 80007c0:	f7ff ffa8 	bl	8000714 <_ZN3Can14bridgeReceptorE17STRHAL_FDCAN_Id_tmPhm>
}
 80007c4:	bf00      	nop
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <_ZN14GenericChannelD1Ev>:
#include <STRHAL.h>
#include <Radio.h>
#include "../Modules/W25Qxx_Flash.h"
#include <Can.h>

class GenericChannel: public AbstractChannel
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	4a05      	ldr	r2, [pc, #20]	; (80007ec <_ZN14GenericChannelD1Ev+0x20>)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 fd4f 	bl	8001280 <_ZN15AbstractChannelD1Ev>
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4618      	mov	r0, r3
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	08006ed8 	.word	0x08006ed8

080007f0 <_ZN14GenericChannelD0Ev>:
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f7ff ffe7 	bl	80007cc <_ZN14GenericChannelD1Ev>
 80007fe:	21c8      	movs	r1, #200	; 0xc8
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f006 f967 	bl	8006ad4 <_ZdlPvj>
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4618      	mov	r0, r3
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <_ZN17DigitalOutChannelD1Ev>:

#include "./Channels/AbstractChannel.h"
#include <can_houbolt/channels/digital_out_channel_def.h>
#include <STRHAL.h>

class DigitalOutChannel: public AbstractChannel
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	4a05      	ldr	r2, [pc, #20]	; (8000830 <_ZN17DigitalOutChannelD1Ev+0x20>)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4618      	mov	r0, r3
 8000822:	f000 fd2d 	bl	8001280 <_ZN15AbstractChannelD1Ev>
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	4618      	mov	r0, r3
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	08006eac 	.word	0x08006eac

08000834 <_ZN17DigitalOutChannelD0Ev>:
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f7ff ffe7 	bl	8000810 <_ZN17DigitalOutChannelD1Ev>
 8000842:	212c      	movs	r1, #44	; 0x2c
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f006 f945 	bl	8006ad4 <_ZdlPvj>
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4618      	mov	r0, r3
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <_ZN5IOBv3C1Emmm>:
#include <IOBv3.h>
#include <cstdio>
#include <cstring>

IOBv3::IOBv3(uint32_t node_id, uint32_t fw_version, uint32_t refresh_divider) :
 8000854:	b590      	push	{r4, r7, lr}
 8000856:	b0b9      	sub	sp, #228	; 0xe4
 8000858:	af02      	add	r7, sp, #8
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	60b9      	str	r1, [r7, #8]
 800085e:	607a      	str	r2, [r7, #4]
 8000860:	603b      	str	r3, [r7, #0]
		channel9(9,{ ADC1, STRHAL_ADC_CHANNEL_4 },		{ GPIOD,  1, STRHAL_GPIO_TYPE_OPP }, STRHAL_ADC_INTYPE_OPAMP, 1),
		channel10(10,{ ADC1, STRHAL_ADC_CHANNEL_2 },	{ GPIOC,  3, STRHAL_GPIO_TYPE_OPP }, STRHAL_ADC_INTYPE_OPAMP, 1),
		channel11(11,{ ADC2, STRHAL_ADC_CHANNEL_11 },	{ GPIOC,  1, STRHAL_GPIO_TYPE_OPP }, STRHAL_ADC_INTYPE_OPAMP, 1),

		//sense_5V(0, {ADC2, STRHAL_ADC_CHANNEL_5}, 1),
		speaker(STRHAL_TIM_TIM3, STRHAL_TIM_TIM3_CH4_PB7)
 8000862:	68f8      	ldr	r0, [r7, #12]
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	68b9      	ldr	r1, [r7, #8]
 800086a:	f000 fe73 	bl	8001554 <_ZN14GenericChannelC1Emmm>
 800086e:	4ad6      	ldr	r2, [pc, #856]	; (8000bc8 <_ZN5IOBv3C1Emmm+0x374>)
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	4ad5      	ldr	r2, [pc, #852]	; (8000bcc <_ZN5IOBv3C1Emmm+0x378>)
 8000878:	33c8      	adds	r3, #200	; 0xc8
 800087a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800087e:	e883 0003 	stmia.w	r3, {r0, r1}
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	4ad2      	ldr	r2, [pc, #840]	; (8000bd0 <_ZN5IOBv3C1Emmm+0x37c>)
 8000886:	33d0      	adds	r3, #208	; 0xd0
 8000888:	e892 0003 	ldmia.w	r2, {r0, r1}
 800088c:	e883 0003 	stmia.w	r3, {r0, r1}
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	4ace      	ldr	r2, [pc, #824]	; (8000bcc <_ZN5IOBv3C1Emmm+0x378>)
 8000894:	33d8      	adds	r3, #216	; 0xd8
 8000896:	e892 0003 	ldmia.w	r2, {r0, r1}
 800089a:	e883 0003 	stmia.w	r3, {r0, r1}
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 80008a4:	4acb      	ldr	r2, [pc, #812]	; (8000bd4 <_ZN5IOBv3C1Emmm+0x380>)
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008ae:	e883 0003 	stmia.w	r3, {r0, r1}
 80008b2:	4ac9      	ldr	r2, [pc, #804]	; (8000bd8 <_ZN5IOBv3C1Emmm+0x384>)
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008bc:	e883 0003 	stmia.w	r3, {r0, r1}
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	f107 0214 	add.w	r2, r7, #20
 80008c8:	2101      	movs	r1, #1
 80008ca:	9101      	str	r1, [sp, #4]
 80008cc:	2101      	movs	r1, #1
 80008ce:	9100      	str	r1, [sp, #0]
 80008d0:	2100      	movs	r1, #0
 80008d2:	4620      	mov	r0, r4
 80008d4:	f000 fce4 	bl	80012a0 <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 80008de:	4abf      	ldr	r2, [pc, #764]	; (8000bdc <_ZN5IOBv3C1Emmm+0x388>)
 80008e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008e8:	e883 0003 	stmia.w	r3, {r0, r1}
 80008ec:	4abc      	ldr	r2, [pc, #752]	; (8000be0 <_ZN5IOBv3C1Emmm+0x38c>)
 80008ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008f6:	e883 0003 	stmia.w	r3, {r0, r1}
 80008fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008fe:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000902:	2101      	movs	r1, #1
 8000904:	9101      	str	r1, [sp, #4]
 8000906:	2101      	movs	r1, #1
 8000908:	9100      	str	r1, [sp, #0]
 800090a:	2101      	movs	r1, #1
 800090c:	4620      	mov	r0, r4
 800090e:	f000 fcc7 	bl	80012a0 <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	f503 749c 	add.w	r4, r3, #312	; 0x138
 8000918:	4ab2      	ldr	r2, [pc, #712]	; (8000be4 <_ZN5IOBv3C1Emmm+0x390>)
 800091a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800091e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000922:	e883 0003 	stmia.w	r3, {r0, r1}
 8000926:	4ab0      	ldr	r2, [pc, #704]	; (8000be8 <_ZN5IOBv3C1Emmm+0x394>)
 8000928:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800092c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000930:	e883 0003 	stmia.w	r3, {r0, r1}
 8000934:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000938:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800093c:	2101      	movs	r1, #1
 800093e:	9101      	str	r1, [sp, #4]
 8000940:	2101      	movs	r1, #1
 8000942:	9100      	str	r1, [sp, #0]
 8000944:	2102      	movs	r1, #2
 8000946:	4620      	mov	r0, r4
 8000948:	f000 fcaa 	bl	80012a0 <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	f503 74b2 	add.w	r4, r3, #356	; 0x164
 8000952:	4aa6      	ldr	r2, [pc, #664]	; (8000bec <_ZN5IOBv3C1Emmm+0x398>)
 8000954:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000958:	e892 0003 	ldmia.w	r2, {r0, r1}
 800095c:	e883 0003 	stmia.w	r3, {r0, r1}
 8000960:	4aa3      	ldr	r2, [pc, #652]	; (8000bf0 <_ZN5IOBv3C1Emmm+0x39c>)
 8000962:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000966:	e892 0003 	ldmia.w	r2, {r0, r1}
 800096a:	e883 0003 	stmia.w	r3, {r0, r1}
 800096e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000972:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000976:	2101      	movs	r1, #1
 8000978:	9101      	str	r1, [sp, #4]
 800097a:	2101      	movs	r1, #1
 800097c:	9100      	str	r1, [sp, #0]
 800097e:	2103      	movs	r1, #3
 8000980:	4620      	mov	r0, r4
 8000982:	f000 fc8d 	bl	80012a0 <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	f503 74c8 	add.w	r4, r3, #400	; 0x190
 800098c:	4a99      	ldr	r2, [pc, #612]	; (8000bf4 <_ZN5IOBv3C1Emmm+0x3a0>)
 800098e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000992:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000996:	e883 0003 	stmia.w	r3, {r0, r1}
 800099a:	4a97      	ldr	r2, [pc, #604]	; (8000bf8 <_ZN5IOBv3C1Emmm+0x3a4>)
 800099c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80009a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009a4:	e883 0003 	stmia.w	r3, {r0, r1}
 80009a8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80009ac:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80009b0:	2101      	movs	r1, #1
 80009b2:	9101      	str	r1, [sp, #4]
 80009b4:	2101      	movs	r1, #1
 80009b6:	9100      	str	r1, [sp, #0]
 80009b8:	2104      	movs	r1, #4
 80009ba:	4620      	mov	r0, r4
 80009bc:	f000 fc70 	bl	80012a0 <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	f503 74de 	add.w	r4, r3, #444	; 0x1bc
 80009c6:	4a8d      	ldr	r2, [pc, #564]	; (8000bfc <_ZN5IOBv3C1Emmm+0x3a8>)
 80009c8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009d0:	e883 0003 	stmia.w	r3, {r0, r1}
 80009d4:	4a8a      	ldr	r2, [pc, #552]	; (8000c00 <_ZN5IOBv3C1Emmm+0x3ac>)
 80009d6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009de:	e883 0003 	stmia.w	r3, {r0, r1}
 80009e2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009e6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80009ea:	2101      	movs	r1, #1
 80009ec:	9101      	str	r1, [sp, #4]
 80009ee:	2101      	movs	r1, #1
 80009f0:	9100      	str	r1, [sp, #0]
 80009f2:	2105      	movs	r1, #5
 80009f4:	4620      	mov	r0, r4
 80009f6:	f000 fc53 	bl	80012a0 <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	f503 74f4 	add.w	r4, r3, #488	; 0x1e8
 8000a00:	4a80      	ldr	r2, [pc, #512]	; (8000c04 <_ZN5IOBv3C1Emmm+0x3b0>)
 8000a02:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000a06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a0a:	e883 0003 	stmia.w	r3, {r0, r1}
 8000a0e:	4a7e      	ldr	r2, [pc, #504]	; (8000c08 <_ZN5IOBv3C1Emmm+0x3b4>)
 8000a10:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000a14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a18:	e883 0003 	stmia.w	r3, {r0, r1}
 8000a1c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000a20:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8000a24:	2101      	movs	r1, #1
 8000a26:	9101      	str	r1, [sp, #4]
 8000a28:	2101      	movs	r1, #1
 8000a2a:	9100      	str	r1, [sp, #0]
 8000a2c:	2106      	movs	r1, #6
 8000a2e:	4620      	mov	r0, r4
 8000a30:	f000 fc36 	bl	80012a0 <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	f503 7405 	add.w	r4, r3, #532	; 0x214
 8000a3a:	4a74      	ldr	r2, [pc, #464]	; (8000c0c <_ZN5IOBv3C1Emmm+0x3b8>)
 8000a3c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000a40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a44:	e883 0003 	stmia.w	r3, {r0, r1}
 8000a48:	4b71      	ldr	r3, [pc, #452]	; (8000c10 <_ZN5IOBv3C1Emmm+0x3bc>)
 8000a4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000a4e:	2300      	movs	r3, #0
 8000a50:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
 8000a54:	2300      	movs	r3, #0
 8000a56:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 8000a5a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000a5e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8000a62:	2101      	movs	r1, #1
 8000a64:	9101      	str	r1, [sp, #4]
 8000a66:	2101      	movs	r1, #1
 8000a68:	9100      	str	r1, [sp, #0]
 8000a6a:	2107      	movs	r1, #7
 8000a6c:	4620      	mov	r0, r4
 8000a6e:	f000 fc17 	bl	80012a0 <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	f503 7410 	add.w	r4, r3, #576	; 0x240
 8000a78:	4a66      	ldr	r2, [pc, #408]	; (8000c14 <_ZN5IOBv3C1Emmm+0x3c0>)
 8000a7a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000a7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a82:	e883 0003 	stmia.w	r3, {r0, r1}
 8000a86:	4a64      	ldr	r2, [pc, #400]	; (8000c18 <_ZN5IOBv3C1Emmm+0x3c4>)
 8000a88:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a90:	e883 0003 	stmia.w	r3, {r0, r1}
 8000a94:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a98:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	9101      	str	r1, [sp, #4]
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	9100      	str	r1, [sp, #0]
 8000aa4:	2108      	movs	r1, #8
 8000aa6:	4620      	mov	r0, r4
 8000aa8:	f000 fbfa 	bl	80012a0 <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	f503 741b 	add.w	r4, r3, #620	; 0x26c
 8000ab2:	4a5a      	ldr	r2, [pc, #360]	; (8000c1c <_ZN5IOBv3C1Emmm+0x3c8>)
 8000ab4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ab8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000abc:	e883 0003 	stmia.w	r3, {r0, r1}
 8000ac0:	4a57      	ldr	r2, [pc, #348]	; (8000c20 <_ZN5IOBv3C1Emmm+0x3cc>)
 8000ac2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ac6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000aca:	e883 0003 	stmia.w	r3, {r0, r1}
 8000ace:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ad2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	9101      	str	r1, [sp, #4]
 8000ada:	2101      	movs	r1, #1
 8000adc:	9100      	str	r1, [sp, #0]
 8000ade:	2109      	movs	r1, #9
 8000ae0:	4620      	mov	r0, r4
 8000ae2:	f000 fbdd 	bl	80012a0 <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	f503 7426 	add.w	r4, r3, #664	; 0x298
 8000aec:	4a4d      	ldr	r2, [pc, #308]	; (8000c24 <_ZN5IOBv3C1Emmm+0x3d0>)
 8000aee:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000af2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000af6:	e883 0003 	stmia.w	r3, {r0, r1}
 8000afa:	4a4b      	ldr	r2, [pc, #300]	; (8000c28 <_ZN5IOBv3C1Emmm+0x3d4>)
 8000afc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000b00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b04:	e883 0003 	stmia.w	r3, {r0, r1}
 8000b08:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000b0c:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8000b10:	2101      	movs	r1, #1
 8000b12:	9101      	str	r1, [sp, #4]
 8000b14:	2101      	movs	r1, #1
 8000b16:	9100      	str	r1, [sp, #0]
 8000b18:	210a      	movs	r1, #10
 8000b1a:	4620      	mov	r0, r4
 8000b1c:	f000 fbc0 	bl	80012a0 <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	f503 7431 	add.w	r4, r3, #708	; 0x2c4
 8000b26:	4a41      	ldr	r2, [pc, #260]	; (8000c2c <_ZN5IOBv3C1Emmm+0x3d8>)
 8000b28:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000b2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b30:	e883 0003 	stmia.w	r3, {r0, r1}
 8000b34:	4a3e      	ldr	r2, [pc, #248]	; (8000c30 <_ZN5IOBv3C1Emmm+0x3dc>)
 8000b36:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b3e:	e883 0003 	stmia.w	r3, {r0, r1}
 8000b42:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b46:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	9101      	str	r1, [sp, #4]
 8000b4e:	2101      	movs	r1, #1
 8000b50:	9100      	str	r1, [sp, #0]
 8000b52:	210b      	movs	r1, #11
 8000b54:	4620      	mov	r0, r4
 8000b56:	f000 fba3 	bl	80012a0 <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 8000b60:	2202      	movs	r2, #2
 8000b62:	f887 20d6 	strb.w	r2, [r7, #214]	; 0xd6
 8000b66:	2232      	movs	r2, #50	; 0x32
 8000b68:	f887 20d7 	strb.w	r2, [r7, #215]	; 0xd7
 8000b6c:	f107 02d7 	add.w	r2, r7, #215	; 0xd7
 8000b70:	f107 01d6 	add.w	r1, r7, #214	; 0xd6
 8000b74:	4618      	mov	r0, r3
 8000b76:	f000 f9a6 	bl	8000ec6 <_ZN7SpeakerC1ERK20STRHAL_TIM_TimerId_tRK22STRHAL_TIM_ChannelId_t>
{
	registerChannel(&channel0);
 8000b7a:	68fa      	ldr	r2, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	33e0      	adds	r3, #224	; 0xe0
 8000b80:	4619      	mov	r1, r3
 8000b82:	4610      	mov	r0, r2
 8000b84:	f001 f809 	bl	8001b9a <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&channel1);
 8000b88:	68fa      	ldr	r2, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8000b90:	4619      	mov	r1, r3
 8000b92:	4610      	mov	r0, r2
 8000b94:	f001 f801 	bl	8001b9a <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&channel2);
 8000b98:	68fa      	ldr	r2, [r7, #12]
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4610      	mov	r0, r2
 8000ba4:	f000 fff9 	bl	8001b9a <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&channel3);
 8000ba8:	68fa      	ldr	r2, [r7, #12]
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4610      	mov	r0, r2
 8000bb4:	f000 fff1 	bl	8001b9a <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&channel4);
 8000bb8:	68fa      	ldr	r2, [r7, #12]
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4610      	mov	r0, r2
 8000bc4:	e036      	b.n	8000c34 <_ZN5IOBv3C1Emmm+0x3e0>
 8000bc6:	bf00      	nop
 8000bc8:	08006e54 	.word	0x08006e54
 8000bcc:	08006d1c 	.word	0x08006d1c
 8000bd0:	08006d24 	.word	0x08006d24
 8000bd4:	08006d2c 	.word	0x08006d2c
 8000bd8:	08006d34 	.word	0x08006d34
 8000bdc:	08006d3c 	.word	0x08006d3c
 8000be0:	08006d44 	.word	0x08006d44
 8000be4:	08006d4c 	.word	0x08006d4c
 8000be8:	08006d54 	.word	0x08006d54
 8000bec:	08006d5c 	.word	0x08006d5c
 8000bf0:	08006d64 	.word	0x08006d64
 8000bf4:	08006d6c 	.word	0x08006d6c
 8000bf8:	08006d74 	.word	0x08006d74
 8000bfc:	08006d7c 	.word	0x08006d7c
 8000c00:	08006d84 	.word	0x08006d84
 8000c04:	08006d8c 	.word	0x08006d8c
 8000c08:	08006d94 	.word	0x08006d94
 8000c0c:	08006d9c 	.word	0x08006d9c
 8000c10:	48000800 	.word	0x48000800
 8000c14:	08006da4 	.word	0x08006da4
 8000c18:	08006dac 	.word	0x08006dac
 8000c1c:	08006db4 	.word	0x08006db4
 8000c20:	08006dbc 	.word	0x08006dbc
 8000c24:	08006dc4 	.word	0x08006dc4
 8000c28:	08006dcc 	.word	0x08006dcc
 8000c2c:	08006dd4 	.word	0x08006dd4
 8000c30:	08006ddc 	.word	0x08006ddc
 8000c34:	f000 ffb1 	bl	8001b9a <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&channel5);
 8000c38:	68fa      	ldr	r2, [r7, #12]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000c40:	4619      	mov	r1, r3
 8000c42:	4610      	mov	r0, r2
 8000c44:	f000 ffa9 	bl	8001b9a <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&channel6);
 8000c48:	68fa      	ldr	r2, [r7, #12]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8000c50:	4619      	mov	r1, r3
 8000c52:	4610      	mov	r0, r2
 8000c54:	f000 ffa1 	bl	8001b9a <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&channel7);
 8000c58:	68fa      	ldr	r2, [r7, #12]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8000c60:	4619      	mov	r1, r3
 8000c62:	4610      	mov	r0, r2
 8000c64:	f000 ff99 	bl	8001b9a <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&channel8);
 8000c68:	68fa      	ldr	r2, [r7, #12]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000c70:	4619      	mov	r1, r3
 8000c72:	4610      	mov	r0, r2
 8000c74:	f000 ff91 	bl	8001b9a <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&channel9);
 8000c78:	68fa      	ldr	r2, [r7, #12]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8000c80:	4619      	mov	r1, r3
 8000c82:	4610      	mov	r0, r2
 8000c84:	f000 ff89 	bl	8001b9a <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&channel10);
 8000c88:	68fa      	ldr	r2, [r7, #12]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8000c90:	4619      	mov	r1, r3
 8000c92:	4610      	mov	r0, r2
 8000c94:	f000 ff81 	bl	8001b9a <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&channel11);
 8000c98:	68fa      	ldr	r2, [r7, #12]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4610      	mov	r0, r2
 8000ca4:	f000 ff79 	bl	8001b9a <_ZN14GenericChannel15registerChannelEP15AbstractChannel>

	registerModule(&flash);
 8000ca8:	68fa      	ldr	r2, [r7, #12]
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4610      	mov	r0, r2
 8000cb4:	f000 ff8f 	bl	8001bd6 <_ZN14GenericChannel14registerModuleEP14AbstractModule>

}
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	37dc      	adds	r7, #220	; 0xdc
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd90      	pop	{r4, r7, pc}
 8000cc2:	bf00      	nop

08000cc4 <_ZN5IOBv34initEv>:

int IOBv3::init()
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
	if (STRHAL_Init(STRHAL_SYSCLK_SRC_EXT, 8000000) != STRHAL_NOICE)
 8000ccc:	4927      	ldr	r1, [pc, #156]	; (8000d6c <_ZN5IOBv34initEv+0xa8>)
 8000cce:	2002      	movs	r0, #2
 8000cd0:	f002 fdce 	bl	8003870 <STRHAL_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	bf14      	ite	ne
 8000cda:	2301      	movne	r3, #1
 8000cdc:	2300      	moveq	r3, #0
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d002      	beq.n	8000cea <_ZN5IOBv34initEv+0x26>
		return -1;
 8000ce4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ce8:	e03c      	b.n	8000d64 <_ZN5IOBv34initEv+0xa0>

	// init status LEDs
	STRHAL_GPIO_SingleInit(&led1, STRHAL_GPIO_TYPE_OPP);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	33c8      	adds	r3, #200	; 0xc8
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f004 fb79 	bl	80053e8 <STRHAL_GPIO_SingleInit>
	STRHAL_GPIO_SingleInit(&led2, STRHAL_GPIO_TYPE_OPP);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	33d0      	adds	r3, #208	; 0xd0
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f004 fb73 	bl	80053e8 <STRHAL_GPIO_SingleInit>
	STRHAL_GPIO_SingleInit(&led_debug, STRHAL_GPIO_TYPE_OPP);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	33d8      	adds	r3, #216	; 0xd8
 8000d06:	2100      	movs	r1, #0
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f004 fb6d 	bl	80053e8 <STRHAL_GPIO_SingleInit>

while(1)
{
	STRHAL_GPIO_Write(&led1, STRHAL_GPIO_VALUE_H);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	33c8      	adds	r3, #200	; 0xc8
 8000d12:	2101      	movs	r1, #1
 8000d14:	4618      	mov	r0, r3
 8000d16:	f004 fbc3 	bl	80054a0 <STRHAL_GPIO_Write>
	STRHAL_GPIO_Write(&led2, STRHAL_GPIO_VALUE_H);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	33d0      	adds	r3, #208	; 0xd0
 8000d1e:	2101      	movs	r1, #1
 8000d20:	4618      	mov	r0, r3
 8000d22:	f004 fbbd 	bl	80054a0 <STRHAL_GPIO_Write>
	STRHAL_GPIO_Write(&led_debug, STRHAL_GPIO_VALUE_H);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	33d8      	adds	r3, #216	; 0xd8
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f004 fbb7 	bl	80054a0 <STRHAL_GPIO_Write>
	LL_mDelay(100);
 8000d32:	2064      	movs	r0, #100	; 0x64
 8000d34:	f002 fae2 	bl	80032fc <LL_mDelay>
	STRHAL_GPIO_Write(&led1, STRHAL_GPIO_VALUE_L);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	33c8      	adds	r3, #200	; 0xc8
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f004 fbae 	bl	80054a0 <STRHAL_GPIO_Write>
	STRHAL_GPIO_Write(&led2, STRHAL_GPIO_VALUE_L);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	33d0      	adds	r3, #208	; 0xd0
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f004 fba8 	bl	80054a0 <STRHAL_GPIO_Write>
	STRHAL_GPIO_Write(&led_debug, STRHAL_GPIO_VALUE_L);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	33d8      	adds	r3, #216	; 0xd8
 8000d54:	2100      	movs	r1, #0
 8000d56:	4618      	mov	r0, r3
 8000d58:	f004 fba2 	bl	80054a0 <STRHAL_GPIO_Write>
	LL_mDelay(100);
 8000d5c:	2064      	movs	r0, #100	; 0x64
 8000d5e:	f002 facd 	bl	80032fc <LL_mDelay>
	STRHAL_GPIO_Write(&led1, STRHAL_GPIO_VALUE_H);
 8000d62:	e7d4      	b.n	8000d0e <_ZN5IOBv34initEv+0x4a>

	STRHAL_UART_Debug_Write_Blocking("Started\n", 8, 50);


	return 0;
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	007a1200 	.word	0x007a1200

08000d70 <_ZN5IOBv34execEv>:

int IOBv3::exec()
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	//STRHAL_OPAMP_Run();
	STRHAL_ADC_Run();
 8000d78:	f003 fc54 	bl	8004624 <STRHAL_ADC_Run>
	STRHAL_QSPI_Run();
 8000d7c:	f004 fdd2 	bl	8005924 <STRHAL_QSPI_Run>

	if (can.exec() != 0)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	3304      	adds	r3, #4
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4610      	mov	r0, r2
 8000d94:	4798      	blx	r3
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	bf14      	ite	ne
 8000d9c:	2301      	movne	r3, #1
 8000d9e:	2300      	moveq	r3, #0
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d002      	beq.n	8000dac <_ZN5IOBv34execEv+0x3c>
		return -1;
 8000da6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000daa:	e01b      	b.n	8000de4 <_ZN5IOBv34execEv+0x74>

	STRHAL_UART_Debug_Write_Blocking("RUNNING\n", 8, 50);
 8000dac:	2232      	movs	r2, #50	; 0x32
 8000dae:	2108      	movs	r1, #8
 8000db0:	480e      	ldr	r0, [pc, #56]	; (8000dec <_ZN5IOBv34execEv+0x7c>)
 8000db2:	f005 fcdf 	bl	8006774 <STRHAL_UART_Debug_Write_Blocking>

	speaker.beep(3, 300, 200);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f503 703c 	add.w	r0, r3, #752	; 0x2f0
 8000dbc:	23c8      	movs	r3, #200	; 0xc8
 8000dbe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000dc2:	2103      	movs	r1, #3
 8000dc4:	f000 f894 	bl	8000ef0 <_ZN7Speaker4beepEhtt>

	while (1)
	{
		if (GenericChannel::exec() != 0)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 fc64 	bl	8001698 <_ZN14GenericChannel4execEv>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	bf14      	ite	ne
 8000dd6:	2301      	movne	r3, #1
 8000dd8:	2300      	moveq	r3, #0
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d0f3      	beq.n	8000dc8 <_ZN5IOBv34execEv+0x58>
			return -1;
 8000de0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}

	speaker.beep(6, 100, 100);

	return 0;
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	08006de4 	.word	0x08006de4

08000df0 <_ZN5IOBv3D1Ev>:
#include <Can.h>
#include <Speaker.h>

#include <STRHAL.h>

class IOBv3: public GenericChannel
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	4a29      	ldr	r2, [pc, #164]	; (8000ea0 <_ZN5IOBv3D1Ev+0xb0>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff fd03 	bl	8000810 <_ZN17DigitalOutChannelD1Ev>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff fcfd 	bl	8000810 <_ZN17DigitalOutChannelD1Ev>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff fcf7 	bl	8000810 <_ZN17DigitalOutChannelD1Ev>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff fcf1 	bl	8000810 <_ZN17DigitalOutChannelD1Ev>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fceb 	bl	8000810 <_ZN17DigitalOutChannelD1Ev>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff fce5 	bl	8000810 <_ZN17DigitalOutChannelD1Ev>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fcdf 	bl	8000810 <_ZN17DigitalOutChannelD1Ev>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fcd9 	bl	8000810 <_ZN17DigitalOutChannelD1Ev>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff fcd3 	bl	8000810 <_ZN17DigitalOutChannelD1Ev>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fccd 	bl	8000810 <_ZN17DigitalOutChannelD1Ev>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fcc7 	bl	8000810 <_ZN17DigitalOutChannelD1Ev>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	33e0      	adds	r3, #224	; 0xe0
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fcc2 	bl	8000810 <_ZN17DigitalOutChannelD1Ev>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff fc9c 	bl	80007cc <_ZN14GenericChannelD1Ev>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	08006e54 	.word	0x08006e54

08000ea4 <_ZN5IOBv3D0Ev>:
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff ff9f 	bl	8000df0 <_ZN5IOBv3D1Ev>
 8000eb2:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f005 fe0c 	bl	8006ad4 <_ZdlPvj>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <_ZN7SpeakerC1ERK20STRHAL_TIM_TimerId_tRK22STRHAL_TIM_ChannelId_t>:
#include "../Inc/Speaker.h"

Speaker::Speaker(const STRHAL_TIM_TimerId_t &pwmTimer, const STRHAL_TIM_ChannelId_t &control) :
 8000ec6:	b480      	push	{r7}
 8000ec8:	b085      	sub	sp, #20
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	60f8      	str	r0, [r7, #12]
 8000ece:	60b9      	str	r1, [r7, #8]
 8000ed0:	607a      	str	r2, [r7, #4]
		pwmTimer(pwmTimer), ctrlChannelId(control)
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	781a      	ldrb	r2, [r3, #0]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	701a      	strb	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	781a      	ldrb	r2, [r3, #0]
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	705a      	strb	r2, [r3, #1]
{
}
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3714      	adds	r7, #20
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <_ZN7Speaker4beepEhtt>:
{
	STRHAL_TIM_PWM_Enable(&pwmChannel, ena);
}

void Speaker::beep(uint8_t n, uint16_t tot1, uint16_t tot2)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	4608      	mov	r0, r1
 8000efa:	4611      	mov	r1, r2
 8000efc:	461a      	mov	r2, r3
 8000efe:	4603      	mov	r3, r0
 8000f00:	72fb      	strb	r3, [r7, #11]
 8000f02:	460b      	mov	r3, r1
 8000f04:	813b      	strh	r3, [r7, #8]
 8000f06:	4613      	mov	r3, r2
 8000f08:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < n; i++)
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
 8000f0e:	7afb      	ldrb	r3, [r7, #11]
 8000f10:	697a      	ldr	r2, [r7, #20]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	da17      	bge.n	8000f46 <_ZN7Speaker4beepEhtt+0x56>
	{
		STRHAL_TIM_PWM_Enable(&pwmChannel, true);
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	3302      	adds	r3, #2
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f005 f97d 	bl	800621c <STRHAL_TIM_PWM_Enable>
		LL_mDelay(tot1);
 8000f22:	893b      	ldrh	r3, [r7, #8]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f002 f9e9 	bl	80032fc <LL_mDelay>
		STRHAL_TIM_PWM_Enable(&pwmChannel, false);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	3302      	adds	r3, #2
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f005 f973 	bl	800621c <STRHAL_TIM_PWM_Enable>
		LL_mDelay(tot2);
 8000f36:	88fb      	ldrh	r3, [r7, #6]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f002 f9df 	bl	80032fc <LL_mDelay>
	for (int i = 0; i < n; i++)
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	3301      	adds	r3, #1
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	e7e3      	b.n	8000f0e <_ZN7Speaker4beepEhtt+0x1e>
	}
}
 8000f46:	bf00      	nop
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <main>:
#include "RCU.h"
#include "LCB.h"
#include "git_version.h"

int main(void)
{
 8000f50:	b590      	push	{r4, r7, lr}
 8000f52:	f5ad 7d3f 	sub.w	sp, sp, #764	; 0x2fc
 8000f56:	af00      	add	r7, sp, #0

	STRHAL_UART_Debug_Write_Blocking("IOB STARTED\n", 12, 50);
	iob.exec();
#elif defined(IOBv3_BOARD)
#ifdef UART_DEBUG
	IOBv3 iob(10,GIT_COMMIT_HASH_VALUE,100); // TODO disregard node ID and read dipswitches in IOB/LCB class
 8000f58:	1d38      	adds	r0, r7, #4
 8000f5a:	2364      	movs	r3, #100	; 0x64
 8000f5c:	4a13      	ldr	r2, [pc, #76]	; (8000fac <main+0x5c>)
 8000f5e:	210a      	movs	r1, #10
 8000f60:	f7ff fc78 	bl	8000854 <_ZN5IOBv3C1Emmm>
#else
	IOBv3 iob(10,GIT_COMMIT_HASH_VALUE,4); // TODO disregard node ID and read dipswitches in IOB/LCB class
#endif
	if(iob.init() != 0)
 8000f64:	1d3b      	adds	r3, r7, #4
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff feac 	bl	8000cc4 <_ZN5IOBv34initEv>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	bf14      	ite	ne
 8000f72:	2301      	movne	r3, #1
 8000f74:	2300      	moveq	r3, #0
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d006      	beq.n	8000f8a <main+0x3a>
			return -1;
 8000f7c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	IOBv3 iob(10,GIT_COMMIT_HASH_VALUE,100); // TODO disregard node ID and read dipswitches in IOB/LCB class
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff ff34 	bl	8000df0 <_ZN5IOBv3D1Ev>
 8000f88:	e009      	b.n	8000f9e <main+0x4e>

	STRHAL_UART_Debug_Write_Blocking("IOB STARTED\n", 12, 50);
 8000f8a:	2232      	movs	r2, #50	; 0x32
 8000f8c:	210c      	movs	r1, #12
 8000f8e:	4808      	ldr	r0, [pc, #32]	; (8000fb0 <main+0x60>)
 8000f90:	f005 fbf0 	bl	8006774 <STRHAL_UART_Debug_Write_Blocking>
	iob.exec();
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff feea 	bl	8000d70 <_ZN5IOBv34execEv>

	STRHAL_UART_Debug_Write_Blocking("LCB STARTED\n", 12, 50);
	lcb.exec();
#endif

	while (1);
 8000f9c:	e7fe      	b.n	8000f9c <main+0x4c>
 8000f9e:	4623      	mov	r3, r4
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f507 773f 	add.w	r7, r7, #764	; 0x2fc
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd90      	pop	{r4, r7, pc}
 8000faa:	bf00      	nop
 8000fac:	7655d99c 	.word	0x7655d99c
 8000fb0:	08006df0 	.word	0x08006df0

08000fb4 <STRHAL_OofHandler>:

void STRHAL_OofHandler(STRHAL_Oof_t oof, char *msg)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	6039      	str	r1, [r7, #0]
 8000fbe:	71fb      	strb	r3, [r7, #7]
	do
	{
	} while (0);
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	683a      	ldr	r2, [r7, #0]
 8000fda:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <NMI_Handler>:
#include "stm32g4xx_it.h"
#include <STRHAL.h>

void NMI_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
	...

08000ff8 <HardFault_Handler>:

void HardFault_Handler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOD, (1 << 1));
 8000ffc:	2102      	movs	r1, #2
 8000ffe:	4802      	ldr	r0, [pc, #8]	; (8001008 <HardFault_Handler+0x10>)
 8001000:	f7ff ffe4 	bl	8000fcc <LL_GPIO_ResetOutputPin>
	while (1)
 8001004:	e7fe      	b.n	8001004 <HardFault_Handler+0xc>
 8001006:	bf00      	nop
 8001008:	48000c00 	.word	0x48000c00

0800100c <MemManage_Handler>:
	{
	}
}

void MemManage_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
	while (1)
 8001010:	e7fe      	b.n	8001010 <MemManage_Handler+0x4>

08001012 <BusFault_Handler>:
	{
	}
}

void BusFault_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0
	while (1)
 8001016:	e7fe      	b.n	8001016 <BusFault_Handler+0x4>

08001018 <UsageFault_Handler>:
	{
	}
}

void UsageFault_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
	while (1)
 800101c:	e7fe      	b.n	800101c <UsageFault_Handler+0x4>

0800101e <SVC_Handler>:
	{
	}
}

void SVC_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0
}
 8001022:	bf00      	nop
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <DebugMon_Handler>:

void DebugMon_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <PendSV_Handler>:

void PendSV_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0
}
 800103e:	bf00      	nop
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
	return 1;
 800104c:	2301      	movs	r3, #1
}
 800104e:	4618      	mov	r0, r3
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <_kill>:

int _kill(int pid, int sig)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001062:	f005 fd65 	bl	8006b30 <__errno>
 8001066:	4603      	mov	r3, r0
 8001068:	2216      	movs	r2, #22
 800106a:	601a      	str	r2, [r3, #0]
	return -1;
 800106c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001070:	4618      	mov	r0, r3
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <_exit>:

void _exit(int status)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001080:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff ffe7 	bl	8001058 <_kill>
	while (1)
 800108a:	e7fe      	b.n	800108a <_exit+0x12>

0800108c <SystemInit>:
 * @param  None
 * @retval None
 */

void SystemInit(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8001090:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <SystemInit+0x28>)
 8001092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001096:	4a07      	ldr	r2, [pc, #28]	; (80010b4 <SystemInit+0x28>)
 8001098:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800109c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010a0:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <SystemInit+0x28>)
 80010a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010a6:	609a      	str	r2, [r3, #8]
#endif
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <_ZN15AbstractChannelC1E12CHANNEL_TYPEhm>:
#include "../Inc/Channels/AbstractChannel.h"

#include <cstring>

AbstractChannel::AbstractChannel(CHANNEL_TYPE type, uint8_t id, uint32_t refreshDivider) :
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	460b      	mov	r3, r1
 80010c4:	72fb      	strb	r3, [r7, #11]
 80010c6:	4613      	mov	r3, r2
 80010c8:	72bb      	strb	r3, [r7, #10]
		refreshDivider(refreshDivider), refreshCounter(0), channelType(type), channelId(id), channelStatus(CHANNEL_STATUS_NOICE)
 80010ca:	4a0c      	ldr	r2, [pc, #48]	; (80010fc <_ZN15AbstractChannelC1E12CHANNEL_TYPEhm+0x44>)
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	7afa      	ldrb	r2, [r7, #11]
 80010e0:	731a      	strb	r2, [r3, #12]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	7aba      	ldrb	r2, [r7, #10]
 80010e6:	735a      	strb	r2, [r3, #13]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	2200      	movs	r2, #0
 80010ec:	739a      	strb	r2, [r3, #14]
{

}
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	4618      	mov	r0, r3
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	08006e80 	.word	0x08006e80

08001100 <_ZNK15AbstractChannel14getChannelTypeEv>:

CHANNEL_TYPE AbstractChannel::getChannelType() const
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	return channelType;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	7b1b      	ldrb	r3, [r3, #12]
}
 800110c:	4618      	mov	r0, r3
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <_ZNK15AbstractChannel16getChannelStatusEv>:

CHANNEL_STATUS AbstractChannel::getChannelStatus() const
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	return channelStatus;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	7b9b      	ldrb	r3, [r3, #14]
}
 8001124:	4618      	mov	r0, r3
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <_ZNK15AbstractChannel12getChannelIdEv>:

uint8_t AbstractChannel::getChannelId() const
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	return channelId;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	7b5b      	ldrb	r3, [r3, #13]
}
 800113c:	4618      	mov	r0, r3
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <_ZN15AbstractChannel11IsRefreshedEv>:
{
	return channelId == id;
}

bool AbstractChannel::IsRefreshed()
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	if (refreshDivider == 0)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d101      	bne.n	800115c <_ZN15AbstractChannel11IsRefreshedEv+0x14>
		return false;
 8001158:	2300      	movs	r3, #0
 800115a:	e010      	b.n	800117e <_ZN15AbstractChannel11IsRefreshedEv+0x36>
	refreshCounter++;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	1c5a      	adds	r2, r3, #1
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	609a      	str	r2, [r3, #8]
	if (refreshCounter != refreshDivider)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	689a      	ldr	r2, [r3, #8]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	429a      	cmp	r2, r3
 8001170:	d001      	beq.n	8001176 <_ZN15AbstractChannel11IsRefreshedEv+0x2e>
		return false;
 8001172:	2300      	movs	r3, #0
 8001174:	e003      	b.n	800117e <_ZN15AbstractChannel11IsRefreshedEv+0x36>

	refreshCounter = 0;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
	return true;
 800117c:	2301      	movs	r3, #1
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
	...

0800118c <_ZN15AbstractChannel14processMessageEhPhRh>:

int AbstractChannel::processMessage(uint8_t commandId, uint8_t *returnData, uint8_t &n)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	607a      	str	r2, [r7, #4]
 8001196:	603b      	str	r3, [r7, #0]
 8001198:	460b      	mov	r3, r1
 800119a:	72fb      	strb	r3, [r7, #11]
	SetMsg_t *setMsg;
	setMsg = (SetMsg_t*) returnData;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	61fb      	str	r3, [r7, #28]
	int32_t temp = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
	int status = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61bb      	str	r3, [r7, #24]
	switch (commandId)
 80011a8:	7afb      	ldrb	r3, [r7, #11]
 80011aa:	2b06      	cmp	r3, #6
 80011ac:	d862      	bhi.n	8001274 <_ZN15AbstractChannel14processMessageEhPhRh+0xe8>
 80011ae:	a201      	add	r2, pc, #4	; (adr r2, 80011b4 <_ZN15AbstractChannel14processMessageEhPhRh+0x28>)
 80011b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b4:	080011ff 	.word	0x080011ff
 80011b8:	08001275 	.word	0x08001275
 80011bc:	0800126b 	.word	0x0800126b
 80011c0:	08001275 	.word	0x08001275
 80011c4:	0800120f 	.word	0x0800120f
 80011c8:	08001275 	.word	0x08001275
 80011cc:	080011d1 	.word	0x080011d1
	{
		case COMMON_REQ_GET_VARIABLE:
			status = getVariable(setMsg->variable_id, temp);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	3320      	adds	r3, #32
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	69fa      	ldr	r2, [r7, #28]
 80011da:	7811      	ldrb	r1, [r2, #0]
 80011dc:	f107 0214 	add.w	r2, r7, #20
 80011e0:	68f8      	ldr	r0, [r7, #12]
 80011e2:	4798      	blx	r3
 80011e4:	61b8      	str	r0, [r7, #24]
			setMsg->value = temp;
 80011e6:	697a      	ldr	r2, [r7, #20]
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	f8c3 2001 	str.w	r2, [r3, #1]
			n += sizeof(SetMsg_t);
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	3305      	adds	r3, #5
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	701a      	strb	r2, [r3, #0]
			return status;
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	e03c      	b.n	8001278 <_ZN15AbstractChannel14processMessageEhPhRh+0xec>

		case COMMON_REQ_RESET_SETTINGS:
			return reset();
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	330c      	adds	r3, #12
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	68f8      	ldr	r0, [r7, #12]
 8001208:	4798      	blx	r3
 800120a:	4603      	mov	r3, r0
 800120c:	e034      	b.n	8001278 <_ZN15AbstractChannel14processMessageEhPhRh+0xec>

		case COMMON_REQ_SET_VARIABLE:
			if (setVariable(setMsg->variable_id, setMsg->value) == -1)
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	331c      	adds	r3, #28
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	69fa      	ldr	r2, [r7, #28]
 8001218:	7811      	ldrb	r1, [r2, #0]
 800121a:	69fa      	ldr	r2, [r7, #28]
 800121c:	f8d2 2001 	ldr.w	r2, [r2, #1]
 8001220:	68f8      	ldr	r0, [r7, #12]
 8001222:	4798      	blx	r3
 8001224:	4603      	mov	r3, r0
 8001226:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800122a:	bf0c      	ite	eq
 800122c:	2301      	moveq	r3, #1
 800122e:	2300      	movne	r3, #0
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b00      	cmp	r3, #0
 8001234:	d002      	beq.n	800123c <_ZN15AbstractChannel14processMessageEhPhRh+0xb0>
				return -1;
 8001236:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800123a:	e01d      	b.n	8001278 <_ZN15AbstractChannel14processMessageEhPhRh+0xec>
			status = getVariable(setMsg->variable_id, temp);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	3320      	adds	r3, #32
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	69fa      	ldr	r2, [r7, #28]
 8001246:	7811      	ldrb	r1, [r2, #0]
 8001248:	f107 0214 	add.w	r2, r7, #20
 800124c:	68f8      	ldr	r0, [r7, #12]
 800124e:	4798      	blx	r3
 8001250:	61b8      	str	r0, [r7, #24]
			setMsg->value = temp;
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f8c3 2001 	str.w	r2, [r3, #1]
			n += sizeof(SetMsg_t);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	3305      	adds	r3, #5
 8001260:	b2da      	uxtb	r2, r3
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	701a      	strb	r2, [r3, #0]
			return status;
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	e006      	b.n	8001278 <_ZN15AbstractChannel14processMessageEhPhRh+0xec>

		case COMMON_REQ_STATUS:
			return getChannelStatus();
 800126a:	68f8      	ldr	r0, [r7, #12]
 800126c:	f7ff ff54 	bl	8001118 <_ZNK15AbstractChannel16getChannelStatusEv>
 8001270:	4603      	mov	r3, r0
 8001272:	e001      	b.n	8001278 <_ZN15AbstractChannel14processMessageEhPhRh+0xec>

		default:
			return -1;
 8001274:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8001278:	4618      	mov	r0, r3
 800127a:	3720      	adds	r7, #32
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <_ZN15AbstractChannelD1Ev>:

AbstractChannel::~AbstractChannel()
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	4a04      	ldr	r2, [pc, #16]	; (800129c <_ZN15AbstractChannelD1Ev+0x1c>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	601a      	str	r2, [r3, #0]
{
}
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4618      	mov	r0, r3
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	08006e80 	.word	0x08006e80

080012a0 <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>:
#include <Channels/DigitalOutChannel.h>

DigitalOutChannel::DigitalOutChannel(uint8_t id, const STRHAL_ADC_Channel_t &adcChannel, const STRHAL_GPIO_t &cntrlPin, STRHAL_ADC_InType_t adcInType, uint32_t refreshDivider) :
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	607a      	str	r2, [r7, #4]
 80012aa:	603b      	str	r3, [r7, #0]
 80012ac:	460b      	mov	r3, r1
 80012ae:	72fb      	strb	r3, [r7, #11]
		AbstractChannel(CHANNEL_TYPE_DIGITAL_OUT, id, refreshDivider), adcChannel(adcChannel), cntrlPin(cntrlPin), adcInType(adcInType), hasFeedback(true)
 80012b0:	68f8      	ldr	r0, [r7, #12]
 80012b2:	7afa      	ldrb	r2, [r7, #11]
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	2107      	movs	r1, #7
 80012b8:	f7ff fefe 	bl	80010b8 <_ZN15AbstractChannelC1E12CHANNEL_TYPEhm>
 80012bc:	4a10      	ldr	r2, [pc, #64]	; (8001300 <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm+0x60>)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	3314      	adds	r3, #20
 80012c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012cc:	e883 0003 	stmia.w	r3, {r0, r1}
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2200      	movs	r2, #0
 80012d4:	61da      	str	r2, [r3, #28]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	683a      	ldr	r2, [r7, #0]
 80012da:	3320      	adds	r3, #32
 80012dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012e0:	e883 0003 	stmia.w	r3, {r0, r1}
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	7e3a      	ldrb	r2, [r7, #24]
 80012e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2201      	movs	r2, #1
 80012f0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
{
}
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4618      	mov	r0, r3
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	08006eac 	.word	0x08006eac

08001304 <_ZN17DigitalOutChannel4initEv>:
		AbstractChannel(CHANNEL_TYPE_DIGITAL_OUT, id, refreshDivider), cntrlPin(cntrlPin)
{
}

int DigitalOutChannel::init()
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	STRHAL_GPIO_SingleInit(&cntrlPin, STRHAL_GPIO_TYPE_OPP);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3320      	adds	r3, #32
 8001310:	2100      	movs	r1, #0
 8001312:	4618      	mov	r0, r3
 8001314:	f004 f868 	bl	80053e8 <STRHAL_GPIO_SingleInit>
	if (hasFeedback)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800131e:	2b00      	cmp	r3, #0
 8001320:	d013      	beq.n	800134a <_ZN17DigitalOutChannel4initEv+0x46>
	{
		adcMeasurement = STRHAL_ADC_SubscribeChannel(&adcChannel, adcInType);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f103 0214 	add.w	r2, r3, #20
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800132e:	4619      	mov	r1, r3
 8001330:	4610      	mov	r0, r2
 8001332:	f003 f801 	bl	8004338 <STRHAL_ADC_SubscribeChannel>
 8001336:	4602      	mov	r2, r0
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	61da      	str	r2, [r3, #28]

		if (adcMeasurement == nullptr)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	69db      	ldr	r3, [r3, #28]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d102      	bne.n	800134a <_ZN17DigitalOutChannel4initEv+0x46>
			return -1;
 8001344:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001348:	e000      	b.n	800134c <_ZN17DigitalOutChannel4initEv+0x48>
	}

	return 0;
 800134a:	2300      	movs	r3, #0
}
 800134c:	4618      	mov	r0, r3
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <_ZN17DigitalOutChannel4execEv>:

int DigitalOutChannel::exec()
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	return 0;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <_ZN17DigitalOutChannel5resetEv>:

int DigitalOutChannel::reset()
{
 800136a:	b480      	push	{r7}
 800136c:	b083      	sub	sp, #12
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
	return 0;
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <_ZN17DigitalOutChannel14processMessageEhPhRh>:

int DigitalOutChannel::processMessage(uint8_t commandId, uint8_t *returnData, uint8_t &n)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	607a      	str	r2, [r7, #4]
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	460b      	mov	r3, r1
 800138e:	72fb      	strb	r3, [r7, #11]
	switch (commandId)
	{
		default:
			return AbstractChannel::processMessage(commandId, returnData, n);
 8001390:	68f8      	ldr	r0, [r7, #12]
 8001392:	7af9      	ldrb	r1, [r7, #11]
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	f7ff fef8 	bl	800118c <_ZN15AbstractChannel14processMessageEhPhRh>
 800139c:	4603      	mov	r3, r0
	}
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <_ZN17DigitalOutChannel13getSensorDataEPhRh>:

int DigitalOutChannel::getSensorData(uint8_t *data, uint8_t &n)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b087      	sub	sp, #28
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	60f8      	str	r0, [r7, #12]
 80013ae:	60b9      	str	r1, [r7, #8]
 80013b0:	607a      	str	r2, [r7, #4]
	uint16_t *out = (uint16_t*) (data + n);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	461a      	mov	r2, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	4413      	add	r3, r2
 80013bc:	617b      	str	r3, [r7, #20]
	*out = (hasFeedback) ? (*adcMeasurement << 4) : 0; // shift to 16bit full scale, if no feedback is present return 0
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d006      	beq.n	80013d6 <_ZN17DigitalOutChannel13getSensorDataEPhRh+0x30>
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	69db      	ldr	r3, [r3, #28]
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	011b      	lsls	r3, r3, #4
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	e000      	b.n	80013d8 <_ZN17DigitalOutChannel13getSensorDataEPhRh+0x32>
 80013d6:	2200      	movs	r2, #0
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	801a      	strh	r2, [r3, #0]

	n += DIGITAL_OUT_DATA_N_BYTES;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	3302      	adds	r3, #2
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	701a      	strb	r2, [r3, #0]
	return 0;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	371c      	adds	r7, #28
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
	...

080013f8 <_ZN17DigitalOutChannel11setVariableEhl>:

int DigitalOutChannel::setVariable(uint8_t variableId, int32_t data)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	460b      	mov	r3, r1
 8001402:	607a      	str	r2, [r7, #4]
 8001404:	72fb      	strb	r3, [r7, #11]
	switch (variableId)
 8001406:	7afb      	ldrb	r3, [r7, #11]
 8001408:	2b04      	cmp	r3, #4
 800140a:	d833      	bhi.n	8001474 <_ZN17DigitalOutChannel11setVariableEhl+0x7c>
 800140c:	a201      	add	r2, pc, #4	; (adr r2, 8001414 <_ZN17DigitalOutChannel11setVariableEhl+0x1c>)
 800140e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001412:	bf00      	nop
 8001414:	08001429 	.word	0x08001429
 8001418:	0800144d 	.word	0x0800144d
 800141c:	08001459 	.word	0x08001459
 8001420:	08001475 	.word	0x08001475
 8001424:	08001465 	.word	0x08001465
	{
		case DIGITAL_OUT_STATE:
			if (setState(data) != 0)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4619      	mov	r1, r3
 800142c:	68f8      	ldr	r0, [r7, #12]
 800142e:	f000 f876 	bl	800151e <_ZN17DigitalOutChannel8setStateEm>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	bf14      	ite	ne
 8001438:	2301      	movne	r3, #1
 800143a:	2300      	moveq	r3, #0
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d002      	beq.n	8001448 <_ZN17DigitalOutChannel11setVariableEhl+0x50>
				return -1;
 8001442:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001446:	e017      	b.n	8001478 <_ZN17DigitalOutChannel11setVariableEhl+0x80>
			return 0;
 8001448:	2300      	movs	r3, #0
 800144a:	e015      	b.n	8001478 <_ZN17DigitalOutChannel11setVariableEhl+0x80>
		case DIGITAL_OUT_DUTY_CYCLE:
			dutyCycle = data;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	b29a      	uxth	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	821a      	strh	r2, [r3, #16]
			return 0;
 8001454:	2300      	movs	r3, #0
 8001456:	e00f      	b.n	8001478 <_ZN17DigitalOutChannel11setVariableEhl+0x80>
		case DIGITAL_OUT_FREQUENCY:
			frequency = data;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	b29a      	uxth	r2, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	825a      	strh	r2, [r3, #18]
			return 0;
 8001460:	2300      	movs	r3, #0
 8001462:	e009      	b.n	8001478 <_ZN17DigitalOutChannel11setVariableEhl+0x80>
		case DIGITAL_OUT_SENSOR_REFRESH_DIVIDER:
			refreshDivider = data;
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	605a      	str	r2, [r3, #4]
			refreshCounter = 0;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
			return 0;
 8001470:	2300      	movs	r3, #0
 8001472:	e001      	b.n	8001478 <_ZN17DigitalOutChannel11setVariableEhl+0x80>
		default:
			return -1;
 8001474:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8001478:	4618      	mov	r0, r3
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <_ZNK17DigitalOutChannel11getVariableEhRl>:

int DigitalOutChannel::getVariable(uint8_t variableId, int32_t &data) const
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	460b      	mov	r3, r1
 800148a:	607a      	str	r2, [r7, #4]
 800148c:	72fb      	strb	r3, [r7, #11]
	switch (variableId)
 800148e:	7afb      	ldrb	r3, [r7, #11]
 8001490:	2b04      	cmp	r3, #4
 8001492:	d82b      	bhi.n	80014ec <_ZNK17DigitalOutChannel11getVariableEhRl+0x6c>
 8001494:	a201      	add	r2, pc, #4	; (adr r2, 800149c <_ZNK17DigitalOutChannel11getVariableEhRl+0x1c>)
 8001496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800149a:	bf00      	nop
 800149c:	080014b1 	.word	0x080014b1
 80014a0:	080014c3 	.word	0x080014c3
 80014a4:	080014d1 	.word	0x080014d1
 80014a8:	080014ed 	.word	0x080014ed
 80014ac:	080014df 	.word	0x080014df
	{
		case DIGITAL_OUT_STATE:
			data = getState();
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	f000 f821 	bl	80014f8 <_ZNK17DigitalOutChannel8getStateEv>
 80014b6:	4603      	mov	r3, r0
 80014b8:	461a      	mov	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	601a      	str	r2, [r3, #0]
			return 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	e016      	b.n	80014f0 <_ZNK17DigitalOutChannel11getVariableEhRl+0x70>
		case DIGITAL_OUT_DUTY_CYCLE:
			data = dutyCycle;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	8a1b      	ldrh	r3, [r3, #16]
 80014c6:	461a      	mov	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	601a      	str	r2, [r3, #0]
			return 0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	e00f      	b.n	80014f0 <_ZNK17DigitalOutChannel11getVariableEhRl+0x70>
		case DIGITAL_OUT_FREQUENCY:
			data = frequency;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	8a5b      	ldrh	r3, [r3, #18]
 80014d4:	461a      	mov	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	601a      	str	r2, [r3, #0]
			return 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	e008      	b.n	80014f0 <_ZNK17DigitalOutChannel11getVariableEhRl+0x70>
		case DIGITAL_OUT_SENSOR_REFRESH_DIVIDER:
			data = (int32_t) refreshDivider;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	461a      	mov	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	601a      	str	r2, [r3, #0]
			return 0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	e001      	b.n	80014f0 <_ZNK17DigitalOutChannel11getVariableEhRl+0x70>
		default:
			return -1;
 80014ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3710      	adds	r7, #16
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <_ZNK17DigitalOutChannel8getStateEv>:

uint32_t DigitalOutChannel::getState() const
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	return (STRHAL_GPIO_ReadOutput(&cntrlPin) == STRHAL_GPIO_VALUE_L) ? 0UL : 1UL;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3320      	adds	r3, #32
 8001504:	4618      	mov	r0, r3
 8001506:	f003 fff4 	bl	80054f2 <STRHAL_GPIO_ReadOutput>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	bf14      	ite	ne
 8001510:	2301      	movne	r3, #1
 8001512:	2300      	moveq	r3, #0
 8001514:	b2db      	uxtb	r3, r3
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <_ZN17DigitalOutChannel8setStateEm>:

int DigitalOutChannel::setState(uint32_t state)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
 8001526:	6039      	str	r1, [r7, #0]
	if (state == 0)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d106      	bne.n	800153c <_ZN17DigitalOutChannel8setStateEm+0x1e>
	{
		STRHAL_GPIO_Write(&cntrlPin, STRHAL_GPIO_VALUE_L);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	3320      	adds	r3, #32
 8001532:	2100      	movs	r1, #0
 8001534:	4618      	mov	r0, r3
 8001536:	f003 ffb3 	bl	80054a0 <STRHAL_GPIO_Write>
 800153a:	e005      	b.n	8001548 <_ZN17DigitalOutChannel8setStateEm+0x2a>
	}
	else
	{
		STRHAL_GPIO_Write(&cntrlPin, STRHAL_GPIO_VALUE_H);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3320      	adds	r3, #32
 8001540:	2101      	movs	r1, #1
 8001542:	4618      	mov	r0, r3
 8001544:	f003 ffac 	bl	80054a0 <STRHAL_GPIO_Write>
	}
	return 0;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <_ZN14GenericChannelC1Emmm>:
#include <git_version.h>

GenericChannel* GenericChannel::gcPtr = nullptr; // necessary for static callbacks
bool GenericChannel::loraActive = false;

GenericChannel::GenericChannel(uint32_t nodeId, uint32_t firmwareVersion, uint32_t refreshDivider) :
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
 8001560:	603b      	str	r3, [r7, #0]
		AbstractChannel(CHANNEL_TYPE_NODE_GENERIC, GENERIC_CHANNEL_ID, refreshDivider), can(Can::instance(nodeId)), flash(W25Qxx_Flash::instance()), nodeId(nodeId), firmwareVersion(GIT_COMMIT_HASH_VALUE)
 8001562:	68f8      	ldr	r0, [r7, #12]
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	223f      	movs	r2, #63	; 0x3f
 8001568:	2101      	movs	r1, #1
 800156a:	f7ff fda5 	bl	80010b8 <_ZN15AbstractChannelC1E12CHANNEL_TYPEhm>
 800156e:	4a1b      	ldr	r2, [pc, #108]	; (80015dc <_ZN14GenericChannelC1Emmm+0x88>)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	3310      	adds	r3, #16
 8001578:	2280      	movs	r2, #128	; 0x80
 800157a:	2100      	movs	r1, #0
 800157c:	4618      	mov	r0, r3
 800157e:	f005 fb17 	bl	8006bb0 <memset>
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	3390      	adds	r3, #144	; 0x90
 8001586:	2220      	movs	r2, #32
 8001588:	2100      	movs	r1, #0
 800158a:	4618      	mov	r0, r3
 800158c:	f005 fb10 	bl	8006bb0 <memset>
 8001590:	68b8      	ldr	r0, [r7, #8]
 8001592:	f7fe fe69 	bl	8000268 <_ZN3Can8instanceEm>
 8001596:	4602      	mov	r2, r0
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800159e:	f000 fb9b 	bl	8001cd8 <_ZN12W25Qxx_Flash8instanceEv>
 80015a2:	4602      	mov	r2, r0
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	68ba      	ldr	r2, [r7, #8]
 80015ae:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	4a0a      	ldr	r2, [pc, #40]	; (80015e0 <_ZN14GenericChannelC1Emmm+0x8c>)
 80015b6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
{
	gcPtr = this;
 80015ca:	4a06      	ldr	r2, [pc, #24]	; (80015e4 <_ZN14GenericChannelC1Emmm+0x90>)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6013      	str	r3, [r2, #0]
}
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4618      	mov	r0, r3
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	08006ed8 	.word	0x08006ed8
 80015e0:	7655d99c 	.word	0x7655d99c
 80015e4:	200007b8 	.word	0x200007b8

080015e8 <_ZN14GenericChannel4initEv>:
{
	return nodeId;
}

int GenericChannel::init()
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08a      	sub	sp, #40	; 0x28
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
	for (AbstractModule *module : modules)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	3390      	adds	r3, #144	; 0x90
 80015f4:	61fb      	str	r3, [r7, #28]
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3320      	adds	r3, #32
 80015fe:	61bb      	str	r3, [r7, #24]
 8001600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	429a      	cmp	r2, r3
 8001606:	d01a      	beq.n	800163e <_ZN14GenericChannel4initEv+0x56>
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	617b      	str	r3, [r7, #20]
	{
		if (module == nullptr)
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d00f      	beq.n	8001634 <_ZN14GenericChannel4initEv+0x4c>
			continue;
		if (module->init() != 0)
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	6978      	ldr	r0, [r7, #20]
 800161c:	4798      	blx	r3
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	bf14      	ite	ne
 8001624:	2301      	movne	r3, #1
 8001626:	2300      	moveq	r3, #0
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <_ZN14GenericChannel4initEv+0x4e>
			return -1;
 800162e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001632:	e02d      	b.n	8001690 <_ZN14GenericChannel4initEv+0xa8>
			continue;
 8001634:	bf00      	nop
	for (AbstractModule *module : modules)
 8001636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001638:	3304      	adds	r3, #4
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
 800163c:	e7e0      	b.n	8001600 <_ZN14GenericChannel4initEv+0x18>
	}

	for (AbstractChannel *channel : channels)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	3310      	adds	r3, #16
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	623b      	str	r3, [r7, #32]
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	3380      	adds	r3, #128	; 0x80
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	6a3a      	ldr	r2, [r7, #32]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	429a      	cmp	r2, r3
 8001654:	d01b      	beq.n	800168e <_ZN14GenericChannel4initEv+0xa6>
 8001656:	6a3b      	ldr	r3, [r7, #32]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	60bb      	str	r3, [r7, #8]
	{
		if (channel == nullptr)
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d010      	beq.n	8001684 <_ZN14GenericChannel4initEv+0x9c>
			continue;
		if (channel->init() != 0)
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	3308      	adds	r3, #8
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	68b8      	ldr	r0, [r7, #8]
 800166c:	4798      	blx	r3
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	bf14      	ite	ne
 8001674:	2301      	movne	r3, #1
 8001676:	2300      	moveq	r3, #0
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <_ZN14GenericChannel4initEv+0x9e>
		{
			return -1;
 800167e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001682:	e005      	b.n	8001690 <_ZN14GenericChannel4initEv+0xa8>
			continue;
 8001684:	bf00      	nop
	for (AbstractChannel *channel : channels)
 8001686:	6a3b      	ldr	r3, [r7, #32]
 8001688:	3304      	adds	r3, #4
 800168a:	623b      	str	r3, [r7, #32]
 800168c:	e7df      	b.n	800164e <_ZN14GenericChannel4initEv+0x66>
		}
	}

	return 0;
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	3728      	adds	r7, #40	; 0x28
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <_ZN14GenericChannel4execEv>:

int GenericChannel::exec()
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	for (AbstractModule *module : modules)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3390      	adds	r3, #144	; 0x90
 80016a4:	61fb      	str	r3, [r7, #28]
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3320      	adds	r3, #32
 80016ae:	61bb      	str	r3, [r7, #24]
 80016b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d01b      	beq.n	80016f0 <_ZN14GenericChannel4execEv+0x58>
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	617b      	str	r3, [r7, #20]
	{
		if (module == nullptr)
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d010      	beq.n	80016e6 <_ZN14GenericChannel4execEv+0x4e>
			continue;
		if (module->exec() != 0)
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	3308      	adds	r3, #8
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6978      	ldr	r0, [r7, #20]
 80016ce:	4798      	blx	r3
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	bf14      	ite	ne
 80016d6:	2301      	movne	r3, #1
 80016d8:	2300      	moveq	r3, #0
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d003      	beq.n	80016e8 <_ZN14GenericChannel4execEv+0x50>
			return -1;
 80016e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016e4:	e02d      	b.n	8001742 <_ZN14GenericChannel4execEv+0xaa>
			continue;
 80016e6:	bf00      	nop
	for (AbstractModule *module : modules)
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	3304      	adds	r3, #4
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
 80016ee:	e7df      	b.n	80016b0 <_ZN14GenericChannel4execEv+0x18>
	}

	for (AbstractChannel *channel : channels)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3310      	adds	r3, #16
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	623b      	str	r3, [r7, #32]
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	3380      	adds	r3, #128	; 0x80
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	6a3a      	ldr	r2, [r7, #32]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	429a      	cmp	r2, r3
 8001706:	d01b      	beq.n	8001740 <_ZN14GenericChannel4execEv+0xa8>
 8001708:	6a3b      	ldr	r3, [r7, #32]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	60bb      	str	r3, [r7, #8]
	{
		if (channel == nullptr)
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d010      	beq.n	8001736 <_ZN14GenericChannel4execEv+0x9e>
			continue;
		if (channel->exec() != 0)
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	3310      	adds	r3, #16
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	68b8      	ldr	r0, [r7, #8]
 800171e:	4798      	blx	r3
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	bf14      	ite	ne
 8001726:	2301      	movne	r3, #1
 8001728:	2300      	moveq	r3, #0
 800172a:	b2db      	uxtb	r3, r3
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <_ZN14GenericChannel4execEv+0xa0>
			return -1;
 8001730:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001734:	e005      	b.n	8001742 <_ZN14GenericChannel4execEv+0xaa>
			continue;
 8001736:	bf00      	nop
	for (AbstractChannel *channel : channels)
 8001738:	6a3b      	ldr	r3, [r7, #32]
 800173a:	3304      	adds	r3, #4
 800173c:	623b      	str	r3, [r7, #32]
 800173e:	e7df      	b.n	8001700 <_ZN14GenericChannel4execEv+0x68>
	}
	return 0;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3728      	adds	r7, #40	; 0x28
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <_ZN14GenericChannel5resetEv>:

int GenericChannel::reset()
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
	(void) flash.reset();
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	3304      	adds	r3, #4
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4610      	mov	r0, r2
 8001766:	4798      	blx	r3
	return 0;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <_ZN14GenericChannel14processMessageEhPhRh>:

int GenericChannel::processMessage(uint8_t commandId, uint8_t *returnData, uint8_t &n)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b088      	sub	sp, #32
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	607a      	str	r2, [r7, #4]
 800177e:	603b      	str	r3, [r7, #0]
 8001780:	460b      	mov	r3, r1
 8001782:	72fb      	strb	r3, [r7, #11]
	switch (commandId)
 8001784:	7afb      	ldrb	r3, [r7, #11]
 8001786:	2b12      	cmp	r3, #18
 8001788:	d86d      	bhi.n	8001866 <_ZN14GenericChannel14processMessageEhPhRh+0xf2>
 800178a:	a201      	add	r2, pc, #4	; (adr r2, 8001790 <_ZN14GenericChannel14processMessageEhPhRh+0x1c>)
 800178c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001790:	080017ff 	.word	0x080017ff
 8001794:	08001867 	.word	0x08001867
 8001798:	08001867 	.word	0x08001867
 800179c:	08001867 	.word	0x08001867
 80017a0:	08001867 	.word	0x08001867
 80017a4:	08001867 	.word	0x08001867
 80017a8:	08001867 	.word	0x08001867
 80017ac:	08001867 	.word	0x08001867
 80017b0:	08001867 	.word	0x08001867
 80017b4:	08001867 	.word	0x08001867
 80017b8:	080017eb 	.word	0x080017eb
 80017bc:	08001867 	.word	0x08001867
 80017c0:	080017dd 	.word	0x080017dd
 80017c4:	08001867 	.word	0x08001867
 80017c8:	08001867 	.word	0x08001867
 80017cc:	08001867 	.word	0x08001867
 80017d0:	08001867 	.word	0x08001867
 80017d4:	08001867 	.word	0x08001867
 80017d8:	0800184b 	.word	0x0800184b
	{
		case GENERIC_REQ_NODE_INFO:
			//LL_mDelay(100*this->nodeId);
			return this->getNodeInfo(returnData, n);
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	68f8      	ldr	r0, [r7, #12]
 80017e2:	f000 f97d 	bl	8001ae0 <_ZN14GenericChannel11getNodeInfoEPhRh>
 80017e6:	4603      	mov	r3, r0
 80017e8:	e045      	b.n	8001876 <_ZN14GenericChannel14processMessageEhPhRh+0x102>
		case GENERIC_REQ_DATA:
			return this->getSensorData(returnData, n);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	3318      	adds	r3, #24
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	683a      	ldr	r2, [r7, #0]
 80017f4:	6879      	ldr	r1, [r7, #4]
 80017f6:	68f8      	ldr	r0, [r7, #12]
 80017f8:	4798      	blx	r3
 80017fa:	4603      	mov	r3, r0
 80017fc:	e03b      	b.n	8001876 <_ZN14GenericChannel14processMessageEhPhRh+0x102>
		case GENERIC_REQ_RESET_ALL_SETTINGS:
			(void) flash.configReset();
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001804:	4618      	mov	r0, r3
 8001806:	f000 feb9 	bl	800257c <_ZN12W25Qxx_Flash11configResetEv>
			for (AbstractChannel *channel : channels)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	3310      	adds	r3, #16
 800180e:	61bb      	str	r3, [r7, #24]
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	61fb      	str	r3, [r7, #28]
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	3380      	adds	r3, #128	; 0x80
 8001818:	617b      	str	r3, [r7, #20]
 800181a:	69fa      	ldr	r2, [r7, #28]
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	429a      	cmp	r2, r3
 8001820:	d011      	beq.n	8001846 <_ZN14GenericChannel14processMessageEhPhRh+0xd2>
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	613b      	str	r3, [r7, #16]
			{
				if (channel == nullptr)
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d006      	beq.n	800183c <_ZN14GenericChannel14processMessageEhPhRh+0xc8>
					continue;

				channel->reset(); // TODO implement good reset for every channel
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	330c      	adds	r3, #12
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6938      	ldr	r0, [r7, #16]
 8001838:	4798      	blx	r3
 800183a:	e000      	b.n	800183e <_ZN14GenericChannel14processMessageEhPhRh+0xca>
					continue;
 800183c:	bf00      	nop
			for (AbstractChannel *channel : channels)
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	3304      	adds	r3, #4
 8001842:	61fb      	str	r3, [r7, #28]
 8001844:	e7e9      	b.n	800181a <_ZN14GenericChannel14processMessageEhPhRh+0xa6>
			}
			return 0;
 8001846:	2300      	movs	r3, #0
 8001848:	e015      	b.n	8001876 <_ZN14GenericChannel14processMessageEhPhRh+0x102>
		case GENERIC_REQ_FLASH_CLEAR:
			(void) flash.setState(FlashState::CLEARING);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001850:	2101      	movs	r1, #1
 8001852:	4618      	mov	r0, r3
 8001854:	f000 fc1c 	bl	8002090 <_ZN12W25Qxx_Flash8setStateE10FlashState>
			return this->getFlashClearInfo(returnData, n);
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	68f8      	ldr	r0, [r7, #12]
 800185e:	f000 f914 	bl	8001a8a <_ZN14GenericChannel17getFlashClearInfoEPhRh>
 8001862:	4603      	mov	r3, r0
 8001864:	e007      	b.n	8001876 <_ZN14GenericChannel14processMessageEhPhRh+0x102>
		default:
			return AbstractChannel::processMessage(commandId, returnData, n);
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	7af9      	ldrb	r1, [r7, #11]
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	f7ff fc8d 	bl	800118c <_ZN15AbstractChannel14processMessageEhPhRh>
 8001872:	4603      	mov	r3, r0
 8001874:	bf00      	nop
	}
}
 8001876:	4618      	mov	r0, r3
 8001878:	3720      	adds	r7, #32
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop

08001880 <_ZN14GenericChannel11setVariableEhl>:
	}
	return -1;
}

int GenericChannel::setVariable(uint8_t variableId, int32_t data)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	460b      	mov	r3, r1
 800188a:	607a      	str	r2, [r7, #4]
 800188c:	72fb      	strb	r3, [r7, #11]
	switch (variableId)
 800188e:	7afb      	ldrb	r3, [r7, #11]
 8001890:	2b08      	cmp	r3, #8
 8001892:	d029      	beq.n	80018e8 <_ZN14GenericChannel11setVariableEhl+0x68>
 8001894:	2b08      	cmp	r3, #8
 8001896:	dc33      	bgt.n	8001900 <_ZN14GenericChannel11setVariableEhl+0x80>
 8001898:	2b05      	cmp	r3, #5
 800189a:	d002      	beq.n	80018a2 <_ZN14GenericChannel11setVariableEhl+0x22>
 800189c:	2b07      	cmp	r3, #7
 800189e:	d008      	beq.n	80018b2 <_ZN14GenericChannel11setVariableEhl+0x32>
 80018a0:	e02e      	b.n	8001900 <_ZN14GenericChannel11setVariableEhl+0x80>
	{
		case GENERIC_REFRESH_DIVIDER:
			refreshDivider = data;
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	605a      	str	r2, [r3, #4]
			refreshCounter = 0;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2200      	movs	r2, #0
 80018ac:	609a      	str	r2, [r3, #8]
			return 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	e028      	b.n	8001904 <_ZN14GenericChannel11setVariableEhl+0x84>
		case GENERIC_LOGGING_ENABLED:
			loggingEnabled = data;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
			if (loggingEnabled == 0)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d107      	bne.n	80018d6 <_ZN14GenericChannel11setVariableEhl+0x56>
			{
				flash.setState(FlashState::IDLE);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80018cc:	2100      	movs	r1, #0
 80018ce:	4618      	mov	r0, r3
 80018d0:	f000 fbde 	bl	8002090 <_ZN12W25Qxx_Flash8setStateE10FlashState>
 80018d4:	e006      	b.n	80018e4 <_ZN14GenericChannel11setVariableEhl+0x64>
			}
			else
			{
				flash.setState(FlashState::LOGGING);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80018dc:	2103      	movs	r1, #3
 80018de:	4618      	mov	r0, r3
 80018e0:	f000 fbd6 	bl	8002090 <_ZN12W25Qxx_Flash8setStateE10FlashState>
			}
			return 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	e00d      	b.n	8001904 <_ZN14GenericChannel11setVariableEhl+0x84>
		case GENERIC_LORA_ENABLED:
			if (data == 0)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d103      	bne.n	80018f6 <_ZN14GenericChannel11setVariableEhl+0x76>
			{
				setLoraActive(false);
 80018ee:	2000      	movs	r0, #0
 80018f0:	f000 f992 	bl	8001c18 <_ZN14GenericChannel13setLoraActiveEb>
 80018f4:	e002      	b.n	80018fc <_ZN14GenericChannel11setVariableEhl+0x7c>
			}
			else
			{
				setLoraActive(true);
 80018f6:	2001      	movs	r0, #1
 80018f8:	f000 f98e 	bl	8001c18 <_ZN14GenericChannel13setLoraActiveEb>
			}
			return 0;
 80018fc:	2300      	movs	r3, #0
 80018fe:	e001      	b.n	8001904 <_ZN14GenericChannel11setVariableEhl+0x84>
		default:
			return -1;
 8001900:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8001904:	4618      	mov	r0, r3
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <_ZNK14GenericChannel11getVariableEhRl>:

int GenericChannel::getVariable(uint8_t variableId, int32_t &data) const
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	460b      	mov	r3, r1
 8001916:	607a      	str	r2, [r7, #4]
 8001918:	72fb      	strb	r3, [r7, #11]
	switch (variableId)
 800191a:	7afb      	ldrb	r3, [r7, #11]
 800191c:	2b08      	cmp	r3, #8
 800191e:	d015      	beq.n	800194c <_ZNK14GenericChannel11getVariableEhRl+0x40>
 8001920:	2b08      	cmp	r3, #8
 8001922:	dc20      	bgt.n	8001966 <_ZNK14GenericChannel11getVariableEhRl+0x5a>
 8001924:	2b05      	cmp	r3, #5
 8001926:	d002      	beq.n	800192e <_ZNK14GenericChannel11getVariableEhRl+0x22>
 8001928:	2b07      	cmp	r3, #7
 800192a:	d007      	beq.n	800193c <_ZNK14GenericChannel11getVariableEhRl+0x30>
 800192c:	e01b      	b.n	8001966 <_ZNK14GenericChannel11getVariableEhRl+0x5a>
	{
		case GENERIC_REFRESH_DIVIDER:
			data = (int32_t) refreshDivider;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	461a      	mov	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	601a      	str	r2, [r3, #0]
			return 0;
 8001938:	2300      	movs	r3, #0
 800193a:	e016      	b.n	800196a <_ZNK14GenericChannel11getVariableEhRl+0x5e>
		case GENERIC_LOGGING_ENABLED:
			data = (int32_t) loggingEnabled;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8001942:	461a      	mov	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	601a      	str	r2, [r3, #0]
			return 0;
 8001948:	2300      	movs	r3, #0
 800194a:	e00e      	b.n	800196a <_ZNK14GenericChannel11getVariableEhRl+0x5e>
		case GENERIC_LORA_ENABLED:
			if (loraActive)
 800194c:	4b0a      	ldr	r3, [pc, #40]	; (8001978 <_ZNK14GenericChannel11getVariableEhRl+0x6c>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d003      	beq.n	800195c <_ZNK14GenericChannel11getVariableEhRl+0x50>
				data = 1;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	e002      	b.n	8001962 <_ZNK14GenericChannel11getVariableEhRl+0x56>
			else
				data = 0;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
			return 0;
 8001962:	2300      	movs	r3, #0
 8001964:	e001      	b.n	800196a <_ZNK14GenericChannel11getVariableEhRl+0x5e>
		default:
			return -1;
 8001966:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 800196a:	4618      	mov	r0, r3
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	200007bc 	.word	0x200007bc

0800197c <_ZN14GenericChannel13getSensorDataEPhRh>:
	n = sizeof(FlashStatusMsg_t);
	return 0;
}

int GenericChannel::getSensorData(uint8_t *data, uint8_t &n)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b08a      	sub	sp, #40	; 0x28
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
	if (!IsRefreshed())
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff fbdc 	bl	8001148 <_ZN15AbstractChannel11IsRefreshedEv>
 8001990:	4603      	mov	r3, r0
 8001992:	f083 0301 	eor.w	r3, r3, #1
 8001996:	b2db      	uxtb	r3, r3
 8001998:	2b00      	cmp	r3, #0
 800199a:	d002      	beq.n	80019a2 <_ZN14GenericChannel13getSensorDataEPhRh+0x26>
		return -1;
 800199c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019a0:	e06f      	b.n	8001a82 <_ZN14GenericChannel13getSensorDataEPhRh+0x106>

	DataMsg_t *dataMsg = (DataMsg_t*) data;
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	623b      	str	r3, [r7, #32]
	dataMsg->channel_mask = 0;
 80019a6:	6a3b      	ldr	r3, [r7, #32]
 80019a8:	2200      	movs	r2, #0
 80019aa:	701a      	strb	r2, [r3, #0]
 80019ac:	2200      	movs	r2, #0
 80019ae:	705a      	strb	r2, [r3, #1]
 80019b0:	2200      	movs	r2, #0
 80019b2:	709a      	strb	r2, [r3, #2]
 80019b4:	2200      	movs	r2, #0
 80019b6:	70da      	strb	r2, [r3, #3]
	for (AbstractChannel *channel : channels)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	3310      	adds	r3, #16
 80019bc:	61fb      	str	r3, [r7, #28]
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	3380      	adds	r3, #128	; 0x80
 80019c6:	61bb      	str	r3, [r7, #24]
 80019c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d03a      	beq.n	8001a46 <_ZN14GenericChannel13getSensorDataEPhRh+0xca>
 80019d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	617b      	str	r3, [r7, #20]
	{
		if (channel == nullptr || !channel->IsRefreshed())
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d008      	beq.n	80019ee <_ZN14GenericChannel13getSensorDataEPhRh+0x72>
 80019dc:	6978      	ldr	r0, [r7, #20]
 80019de:	f7ff fbb3 	bl	8001148 <_ZN15AbstractChannel11IsRefreshedEv>
 80019e2:	4603      	mov	r3, r0
 80019e4:	f083 0301 	eor.w	r3, r3, #1
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <_ZN14GenericChannel13getSensorDataEPhRh+0x76>
 80019ee:	2301      	movs	r3, #1
 80019f0:	e000      	b.n	80019f4 <_ZN14GenericChannel13getSensorDataEPhRh+0x78>
 80019f2:	2300      	movs	r3, #0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d11f      	bne.n	8001a38 <_ZN14GenericChannel13getSensorDataEPhRh+0xbc>
			continue;
		if (channel->getSensorData(&dataMsg->uint8[0], n) == -1)
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	3318      	adds	r3, #24
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6a3a      	ldr	r2, [r7, #32]
 8001a02:	1d11      	adds	r1, r2, #4
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	6978      	ldr	r0, [r7, #20]
 8001a08:	4798      	blx	r3
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a10:	bf0c      	ite	eq
 8001a12:	2301      	moveq	r3, #1
 8001a14:	2300      	movne	r3, #0
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d10f      	bne.n	8001a3c <_ZN14GenericChannel13getSensorDataEPhRh+0xc0>
			continue;
		dataMsg->channel_mask |= 1 << channel->getChannelId();
 8001a1c:	6978      	ldr	r0, [r7, #20]
 8001a1e:	f7ff fb87 	bl	8001130 <_ZNK15AbstractChannel12getChannelIdEv>
 8001a22:	4603      	mov	r3, r0
 8001a24:	461a      	mov	r2, r3
 8001a26:	2301      	movs	r3, #1
 8001a28:	fa03 f202 	lsl.w	r2, r3, r2
 8001a2c:	6a3b      	ldr	r3, [r7, #32]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	431a      	orrs	r2, r3
 8001a32:	6a3b      	ldr	r3, [r7, #32]
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	e002      	b.n	8001a3e <_ZN14GenericChannel13getSensorDataEPhRh+0xc2>
			continue;
 8001a38:	bf00      	nop
 8001a3a:	e000      	b.n	8001a3e <_ZN14GenericChannel13getSensorDataEPhRh+0xc2>
			continue;
 8001a3c:	bf00      	nop
	for (AbstractChannel *channel : channels)
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	3304      	adds	r3, #4
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24
 8001a44:	e7c0      	b.n	80019c8 <_ZN14GenericChannel13getSensorDataEPhRh+0x4c>
	}
	n += 1 * sizeof(uint32_t);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	3304      	adds	r3, #4
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	701a      	strb	r2, [r3, #0]

	if (loggingEnabled && !flash.lock)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d011      	beq.n	8001a80 <_ZN14GenericChannel13getSensorDataEPhRh+0x104>
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001a62:	791b      	ldrb	r3, [r3, #4]
 8001a64:	f083 0301 	eor.w	r3, r3, #1
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d008      	beq.n	8001a80 <_ZN14GenericChannel13getSensorDataEPhRh+0x104>
		flash.addLog(data, n);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	68b9      	ldr	r1, [r7, #8]
 8001a7c:	f000 fb9b 	bl	80021b6 <_ZN12W25Qxx_Flash6addLogEPhh>
	return 0;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3728      	adds	r7, #40	; 0x28
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <_ZN14GenericChannel17getFlashClearInfoEPhRh>:

int GenericChannel::getFlashClearInfo(uint8_t *data, uint8_t &n)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b086      	sub	sp, #24
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	60f8      	str	r0, [r7, #12]
 8001a92:	60b9      	str	r1, [r7, #8]
 8001a94:	607a      	str	r2, [r7, #4]

	FlashStatusMsg_t *info = (FlashStatusMsg_t*) data;
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	617b      	str	r3, [r7, #20]

	FlashState flashState = flash.getState();
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f000 fb04 	bl	80020ae <_ZN12W25Qxx_Flash8getStateEv>
 8001aa6:	6138      	str	r0, [r7, #16]
	if (flashState == FlashState::IDLE || flashState == FlashState::CLEARING)
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d002      	beq.n	8001ab4 <_ZN14GenericChannel17getFlashClearInfoEPhRh+0x2a>
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d103      	bne.n	8001abc <_ZN14GenericChannel17getFlashClearInfoEPhRh+0x32>
	{ //TODO actually check if clearing has initiated
		info->status = INITIATED;
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	701a      	strb	r2, [r3, #0]
 8001aba:	e009      	b.n	8001ad0 <_ZN14GenericChannel17getFlashClearInfoEPhRh+0x46>
	}
	else if (flashState == FlashState::READY)
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d103      	bne.n	8001aca <_ZN14GenericChannel17getFlashClearInfoEPhRh+0x40>
	{
		info->status = COMPLETED;
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	701a      	strb	r2, [r3, #0]
 8001ac8:	e002      	b.n	8001ad0 <_ZN14GenericChannel17getFlashClearInfoEPhRh+0x46>
	}
	else
	{
		info->status = INITIATED;
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	2200      	movs	r2, #0
 8001ace:	701a      	strb	r2, [r3, #0]
	}

	n = sizeof(FlashStatusMsg_t);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	701a      	strb	r2, [r3, #0]
	return 0;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3718      	adds	r7, #24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <_ZN14GenericChannel11getNodeInfoEPhRh>:

int GenericChannel::getNodeInfo(uint8_t *data, uint8_t &n)
{
 8001ae0:	b590      	push	{r4, r7, lr}
 8001ae2:	b08d      	sub	sp, #52	; 0x34
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
	NodeInfoMsg_t *info = (NodeInfoMsg_t*) data;
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	623b      	str	r3, [r7, #32]

	info->firmware_version = firmwareVersion;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001af6:	6a3b      	ldr	r3, [r7, #32]
 8001af8:	601a      	str	r2, [r3, #0]

	info->channel_mask = 0x00000000;
 8001afa:	6a3b      	ldr	r3, [r7, #32]
 8001afc:	2200      	movs	r2, #0
 8001afe:	711a      	strb	r2, [r3, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	715a      	strb	r2, [r3, #5]
 8001b04:	2200      	movs	r2, #0
 8001b06:	719a      	strb	r2, [r3, #6]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	71da      	strb	r2, [r3, #7]
	uint32_t length = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t i = 0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	for (AbstractChannel *channel : channels)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	3310      	adds	r3, #16
 8001b1a:	61fb      	str	r3, [r7, #28]
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	3380      	adds	r3, #128	; 0x80
 8001b24:	61bb      	str	r3, [r7, #24]
 8001b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d02a      	beq.n	8001b84 <_ZN14GenericChannel11getNodeInfoEPhRh+0xa4>
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	617b      	str	r3, [r7, #20]
	{
		if (channel == nullptr)
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d01f      	beq.n	8001b7a <_ZN14GenericChannel11getNodeInfoEPhRh+0x9a>
			continue;

		info->channel_type[i] = channel->getChannelType();
 8001b3a:	f897 402b 	ldrb.w	r4, [r7, #43]	; 0x2b
 8001b3e:	6978      	ldr	r0, [r7, #20]
 8001b40:	f7ff fade 	bl	8001100 <_ZNK15AbstractChannel14getChannelTypeEv>
 8001b44:	4603      	mov	r3, r0
 8001b46:	461a      	mov	r2, r3
 8001b48:	6a3b      	ldr	r3, [r7, #32]
 8001b4a:	4423      	add	r3, r4
 8001b4c:	721a      	strb	r2, [r3, #8]
		info->channel_mask |= 1 << channel->getChannelId();
 8001b4e:	6978      	ldr	r0, [r7, #20]
 8001b50:	f7ff faee 	bl	8001130 <_ZNK15AbstractChannel12getChannelIdEv>
 8001b54:	4603      	mov	r3, r0
 8001b56:	461a      	mov	r2, r3
 8001b58:	2301      	movs	r3, #1
 8001b5a:	fa03 f202 	lsl.w	r2, r3, r2
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	431a      	orrs	r2, r3
 8001b64:	6a3b      	ldr	r3, [r7, #32]
 8001b66:	605a      	str	r2, [r3, #4]
		length++;
 8001b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
		i++;
 8001b6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001b72:	3301      	adds	r3, #1
 8001b74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001b78:	e000      	b.n	8001b7c <_ZN14GenericChannel11getNodeInfoEPhRh+0x9c>
			continue;
 8001b7a:	bf00      	nop
	for (AbstractChannel *channel : channels)
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7e:	3304      	adds	r3, #4
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
 8001b82:	e7d0      	b.n	8001b26 <_ZN14GenericChannel11getNodeInfoEPhRh+0x46>
	}
	n = length + 2 * sizeof(uint32_t);
 8001b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	3308      	adds	r3, #8
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	701a      	strb	r2, [r3, #0]
	return 0;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3734      	adds	r7, #52	; 0x34
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd90      	pop	{r4, r7, pc}

08001b9a <_ZN14GenericChannel15registerChannelEP15AbstractChannel>:

void GenericChannel::registerChannel(AbstractChannel *channel)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b082      	sub	sp, #8
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	6039      	str	r1, [r7, #0]
	if (channel->getChannelId() < MAX_CHANNELS)
 8001ba4:	6838      	ldr	r0, [r7, #0]
 8001ba6:	f7ff fac3 	bl	8001130 <_ZNK15AbstractChannel12getChannelIdEv>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b1f      	cmp	r3, #31
 8001bae:	bf94      	ite	ls
 8001bb0:	2301      	movls	r3, #1
 8001bb2:	2300      	movhi	r3, #0
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d009      	beq.n	8001bce <_ZN14GenericChannel15registerChannelEP15AbstractChannel+0x34>
		channels[channel->getChannelId()] = channel;
 8001bba:	6838      	ldr	r0, [r7, #0]
 8001bbc:	f7ff fab8 	bl	8001130 <_ZNK15AbstractChannel12getChannelIdEv>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3204      	adds	r2, #4
 8001bc8:	6839      	ldr	r1, [r7, #0]
 8001bca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <_ZN14GenericChannel14registerModuleEP14AbstractModule>:
		registerChannel(channels[i]);
	}
}

void GenericChannel::registerModule(AbstractModule *module)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	6039      	str	r1, [r7, #0]
	if (moduleIndex < MAX_MODULES)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 8001be6:	2b07      	cmp	r3, #7
 8001be8:	d810      	bhi.n	8001c0c <_ZN14GenericChannel14registerModuleEP14AbstractModule+0x36>
	{
		modules[moduleIndex] = module;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	3224      	adds	r2, #36	; 0x24
 8001bf6:	6839      	ldr	r1, [r7, #0]
 8001bf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		moduleIndex++;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 8001c02:	3301      	adds	r3, #1
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
	}
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <_ZN14GenericChannel13setLoraActiveEb>:
	{
		printLog();
	}
}

void GenericChannel::setLoraActive(bool enable) {
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	71fb      	strb	r3, [r7, #7]
	loraActive = enable;
 8001c22:	4a04      	ldr	r2, [pc, #16]	; (8001c34 <_ZN14GenericChannel13setLoraActiveEb+0x1c>)
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	7013      	strb	r3, [r2, #0]
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	200007bc 	.word	0x200007bc

08001c38 <_ZN14AbstractModuleC1Ev>:
#ifndef ABSTRACTMODULE_H
#define ABSTRACTMODULE_H

class AbstractModule
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	4a04      	ldr	r2, [pc, #16]	; (8001c54 <_ZN14AbstractModuleC1Ev+0x1c>)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	08006f04 	.word	0x08006f04

08001c58 <_ZN12W25Qxx_FlashC1Ev>:
#include <STRHAL.h>
#include <channels/generic_channel_def.h>

#include <cstring>

W25Qxx_Flash::W25Qxx_Flash() :
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
		state(FlashState::IDLE), pageCount(0), sectorCount(0), can(Can::instance())
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff ffe8 	bl	8001c38 <_ZN14AbstractModuleC1Ev>
 8001c68:	4a1a      	ldr	r2, [pc, #104]	; (8001cd4 <_ZN12W25Qxx_FlashC1Ev+0x7c>)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	711a      	strb	r2, [r3, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	60da      	str	r2, [r3, #12]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	611a      	str	r2, [r3, #16]
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	f04f 0200 	mov.w	r2, #0
 8001c8c:	f04f 0300 	mov.w	r3, #0
 8001c90:	e9c1 2346 	strd	r2, r3, [r1, #280]	; 0x118
 8001c94:	6879      	ldr	r1, [r7, #4]
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	f04f 0300 	mov.w	r3, #0
 8001c9e:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
 8001cba:	2000      	movs	r0, #0
 8001cbc:	f7fe fad4 	bl	8000268 <_ZN3Can8instanceEm>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
{
}
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	08006f18 	.word	0x08006f18

08001cd8 <_ZN12W25Qxx_Flash8instanceEv>:

W25Qxx_Flash& W25Qxx_Flash::instance()
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
	static W25Qxx_Flash instance;
 8001cdc:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <_ZN12W25Qxx_Flash8instanceEv+0x48>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	f3bf 8f5b 	dmb	ish
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	bf0c      	ite	eq
 8001cee:	2301      	moveq	r3, #1
 8001cf0:	2300      	movne	r3, #0
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d010      	beq.n	8001d1a <_ZN12W25Qxx_Flash8instanceEv+0x42>
 8001cf8:	4809      	ldr	r0, [pc, #36]	; (8001d20 <_ZN12W25Qxx_Flash8instanceEv+0x48>)
 8001cfa:	f004 feed 	bl	8006ad8 <__cxa_guard_acquire>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	bf14      	ite	ne
 8001d04:	2301      	movne	r3, #1
 8001d06:	2300      	moveq	r3, #0
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d005      	beq.n	8001d1a <_ZN12W25Qxx_Flash8instanceEv+0x42>
 8001d0e:	4805      	ldr	r0, [pc, #20]	; (8001d24 <_ZN12W25Qxx_Flash8instanceEv+0x4c>)
 8001d10:	f7ff ffa2 	bl	8001c58 <_ZN12W25Qxx_FlashC1Ev>
 8001d14:	4802      	ldr	r0, [pc, #8]	; (8001d20 <_ZN12W25Qxx_Flash8instanceEv+0x48>)
 8001d16:	f004 feeb 	bl	8006af0 <__cxa_guard_release>

	return instance;
 8001d1a:	4b02      	ldr	r3, [pc, #8]	; (8001d24 <_ZN12W25Qxx_Flash8instanceEv+0x4c>)
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	200009f8 	.word	0x200009f8
 8001d24:	200007c0 	.word	0x200007c0

08001d28 <_ZN12W25Qxx_Flash4initEv>:

int W25Qxx_Flash::init()
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
	memset(loggingBuffer, 0, 256);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8001d36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f004 ff37 	bl	8006bb0 <memset>

	STRHAL_QSPI_Config_t qspi_conf;
	qspi_conf.clk_level = 0x0;
 8001d42:	7bbb      	ldrb	r3, [r7, #14]
 8001d44:	f36f 0300 	bfc	r3, #0, #1
 8001d48:	73bb      	strb	r3, [r7, #14]
	qspi_conf.flash_size = SIZE_2N;
 8001d4a:	7b7b      	ldrb	r3, [r7, #13]
 8001d4c:	f043 031f 	orr.w	r3, r3, #31
 8001d50:	737b      	strb	r3, [r7, #13]
	qspi_conf.ncs_high_time = 0x7;
 8001d52:	7b7b      	ldrb	r3, [r7, #13]
 8001d54:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001d58:	737b      	strb	r3, [r7, #13]
	qspi_conf.psc = 19;
 8001d5a:	7b3b      	ldrb	r3, [r7, #12]
 8001d5c:	2213      	movs	r2, #19
 8001d5e:	f362 0304 	bfi	r3, r2, #0, #5
 8001d62:	733b      	strb	r3, [r7, #12]

	if (STRHAL_QSPI_Flash_Init(&qspi_conf) < 0)
 8001d64:	f107 030c 	add.w	r3, r7, #12
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f003 fd69 	bl	8005840 <STRHAL_QSPI_Flash_Init>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	0fdb      	lsrs	r3, r3, #31
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d002      	beq.n	8001d7e <_ZN12W25Qxx_Flash4initEv+0x56>
		return -1;
 8001d78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d7c:	e029      	b.n	8001dd2 <_ZN12W25Qxx_Flash4initEv+0xaa>

	STRHAL_QSPI_Run();
 8001d7e:	f003 fdd1 	bl	8005924 <STRHAL_QSPI_Run>

	if (!enter4ByteAddrMode())
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 fad8 	bl	8002338 <_ZN12W25Qxx_Flash18enter4ByteAddrModeEv>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	f083 0301 	eor.w	r3, r3, #1
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d002      	beq.n	8001d9a <_ZN12W25Qxx_Flash4initEv+0x72>
	{
		return -1;
 8001d94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d98:	e01b      	b.n	8001dd2 <_ZN12W25Qxx_Flash4initEv+0xaa>
	}

	if (!writeEnable())
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 fa5f 	bl	800225e <_ZN12W25Qxx_Flash11writeEnableEv>
 8001da0:	4603      	mov	r3, r0
 8001da2:	f083 0301 	eor.w	r3, r3, #1
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d002      	beq.n	8001db2 <_ZN12W25Qxx_Flash4initEv+0x8a>
	{
		return -1;
 8001dac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001db0:	e00f      	b.n	8001dd2 <_ZN12W25Qxx_Flash4initEv+0xaa>
	}

	if (!disableWPS())
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 fa7f 	bl	80022b6 <_ZN12W25Qxx_Flash10disableWPSEv>
 8001db8:	4603      	mov	r3, r0
 8001dba:	f083 0301 	eor.w	r3, r3, #1
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d002      	beq.n	8001dca <_ZN12W25Qxx_Flash4initEv+0xa2>
	{
		return -1;
 8001dc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dc8:	e003      	b.n	8001dd2 <_ZN12W25Qxx_Flash4initEv+0xaa>
	}

	LL_mDelay(10);
 8001dca:	200a      	movs	r0, #10
 8001dcc:	f001 fa96 	bl	80032fc <LL_mDelay>

	return 0;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <_ZN12W25Qxx_Flash4execEv>:

int W25Qxx_Flash::exec()
{
 8001dda:	b5b0      	push	{r4, r5, r7, lr}
 8001ddc:	b086      	sub	sp, #24
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
	uint64_t time = STRHAL_Systick_GetTick();
 8001de2:	f004 f855 	bl	8005e90 <STRHAL_Systick_GetTick>
 8001de6:	e9c7 0102 	strd	r0, r1, [r7, #8]
	if ((time - timeLastSample) < EXEC_SAMPLE_TICKS)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	; 0x118
 8001df0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001df4:	1a84      	subs	r4, r0, r2
 8001df6:	eb61 0503 	sbc.w	r5, r1, r3
 8001dfa:	2d00      	cmp	r5, #0
 8001dfc:	bf08      	it	eq
 8001dfe:	2c0a      	cmpeq	r4, #10
 8001e00:	d201      	bcs.n	8001e06 <_ZN12W25Qxx_Flash4execEv+0x2c>
		return 0;
 8001e02:	2300      	movs	r3, #0
 8001e04:	e039      	b.n	8001e7a <_ZN12W25Qxx_Flash4execEv+0xa0>

	timeLastSample = time;
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e0c:	e9c1 2346 	strd	r2, r3, [r1, #280]	; 0x118

	// Current State Logic - executes state logic, also returns new state if transition conditions are met
	internalNextState = currentStateLogic(time);
 8001e10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f849 	bl	8001eac <_ZN12W25Qxx_Flash17currentStateLogicEy>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	FlashState nextState = state;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	617b      	str	r3, [r7, #20]

	if (externalNextState != state)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d004      	beq.n	8001e40 <_ZN12W25Qxx_Flash4execEv+0x66>
	{ // Prioritize external event - there has to be some kind of priority, because internal could be different to external -> external means CAN -> either Sequence or Abort
		nextState = externalNextState;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8001e3c:	617b      	str	r3, [r7, #20]
 8001e3e:	e010      	b.n	8001e62 <_ZN12W25Qxx_Flash4execEv+0x88>
	}
	else if (internalNextState != state)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d009      	beq.n	8001e62 <_ZN12W25Qxx_Flash4execEv+0x88>
	{
		externalNextState = internalNextState; // Incase an internal state change happens, the external state, which is from some previous change would block it, so it is updated here
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
		nextState = internalNextState;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8001e60:	617b      	str	r3, [r7, #20]
	}

	// Next State Logic
	if (nextState != state)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d005      	beq.n	8001e78 <_ZN12W25Qxx_Flash4execEv+0x9e>
	{
		nextStateLogic(nextState, time);
 8001e6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e70:	6979      	ldr	r1, [r7, #20]
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f86c 	bl	8001f50 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey>
	}

	return 0;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bdb0      	pop	{r4, r5, r7, pc}

08001e82 <_ZN12W25Qxx_Flash5resetEv>:

int W25Qxx_Flash::reset()
{
 8001e82:	b480      	push	{r7}
 8001e84:	b083      	sub	sp, #12
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
	state = FlashState::IDLE;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	609a      	str	r2, [r3, #8]
	pageCount = 0;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	60da      	str	r2, [r3, #12]
	sectorCount = 0;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	611a      	str	r2, [r3, #16]
	return 0;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
	...

08001eac <_ZN12W25Qxx_Flash17currentStateLogicEy>:

FlashState W25Qxx_Flash::currentStateLogic(uint64_t time)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	e9c7 2300 	strd	r2, r3, [r7]
	switch (state)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	2b04      	cmp	r3, #4
 8001ebe:	d839      	bhi.n	8001f34 <_ZN12W25Qxx_Flash17currentStateLogicEy+0x88>
 8001ec0:	a201      	add	r2, pc, #4	; (adr r2, 8001ec8 <_ZN12W25Qxx_Flash17currentStateLogicEy+0x1c>)
 8001ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec6:	bf00      	nop
 8001ec8:	08001f35 	.word	0x08001f35
 8001ecc:	08001edd 	.word	0x08001edd
 8001ed0:	08001f35 	.word	0x08001f35
 8001ed4:	08001f03 	.word	0x08001f03
 8001ed8:	08001f35 	.word	0x08001f35
		case FlashState::IDLE:
			break;
		case FlashState::CLEARING:
		{
			uint8_t sreg1;
			if (!readSREG1(sreg1))
 8001edc:	f107 0317 	add.w	r3, r7, #23
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f000 f996 	bl	8002214 <_ZNK12W25Qxx_Flash9readSREG1ERh>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	f083 0301 	eor.w	r3, r3, #1
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d121      	bne.n	8001f38 <_ZN12W25Qxx_Flash17currentStateLogicEy+0x8c>
				break;
			if (!(sreg1 & 0x01))
 8001ef4:	7dfb      	ldrb	r3, [r7, #23]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d11e      	bne.n	8001f3c <_ZN12W25Qxx_Flash17currentStateLogicEy+0x90>
				return FlashState::READY;
 8001efe:	2302      	movs	r3, #2
 8001f00:	e021      	b.n	8001f46 <_ZN12W25Qxx_Flash17currentStateLogicEy+0x9a>
			break;
		}
		case FlashState::READY:
			break;
		case FlashState::LOGGING:
			if (loggingIndex + 64 >= 256)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 8001f08:	2bbf      	cmp	r3, #191	; 0xbf
 8001f0a:	d919      	bls.n	8001f40 <_ZN12W25Qxx_Flash17currentStateLogicEy+0x94>
			{
				lock = true;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	711a      	strb	r2, [r3, #4]
				writeNextPage(loggingBuffer, 256);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8001f18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f000 fa30 	bl	8002384 <_ZN12W25Qxx_Flash13writeNextPageEPKhm>
				loggingIndex = 0;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
				lock = false;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	711a      	strb	r2, [r3, #4]
			}
			break;
 8001f32:	e005      	b.n	8001f40 <_ZN12W25Qxx_Flash17currentStateLogicEy+0x94>
		case FlashState::FULL:
			break;
		default:
			break;
 8001f34:	bf00      	nop
 8001f36:	e004      	b.n	8001f42 <_ZN12W25Qxx_Flash17currentStateLogicEy+0x96>
				break;
 8001f38:	bf00      	nop
 8001f3a:	e002      	b.n	8001f42 <_ZN12W25Qxx_Flash17currentStateLogicEy+0x96>
			break;
 8001f3c:	bf00      	nop
 8001f3e:	e000      	b.n	8001f42 <_ZN12W25Qxx_Flash17currentStateLogicEy+0x96>
			break;
 8001f40:	bf00      	nop
	}
	return state;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	689b      	ldr	r3, [r3, #8]
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop

08001f50 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey>:

void W25Qxx_Flash::nextStateLogic(FlashState nextState, uint64_t time)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	e9c7 2300 	strd	r2, r3, [r7]
	timeLastTransition = time;
 8001f5e:	68f9      	ldr	r1, [r7, #12]
 8001f60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f64:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	2b04      	cmp	r3, #4
 8001f6c:	d86f      	bhi.n	800204e <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0xfe>
 8001f6e:	a201      	add	r2, pc, #4	; (adr r2, 8001f74 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x24>)
 8001f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f74:	08001f89 	.word	0x08001f89
 8001f78:	08001f9f 	.word	0x08001f9f
 8001f7c:	08001feb 	.word	0x08001feb
 8001f80:	08002025 	.word	0x08002025
 8001f84:	0800203b 	.word	0x0800203b
	switch (nextState)
	{
		case FlashState::IDLE:
			if (state != FlashState::LOGGING)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	2b03      	cmp	r3, #3
 8001f8e:	d167      	bne.n	8002060 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x110>
			{
				return;
			}
			pageCount = 0;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	60da      	str	r2, [r3, #12]
			sectorCount = 0;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	611a      	str	r2, [r3, #16]
			break;
 8001f9c:	e05c      	b.n	8002058 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x108>
		case FlashState::CLEARING:
			if (state != FlashState::IDLE)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d15e      	bne.n	8002064 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x114>
			{
				return;
			}
			STRHAL_UART_Write_Blocking(STRHAL_UART_DEBUG, "CLEARING!\n", 10, 100);
 8001fa6:	2364      	movs	r3, #100	; 0x64
 8001fa8:	220a      	movs	r2, #10
 8001faa:	4936      	ldr	r1, [pc, #216]	; (8002084 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x134>)
 8001fac:	2002      	movs	r0, #2
 8001fae:	f004 fbf3 	bl	8006798 <STRHAL_UART_Write_Blocking>
			if (!sendClearInitiated())
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	f000 f887 	bl	80020c6 <_ZN12W25Qxx_Flash18sendClearInitiatedEv>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	f083 0301 	eor.w	r3, r3, #1
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d151      	bne.n	8002068 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x118>
				return;
			if (!readConfig())
 8001fc4:	68f8      	ldr	r0, [r7, #12]
 8001fc6:	f000 fac1 	bl	800254c <_ZN12W25Qxx_Flash10readConfigEv>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	f083 0301 	eor.w	r3, r3, #1
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d14a      	bne.n	800206c <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x11c>
				return;

			if (!chipErase())
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f000 fb4c 	bl	8002674 <_ZN12W25Qxx_Flash9chipEraseEv>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	f083 0301 	eor.w	r3, r3, #1
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d034      	beq.n	8002052 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x102>
				return;
 8001fe8:	e049      	b.n	800207e <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>
			break;
		case FlashState::READY:
			STRHAL_UART_Write_Blocking(STRHAL_UART_DEBUG, "READY!\n", 7, 100);
 8001fea:	2364      	movs	r3, #100	; 0x64
 8001fec:	2207      	movs	r2, #7
 8001fee:	4926      	ldr	r1, [pc, #152]	; (8002088 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x138>)
 8001ff0:	2002      	movs	r0, #2
 8001ff2:	f004 fbd1 	bl	8006798 <STRHAL_UART_Write_Blocking>
			if (state != FlashState::CLEARING)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d138      	bne.n	8002070 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x120>
			{
				return;
			}
			if (!writeTempConfig())
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	f000 fa8c 	bl	800251c <_ZN12W25Qxx_Flash15writeTempConfigEv>
 8002004:	4603      	mov	r3, r0
 8002006:	f083 0301 	eor.w	r3, r3, #1
 800200a:	b2db      	uxtb	r3, r3
 800200c:	2b00      	cmp	r3, #0
 800200e:	d131      	bne.n	8002074 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x124>
				return;
			if (!sendClearDone())
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f000 f880 	bl	8002116 <_ZN12W25Qxx_Flash13sendClearDoneEv>
 8002016:	4603      	mov	r3, r0
 8002018:	f083 0301 	eor.w	r3, r3, #1
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d019      	beq.n	8002056 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x106>
				return;
 8002022:	e02c      	b.n	800207e <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>

			break;
		case FlashState::LOGGING:
			if (state != FlashState::READY)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	2b02      	cmp	r3, #2
 800202a:	d125      	bne.n	8002078 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x128>
			{
				return;
			}
			STRHAL_UART_Write_Blocking(STRHAL_UART_DEBUG, "LOGGING!\n", 9, 100);
 800202c:	2364      	movs	r3, #100	; 0x64
 800202e:	2209      	movs	r2, #9
 8002030:	4916      	ldr	r1, [pc, #88]	; (800208c <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x13c>)
 8002032:	2002      	movs	r0, #2
 8002034:	f004 fbb0 	bl	8006798 <STRHAL_UART_Write_Blocking>
			break;
 8002038:	e00e      	b.n	8002058 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x108>
		case FlashState::FULL:
			if (!sendFull())
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f000 f893 	bl	8002166 <_ZN12W25Qxx_Flash8sendFullEv>
 8002040:	4603      	mov	r3, r0
 8002042:	f083 0301 	eor.w	r3, r3, #1
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b00      	cmp	r3, #0
 800204a:	d117      	bne.n	800207c <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12c>
				return;
			break;
 800204c:	e004      	b.n	8002058 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x108>
		default:
			break;
 800204e:	bf00      	nop
 8002050:	e002      	b.n	8002058 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x108>
			break;
 8002052:	bf00      	nop
 8002054:	e000      	b.n	8002058 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x108>
			break;
 8002056:	bf00      	nop
	}
	state = nextState;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	68ba      	ldr	r2, [r7, #8]
 800205c:	609a      	str	r2, [r3, #8]
	return;
 800205e:	e00e      	b.n	800207e <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>
				return;
 8002060:	bf00      	nop
 8002062:	e00c      	b.n	800207e <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>
				return;
 8002064:	bf00      	nop
 8002066:	e00a      	b.n	800207e <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>
				return;
 8002068:	bf00      	nop
 800206a:	e008      	b.n	800207e <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>
				return;
 800206c:	bf00      	nop
 800206e:	e006      	b.n	800207e <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>
				return;
 8002070:	bf00      	nop
 8002072:	e004      	b.n	800207e <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>
				return;
 8002074:	bf00      	nop
 8002076:	e002      	b.n	800207e <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>
				return;
 8002078:	bf00      	nop
 800207a:	e000      	b.n	800207e <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>
				return;
 800207c:	bf00      	nop
}
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	08006e00 	.word	0x08006e00
 8002088:	08006e0c 	.word	0x08006e0c
 800208c:	08006e14 	.word	0x08006e14

08002090 <_ZN12W25Qxx_Flash8setStateE10FlashState>:

void W25Qxx_Flash::setState(FlashState nextState)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
	externalNextState = nextState;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <_ZN12W25Qxx_Flash8getStateEv>:

FlashState W25Qxx_Flash::getState()
{
 80020ae:	b480      	push	{r7}
 80020b0:	b083      	sub	sp, #12
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
	return state;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <_ZN12W25Qxx_Flash18sendClearInitiatedEv>:

bool W25Qxx_Flash::sendClearInitiated()
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b094      	sub	sp, #80	; 0x50
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
	Can_MessageData_t msgData =
 80020ce:	f107 030c 	add.w	r3, r7, #12
 80020d2:	2242      	movs	r2, #66	; 0x42
 80020d4:	2100      	movs	r1, #0
 80020d6:	4618      	mov	r0, r3
 80020d8:	f004 fd6a 	bl	8006bb0 <memset>
	{ 0 };
	msgData.bit.cmd_id = GENERIC_RES_FLASH_STATUS;
 80020dc:	2313      	movs	r3, #19
 80020de:	737b      	strb	r3, [r7, #13]
	msgData.bit.info.channel_id = GENERIC_CHANNEL_ID;
 80020e0:	7b3b      	ldrb	r3, [r7, #12]
 80020e2:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 80020e6:	733b      	strb	r3, [r7, #12]
	msgData.bit.info.buffer = DIRECT_BUFFER;
 80020e8:	7b3b      	ldrb	r3, [r7, #12]
 80020ea:	f36f 1387 	bfc	r3, #6, #2
 80020ee:	733b      	strb	r3, [r7, #12]
	msgData.bit.data.uint8[0] = INITIATED;
 80020f0:	2300      	movs	r3, #0
 80020f2:	73bb      	strb	r3, [r7, #14]

	return (can.send(0, (uint8_t*) &msgData, 1 + sizeof(uint32_t)) == 0) ? true : false;
 80020f4:	f107 030c 	add.w	r3, r7, #12
 80020f8:	2205      	movs	r2, #5
 80020fa:	4619      	mov	r1, r3
 80020fc:	2000      	movs	r0, #0
 80020fe:	f7fe fab7 	bl	8000670 <_ZN3Can4sendEmPhh>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	bf0c      	ite	eq
 8002108:	2301      	moveq	r3, #1
 800210a:	2300      	movne	r3, #0
 800210c:	b2db      	uxtb	r3, r3
}
 800210e:	4618      	mov	r0, r3
 8002110:	3750      	adds	r7, #80	; 0x50
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <_ZN12W25Qxx_Flash13sendClearDoneEv>:

bool W25Qxx_Flash::sendClearDone()
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b094      	sub	sp, #80	; 0x50
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
	Can_MessageData_t msgData =
 800211e:	f107 030c 	add.w	r3, r7, #12
 8002122:	2242      	movs	r2, #66	; 0x42
 8002124:	2100      	movs	r1, #0
 8002126:	4618      	mov	r0, r3
 8002128:	f004 fd42 	bl	8006bb0 <memset>
	{ 0 };
	msgData.bit.cmd_id = GENERIC_RES_FLASH_STATUS;
 800212c:	2313      	movs	r3, #19
 800212e:	737b      	strb	r3, [r7, #13]
	msgData.bit.info.channel_id = GENERIC_CHANNEL_ID;
 8002130:	7b3b      	ldrb	r3, [r7, #12]
 8002132:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8002136:	733b      	strb	r3, [r7, #12]
	msgData.bit.info.buffer = DIRECT_BUFFER;
 8002138:	7b3b      	ldrb	r3, [r7, #12]
 800213a:	f36f 1387 	bfc	r3, #6, #2
 800213e:	733b      	strb	r3, [r7, #12]
	msgData.bit.data.uint8[0] = COMPLETED;
 8002140:	2301      	movs	r3, #1
 8002142:	73bb      	strb	r3, [r7, #14]

	return (can.send(0, (uint8_t*) &msgData, 1 + sizeof(uint32_t)) == 0) ? true : false;
 8002144:	f107 030c 	add.w	r3, r7, #12
 8002148:	2205      	movs	r2, #5
 800214a:	4619      	mov	r1, r3
 800214c:	2000      	movs	r0, #0
 800214e:	f7fe fa8f 	bl	8000670 <_ZN3Can4sendEmPhh>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	bf0c      	ite	eq
 8002158:	2301      	moveq	r3, #1
 800215a:	2300      	movne	r3, #0
 800215c:	b2db      	uxtb	r3, r3
}
 800215e:	4618      	mov	r0, r3
 8002160:	3750      	adds	r7, #80	; 0x50
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <_ZN12W25Qxx_Flash8sendFullEv>:

bool W25Qxx_Flash::sendFull()
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b094      	sub	sp, #80	; 0x50
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
	Can_MessageData_t msgData =
 800216e:	f107 030c 	add.w	r3, r7, #12
 8002172:	2242      	movs	r2, #66	; 0x42
 8002174:	2100      	movs	r1, #0
 8002176:	4618      	mov	r0, r3
 8002178:	f004 fd1a 	bl	8006bb0 <memset>
	{ 0 };
	msgData.bit.cmd_id = GENERIC_RES_FLASH_STATUS;
 800217c:	2313      	movs	r3, #19
 800217e:	737b      	strb	r3, [r7, #13]
	msgData.bit.info.channel_id = GENERIC_CHANNEL_ID;
 8002180:	7b3b      	ldrb	r3, [r7, #12]
 8002182:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8002186:	733b      	strb	r3, [r7, #12]
	msgData.bit.info.buffer = DIRECT_BUFFER;
 8002188:	7b3b      	ldrb	r3, [r7, #12]
 800218a:	f36f 1387 	bfc	r3, #6, #2
 800218e:	733b      	strb	r3, [r7, #12]
	msgData.bit.data.uint8[0] = FULL;
 8002190:	2302      	movs	r3, #2
 8002192:	73bb      	strb	r3, [r7, #14]

	return (can.send(0, (uint8_t*) &msgData, 1 + sizeof(uint32_t)) == 0) ? true : false;
 8002194:	f107 030c 	add.w	r3, r7, #12
 8002198:	2205      	movs	r2, #5
 800219a:	4619      	mov	r1, r3
 800219c:	2000      	movs	r0, #0
 800219e:	f7fe fa67 	bl	8000670 <_ZN3Can4sendEmPhh>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	bf0c      	ite	eq
 80021a8:	2301      	moveq	r3, #1
 80021aa:	2300      	movne	r3, #0
 80021ac:	b2db      	uxtb	r3, r3
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3750      	adds	r7, #80	; 0x50
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <_ZN12W25Qxx_Flash6addLogEPhh>:

void W25Qxx_Flash::addLog(uint8_t *data, uint8_t n)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b084      	sub	sp, #16
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	60f8      	str	r0, [r7, #12]
 80021be:	60b9      	str	r1, [r7, #8]
 80021c0:	4613      	mov	r3, r2
 80021c2:	71fb      	strb	r3, [r7, #7]
	if (state != FlashState::LOGGING)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	2b03      	cmp	r3, #3
 80021ca:	d11d      	bne.n	8002208 <_ZN12W25Qxx_Flash6addLogEPhh+0x52>
		return;
	if (loggingIndex + n >= 256)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 80021d2:	461a      	mov	r2, r3
 80021d4:	79fb      	ldrb	r3, [r7, #7]
 80021d6:	4413      	add	r3, r2
 80021d8:	2bff      	cmp	r3, #255	; 0xff
 80021da:	dc17      	bgt.n	800220c <_ZN12W25Qxx_Flash6addLogEPhh+0x56>
		return;
	memcpy(&loggingBuffer[loggingIndex], data, n);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 80021e2:	f503 7398 	add.w	r3, r3, #304	; 0x130
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	4413      	add	r3, r2
 80021ea:	79fa      	ldrb	r2, [r7, #7]
 80021ec:	68b9      	ldr	r1, [r7, #8]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f004 fcd0 	bl	8006b94 <memcpy>
	loggingIndex += n;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f893 2230 	ldrb.w	r2, [r3, #560]	; 0x230
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	4413      	add	r3, r2
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
 8002206:	e002      	b.n	800220e <_ZN12W25Qxx_Flash6addLogEPhh+0x58>
		return;
 8002208:	bf00      	nop
 800220a:	e000      	b.n	800220e <_ZN12W25Qxx_Flash6addLogEPhh+0x58>
		return;
 800220c:	bf00      	nop
}
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <_ZNK12W25Qxx_Flash9readSREG1ERh>:

bool W25Qxx_Flash::readSREG1(uint8_t &sreg1) const
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b088      	sub	sp, #32
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
	STRHAL_QSPI_Command_t cmd;
	cmd.instruction_size = 1;
 800221e:	2301      	movs	r3, #1
 8002220:	737b      	strb	r3, [r7, #13]
	cmd.addr_size = 0;
 8002222:	2300      	movs	r3, #0
 8002224:	753b      	strb	r3, [r7, #20]
	cmd.alt_size = 0;
 8002226:	2300      	movs	r3, #0
 8002228:	757b      	strb	r3, [r7, #21]
	cmd.dummy_size = 0;
 800222a:	2300      	movs	r3, #0
 800222c:	773b      	strb	r3, [r7, #28]

	cmd.instruction = 0x05;
 800222e:	2305      	movs	r3, #5
 8002230:	733b      	strb	r3, [r7, #12]
	if (STRHAL_QSPI_Indirect_Read(&cmd, &sreg1, 1, 100) != 1)
 8002232:	f107 000c 	add.w	r0, r7, #12
 8002236:	2364      	movs	r3, #100	; 0x64
 8002238:	2201      	movs	r2, #1
 800223a:	6839      	ldr	r1, [r7, #0]
 800223c:	f003 fc3c 	bl	8005ab8 <STRHAL_QSPI_Indirect_Read>
 8002240:	4603      	mov	r3, r0
 8002242:	2b01      	cmp	r3, #1
 8002244:	bf14      	ite	ne
 8002246:	2301      	movne	r3, #1
 8002248:	2300      	moveq	r3, #0
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <_ZNK12W25Qxx_Flash9readSREG1ERh+0x40>
		return false;
 8002250:	2300      	movs	r3, #0
 8002252:	e000      	b.n	8002256 <_ZNK12W25Qxx_Flash9readSREG1ERh+0x42>

	return true;
 8002254:	2301      	movs	r3, #1
}
 8002256:	4618      	mov	r0, r3
 8002258:	3720      	adds	r7, #32
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <_ZN12W25Qxx_Flash11writeEnableEv>:
{
	return readSREG1(sreg1) && readSREG2(sreg2) && readSREG3(sreg3);
}

bool W25Qxx_Flash::writeEnable()
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b088      	sub	sp, #32
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
	STRHAL_QSPI_Command_t cmd;
	cmd.instruction = 0x06;
 8002266:	2306      	movs	r3, #6
 8002268:	733b      	strb	r3, [r7, #12]
	cmd.instruction_size = 1;
 800226a:	2301      	movs	r3, #1
 800226c:	737b      	strb	r3, [r7, #13]
	cmd.addr_size = 0;
 800226e:	2300      	movs	r3, #0
 8002270:	753b      	strb	r3, [r7, #20]
	cmd.alt_size = 0;
 8002272:	2300      	movs	r3, #0
 8002274:	757b      	strb	r3, [r7, #21]
	cmd.dummy_size = 0;
 8002276:	2300      	movs	r3, #0
 8002278:	773b      	strb	r3, [r7, #28]

	if (waitForSREGFlag(0x01, false, 100) < 0)
 800227a:	2364      	movs	r3, #100	; 0x64
 800227c:	2200      	movs	r2, #0
 800227e:	2101      	movs	r1, #1
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 fa35 	bl	80026f0 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt>
 8002286:	4603      	mov	r3, r0
 8002288:	0fdb      	lsrs	r3, r3, #31
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <_ZN12W25Qxx_Flash11writeEnableEv+0x36>
		return false;
 8002290:	2300      	movs	r3, #0
 8002292:	e00c      	b.n	80022ae <_ZN12W25Qxx_Flash11writeEnableEv+0x50>

	return STRHAL_QSPI_Indirect_Write(&cmd, nullptr, 0, 100) == 0;
 8002294:	f107 000c 	add.w	r0, r7, #12
 8002298:	2364      	movs	r3, #100	; 0x64
 800229a:	2200      	movs	r2, #0
 800229c:	2100      	movs	r1, #0
 800229e:	f003 fb51 	bl	8005944 <STRHAL_QSPI_Indirect_Write>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	bf0c      	ite	eq
 80022a8:	2301      	moveq	r3, #1
 80022aa:	2300      	movne	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3720      	adds	r7, #32
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <_ZN12W25Qxx_Flash10disableWPSEv>:

	return true;
}

bool W25Qxx_Flash::disableWPS()
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b088      	sub	sp, #32
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
	STRHAL_QSPI_Command_t cmd;
	cmd.instruction = 0x11;
 80022be:	2311      	movs	r3, #17
 80022c0:	733b      	strb	r3, [r7, #12]
	//cmd.instruction = 0x98;
	cmd.instruction_size = 1;
 80022c2:	2301      	movs	r3, #1
 80022c4:	737b      	strb	r3, [r7, #13]
	cmd.addr = 0;
 80022c6:	2300      	movs	r3, #0
 80022c8:	613b      	str	r3, [r7, #16]
	cmd.addr_size = 0;
 80022ca:	2300      	movs	r3, #0
 80022cc:	753b      	strb	r3, [r7, #20]
	cmd.alt_size = 0;
 80022ce:	2300      	movs	r3, #0
 80022d0:	757b      	strb	r3, [r7, #21]
	cmd.dummy_size = 0;
 80022d2:	2300      	movs	r3, #0
 80022d4:	773b      	strb	r3, [r7, #28]

	uint8_t value = 0xFB;
 80022d6:	23fb      	movs	r3, #251	; 0xfb
 80022d8:	72fb      	strb	r3, [r7, #11]

	if (waitForSREGFlag(0x01, false, 10) < 0)
 80022da:	230a      	movs	r3, #10
 80022dc:	2200      	movs	r2, #0
 80022de:	2101      	movs	r1, #1
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 fa05 	bl	80026f0 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt>
 80022e6:	4603      	mov	r3, r0
 80022e8:	0fdb      	lsrs	r3, r3, #31
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <_ZN12W25Qxx_Flash10disableWPSEv+0x3e>
		return false;
 80022f0:	2300      	movs	r3, #0
 80022f2:	e01d      	b.n	8002330 <_ZN12W25Qxx_Flash10disableWPSEv+0x7a>

	if (!writeEnable())
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f7ff ffb2 	bl	800225e <_ZN12W25Qxx_Flash11writeEnableEv>
 80022fa:	4603      	mov	r3, r0
 80022fc:	f083 0301 	eor.w	r3, r3, #1
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <_ZN12W25Qxx_Flash10disableWPSEv+0x54>
		return false;
 8002306:	2300      	movs	r3, #0
 8002308:	e012      	b.n	8002330 <_ZN12W25Qxx_Flash10disableWPSEv+0x7a>

	if (STRHAL_QSPI_Indirect_Write(&cmd, &value, 1, 100) != 1)
 800230a:	f107 010b 	add.w	r1, r7, #11
 800230e:	f107 000c 	add.w	r0, r7, #12
 8002312:	2364      	movs	r3, #100	; 0x64
 8002314:	2201      	movs	r2, #1
 8002316:	f003 fb15 	bl	8005944 <STRHAL_QSPI_Indirect_Write>
 800231a:	4603      	mov	r3, r0
 800231c:	2b01      	cmp	r3, #1
 800231e:	bf14      	ite	ne
 8002320:	2301      	movne	r3, #1
 8002322:	2300      	moveq	r3, #0
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <_ZN12W25Qxx_Flash10disableWPSEv+0x78>
		return false;
 800232a:	2300      	movs	r3, #0
 800232c:	e000      	b.n	8002330 <_ZN12W25Qxx_Flash10disableWPSEv+0x7a>

	return true;
 800232e:	2301      	movs	r3, #1
}
 8002330:	4618      	mov	r0, r3
 8002332:	3720      	adds	r7, #32
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <_ZN12W25Qxx_Flash18enter4ByteAddrModeEv>:

bool W25Qxx_Flash::enter4ByteAddrMode()
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b088      	sub	sp, #32
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
	STRHAL_QSPI_Command_t cmd;
	cmd.instruction = 0xB7;
 8002340:	23b7      	movs	r3, #183	; 0xb7
 8002342:	733b      	strb	r3, [r7, #12]
	cmd.instruction_size = 1;
 8002344:	2301      	movs	r3, #1
 8002346:	737b      	strb	r3, [r7, #13]
	cmd.addr_size = 0;
 8002348:	2300      	movs	r3, #0
 800234a:	753b      	strb	r3, [r7, #20]
	cmd.addr = 0x000000;
 800234c:	2300      	movs	r3, #0
 800234e:	613b      	str	r3, [r7, #16]
	cmd.alt_size = 0;
 8002350:	2300      	movs	r3, #0
 8002352:	757b      	strb	r3, [r7, #21]
	cmd.dummy_size = 0;
 8002354:	2300      	movs	r3, #0
 8002356:	773b      	strb	r3, [r7, #28]

	if (STRHAL_QSPI_Indirect_Write(&cmd, nullptr, 0, 100) != 0)
 8002358:	f107 000c 	add.w	r0, r7, #12
 800235c:	2364      	movs	r3, #100	; 0x64
 800235e:	2200      	movs	r2, #0
 8002360:	2100      	movs	r1, #0
 8002362:	f003 faef 	bl	8005944 <STRHAL_QSPI_Indirect_Write>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	bf14      	ite	ne
 800236c:	2301      	movne	r3, #1
 800236e:	2300      	moveq	r3, #0
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <_ZN12W25Qxx_Flash18enter4ByteAddrModeEv+0x42>
		return false;
 8002376:	2300      	movs	r3, #0
 8002378:	e000      	b.n	800237c <_ZN12W25Qxx_Flash18enter4ByteAddrModeEv+0x44>

	return true;
 800237a:	2301      	movs	r3, #1
}
 800237c:	4618      	mov	r0, r3
 800237e:	3720      	adds	r7, #32
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <_ZN12W25Qxx_Flash13writeNextPageEPKhm>:

	return true;
}

uint32_t W25Qxx_Flash::writeNextPage(const uint8_t *data, uint32_t n)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
	if (sectorCount == 8192 - 1)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8002398:	4293      	cmp	r3, r2
 800239a:	d101      	bne.n	80023a0 <_ZN12W25Qxx_Flash13writeNextPageEPKhm+0x1c>
	{
		return 0;
 800239c:	2300      	movs	r3, #0
 800239e:	e020      	b.n	80023e2 <_ZN12W25Qxx_Flash13writeNextPageEPKhm+0x5e>
	 return 0;
	 if(!sectorErase(sectorCount))
	 return 0;
	 }*/

	uint32_t numWritten = write((pageCount << 8) | (sectorCount << 12), data, n);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	021a      	lsls	r2, r3, #8
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	031b      	lsls	r3, r3, #12
 80023ac:	ea42 0103 	orr.w	r1, r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68ba      	ldr	r2, [r7, #8]
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f000 f818 	bl	80023ea <_ZN12W25Qxx_Flash5writeEmPKhm>
 80023ba:	6178      	str	r0, [r7, #20]
	(void) numWritten;
	/*if(numWritten == n)
	 return 0;*/

	if (pageCount == 15)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	2b0f      	cmp	r3, #15
 80023c2:	d108      	bne.n	80023d6 <_ZN12W25Qxx_Flash13writeNextPageEPKhm+0x52>
	{
		pageCount = 0;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	60da      	str	r2, [r3, #12]
		sectorCount++;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	1c5a      	adds	r2, r3, #1
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	611a      	str	r2, [r3, #16]
 80023d4:	e004      	b.n	80023e0 <_ZN12W25Qxx_Flash13writeNextPageEPKhm+0x5c>
	}
	else
	{
		pageCount++;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	1c5a      	adds	r2, r3, #1
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	60da      	str	r2, [r3, #12]
	}

	return n;
 80023e0:	687b      	ldr	r3, [r7, #4]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <_ZN12W25Qxx_Flash5writeEmPKhm>:

uint32_t W25Qxx_Flash::write(uint32_t address, const uint8_t *data, uint32_t n)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b08a      	sub	sp, #40	; 0x28
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	60f8      	str	r0, [r7, #12]
 80023f2:	60b9      	str	r1, [r7, #8]
 80023f4:	607a      	str	r2, [r7, #4]
 80023f6:	603b      	str	r3, [r7, #0]
	STRHAL_QSPI_Command_t cmd;
	cmd.instruction = 0x12;
 80023f8:	2312      	movs	r3, #18
 80023fa:	753b      	strb	r3, [r7, #20]
	cmd.instruction_size = 1;
 80023fc:	2301      	movs	r3, #1
 80023fe:	757b      	strb	r3, [r7, #21]
	cmd.addr = address;
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	61bb      	str	r3, [r7, #24]
	cmd.addr_size = 4;
 8002404:	2304      	movs	r3, #4
 8002406:	773b      	strb	r3, [r7, #28]
	cmd.alt_size = 0;
 8002408:	2300      	movs	r3, #0
 800240a:	777b      	strb	r3, [r7, #29]
	cmd.dummy_size = 0;
 800240c:	2300      	movs	r3, #0
 800240e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	if (waitForSREGFlag(0x01, false, 100) < 0)
 8002412:	2364      	movs	r3, #100	; 0x64
 8002414:	2200      	movs	r2, #0
 8002416:	2101      	movs	r1, #1
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f000 f969 	bl	80026f0 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt>
 800241e:	4603      	mov	r3, r0
 8002420:	0fdb      	lsrs	r3, r3, #31
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <_ZN12W25Qxx_Flash5writeEmPKhm+0x42>
		return 0;
 8002428:	2300      	movs	r3, #0
 800242a:	e024      	b.n	8002476 <_ZN12W25Qxx_Flash5writeEmPKhm+0x8c>

	if (!writeEnable())
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f7ff ff16 	bl	800225e <_ZN12W25Qxx_Flash11writeEnableEv>
 8002432:	4603      	mov	r3, r0
 8002434:	f083 0301 	eor.w	r3, r3, #1
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <_ZN12W25Qxx_Flash5writeEmPKhm+0x58>
		return 0;
 800243e:	2300      	movs	r3, #0
 8002440:	e019      	b.n	8002476 <_ZN12W25Qxx_Flash5writeEmPKhm+0x8c>

	if (n > PAGE_SIZE)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002448:	d902      	bls.n	8002450 <_ZN12W25Qxx_Flash5writeEmPKhm+0x66>
		n = PAGE_SIZE;
 800244a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800244e:	603b      	str	r3, [r7, #0]

	if (STRHAL_QSPI_Indirect_Write(&cmd, data, n, 100) != n)
 8002450:	f107 0014 	add.w	r0, r7, #20
 8002454:	2364      	movs	r3, #100	; 0x64
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	f003 fa73 	bl	8005944 <STRHAL_QSPI_Indirect_Write>
 800245e:	4602      	mov	r2, r0
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	4293      	cmp	r3, r2
 8002464:	bf14      	ite	ne
 8002466:	2301      	movne	r3, #1
 8002468:	2300      	moveq	r3, #0
 800246a:	b2db      	uxtb	r3, r3
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <_ZN12W25Qxx_Flash5writeEmPKhm+0x8a>
		return 0;
 8002470:	2300      	movs	r3, #0
 8002472:	e000      	b.n	8002476 <_ZN12W25Qxx_Flash5writeEmPKhm+0x8c>

	return n;
 8002474:	683b      	ldr	r3, [r7, #0]
}
 8002476:	4618      	mov	r0, r3
 8002478:	3728      	adds	r7, #40	; 0x28
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <_ZN12W25Qxx_Flash4readEmPhm>:

uint32_t W25Qxx_Flash::read(uint32_t address, uint8_t *data, uint32_t n)
{
 800247e:	b5b0      	push	{r4, r5, r7, lr}
 8002480:	b08a      	sub	sp, #40	; 0x28
 8002482:	af00      	add	r7, sp, #0
 8002484:	60f8      	str	r0, [r7, #12]
 8002486:	60b9      	str	r1, [r7, #8]
 8002488:	607a      	str	r2, [r7, #4]
 800248a:	603b      	str	r3, [r7, #0]
	STRHAL_QSPI_Command_t cmd;
	cmd.instruction = 0x13;
 800248c:	2313      	movs	r3, #19
 800248e:	753b      	strb	r3, [r7, #20]
	cmd.instruction_size = 1;
 8002490:	2301      	movs	r3, #1
 8002492:	757b      	strb	r3, [r7, #21]
	cmd.addr = address;
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	61bb      	str	r3, [r7, #24]
	cmd.addr_size = 4;
 8002498:	2304      	movs	r3, #4
 800249a:	773b      	strb	r3, [r7, #28]
	cmd.alt_size = 0;
 800249c:	2300      	movs	r3, #0
 800249e:	777b      	strb	r3, [r7, #29]
	cmd.dummy_size = 0;
 80024a0:	2300      	movs	r3, #0
 80024a2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	if ((uint64_t) address + n > (uint64_t) (1 << SIZE_2N))
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f04f 0100 	mov.w	r1, #0
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	461a      	mov	r2, r3
 80024b2:	f04f 0300 	mov.w	r3, #0
 80024b6:	1884      	adds	r4, r0, r2
 80024b8:	eb41 0503 	adc.w	r5, r1, r3
 80024bc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80024c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024c4:	42ab      	cmp	r3, r5
 80024c6:	bf08      	it	eq
 80024c8:	42a2      	cmpeq	r2, r4
 80024ca:	d202      	bcs.n	80024d2 <_ZN12W25Qxx_Flash4readEmPhm+0x54>
		n = 0xFFFFFFFF - address;
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	43db      	mvns	r3, r3
 80024d0:	603b      	str	r3, [r7, #0]

	if (waitForSREGFlag(0x01, false, 100) < 0)
 80024d2:	2364      	movs	r3, #100	; 0x64
 80024d4:	2200      	movs	r2, #0
 80024d6:	2101      	movs	r1, #1
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f000 f909 	bl	80026f0 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt>
 80024de:	4603      	mov	r3, r0
 80024e0:	0fdb      	lsrs	r3, r3, #31
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <_ZN12W25Qxx_Flash4readEmPhm+0x6e>
		return 0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	e013      	b.n	8002514 <_ZN12W25Qxx_Flash4readEmPhm+0x96>

	if (STRHAL_QSPI_Indirect_Read(&cmd, data, n, 1000) != n)
 80024ec:	f107 0014 	add.w	r0, r7, #20
 80024f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	f003 fade 	bl	8005ab8 <STRHAL_QSPI_Indirect_Read>
 80024fc:	4602      	mov	r2, r0
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	4293      	cmp	r3, r2
 8002502:	bf14      	ite	ne
 8002504:	2301      	movne	r3, #1
 8002506:	2300      	moveq	r3, #0
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <_ZN12W25Qxx_Flash4readEmPhm+0x94>
		return 0;
 800250e:	2300      	movs	r3, #0
 8002510:	e000      	b.n	8002514 <_ZN12W25Qxx_Flash4readEmPhm+0x96>

	return n;
 8002512:	683b      	ldr	r3, [r7, #0]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3728      	adds	r7, #40	; 0x28
 8002518:	46bd      	mov	sp, r7
 800251a:	bdb0      	pop	{r4, r5, r7, pc}

0800251c <_ZN12W25Qxx_Flash15writeTempConfigEv>:

	return write(CONFIG_BASE, config.bytes, sizeof(config.bytes)) == sizeof(config.bytes);
}

bool W25Qxx_Flash::writeTempConfig()
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
	return write(CONFIG_BASE, config.bytes, sizeof(config.bytes)) == sizeof(config.bytes);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f103 0214 	add.w	r2, r3, #20
 800252a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800252e:	2100      	movs	r1, #0
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff ff5a 	bl	80023ea <_ZN12W25Qxx_Flash5writeEmPKhm>
 8002536:	4603      	mov	r3, r0
 8002538:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800253c:	bf0c      	ite	eq
 800253e:	2301      	moveq	r3, #1
 8002540:	2300      	movne	r3, #0
 8002542:	b2db      	uxtb	r3, r3
}
 8002544:	4618      	mov	r0, r3
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <_ZN12W25Qxx_Flash10readConfigEv>:

	return write(CONFIG_BASE, config.bytes, sizeof(config.bytes)) == sizeof(config.bytes);
}

bool W25Qxx_Flash::readConfig()
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
	return read(CONFIG_BASE, config.bytes, sizeof(config.bytes)) == sizeof(config.bytes);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f103 0214 	add.w	r2, r3, #20
 800255a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800255e:	2100      	movs	r1, #0
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f7ff ff8c 	bl	800247e <_ZN12W25Qxx_Flash4readEmPhm>
 8002566:	4603      	mov	r3, r0
 8002568:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800256c:	bf0c      	ite	eq
 800256e:	2301      	moveq	r3, #1
 8002570:	2300      	movne	r3, #0
 8002572:	b2db      	uxtb	r3, r3
}
 8002574:	4618      	mov	r0, r3
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <_ZN12W25Qxx_Flash11configResetEv>:
	return sectorErase(CONFIG_BASE >> 12);
}

// Resets config, i.e. sets all config registers to 0x000
bool W25Qxx_Flash::configReset()
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < PAGE_SIZE / 4; i++)
 8002584:	2300      	movs	r3, #0
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2b3f      	cmp	r3, #63	; 0x3f
 800258c:	dc0a      	bgt.n	80025a4 <_ZN12W25Qxx_Flash11configResetEv+0x28>
	{
		config.reg[i] = 0;
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	3304      	adds	r3, #4
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4413      	add	r3, r2
 8002598:	2200      	movs	r2, #0
 800259a:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < PAGE_SIZE / 4; i++)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	3301      	adds	r3, #1
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	e7f1      	b.n	8002588 <_ZN12W25Qxx_Flash11configResetEv+0xc>
	}
	return sectorErase(CONFIG_BASE >> 12) && write(CONFIG_BASE, config.bytes, sizeof(config.bytes)) == sizeof(config.bytes);
 80025a4:	2100      	movs	r1, #0
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f817 	bl	80025da <_ZN12W25Qxx_Flash11sectorEraseEm>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00e      	beq.n	80025d0 <_ZN12W25Qxx_Flash11configResetEv+0x54>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f103 0214 	add.w	r2, r3, #20
 80025b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025bc:	2100      	movs	r1, #0
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7ff ff13 	bl	80023ea <_ZN12W25Qxx_Flash5writeEmPKhm>
 80025c4:	4603      	mov	r3, r0
 80025c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025ca:	d101      	bne.n	80025d0 <_ZN12W25Qxx_Flash11configResetEv+0x54>
 80025cc:	2301      	movs	r3, #1
 80025ce:	e000      	b.n	80025d2 <_ZN12W25Qxx_Flash11configResetEv+0x56>
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <_ZN12W25Qxx_Flash11sectorEraseEm>:

bool W25Qxx_Flash::sectorErase(uint32_t sector)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b088      	sub	sp, #32
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
 80025e2:	6039      	str	r1, [r7, #0]
	STRHAL_QSPI_Command_t cmd;
	cmd.instruction = 0x21;
 80025e4:	2321      	movs	r3, #33	; 0x21
 80025e6:	733b      	strb	r3, [r7, #12]
	cmd.instruction_size = 1;
 80025e8:	2301      	movs	r3, #1
 80025ea:	737b      	strb	r3, [r7, #13]
	cmd.addr_size = 4;
 80025ec:	2304      	movs	r3, #4
 80025ee:	753b      	strb	r3, [r7, #20]
	cmd.addr = sector << 12;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	031b      	lsls	r3, r3, #12
 80025f4:	613b      	str	r3, [r7, #16]
	cmd.alt_size = 0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	757b      	strb	r3, [r7, #21]
	cmd.dummy_size = 0;
 80025fa:	2300      	movs	r3, #0
 80025fc:	773b      	strb	r3, [r7, #28]

	if (waitForSREGFlag(0x01, false, 100) < 0)
 80025fe:	2364      	movs	r3, #100	; 0x64
 8002600:	2200      	movs	r2, #0
 8002602:	2101      	movs	r1, #1
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 f873 	bl	80026f0 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt>
 800260a:	4603      	mov	r3, r0
 800260c:	0fdb      	lsrs	r3, r3, #31
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <_ZN12W25Qxx_Flash11sectorEraseEm+0x3e>
		return false;
 8002614:	2300      	movs	r3, #0
 8002616:	e029      	b.n	800266c <_ZN12W25Qxx_Flash11sectorEraseEm+0x92>

	if (!writeEnable())
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f7ff fe20 	bl	800225e <_ZN12W25Qxx_Flash11writeEnableEv>
 800261e:	4603      	mov	r3, r0
 8002620:	f083 0301 	eor.w	r3, r3, #1
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <_ZN12W25Qxx_Flash11sectorEraseEm+0x54>
		return false;
 800262a:	2300      	movs	r3, #0
 800262c:	e01e      	b.n	800266c <_ZN12W25Qxx_Flash11sectorEraseEm+0x92>

	if (STRHAL_QSPI_Indirect_Write(&cmd, nullptr, 0, 100) != 0)
 800262e:	f107 000c 	add.w	r0, r7, #12
 8002632:	2364      	movs	r3, #100	; 0x64
 8002634:	2200      	movs	r2, #0
 8002636:	2100      	movs	r1, #0
 8002638:	f003 f984 	bl	8005944 <STRHAL_QSPI_Indirect_Write>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	bf14      	ite	ne
 8002642:	2301      	movne	r3, #1
 8002644:	2300      	moveq	r3, #0
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <_ZN12W25Qxx_Flash11sectorEraseEm+0x76>
		return false;
 800264c:	2300      	movs	r3, #0
 800264e:	e00d      	b.n	800266c <_ZN12W25Qxx_Flash11sectorEraseEm+0x92>

	if (waitForSREGFlag(0x01, false, 100) < 0)
 8002650:	2364      	movs	r3, #100	; 0x64
 8002652:	2200      	movs	r2, #0
 8002654:	2101      	movs	r1, #1
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f84a 	bl	80026f0 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt>
 800265c:	4603      	mov	r3, r0
 800265e:	0fdb      	lsrs	r3, r3, #31
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <_ZN12W25Qxx_Flash11sectorEraseEm+0x90>
		return false;
 8002666:	2300      	movs	r3, #0
 8002668:	e000      	b.n	800266c <_ZN12W25Qxx_Flash11sectorEraseEm+0x92>

	return true;
 800266a:	2301      	movs	r3, #1
}
 800266c:	4618      	mov	r0, r3
 800266e:	3720      	adds	r7, #32
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <_ZN12W25Qxx_Flash9chipEraseEv>:

bool W25Qxx_Flash::chipErase()
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b088      	sub	sp, #32
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
	STRHAL_QSPI_Command_t cmd;
	cmd.instruction = 0xC7;
 800267c:	23c7      	movs	r3, #199	; 0xc7
 800267e:	733b      	strb	r3, [r7, #12]
	cmd.instruction_size = 1;
 8002680:	2301      	movs	r3, #1
 8002682:	737b      	strb	r3, [r7, #13]
	cmd.addr_size = 0;
 8002684:	2300      	movs	r3, #0
 8002686:	753b      	strb	r3, [r7, #20]
	cmd.addr = 0;
 8002688:	2300      	movs	r3, #0
 800268a:	613b      	str	r3, [r7, #16]
	cmd.alt_size = 0;
 800268c:	2300      	movs	r3, #0
 800268e:	757b      	strb	r3, [r7, #21]
	cmd.dummy_size = 0;
 8002690:	2300      	movs	r3, #0
 8002692:	773b      	strb	r3, [r7, #28]

	if (waitForSREGFlag(0x01, false, 100) < 0)
 8002694:	2364      	movs	r3, #100	; 0x64
 8002696:	2200      	movs	r2, #0
 8002698:	2101      	movs	r1, #1
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f828 	bl	80026f0 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt>
 80026a0:	4603      	mov	r3, r0
 80026a2:	0fdb      	lsrs	r3, r3, #31
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <_ZN12W25Qxx_Flash9chipEraseEv+0x3a>
		return false;
 80026aa:	2300      	movs	r3, #0
 80026ac:	e01c      	b.n	80026e8 <_ZN12W25Qxx_Flash9chipEraseEv+0x74>

	if (!writeEnable())
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7ff fdd5 	bl	800225e <_ZN12W25Qxx_Flash11writeEnableEv>
 80026b4:	4603      	mov	r3, r0
 80026b6:	f083 0301 	eor.w	r3, r3, #1
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <_ZN12W25Qxx_Flash9chipEraseEv+0x50>
		return false;
 80026c0:	2300      	movs	r3, #0
 80026c2:	e011      	b.n	80026e8 <_ZN12W25Qxx_Flash9chipEraseEv+0x74>

	if (STRHAL_QSPI_Indirect_Write(&cmd, nullptr, 0, 100) != 0)
 80026c4:	f107 000c 	add.w	r0, r7, #12
 80026c8:	2364      	movs	r3, #100	; 0x64
 80026ca:	2200      	movs	r2, #0
 80026cc:	2100      	movs	r1, #0
 80026ce:	f003 f939 	bl	8005944 <STRHAL_QSPI_Indirect_Write>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	bf14      	ite	ne
 80026d8:	2301      	movne	r3, #1
 80026da:	2300      	moveq	r3, #0
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <_ZN12W25Qxx_Flash9chipEraseEv+0x72>
		return false;
 80026e2:	2300      	movs	r3, #0
 80026e4:	e000      	b.n	80026e8 <_ZN12W25Qxx_Flash9chipEraseEv+0x74>

	//if(waitForSREGFlag(0x01, false, 100) < 0)
	//return false;

	return true;
 80026e6:	2301      	movs	r3, #1
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3720      	adds	r7, #32
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt>:

int W25Qxx_Flash::waitForSREGFlag(uint8_t flag, bool state, uint16_t tot)
{
 80026f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80026f4:	b086      	sub	sp, #24
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
 80026fa:	4608      	mov	r0, r1
 80026fc:	4611      	mov	r1, r2
 80026fe:	461a      	mov	r2, r3
 8002700:	4603      	mov	r3, r0
 8002702:	70fb      	strb	r3, [r7, #3]
 8002704:	460b      	mov	r3, r1
 8002706:	70bb      	strb	r3, [r7, #2]
 8002708:	4613      	mov	r3, r2
 800270a:	803b      	strh	r3, [r7, #0]
	uint64_t start = STRHAL_Systick_GetTick();
 800270c:	f003 fbc0 	bl	8005e90 <STRHAL_Systick_GetTick>
 8002710:	e9c7 0104 	strd	r0, r1, [r7, #16]
	uint8_t sreg1;

	if (state)
 8002714:	78bb      	ldrb	r3, [r7, #2]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d02b      	beq.n	8002772 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0x82>
	{
		do
		{
			if (!readSREG1(sreg1))
 800271a:	f107 030f 	add.w	r3, r7, #15
 800271e:	4619      	mov	r1, r3
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f7ff fd77 	bl	8002214 <_ZNK12W25Qxx_Flash9readSREG1ERh>
 8002726:	4603      	mov	r3, r0
 8002728:	f083 0301 	eor.w	r3, r3, #1
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d002      	beq.n	8002738 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0x48>
				return -1;
 8002732:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002736:	e046      	b.n	80027c6 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0xd6>

			if (STRHAL_Systick_GetTick() - start > 100)
 8002738:	f003 fbaa 	bl	8005e90 <STRHAL_Systick_GetTick>
 800273c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002740:	ebb0 0802 	subs.w	r8, r0, r2
 8002744:	eb61 0903 	sbc.w	r9, r1, r3
 8002748:	f1b9 0f00 	cmp.w	r9, #0
 800274c:	bf08      	it	eq
 800274e:	f1b8 0f65 	cmpeq.w	r8, #101	; 0x65
 8002752:	bf2c      	ite	cs
 8002754:	2301      	movcs	r3, #1
 8002756:	2300      	movcc	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d002      	beq.n	8002764 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0x74>
				return -1;
 800275e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002762:	e030      	b.n	80027c6 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0xd6>
		} while (!(sreg1 & flag));
 8002764:	7bfa      	ldrb	r2, [r7, #15]
 8002766:	78fb      	ldrb	r3, [r7, #3]
 8002768:	4013      	ands	r3, r2
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b00      	cmp	r3, #0
 800276e:	d129      	bne.n	80027c4 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0xd4>
		do
 8002770:	e7d3      	b.n	800271a <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0x2a>
	}
	else
	{
		do
		{
			if (!readSREG1(sreg1))
 8002772:	f107 030f 	add.w	r3, r7, #15
 8002776:	4619      	mov	r1, r3
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f7ff fd4b 	bl	8002214 <_ZNK12W25Qxx_Flash9readSREG1ERh>
 800277e:	4603      	mov	r3, r0
 8002780:	f083 0301 	eor.w	r3, r3, #1
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d002      	beq.n	8002790 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0xa0>
				return -1;
 800278a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800278e:	e01a      	b.n	80027c6 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0xd6>

			if (STRHAL_Systick_GetTick() - start > 100)
 8002790:	f003 fb7e 	bl	8005e90 <STRHAL_Systick_GetTick>
 8002794:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002798:	1a84      	subs	r4, r0, r2
 800279a:	eb61 0503 	sbc.w	r5, r1, r3
 800279e:	2d00      	cmp	r5, #0
 80027a0:	bf08      	it	eq
 80027a2:	2c65      	cmpeq	r4, #101	; 0x65
 80027a4:	bf2c      	ite	cs
 80027a6:	2301      	movcs	r3, #1
 80027a8:	2300      	movcc	r3, #0
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d002      	beq.n	80027b6 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0xc6>
				return -1;
 80027b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027b4:	e007      	b.n	80027c6 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0xd6>
		} while (sreg1 & flag);
 80027b6:	7bfa      	ldrb	r2, [r7, #15]
 80027b8:	78fb      	ldrb	r3, [r7, #3]
 80027ba:	4013      	ands	r3, r2
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d000      	beq.n	80027c4 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0xd4>
		do
 80027c2:	e7d6      	b.n	8002772 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0x82>
	}

	return 0;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080027d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027d0:	480d      	ldr	r0, [pc, #52]	; (8002808 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027d2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027d4:	480d      	ldr	r0, [pc, #52]	; (800280c <LoopForever+0x6>)
  ldr r1, =_edata
 80027d6:	490e      	ldr	r1, [pc, #56]	; (8002810 <LoopForever+0xa>)
  ldr r2, =_sidata
 80027d8:	4a0e      	ldr	r2, [pc, #56]	; (8002814 <LoopForever+0xe>)
  movs r3, #0
 80027da:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80027dc:	e002      	b.n	80027e4 <LoopCopyDataInit>

080027de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027e2:	3304      	adds	r3, #4

080027e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027e8:	d3f9      	bcc.n	80027de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ea:	4a0b      	ldr	r2, [pc, #44]	; (8002818 <LoopForever+0x12>)
  ldr r4, =_ebss
 80027ec:	4c0b      	ldr	r4, [pc, #44]	; (800281c <LoopForever+0x16>)
  movs r3, #0
 80027ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027f0:	e001      	b.n	80027f6 <LoopFillZerobss>

080027f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027f4:	3204      	adds	r2, #4

080027f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027f8:	d3fb      	bcc.n	80027f2 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027fa:	f7fe fc47 	bl	800108c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027fe:	f004 f99d 	bl	8006b3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002802:	f7fe fba5 	bl	8000f50 <main>

08002806 <LoopForever>:

LoopForever:
    b LoopForever
 8002806:	e7fe      	b.n	8002806 <LoopForever>
  ldr   r0, =_estack
 8002808:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 800280c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002810:	20000784 	.word	0x20000784
  ldr r2, =_sidata
 8002814:	08007f50 	.word	0x08007f50
  ldr r2, =_sbss
 8002818:	20000788 	.word	0x20000788
  ldr r4, =_ebss
 800281c:	20000b14 	.word	0x20000b14

08002820 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002820:	e7fe      	b.n	8002820 <ADC1_2_IRQHandler>

08002822 <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
 800282a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002830:	f023 020f 	bic.w	r2, r3, #15
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	2b01      	cmp	r3, #1
 800285a:	d101      	bne.n	8002860 <LL_ADC_IsEnabled+0x18>
 800285c:	2301      	movs	r3, #1
 800285e:	e000      	b.n	8002862 <LL_ADC_IsEnabled+0x1a>
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
	...

08002870 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8002870:	b590      	push	{r4, r7, lr}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800287a:	2300      	movs	r3, #0
 800287c:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a27      	ldr	r2, [pc, #156]	; (8002920 <LL_ADC_CommonInit+0xb0>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d10f      	bne.n	80028a6 <LL_ADC_CommonInit+0x36>
 8002886:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800288a:	f7ff ffdd 	bl	8002848 <LL_ADC_IsEnabled>
 800288e:	4604      	mov	r4, r0
 8002890:	4824      	ldr	r0, [pc, #144]	; (8002924 <LL_ADC_CommonInit+0xb4>)
 8002892:	f7ff ffd9 	bl	8002848 <LL_ADC_IsEnabled>
 8002896:	4603      	mov	r3, r0
 8002898:	4323      	orrs	r3, r4
 800289a:	2b00      	cmp	r3, #0
 800289c:	bf0c      	ite	eq
 800289e:	2301      	moveq	r3, #1
 80028a0:	2300      	movne	r3, #0
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	e012      	b.n	80028cc <LL_ADC_CommonInit+0x5c>
 80028a6:	4820      	ldr	r0, [pc, #128]	; (8002928 <LL_ADC_CommonInit+0xb8>)
 80028a8:	f7ff ffce 	bl	8002848 <LL_ADC_IsEnabled>
 80028ac:	4604      	mov	r4, r0
 80028ae:	481f      	ldr	r0, [pc, #124]	; (800292c <LL_ADC_CommonInit+0xbc>)
 80028b0:	f7ff ffca 	bl	8002848 <LL_ADC_IsEnabled>
 80028b4:	4603      	mov	r3, r0
 80028b6:	431c      	orrs	r4, r3
 80028b8:	481d      	ldr	r0, [pc, #116]	; (8002930 <LL_ADC_CommonInit+0xc0>)
 80028ba:	f7ff ffc5 	bl	8002848 <LL_ADC_IsEnabled>
 80028be:	4603      	mov	r3, r0
 80028c0:	4323      	orrs	r3, r4
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	bf0c      	ite	eq
 80028c6:	2301      	moveq	r3, #1
 80028c8:	2300      	movne	r3, #0
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d020      	beq.n	8002912 <LL_ADC_CommonInit+0xa2>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d012      	beq.n	80028fe <LL_ADC_CommonInit+0x8e>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	4b15      	ldr	r3, [pc, #84]	; (8002934 <LL_ADC_CommonInit+0xc4>)
 80028de:	4013      	ands	r3, r2
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	6811      	ldr	r1, [r2, #0]
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	6852      	ldr	r2, [r2, #4]
 80028e8:	4311      	orrs	r1, r2
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	6892      	ldr	r2, [r2, #8]
 80028ee:	4311      	orrs	r1, r2
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	68d2      	ldr	r2, [r2, #12]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	609a      	str	r2, [r3, #8]
 80028fc:	e00b      	b.n	8002916 <LL_ADC_CommonInit+0xa6>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	689a      	ldr	r2, [r3, #8]
 8002902:	4b0c      	ldr	r3, [pc, #48]	; (8002934 <LL_ADC_CommonInit+0xc4>)
 8002904:	4013      	ands	r3, r2
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	6812      	ldr	r2, [r2, #0]
 800290a:	431a      	orrs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	609a      	str	r2, [r3, #8]
 8002910:	e001      	b.n	8002916 <LL_ADC_CommonInit+0xa6>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8002916:	7bfb      	ldrb	r3, [r7, #15]
}
 8002918:	4618      	mov	r0, r3
 800291a:	3714      	adds	r7, #20
 800291c:	46bd      	mov	sp, r7
 800291e:	bd90      	pop	{r4, r7, pc}
 8002920:	50000300 	.word	0x50000300
 8002924:	50000100 	.word	0x50000100
 8002928:	50000400 	.word	0x50000400
 800292c:	50000500 	.word	0x50000500
 8002930:	50000600 	.word	0x50000600
 8002934:	ffc030e0 	.word	0xffc030e0

08002938 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002942:	2300      	movs	r3, #0
 8002944:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7ff ff7e 	bl	8002848 <LL_ADC_IsEnabled>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d111      	bne.n	8002976 <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800295a:	f023 0318 	bic.w	r3, r3, #24
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	6811      	ldr	r1, [r2, #0]
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	6852      	ldr	r2, [r2, #4]
 8002966:	4311      	orrs	r1, r2
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	6892      	ldr	r2, [r2, #8]
 800296c:	430a      	orrs	r2, r1
 800296e:	431a      	orrs	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	60da      	str	r2, [r3, #12]
 8002974:	e001      	b.n	800297a <LL_ADC_Init+0x42>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800297a:	7bfb      	ldrb	r3, [r7, #15]
}
 800297c:	4618      	mov	r0, r3
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800298e:	2300      	movs	r3, #0
 8002990:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7ff ff58 	bl	8002848 <LL_ADC_IsEnabled>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d132      	bne.n	8002a04 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d015      	beq.n	80029d2 <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	4b1a      	ldr	r3, [pc, #104]	; (8002a14 <LL_ADC_REG_Init+0x90>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	6811      	ldr	r1, [r2, #0]
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	6892      	ldr	r2, [r2, #8]
 80029b6:	4311      	orrs	r1, r2
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	68d2      	ldr	r2, [r2, #12]
 80029bc:	4311      	orrs	r1, r2
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	6912      	ldr	r2, [r2, #16]
 80029c2:	4311      	orrs	r1, r2
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	6952      	ldr	r2, [r2, #20]
 80029c8:	430a      	orrs	r2, r1
 80029ca:	431a      	orrs	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	60da      	str	r2, [r3, #12]
 80029d0:	e011      	b.n	80029f6 <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	68da      	ldr	r2, [r3, #12]
 80029d6:	4b0f      	ldr	r3, [pc, #60]	; (8002a14 <LL_ADC_REG_Init+0x90>)
 80029d8:	4013      	ands	r3, r2
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	6811      	ldr	r1, [r2, #0]
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	68d2      	ldr	r2, [r2, #12]
 80029e2:	4311      	orrs	r1, r2
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	6912      	ldr	r2, [r2, #16]
 80029e8:	4311      	orrs	r1, r2
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	6952      	ldr	r2, [r2, #20]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	431a      	orrs	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	4619      	mov	r1, r3
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f7ff ff10 	bl	8002822 <LL_ADC_REG_SetSequencerLength>
 8002a02:	e001      	b.n	8002a08 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	fff0c01c 	.word	0xfff0c01c

08002a18 <LL_DMA_ConfigTransfer>:
  *         @arg @ref LL_DMA_MDATAALIGN_BYTE or @ref LL_DMA_MDATAALIGN_HALFWORD or @ref LL_DMA_MDATAALIGN_WORD
  *         @arg @ref LL_DMA_PRIORITY_LOW or @ref LL_DMA_PRIORITY_MEDIUM or @ref LL_DMA_PRIORITY_HIGH or @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigTransfer(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Configuration)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b087      	sub	sp, #28
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8002a28:	4a0e      	ldr	r2, [pc, #56]	; (8002a64 <LL_DMA_ConfigTransfer+0x4c>)
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	461a      	mov	r2, r3
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	4413      	add	r3, r2
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a40:	4908      	ldr	r1, [pc, #32]	; (8002a64 <LL_DMA_ConfigTransfer+0x4c>)
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	440a      	add	r2, r1
 8002a46:	7812      	ldrb	r2, [r2, #0]
 8002a48:	4611      	mov	r1, r2
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	440a      	add	r2, r1
 8002a4e:	4611      	mov	r1, r2
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM | DMA_CCR_CIRC | DMA_CCR_PINC | DMA_CCR_MINC | DMA_CCR_PSIZE | DMA_CCR_MSIZE | DMA_CCR_PL,
             Configuration);
}
 8002a56:	bf00      	nop
 8002a58:	371c      	adds	r7, #28
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	08006f24 	.word	0x08006f24

08002a68 <LL_DMA_SetDataLength>:
  *         (*) Not on all G4 devices
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b087      	sub	sp, #28
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 8002a78:	4a0d      	ldr	r2, [pc, #52]	; (8002ab0 <LL_DMA_SetDataLength+0x48>)
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	461a      	mov	r2, r3
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	4413      	add	r3, r2
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	0c1b      	lsrs	r3, r3, #16
 8002a8a:	041b      	lsls	r3, r3, #16
 8002a8c:	4908      	ldr	r1, [pc, #32]	; (8002ab0 <LL_DMA_SetDataLength+0x48>)
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	440a      	add	r2, r1
 8002a92:	7812      	ldrb	r2, [r2, #0]
 8002a94:	4611      	mov	r1, r2
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	440a      	add	r2, r1
 8002a9a:	4611      	mov	r1, r2
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 8002aa2:	bf00      	nop
 8002aa4:	371c      	adds	r7, #28
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	08006f24 	.word	0x08006f24

08002ab4 <LL_DMA_SetMemoryAddress>:
  *         (*) Not on all G4 devices
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b087      	sub	sp, #28
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 8002ac4:	4a07      	ldr	r2, [pc, #28]	; (8002ae4 <LL_DMA_SetMemoryAddress+0x30>)
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	4413      	add	r3, r2
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	461a      	mov	r2, r3
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	60d3      	str	r3, [r2, #12]
}
 8002ad8:	bf00      	nop
 8002ada:	371c      	adds	r7, #28
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	08006f24 	.word	0x08006f24

08002ae8 <LL_DMA_SetPeriphAddress>:
  *         (*) Not on all G4 devices
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b087      	sub	sp, #28
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 8002af8:	4a07      	ldr	r2, [pc, #28]	; (8002b18 <LL_DMA_SetPeriphAddress+0x30>)
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	4413      	add	r3, r2
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	461a      	mov	r2, r3
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	4413      	add	r3, r2
 8002b06:	461a      	mov	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6093      	str	r3, [r2, #8]
}
 8002b0c:	bf00      	nop
 8002b0e:	371c      	adds	r7, #28
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	08006f24 	.word	0x08006f24

08002b1c <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD1_TX
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b087      	sub	sp, #28
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	0a9b      	lsrs	r3, r3, #10
 8002b2c:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8002b30:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 8002b38:	68ba      	ldr	r2, [r7, #8]
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b44:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	4413      	add	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b5a:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	430a      	orrs	r2, r1
 8002b62:	601a      	str	r2, [r3, #0]
}
 8002b64:	bf00      	nop
 8002b66:	371c      	adds	r7, #28
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <LL_DMA_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
   * - MemoryOrM2MDstIncMode:  DMA_CCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_CCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_CCR_MSIZE[1:0] bits
   * - Priority:               DMA_CCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689a      	ldr	r2, [r3, #8]
                        DMA_InitStruct->Mode                   | \
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68db      	ldr	r3, [r3, #12]
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 8002b84:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691b      	ldr	r3, [r3, #16]
                        DMA_InitStruct->Mode                   | \
 8002b8a:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	695b      	ldr	r3, [r3, #20]
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 8002b90:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	699b      	ldr	r3, [r3, #24]
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 8002b96:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstDataSize | \
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	69db      	ldr	r3, [r3, #28]
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 8002b9c:	431a      	orrs	r2, r3
                        DMA_InitStruct->Priority);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	68b9      	ldr	r1, [r7, #8]
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f7ff ff35 	bl	8002a18 <LL_DMA_ConfigTransfer>

  /*-------------------------- DMAx CMAR Configuration -------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress: DMA_CMAR_MA[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Channel, DMA_InitStruct->MemoryOrM2MDstAddress);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	68b9      	ldr	r1, [r7, #8]
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f7ff ff7c 	bl	8002ab4 <LL_DMA_SetMemoryAddress>

  /*-------------------------- DMAx CPAR Configuration -------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress: DMA_CPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Channel, DMA_InitStruct->PeriphOrM2MSrcAddress);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	68b9      	ldr	r1, [r7, #8]
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f7ff ff8f 	bl	8002ae8 <LL_DMA_SetPeriphAddress>

  /*--------------------------- DMAx CNDTR Configuration -----------------------
   * Configure the peripheral base address with parameter :
   * - NbData: DMA_CNDTR_NDT[15:0] bits
   */
  LL_DMA_SetDataLength(DMAx, Channel, DMA_InitStruct->NbData);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	68b9      	ldr	r1, [r7, #8]
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f7ff ff48 	bl	8002a68 <LL_DMA_SetDataLength>

  /*--------------------------- DMAMUXx CCR Configuration ----------------------
   * Configure the DMA request for DMA Channels on DMAMUX Channel x with parameter :
   * - PeriphRequest: DMA_CxCR[7:0] bits
   */
  LL_DMA_SetPeriphRequest(DMAx, Channel, DMA_InitStruct->PeriphRequest);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bdc:	461a      	mov	r2, r3
 8002bde:	68b9      	ldr	r1, [r7, #8]
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f7ff ff9b 	bl	8002b1c <LL_DMA_SetPeriphRequest>

  return (uint32_t)SUCCESS;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <LL_GPIO_SetPinMode>:
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b08b      	sub	sp, #44	; 0x2c
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	fa93 f3a3 	rbit	r3, r3
 8002c0a:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8002c16:	2320      	movs	r3, #32
 8002c18:	e003      	b.n	8002c22 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	fab3 f383 	clz	r3, r3
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	2103      	movs	r1, #3
 8002c26:	fa01 f303 	lsl.w	r3, r1, r3
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	401a      	ands	r2, r3
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	fa93 f3a3 	rbit	r3, r3
 8002c38:	61fb      	str	r3, [r7, #28]
  return result;
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d101      	bne.n	8002c48 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8002c44:	2320      	movs	r3, #32
 8002c46:	e003      	b.n	8002c50 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8002c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4a:	fab3 f383 	clz	r3, r3
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	fa01 f303 	lsl.w	r3, r1, r3
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	601a      	str	r2, [r3, #0]
}
 8002c5e:	bf00      	nop
 8002c60:	372c      	adds	r7, #44	; 0x2c
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <LL_GPIO_SetPinOutputType>:
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b085      	sub	sp, #20
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	60f8      	str	r0, [r7, #12]
 8002c72:	60b9      	str	r1, [r7, #8]
 8002c74:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	401a      	ands	r2, r3
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	fb01 f303 	mul.w	r3, r1, r3
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	605a      	str	r2, [r3, #4]
}
 8002c8e:	bf00      	nop
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <LL_GPIO_SetPinSpeed>:
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b08b      	sub	sp, #44	; 0x2c
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	60f8      	str	r0, [r7, #12]
 8002ca2:	60b9      	str	r1, [r7, #8]
 8002ca4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	fa93 f3a3 	rbit	r3, r3
 8002cb4:	613b      	str	r3, [r7, #16]
  return result;
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8002cc0:	2320      	movs	r3, #32
 8002cc2:	e003      	b.n	8002ccc <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	fab3 f383 	clz	r3, r3
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	2103      	movs	r1, #3
 8002cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	401a      	ands	r2, r3
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	fa93 f3a3 	rbit	r3, r3
 8002ce2:	61fb      	str	r3, [r7, #28]
  return result;
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8002cee:	2320      	movs	r3, #32
 8002cf0:	e003      	b.n	8002cfa <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	fab3 f383 	clz	r3, r3
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002d02:	431a      	orrs	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	609a      	str	r2, [r3, #8]
}
 8002d08:	bf00      	nop
 8002d0a:	372c      	adds	r7, #44	; 0x2c
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <LL_GPIO_SetPinPull>:
{
 8002d14:	b480      	push	{r7}
 8002d16:	b08b      	sub	sp, #44	; 0x2c
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	68da      	ldr	r2, [r3, #12]
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	fa93 f3a3 	rbit	r3, r3
 8002d2e:	613b      	str	r3, [r7, #16]
  return result;
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8002d3a:	2320      	movs	r3, #32
 8002d3c:	e003      	b.n	8002d46 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	fab3 f383 	clz	r3, r3
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	2103      	movs	r1, #3
 8002d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	401a      	ands	r2, r3
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	fa93 f3a3 	rbit	r3, r3
 8002d5c:	61fb      	str	r3, [r7, #28]
  return result;
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8002d68:	2320      	movs	r3, #32
 8002d6a:	e003      	b.n	8002d74 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6e:	fab3 f383 	clz	r3, r3
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	60da      	str	r2, [r3, #12]
}
 8002d82:	bf00      	nop
 8002d84:	372c      	adds	r7, #44	; 0x2c
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <LL_GPIO_SetAFPin_0_7>:
{
 8002d8e:	b480      	push	{r7}
 8002d90:	b08b      	sub	sp, #44	; 0x2c
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	60f8      	str	r0, [r7, #12]
 8002d96:	60b9      	str	r1, [r7, #8]
 8002d98:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6a1a      	ldr	r2, [r3, #32]
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	fa93 f3a3 	rbit	r3, r3
 8002da8:	613b      	str	r3, [r7, #16]
  return result;
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8002db4:	2320      	movs	r3, #32
 8002db6:	e003      	b.n	8002dc0 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	fab3 f383 	clz	r3, r3
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	210f      	movs	r1, #15
 8002dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	401a      	ands	r2, r3
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd0:	6a3b      	ldr	r3, [r7, #32]
 8002dd2:	fa93 f3a3 	rbit	r3, r3
 8002dd6:	61fb      	str	r3, [r7, #28]
  return result;
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8002de2:	2320      	movs	r3, #32
 8002de4:	e003      	b.n	8002dee <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	fab3 f383 	clz	r3, r3
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	6879      	ldr	r1, [r7, #4]
 8002df2:	fa01 f303 	lsl.w	r3, r1, r3
 8002df6:	431a      	orrs	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	621a      	str	r2, [r3, #32]
}
 8002dfc:	bf00      	nop
 8002dfe:	372c      	adds	r7, #44	; 0x2c
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <LL_GPIO_SetAFPin_8_15>:
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b08b      	sub	sp, #44	; 0x2c
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	0a1b      	lsrs	r3, r3, #8
 8002e1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	fa93 f3a3 	rbit	r3, r3
 8002e24:	613b      	str	r3, [r7, #16]
  return result;
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8002e30:	2320      	movs	r3, #32
 8002e32:	e003      	b.n	8002e3c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	fab3 f383 	clz	r3, r3
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	210f      	movs	r1, #15
 8002e40:	fa01 f303 	lsl.w	r3, r1, r3
 8002e44:	43db      	mvns	r3, r3
 8002e46:	401a      	ands	r2, r3
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	0a1b      	lsrs	r3, r3, #8
 8002e4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	fa93 f3a3 	rbit	r3, r3
 8002e54:	61fb      	str	r3, [r7, #28]
  return result;
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d101      	bne.n	8002e64 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8002e60:	2320      	movs	r3, #32
 8002e62:	e003      	b.n	8002e6c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8002e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e66:	fab3 f383 	clz	r3, r3
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	fa01 f303 	lsl.w	r3, r1, r3
 8002e74:	431a      	orrs	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002e7a:	bf00      	nop
 8002e7c:	372c      	adds	r7, #44	; 0x2c
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b088      	sub	sp, #32
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
 8002e8e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	fa93 f3a3 	rbit	r3, r3
 8002e9c:	60fb      	str	r3, [r7, #12]
  return result;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <LL_GPIO_Init+0x26>
    return 32U;
 8002ea8:	2320      	movs	r3, #32
 8002eaa:	e003      	b.n	8002eb4 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	fab3 f383 	clz	r3, r3
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002eb6:	e048      	b.n	8002f4a <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d03a      	beq.n	8002f44 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d003      	beq.n	8002ede <LL_GPIO_Init+0x58>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d10e      	bne.n	8002efc <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	69b9      	ldr	r1, [r7, #24]
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7ff fed7 	bl	8002c9a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	6819      	ldr	r1, [r3, #0]
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7ff feb7 	bl	8002c6a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	461a      	mov	r2, r3
 8002f02:	69b9      	ldr	r1, [r7, #24]
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f7ff ff05 	bl	8002d14 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d111      	bne.n	8002f36 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	2bff      	cmp	r3, #255	; 0xff
 8002f16:	d807      	bhi.n	8002f28 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	69b9      	ldr	r1, [r7, #24]
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f7ff ff34 	bl	8002d8e <LL_GPIO_SetAFPin_0_7>
 8002f26:	e006      	b.n	8002f36 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	69b9      	ldr	r1, [r7, #24]
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f7ff ff69 	bl	8002e08 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	69b9      	ldr	r1, [r7, #24]
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7ff fe56 	bl	8002bf0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	3301      	adds	r3, #1
 8002f48:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	fa22 f303 	lsr.w	r3, r2, r3
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1af      	bne.n	8002eb8 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3720      	adds	r7, #32
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
	...

08002f64 <LL_APB1_GRP1_ForceReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_ForceReset(uint32_t Periphs)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8002f6c:	4b05      	ldr	r3, [pc, #20]	; (8002f84 <LL_APB1_GRP1_ForceReset+0x20>)
 8002f6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f70:	4904      	ldr	r1, [pc, #16]	; (8002f84 <LL_APB1_GRP1_ForceReset+0x20>)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	638b      	str	r3, [r1, #56]	; 0x38
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	40021000 	.word	0x40021000

08002f88 <LL_APB1_GRP1_ReleaseReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_ReleaseReset(uint32_t Periphs)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8002f90:	4b06      	ldr	r3, [pc, #24]	; (8002fac <LL_APB1_GRP1_ReleaseReset+0x24>)
 8002f92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	43db      	mvns	r3, r3
 8002f98:	4904      	ldr	r1, [pc, #16]	; (8002fac <LL_APB1_GRP1_ReleaseReset+0x24>)
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	638b      	str	r3, [r1, #56]	; 0x38
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	40021000 	.word	0x40021000

08002fb0 <LL_APB2_GRP1_ForceReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8002fb8:	4b05      	ldr	r3, [pc, #20]	; (8002fd0 <LL_APB2_GRP1_ForceReset+0x20>)
 8002fba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fbc:	4904      	ldr	r1, [pc, #16]	; (8002fd0 <LL_APB2_GRP1_ForceReset+0x20>)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	640b      	str	r3, [r1, #64]	; 0x40
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	40021000 	.word	0x40021000

08002fd4 <LL_APB2_GRP1_ReleaseReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8002fdc:	4b06      	ldr	r3, [pc, #24]	; (8002ff8 <LL_APB2_GRP1_ReleaseReset+0x24>)
 8002fde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	43db      	mvns	r3, r3
 8002fe4:	4904      	ldr	r1, [pc, #16]	; (8002ff8 <LL_APB2_GRP1_ReleaseReset+0x24>)
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	640b      	str	r3, [r1, #64]	; 0x40
}
 8002fea:	bf00      	nop
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	40021000 	.word	0x40021000

08002ffc <LL_SPI_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: SPI registers are de-initialized
  *          - ERROR: SPI registers are not de-initialized
  */
ErrorStatus LL_SPI_DeInit(SPI_TypeDef *SPIx)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  ErrorStatus status = ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(SPIx));

#if defined(SPI1)
  if (SPIx == SPI1)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a1e      	ldr	r2, [pc, #120]	; (8003084 <LL_SPI_DeInit+0x88>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d109      	bne.n	8003024 <LL_SPI_DeInit+0x28>
  {
    /* Force reset of SPI clock */
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_SPI1);
 8003010:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003014:	f7ff ffcc 	bl	8002fb0 <LL_APB2_GRP1_ForceReset>

    /* Release reset of SPI clock */
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_SPI1);
 8003018:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800301c:	f7ff ffda 	bl	8002fd4 <LL_APB2_GRP1_ReleaseReset>

    status = SUCCESS;
 8003020:	2300      	movs	r3, #0
 8003022:	73fb      	strb	r3, [r7, #15]
  }
#endif /* SPI1 */
#if defined(SPI2)
  if (SPIx == SPI2)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a18      	ldr	r2, [pc, #96]	; (8003088 <LL_SPI_DeInit+0x8c>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d109      	bne.n	8003040 <LL_SPI_DeInit+0x44>
  {
    /* Force reset of SPI clock */
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_SPI2);
 800302c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003030:	f7ff ff98 	bl	8002f64 <LL_APB1_GRP1_ForceReset>

    /* Release reset of SPI clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_SPI2);
 8003034:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003038:	f7ff ffa6 	bl	8002f88 <LL_APB1_GRP1_ReleaseReset>

    status = SUCCESS;
 800303c:	2300      	movs	r3, #0
 800303e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* SPI2 */
#if defined(SPI3)
  if (SPIx == SPI3)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a12      	ldr	r2, [pc, #72]	; (800308c <LL_SPI_DeInit+0x90>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d109      	bne.n	800305c <LL_SPI_DeInit+0x60>
  {
    /* Force reset of SPI clock */
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_SPI3);
 8003048:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800304c:	f7ff ff8a 	bl	8002f64 <LL_APB1_GRP1_ForceReset>

    /* Release reset of SPI clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_SPI3);
 8003050:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003054:	f7ff ff98 	bl	8002f88 <LL_APB1_GRP1_ReleaseReset>

    status = SUCCESS;
 8003058:	2300      	movs	r3, #0
 800305a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* SPI3 */
#if defined(SPI4)
  if (SPIx == SPI4)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a0c      	ldr	r2, [pc, #48]	; (8003090 <LL_SPI_DeInit+0x94>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d109      	bne.n	8003078 <LL_SPI_DeInit+0x7c>
  {
    /* Force reset of SPI clock */
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_SPI4);
 8003064:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003068:	f7ff ffa2 	bl	8002fb0 <LL_APB2_GRP1_ForceReset>

    /* Release reset of SPI clock */
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_SPI4);
 800306c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003070:	f7ff ffb0 	bl	8002fd4 <LL_APB2_GRP1_ReleaseReset>

    status = SUCCESS;
 8003074:	2300      	movs	r3, #0
 8003076:	73fb      	strb	r3, [r7, #15]
  }
#endif /* SPI4 */

  return status;
 8003078:	7bfb      	ldrb	r3, [r7, #15]
}
 800307a:	4618      	mov	r0, r3
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	40013000 	.word	0x40013000
 8003088:	40003800 	.word	0x40003800
 800308c:	40003c00 	.word	0x40003c00
 8003090:	40013c00 	.word	0x40013c00

08003094 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255 or 65535 for advanced timer.
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	631a      	str	r2, [r3, #48]	; 0x30
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	f043 0201 	orr.w	r2, r3, #1
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	615a      	str	r2, [r3, #20]
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a43      	ldr	r2, [pc, #268]	; (8003228 <LL_TIM_Init+0x120>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d017      	beq.n	8003150 <LL_TIM_Init+0x48>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003126:	d013      	beq.n	8003150 <LL_TIM_Init+0x48>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a40      	ldr	r2, [pc, #256]	; (800322c <LL_TIM_Init+0x124>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d00f      	beq.n	8003150 <LL_TIM_Init+0x48>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a3f      	ldr	r2, [pc, #252]	; (8003230 <LL_TIM_Init+0x128>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d00b      	beq.n	8003150 <LL_TIM_Init+0x48>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a3e      	ldr	r2, [pc, #248]	; (8003234 <LL_TIM_Init+0x12c>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d007      	beq.n	8003150 <LL_TIM_Init+0x48>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a3d      	ldr	r2, [pc, #244]	; (8003238 <LL_TIM_Init+0x130>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d003      	beq.n	8003150 <LL_TIM_Init+0x48>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a3c      	ldr	r2, [pc, #240]	; (800323c <LL_TIM_Init+0x134>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d106      	bne.n	800315e <LL_TIM_Init+0x56>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	4313      	orrs	r3, r2
 800315c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a31      	ldr	r2, [pc, #196]	; (8003228 <LL_TIM_Init+0x120>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d023      	beq.n	80031ae <LL_TIM_Init+0xa6>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800316c:	d01f      	beq.n	80031ae <LL_TIM_Init+0xa6>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a2e      	ldr	r2, [pc, #184]	; (800322c <LL_TIM_Init+0x124>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d01b      	beq.n	80031ae <LL_TIM_Init+0xa6>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a2d      	ldr	r2, [pc, #180]	; (8003230 <LL_TIM_Init+0x128>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d017      	beq.n	80031ae <LL_TIM_Init+0xa6>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a2c      	ldr	r2, [pc, #176]	; (8003234 <LL_TIM_Init+0x12c>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d013      	beq.n	80031ae <LL_TIM_Init+0xa6>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a2b      	ldr	r2, [pc, #172]	; (8003238 <LL_TIM_Init+0x130>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d00f      	beq.n	80031ae <LL_TIM_Init+0xa6>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a2b      	ldr	r2, [pc, #172]	; (8003240 <LL_TIM_Init+0x138>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d00b      	beq.n	80031ae <LL_TIM_Init+0xa6>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a2a      	ldr	r2, [pc, #168]	; (8003244 <LL_TIM_Init+0x13c>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d007      	beq.n	80031ae <LL_TIM_Init+0xa6>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a29      	ldr	r2, [pc, #164]	; (8003248 <LL_TIM_Init+0x140>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d003      	beq.n	80031ae <LL_TIM_Init+0xa6>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a24      	ldr	r2, [pc, #144]	; (800323c <LL_TIM_Init+0x134>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d106      	bne.n	80031bc <LL_TIM_Init+0xb4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	4619      	mov	r1, r3
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f7ff ff71 	bl	80030b0 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	881b      	ldrh	r3, [r3, #0]
 80031d2:	4619      	mov	r1, r3
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f7ff ff5d 	bl	8003094 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a12      	ldr	r2, [pc, #72]	; (8003228 <LL_TIM_Init+0x120>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d013      	beq.n	800320a <LL_TIM_Init+0x102>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a14      	ldr	r2, [pc, #80]	; (8003238 <LL_TIM_Init+0x130>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d00f      	beq.n	800320a <LL_TIM_Init+0x102>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a14      	ldr	r2, [pc, #80]	; (8003240 <LL_TIM_Init+0x138>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d00b      	beq.n	800320a <LL_TIM_Init+0x102>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a13      	ldr	r2, [pc, #76]	; (8003244 <LL_TIM_Init+0x13c>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d007      	beq.n	800320a <LL_TIM_Init+0x102>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a12      	ldr	r2, [pc, #72]	; (8003248 <LL_TIM_Init+0x140>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d003      	beq.n	800320a <LL_TIM_Init+0x102>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a0d      	ldr	r2, [pc, #52]	; (800323c <LL_TIM_Init+0x134>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d105      	bne.n	8003216 <LL_TIM_Init+0x10e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	4619      	mov	r1, r3
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f7ff ff5b 	bl	80030cc <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f7ff ff66 	bl	80030e8 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	40012c00 	.word	0x40012c00
 800322c:	40000400 	.word	0x40000400
 8003230:	40000800 	.word	0x40000800
 8003234:	40000c00 	.word	0x40000c00
 8003238:	40013400 	.word	0x40013400
 800323c:	40015000 	.word	0x40015000
 8003240:	40014000 	.word	0x40014000
 8003244:	40014400 	.word	0x40014400
 8003248:	40014800 	.word	0x40014800

0800324c <LL_PWR_GetRegulVoltageScaling>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_VOS));
 8003250:	4b04      	ldr	r3, [pc, #16]	; (8003264 <LL_PWR_GetRegulVoltageScaling+0x18>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003258:	4618      	mov	r0, r3
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	40007000 	.word	0x40007000

08003268 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8003270:	4b06      	ldr	r3, [pc, #24]	; (800328c <LL_FLASH_SetLatency+0x24>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f023 020f 	bic.w	r2, r3, #15
 8003278:	4904      	ldr	r1, [pc, #16]	; (800328c <LL_FLASH_SetLatency+0x24>)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4313      	orrs	r3, r2
 800327e:	600b      	str	r3, [r1, #0]
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	40022000 	.word	0x40022000

08003290 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8003294:	4b04      	ldr	r3, [pc, #16]	; (80032a8 <LL_FLASH_GetLatency+0x18>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 030f 	and.w	r3, r3, #15
}
 800329c:	4618      	mov	r0, r3
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	40022000 	.word	0x40022000

080032ac <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80032be:	4a07      	ldr	r2, [pc, #28]	; (80032dc <LL_InitTick+0x30>)
 80032c0:	3b01      	subs	r3, #1
 80032c2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80032c4:	4b05      	ldr	r3, [pc, #20]	; (80032dc <LL_InitTick+0x30>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032ca:	4b04      	ldr	r3, [pc, #16]	; (80032dc <LL_InitTick+0x30>)
 80032cc:	2205      	movs	r2, #5
 80032ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	e000e010 	.word	0xe000e010

080032e0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80032e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f7ff ffdd 	bl	80032ac <LL_InitTick>
}
 80032f2:	bf00      	nop
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
	...

080032fc <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8003304:	4b10      	ldr	r3, [pc, #64]	; (8003348 <LL_mDelay+0x4c>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay; /* MISRAC2012-Rule-17.8 */
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800330a:	68bb      	ldr	r3, [r7, #8]
  tmpDelay = Delay;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	60fb      	str	r3, [r7, #12]
  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003316:	d00c      	beq.n	8003332 <LL_mDelay+0x36>
  {
    tmpDelay++;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	3301      	adds	r3, #1
 800331c:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 800331e:	e008      	b.n	8003332 <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003320:	4b09      	ldr	r3, [pc, #36]	; (8003348 <LL_mDelay+0x4c>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d002      	beq.n	8003332 <LL_mDelay+0x36>
    {
      tmpDelay--;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	3b01      	subs	r3, #1
 8003330:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1f3      	bne.n	8003320 <LL_mDelay+0x24>
    }
  }
}
 8003338:	bf00      	nop
 800333a:	bf00      	nop
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	e000e010 	.word	0xe000e010

0800334c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003354:	4a04      	ldr	r2, [pc, #16]	; (8003368 <LL_SetSystemCoreClock+0x1c>)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6013      	str	r3, [r2, #0]
}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	20000000 	.word	0x20000000

0800336c <LL_SetFlashLatency>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Latency has been modified
  *          - ERROR: Latency cannot be modified
  */
ErrorStatus LL_SetFlashLatency(uint32_t HCLKFrequency)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t timeout;
  uint32_t getlatency;
  ErrorStatus status = SUCCESS;
 8003374:	2300      	movs	r3, #0
 8003376:	74fb      	strb	r3, [r7, #19]

  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8003378:	2300      	movs	r3, #0
 800337a:	60fb      	str	r3, [r7, #12]

  /* Frequency cannot be equal to 0 or greater than max clock */
  if((HCLKFrequency == 0U) || (HCLKFrequency > UTILS_SCALE1_LATENCY9_FREQ))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <LL_SetFlashLatency+0x1e>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a38      	ldr	r2, [pc, #224]	; (8003468 <LL_SetFlashLatency+0xfc>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d902      	bls.n	8003390 <LL_SetFlashLatency+0x24>
  {
    status = ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	74fb      	strb	r3, [r7, #19]
 800338e:	e065      	b.n	800345c <LL_SetFlashLatency+0xf0>
  }
  else
  {
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 8003390:	f7ff ff5c 	bl	800324c <LL_PWR_GetRegulVoltageScaling>
 8003394:	4603      	mov	r3, r0
 8003396:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800339a:	d137      	bne.n	800340c <LL_SetFlashLatency+0xa0>
    {
      if(HCLKFrequency > UTILS_SCALE1_LATENCY8_FREQ)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a33      	ldr	r2, [pc, #204]	; (800346c <LL_SetFlashLatency+0x100>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d902      	bls.n	80033aa <LL_SetFlashLatency+0x3e>
      {
        /* 160 < HCLK <= 170 => 8WS (9 CPU cycles) */
        latency = LL_FLASH_LATENCY_8;
 80033a4:	2308      	movs	r3, #8
 80033a6:	60fb      	str	r3, [r7, #12]
 80033a8:	e03d      	b.n	8003426 <LL_SetFlashLatency+0xba>
      }
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY7_FREQ)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a30      	ldr	r2, [pc, #192]	; (8003470 <LL_SetFlashLatency+0x104>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d902      	bls.n	80033b8 <LL_SetFlashLatency+0x4c>
      {
        /* 140 < HCLK <= 160 => 7WS (8 CPU cycles) */
        latency = LL_FLASH_LATENCY_7;
 80033b2:	2307      	movs	r3, #7
 80033b4:	60fb      	str	r3, [r7, #12]
 80033b6:	e036      	b.n	8003426 <LL_SetFlashLatency+0xba>
      }
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY6_FREQ)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a2e      	ldr	r2, [pc, #184]	; (8003474 <LL_SetFlashLatency+0x108>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d902      	bls.n	80033c6 <LL_SetFlashLatency+0x5a>
      {
        /* 120 < HCLK <= 140 => 6WS (7 CPU cycles) */
        latency = LL_FLASH_LATENCY_6;
 80033c0:	2306      	movs	r3, #6
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	e02f      	b.n	8003426 <LL_SetFlashLatency+0xba>
      }
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY5_FREQ)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a2b      	ldr	r2, [pc, #172]	; (8003478 <LL_SetFlashLatency+0x10c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d902      	bls.n	80033d4 <LL_SetFlashLatency+0x68>
      {
        /* 100 < HCLK <= 120 => 5WS (6 CPU cycles) */
        latency = LL_FLASH_LATENCY_5;
 80033ce:	2305      	movs	r3, #5
 80033d0:	60fb      	str	r3, [r7, #12]
 80033d2:	e028      	b.n	8003426 <LL_SetFlashLatency+0xba>
      }
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY4_FREQ)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a29      	ldr	r2, [pc, #164]	; (800347c <LL_SetFlashLatency+0x110>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d902      	bls.n	80033e2 <LL_SetFlashLatency+0x76>
      {
        /* 80 < HCLK <= 100 => 4WS (5 CPU cycles) */
        latency = LL_FLASH_LATENCY_4;
 80033dc:	2304      	movs	r3, #4
 80033de:	60fb      	str	r3, [r7, #12]
 80033e0:	e021      	b.n	8003426 <LL_SetFlashLatency+0xba>
      }
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY3_FREQ)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a26      	ldr	r2, [pc, #152]	; (8003480 <LL_SetFlashLatency+0x114>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d902      	bls.n	80033f0 <LL_SetFlashLatency+0x84>
      {
        /* 60 < HCLK <= 80 => 3WS (4 CPU cycles) */
        latency = LL_FLASH_LATENCY_3;
 80033ea:	2303      	movs	r3, #3
 80033ec:	60fb      	str	r3, [r7, #12]
 80033ee:	e01a      	b.n	8003426 <LL_SetFlashLatency+0xba>
      }
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY2_FREQ)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a24      	ldr	r2, [pc, #144]	; (8003484 <LL_SetFlashLatency+0x118>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d902      	bls.n	80033fe <LL_SetFlashLatency+0x92>
      {
        /* 40 < HCLK <= 60 => 2WS (3 CPU cycles) */
        latency = LL_FLASH_LATENCY_2;
 80033f8:	2302      	movs	r3, #2
 80033fa:	60fb      	str	r3, [r7, #12]
 80033fc:	e013      	b.n	8003426 <LL_SetFlashLatency+0xba>
      }
      else
      {
        if(HCLKFrequency > UTILS_SCALE1_LATENCY1_FREQ)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a21      	ldr	r2, [pc, #132]	; (8003488 <LL_SetFlashLatency+0x11c>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d90f      	bls.n	8003426 <LL_SetFlashLatency+0xba>
        {
          /* 20 < HCLK <= 40 => 1WS (2 CPU cycles) */
          latency = LL_FLASH_LATENCY_1;
 8003406:	2301      	movs	r3, #1
 8003408:	60fb      	str	r3, [r7, #12]
 800340a:	e00c      	b.n	8003426 <LL_SetFlashLatency+0xba>
        /* else HCLKFrequency <= 10MHz default LL_FLASH_LATENCY_0 0WS */
      }
    }
    else /* SCALE2 */
    {
      if(HCLKFrequency > UTILS_SCALE2_LATENCY2_FREQ)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a1f      	ldr	r2, [pc, #124]	; (800348c <LL_SetFlashLatency+0x120>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d902      	bls.n	800341a <LL_SetFlashLatency+0xae>
      {
        /* 16 < HCLK <= 26 => 2WS (3 CPU cycles) */
        latency = LL_FLASH_LATENCY_2;
 8003414:	2302      	movs	r3, #2
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	e005      	b.n	8003426 <LL_SetFlashLatency+0xba>
      }
      else
      {
        if(HCLKFrequency > UTILS_SCALE2_LATENCY1_FREQ)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a1c      	ldr	r2, [pc, #112]	; (8003490 <LL_SetFlashLatency+0x124>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d901      	bls.n	8003426 <LL_SetFlashLatency+0xba>
        {
          /* 8 < HCLK <= 16 => 1WS (2 CPU cycles) */
          latency = LL_FLASH_LATENCY_1;
 8003422:	2301      	movs	r3, #1
 8003424:	60fb      	str	r3, [r7, #12]
        }
        /* else HCLKFrequency <= 8MHz default LL_FLASH_LATENCY_0 0WS */
      }
    }

    if (status != ERROR)
 8003426:	7cfb      	ldrb	r3, [r7, #19]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d017      	beq.n	800345c <LL_SetFlashLatency+0xf0>
    {
      LL_FLASH_SetLatency(latency);
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f7ff ff1b 	bl	8003268 <LL_FLASH_SetLatency>

      /* Check that the new number of wait states is taken into account to access the Flash
         memory by reading the FLASH_ACR register */
      timeout = 2U;
 8003432:	2302      	movs	r3, #2
 8003434:	617b      	str	r3, [r7, #20]
      do
      {
        /* Wait for Flash latency to be updated */
        getlatency = LL_FLASH_GetLatency();
 8003436:	f7ff ff2b 	bl	8003290 <LL_FLASH_GetLatency>
 800343a:	60b8      	str	r0, [r7, #8]
        timeout--;
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	3b01      	subs	r3, #1
 8003440:	617b      	str	r3, [r7, #20]
      } while ((getlatency != latency) && (timeout > 0U));
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	429a      	cmp	r2, r3
 8003448:	d002      	beq.n	8003450 <LL_SetFlashLatency+0xe4>
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1f2      	bne.n	8003436 <LL_SetFlashLatency+0xca>

      if(getlatency != latency)
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	429a      	cmp	r2, r3
 8003456:	d001      	beq.n	800345c <LL_SetFlashLatency+0xf0>
      {
        status = ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	74fb      	strb	r3, [r7, #19]
      }
    }
  }

  return status;
 800345c:	7cfb      	ldrb	r3, [r7, #19]
}
 800345e:	4618      	mov	r0, r3
 8003460:	3718      	adds	r7, #24
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	0a21fe80 	.word	0x0a21fe80
 800346c:	09896800 	.word	0x09896800
 8003470:	08583b00 	.word	0x08583b00
 8003474:	07270e00 	.word	0x07270e00
 8003478:	05f5e100 	.word	0x05f5e100
 800347c:	04c4b400 	.word	0x04c4b400
 8003480:	03938700 	.word	0x03938700
 8003484:	02625a00 	.word	0x02625a00
 8003488:	01312d00 	.word	0x01312d00
 800348c:	00f42400 	.word	0x00f42400
 8003490:	007a1200 	.word	0x007a1200

08003494 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f003 0307 	and.w	r3, r3, #7
 80034a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034a4:	4b0c      	ldr	r3, [pc, #48]	; (80034d8 <__NVIC_SetPriorityGrouping+0x44>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034b0:	4013      	ands	r3, r2
 80034b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034c6:	4a04      	ldr	r2, [pc, #16]	; (80034d8 <__NVIC_SetPriorityGrouping+0x44>)
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	60d3      	str	r3, [r2, #12]
}
 80034cc:	bf00      	nop
 80034ce:	3714      	adds	r7, #20
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	e000ed00 	.word	0xe000ed00

080034dc <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 80034e0:	4b05      	ldr	r3, [pc, #20]	; (80034f8 <LL_RCC_HSE_EnableBypass+0x1c>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a04      	ldr	r2, [pc, #16]	; (80034f8 <LL_RCC_HSE_EnableBypass+0x1c>)
 80034e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034ea:	6013      	str	r3, [r2, #0]
}
 80034ec:	bf00      	nop
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	40021000 	.word	0x40021000

080034fc <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003500:	4b05      	ldr	r3, [pc, #20]	; (8003518 <LL_RCC_HSE_Enable+0x1c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a04      	ldr	r2, [pc, #16]	; (8003518 <LL_RCC_HSE_Enable+0x1c>)
 8003506:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800350a:	6013      	str	r3, [r2, #0]
}
 800350c:	bf00      	nop
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	40021000 	.word	0x40021000

0800351c <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003520:	4b05      	ldr	r3, [pc, #20]	; (8003538 <LL_RCC_HSE_Disable+0x1c>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a04      	ldr	r2, [pc, #16]	; (8003538 <LL_RCC_HSE_Disable+0x1c>)
 8003526:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800352a:	6013      	str	r3, [r2, #0]
}
 800352c:	bf00      	nop
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	40021000 	.word	0x40021000

0800353c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003540:	4b07      	ldr	r3, [pc, #28]	; (8003560 <LL_RCC_HSE_IsReady+0x24>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003548:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800354c:	d101      	bne.n	8003552 <LL_RCC_HSE_IsReady+0x16>
 800354e:	2301      	movs	r3, #1
 8003550:	e000      	b.n	8003554 <LL_RCC_HSE_IsReady+0x18>
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	40021000 	.word	0x40021000

08003564 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003568:	4b05      	ldr	r3, [pc, #20]	; (8003580 <LL_RCC_HSI_Enable+0x1c>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a04      	ldr	r2, [pc, #16]	; (8003580 <LL_RCC_HSI_Enable+0x1c>)
 800356e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003572:	6013      	str	r3, [r2, #0]
}
 8003574:	bf00      	nop
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	40021000 	.word	0x40021000

08003584 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003588:	4b07      	ldr	r3, [pc, #28]	; (80035a8 <LL_RCC_HSI_IsReady+0x24>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003594:	d101      	bne.n	800359a <LL_RCC_HSI_IsReady+0x16>
 8003596:	2301      	movs	r3, #1
 8003598:	e000      	b.n	800359c <LL_RCC_HSI_IsReady+0x18>
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	40021000 	.word	0x40021000

080035ac <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80035b4:	4b07      	ldr	r3, [pc, #28]	; (80035d4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	061b      	lsls	r3, r3, #24
 80035c0:	4904      	ldr	r1, [pc, #16]	; (80035d4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	604b      	str	r3, [r1, #4]
}
 80035c6:	bf00      	nop
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	40021000 	.word	0x40021000

080035d8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80035e0:	4b06      	ldr	r3, [pc, #24]	; (80035fc <LL_RCC_SetSysClkSource+0x24>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f023 0203 	bic.w	r2, r3, #3
 80035e8:	4904      	ldr	r1, [pc, #16]	; (80035fc <LL_RCC_SetSysClkSource+0x24>)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	608b      	str	r3, [r1, #8]
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	40021000 	.word	0x40021000

08003600 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003604:	4b04      	ldr	r3, [pc, #16]	; (8003618 <LL_RCC_GetSysClkSource+0x18>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f003 030c 	and.w	r3, r3, #12
}
 800360c:	4618      	mov	r0, r3
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	40021000 	.word	0x40021000

0800361c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003624:	4b06      	ldr	r3, [pc, #24]	; (8003640 <LL_RCC_SetAHBPrescaler+0x24>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800362c:	4904      	ldr	r1, [pc, #16]	; (8003640 <LL_RCC_SetAHBPrescaler+0x24>)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4313      	orrs	r3, r2
 8003632:	608b      	str	r3, [r1, #8]
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr
 8003640:	40021000 	.word	0x40021000

08003644 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800364c:	4b06      	ldr	r3, [pc, #24]	; (8003668 <LL_RCC_SetAPB1Prescaler+0x24>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003654:	4904      	ldr	r1, [pc, #16]	; (8003668 <LL_RCC_SetAPB1Prescaler+0x24>)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4313      	orrs	r3, r2
 800365a:	608b      	str	r3, [r1, #8]
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	40021000 	.word	0x40021000

0800366c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003674:	4b06      	ldr	r3, [pc, #24]	; (8003690 <LL_RCC_SetAPB2Prescaler+0x24>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800367c:	4904      	ldr	r1, [pc, #16]	; (8003690 <LL_RCC_SetAPB2Prescaler+0x24>)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4313      	orrs	r3, r2
 8003682:	608b      	str	r3, [r1, #8]
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	40021000 	.word	0x40021000

08003694 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003698:	4b05      	ldr	r3, [pc, #20]	; (80036b0 <LL_RCC_PLL_Enable+0x1c>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a04      	ldr	r2, [pc, #16]	; (80036b0 <LL_RCC_PLL_Enable+0x1c>)
 800369e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036a2:	6013      	str	r3, [r2, #0]
}
 80036a4:	bf00      	nop
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	40021000 	.word	0x40021000

080036b4 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80036b8:	4b05      	ldr	r3, [pc, #20]	; (80036d0 <LL_RCC_PLL_Disable+0x1c>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a04      	ldr	r2, [pc, #16]	; (80036d0 <LL_RCC_PLL_Disable+0x1c>)
 80036be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036c2:	6013      	str	r3, [r2, #0]
}
 80036c4:	bf00      	nop
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	40021000 	.word	0x40021000

080036d4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80036d8:	4b07      	ldr	r3, [pc, #28]	; (80036f8 <LL_RCC_PLL_IsReady+0x24>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036e4:	d101      	bne.n	80036ea <LL_RCC_PLL_IsReady+0x16>
 80036e6:	2301      	movs	r3, #1
 80036e8:	e000      	b.n	80036ec <LL_RCC_PLL_IsReady+0x18>
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	40021000 	.word	0x40021000

080036fc <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
 8003708:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800370a:	4b0a      	ldr	r3, [pc, #40]	; (8003734 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 800370c:	68da      	ldr	r2, [r3, #12]
 800370e:	4b0a      	ldr	r3, [pc, #40]	; (8003738 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8003710:	4013      	ands	r3, r2
 8003712:	68f9      	ldr	r1, [r7, #12]
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	4311      	orrs	r1, r2
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	0212      	lsls	r2, r2, #8
 800371c:	4311      	orrs	r1, r2
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	4904      	ldr	r1, [pc, #16]	; (8003734 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8003724:	4313      	orrs	r3, r2
 8003726:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8003728:	bf00      	nop
 800372a:	3714      	adds	r7, #20
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	40021000 	.word	0x40021000
 8003738:	f9ff800c 	.word	0xf9ff800c

0800373c <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8003740:	4b05      	ldr	r3, [pc, #20]	; (8003758 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	4a04      	ldr	r2, [pc, #16]	; (8003758 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8003746:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800374a:	60d3      	str	r3, [r2, #12]
}
 800374c:	bf00      	nop
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	40021000 	.word	0x40021000

0800375c <LL_APB1_GRP1_EnableClock>:
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003764:	4b08      	ldr	r3, [pc, #32]	; (8003788 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003766:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003768:	4907      	ldr	r1, [pc, #28]	; (8003788 <LL_APB1_GRP1_EnableClock+0x2c>)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4313      	orrs	r3, r2
 800376e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003770:	4b05      	ldr	r3, [pc, #20]	; (8003788 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003772:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4013      	ands	r3, r2
 8003778:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800377a:	68fb      	ldr	r3, [r7, #12]
}
 800377c:	bf00      	nop
 800377e:	3714      	adds	r7, #20
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	40021000 	.word	0x40021000

0800378c <LL_APB2_GRP1_EnableClock>:
{
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003794:	4b08      	ldr	r3, [pc, #32]	; (80037b8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003796:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003798:	4907      	ldr	r1, [pc, #28]	; (80037b8 <LL_APB2_GRP1_EnableClock+0x2c>)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4313      	orrs	r3, r2
 800379e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80037a0:	4b05      	ldr	r3, [pc, #20]	; (80037b8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80037a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4013      	ands	r3, r2
 80037a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80037aa:	68fb      	ldr	r3, [r7, #12]
}
 80037ac:	bf00      	nop
 80037ae:	3714      	adds	r7, #20
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	40021000 	.word	0x40021000

080037bc <LL_PWR_SetRegulVoltageScaling>:
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80037c4:	4b06      	ldr	r3, [pc, #24]	; (80037e0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80037cc:	4904      	ldr	r1, [pc, #16]	; (80037e0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	600b      	str	r3, [r1, #0]
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	40007000 	.word	0x40007000

080037e4 <LL_PWR_EnableRange1BoostMode>:
  * @brief  Enable main regulator voltage range 1 boost mode
  * @rmtoll CR5          R1MODE        LL_PWR_EnableRange1BoostMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableRange1BoostMode(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037e8:	4b06      	ldr	r3, [pc, #24]	; (8003804 <LL_PWR_EnableRange1BoostMode+0x20>)
 80037ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037ee:	4a05      	ldr	r2, [pc, #20]	; (8003804 <LL_PWR_EnableRange1BoostMode+0x20>)
 80037f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 80037f8:	bf00      	nop
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	40007000 	.word	0x40007000

08003808 <LL_PWR_DisableRange1BoostMode>:
  * @brief  Disable main regulator voltage range 1 boost mode
  * @rmtoll CR5          R1MODE        LL_PWR_DisableRange1BoostMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableRange1BoostMode(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800380c:	4b06      	ldr	r3, [pc, #24]	; (8003828 <LL_PWR_DisableRange1BoostMode+0x20>)
 800380e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003812:	4a05      	ldr	r2, [pc, #20]	; (8003828 <LL_PWR_DisableRange1BoostMode+0x20>)
 8003814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003818:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 800381c:	bf00      	nop
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40007000 	.word	0x40007000

0800382c <LL_FLASH_SetLatency>:
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8003834:	4b06      	ldr	r3, [pc, #24]	; (8003850 <LL_FLASH_SetLatency+0x24>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f023 020f 	bic.w	r2, r3, #15
 800383c:	4904      	ldr	r1, [pc, #16]	; (8003850 <LL_FLASH_SetLatency+0x24>)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4313      	orrs	r3, r2
 8003842:	600b      	str	r3, [r1, #0]
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	40022000 	.word	0x40022000

08003854 <LL_FLASH_GetLatency>:
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8003858:	4b04      	ldr	r3, [pc, #16]	; (800386c <LL_FLASH_GetLatency+0x18>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 030f 	and.w	r3, r3, #15
}
 8003860:	4618      	mov	r0, r3
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	40022000 	.word	0x40022000

08003870 <STRHAL_Init>:

static inline STRHAL_SysClk_Src_t _SysClk_Init(STRHAL_SysClk_Src_t src, uint32_t freq);
static inline STRHAL_SysClk_Src_t _SysClk_Backup();

STRHAL_Oof_t STRHAL_Init(STRHAL_SysClk_Src_t src, uint32_t freq)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	4603      	mov	r3, r0
 8003878:	6039      	str	r1, [r7, #0]
 800387a:	71fb      	strb	r3, [r7, #7]
	if (_INITIALIZED)
 800387c:	4b21      	ldr	r3, [pc, #132]	; (8003904 <STRHAL_Init+0x94>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d002      	beq.n	800388a <STRHAL_Init+0x1a>
		return _status;
 8003884:	4b20      	ldr	r3, [pc, #128]	; (8003908 <STRHAL_Init+0x98>)
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	e037      	b.n	80038fa <STRHAL_Init+0x8a>

	_status = STRHAL_NOICE;
 800388a:	4b1f      	ldr	r3, [pc, #124]	; (8003908 <STRHAL_Init+0x98>)
 800388c:	2200      	movs	r2, #0
 800388e:	701a      	strb	r2, [r3, #0]

	NVIC_SetPriorityGrouping(0x03);
 8003890:	2003      	movs	r0, #3
 8003892:	f7ff fdff 	bl	8003494 <__NVIC_SetPriorityGrouping>
	if (_SysClk_Init(src, freq) != src)
 8003896:	79fb      	ldrb	r3, [r7, #7]
 8003898:	6839      	ldr	r1, [r7, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f000 f836 	bl	800390c <_SysClk_Init>
 80038a0:	4603      	mov	r3, r0
 80038a2:	461a      	mov	r2, r3
 80038a4:	79fb      	ldrb	r3, [r7, #7]
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d006      	beq.n	80038b8 <STRHAL_Init+0x48>
		_status |= STRHAL_OOF_SYSCLK;
 80038aa:	4b17      	ldr	r3, [pc, #92]	; (8003908 <STRHAL_Init+0x98>)
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	f043 0301 	orr.w	r3, r3, #1
 80038b2:	b2da      	uxtb	r2, r3
 80038b4:	4b14      	ldr	r3, [pc, #80]	; (8003908 <STRHAL_Init+0x98>)
 80038b6:	701a      	strb	r2, [r3, #0]

	STRHAL_Clock_Init();
 80038b8:	f001 fd38 	bl	800532c <STRHAL_Clock_Init>
	STRHAL_SysTick_Init();
 80038bc:	f002 fad8 	bl	8005e70 <STRHAL_SysTick_Init>
	STRHAL_GPIO_Init();
 80038c0:	f001 fd7c 	bl	80053bc <STRHAL_GPIO_Init>
	STRHAL_OPAMP_Init();
 80038c4:	f001 ff08 	bl	80056d8 <STRHAL_OPAMP_Init>
	STRHAL_UART_Init();
 80038c8:	f002 ff24 	bl	8006714 <STRHAL_UART_Init>
	STRHAL_ADC_Init();
 80038cc:	f000 fc84 	bl	80041d8 <STRHAL_ADC_Init>
	STRHAL_TIM_Init();
 80038d0:	f002 fc57 	bl	8006182 <STRHAL_TIM_Init>
	STRHAL_SPI_Init();
 80038d4:	f002 fa76 	bl	8005dc4 <STRHAL_SPI_Init>
	_status |= STRHAL_CAN_Init();
 80038d8:	f001 fa62 	bl	8004da0 <STRHAL_CAN_Init>
 80038dc:	4603      	mov	r3, r0
 80038de:	461a      	mov	r2, r3
 80038e0:	4b09      	ldr	r3, [pc, #36]	; (8003908 <STRHAL_Init+0x98>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	4b07      	ldr	r3, [pc, #28]	; (8003908 <STRHAL_Init+0x98>)
 80038ea:	701a      	strb	r2, [r3, #0]
	STRHAL_QSPI_Init();
 80038ec:	f001 ffa0 	bl	8005830 <STRHAL_QSPI_Init>

	_INITIALIZED = 1;
 80038f0:	4b04      	ldr	r3, [pc, #16]	; (8003904 <STRHAL_Init+0x94>)
 80038f2:	2201      	movs	r2, #1
 80038f4:	601a      	str	r2, [r3, #0]

	return _status;
 80038f6:	4b04      	ldr	r3, [pc, #16]	; (8003908 <STRHAL_Init+0x98>)
 80038f8:	781b      	ldrb	r3, [r3, #0]
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	20000a00 	.word	0x20000a00
 8003908:	20000a04 	.word	0x20000a04

0800390c <_SysClk_Init>:

inline STRHAL_SysClk_Src_t _SysClk_Init(STRHAL_SysClk_Src_t src, uint32_t freq)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	4603      	mov	r3, r0
 8003914:	6039      	str	r1, [r7, #0]
 8003916:	71fb      	strb	r3, [r7, #7]
	uint32_t tot;
	if (src == STRHAL_SYSCLK_SRC_INT)
 8003918:	79fb      	ldrb	r3, [r7, #7]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d164      	bne.n	80039e8 <_SysClk_Init+0xdc>
	{
		if (LL_SetFlashLatency(STRHAL_SYSCLK_FREQ) != SUCCESS)
 800391e:	487c      	ldr	r0, [pc, #496]	; (8003b10 <_SysClk_Init+0x204>)
 8003920:	f7ff fd24 	bl	800336c <LL_SetFlashLatency>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <_SysClk_Init+0x26>
			return _SysClk_Backup();
 800392a:	f000 f8f9 	bl	8003b20 <_SysClk_Backup>
 800392e:	4603      	mov	r3, r0
 8003930:	e0ea      	b.n	8003b08 <_SysClk_Init+0x1fc>

		LL_PWR_EnableRange1BoostMode();
 8003932:	f7ff ff57 	bl	80037e4 <LL_PWR_EnableRange1BoostMode>

		LL_RCC_PLL_Disable();
 8003936:	f7ff febd 	bl	80036b4 <LL_RCC_PLL_Disable>
		LL_RCC_HSI_Enable();
 800393a:	f7ff fe13 	bl	8003564 <LL_RCC_HSI_Enable>

		for (tot = 0; LL_RCC_PLL_IsReady() && !LL_RCC_HSI_IsReady(); ++tot)
 800393e:	2300      	movs	r3, #0
 8003940:	60fb      	str	r3, [r7, #12]
 8003942:	e00a      	b.n	800395a <_SysClk_Init+0x4e>
		{
			if (tot > STRHAL_SYSCLK_START_TOT)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	4a73      	ldr	r2, [pc, #460]	; (8003b14 <_SysClk_Init+0x208>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d903      	bls.n	8003954 <_SysClk_Init+0x48>
				return _SysClk_Backup();
 800394c:	f000 f8e8 	bl	8003b20 <_SysClk_Backup>
 8003950:	4603      	mov	r3, r0
 8003952:	e0d9      	b.n	8003b08 <_SysClk_Init+0x1fc>
		for (tot = 0; LL_RCC_PLL_IsReady() && !LL_RCC_HSI_IsReady(); ++tot)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	3301      	adds	r3, #1
 8003958:	60fb      	str	r3, [r7, #12]
 800395a:	f7ff febb 	bl	80036d4 <LL_RCC_PLL_IsReady>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d004      	beq.n	800396e <_SysClk_Init+0x62>
 8003964:	f7ff fe0e 	bl	8003584 <LL_RCC_HSI_IsReady>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d0ea      	beq.n	8003944 <_SysClk_Init+0x38>
		}

		LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI,
 800396e:	2300      	movs	r3, #0
 8003970:	2228      	movs	r2, #40	; 0x28
 8003972:	2110      	movs	r1, #16
 8003974:	2002      	movs	r0, #2
 8003976:	f7ff fec1 	bl	80036fc <LL_RCC_PLL_ConfigDomain_SYS>
		STRHAL_SYSCLK_INT_PLL_M, 4 * STRHAL_SYSCLK_FREQ / HSI_VALUE,
		STRHAL_SYSCLK_INT_PLL_R);

		LL_RCC_PLL_EnableDomain_SYS();
 800397a:	f7ff fedf 	bl	800373c <LL_RCC_PLL_EnableDomain_SYS>
		LL_RCC_PLL_Enable();
 800397e:	f7ff fe89 	bl	8003694 <LL_RCC_PLL_Enable>

		for (tot = 0; !LL_RCC_PLL_IsReady(); ++tot)
 8003982:	2300      	movs	r3, #0
 8003984:	60fb      	str	r3, [r7, #12]
 8003986:	e00a      	b.n	800399e <_SysClk_Init+0x92>
		{
			if (tot > STRHAL_SYSCLK_START_TOT)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	4a62      	ldr	r2, [pc, #392]	; (8003b14 <_SysClk_Init+0x208>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d903      	bls.n	8003998 <_SysClk_Init+0x8c>
				return _SysClk_Backup();
 8003990:	f000 f8c6 	bl	8003b20 <_SysClk_Backup>
 8003994:	4603      	mov	r3, r0
 8003996:	e0b7      	b.n	8003b08 <_SysClk_Init+0x1fc>
		for (tot = 0; !LL_RCC_PLL_IsReady(); ++tot)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	3301      	adds	r3, #1
 800399c:	60fb      	str	r3, [r7, #12]
 800399e:	f7ff fe99 	bl	80036d4 <LL_RCC_PLL_IsReady>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d0ef      	beq.n	8003988 <_SysClk_Init+0x7c>
		}
		LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80039a8:	2003      	movs	r0, #3
 80039aa:	f7ff fe15 	bl	80035d8 <LL_RCC_SetSysClkSource>

		for (tot = 0; LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL; ++tot)
 80039ae:	2300      	movs	r3, #0
 80039b0:	60fb      	str	r3, [r7, #12]
 80039b2:	e00a      	b.n	80039ca <_SysClk_Init+0xbe>
		{
			if (tot > STRHAL_SYSCLK_START_TOT)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4a57      	ldr	r2, [pc, #348]	; (8003b14 <_SysClk_Init+0x208>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d903      	bls.n	80039c4 <_SysClk_Init+0xb8>
				return _SysClk_Backup();
 80039bc:	f000 f8b0 	bl	8003b20 <_SysClk_Backup>
 80039c0:	4603      	mov	r3, r0
 80039c2:	e0a1      	b.n	8003b08 <_SysClk_Init+0x1fc>
		for (tot = 0; LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL; ++tot)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	3301      	adds	r3, #1
 80039c8:	60fb      	str	r3, [r7, #12]
 80039ca:	f7ff fe19 	bl	8003600 <LL_RCC_GetSysClkSource>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b0c      	cmp	r3, #12
 80039d2:	d1ef      	bne.n	80039b4 <_SysClk_Init+0xa8>
		}

		LL_Init1msTick(STRHAL_SYSCLK_FREQ);
 80039d4:	484e      	ldr	r0, [pc, #312]	; (8003b10 <_SysClk_Init+0x204>)
 80039d6:	f7ff fc83 	bl	80032e0 <LL_Init1msTick>
		LL_SetSystemCoreClock(STRHAL_SYSCLK_FREQ);
 80039da:	484d      	ldr	r0, [pc, #308]	; (8003b10 <_SysClk_Init+0x204>)
 80039dc:	f7ff fcb6 	bl	800334c <LL_SetSystemCoreClock>
		_SysClk_Src = STRHAL_SYSCLK_SRC_INT;
 80039e0:	4b4d      	ldr	r3, [pc, #308]	; (8003b18 <_SysClk_Init+0x20c>)
 80039e2:	2201      	movs	r2, #1
 80039e4:	701a      	strb	r2, [r3, #0]
 80039e6:	e084      	b.n	8003af2 <_SysClk_Init+0x1e6>
	}
	else if (src == STRHAL_SYSCLK_SRC_EXT)
 80039e8:	79fb      	ldrb	r3, [r7, #7]
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	f040 8081 	bne.w	8003af2 <_SysClk_Init+0x1e6>
	{
		if (LL_SetFlashLatency(STRHAL_SYSCLK_FREQ) != SUCCESS)
 80039f0:	4847      	ldr	r0, [pc, #284]	; (8003b10 <_SysClk_Init+0x204>)
 80039f2:	f7ff fcbb 	bl	800336c <LL_SetFlashLatency>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <_SysClk_Init+0xf8>
			return _SysClk_Backup();
 80039fc:	f000 f890 	bl	8003b20 <_SysClk_Backup>
 8003a00:	4603      	mov	r3, r0
 8003a02:	e081      	b.n	8003b08 <_SysClk_Init+0x1fc>

		LL_RCC_PLL_Disable();
 8003a04:	f7ff fe56 	bl	80036b4 <LL_RCC_PLL_Disable>
		if (LL_RCC_HSE_IsReady())
 8003a08:	f7ff fd98 	bl	800353c <LL_RCC_HSE_IsReady>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d014      	beq.n	8003a3c <_SysClk_Init+0x130>
		{
			LL_RCC_HSE_Disable();
 8003a12:	f7ff fd83 	bl	800351c <LL_RCC_HSE_Disable>

			for (tot = 0; LL_RCC_HSE_IsReady(); ++tot)
 8003a16:	2300      	movs	r3, #0
 8003a18:	60fb      	str	r3, [r7, #12]
 8003a1a:	e00a      	b.n	8003a32 <_SysClk_Init+0x126>
			{
				if (tot > STRHAL_SYSCLK_START_TOT)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4a3d      	ldr	r2, [pc, #244]	; (8003b14 <_SysClk_Init+0x208>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d903      	bls.n	8003a2c <_SysClk_Init+0x120>
					return _SysClk_Backup();
 8003a24:	f000 f87c 	bl	8003b20 <_SysClk_Backup>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	e06d      	b.n	8003b08 <_SysClk_Init+0x1fc>
			for (tot = 0; LL_RCC_HSE_IsReady(); ++tot)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	60fb      	str	r3, [r7, #12]
 8003a32:	f7ff fd83 	bl	800353c <LL_RCC_HSE_IsReady>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1ef      	bne.n	8003a1c <_SysClk_Init+0x110>
			}
		}

		LL_RCC_HSE_EnableBypass();
 8003a3c:	f7ff fd4e 	bl	80034dc <LL_RCC_HSE_EnableBypass>
		LL_RCC_HSE_Enable();
 8003a40:	f7ff fd5c 	bl	80034fc <LL_RCC_HSE_Enable>

		for (tot = 0; LL_RCC_PLL_IsReady() && !LL_RCC_HSE_IsReady(); ++tot)
 8003a44:	2300      	movs	r3, #0
 8003a46:	60fb      	str	r3, [r7, #12]
 8003a48:	e00a      	b.n	8003a60 <_SysClk_Init+0x154>
		{
			if (tot > STRHAL_SYSCLK_START_TOT)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	4a31      	ldr	r2, [pc, #196]	; (8003b14 <_SysClk_Init+0x208>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d903      	bls.n	8003a5a <_SysClk_Init+0x14e>
				return _SysClk_Backup();
 8003a52:	f000 f865 	bl	8003b20 <_SysClk_Backup>
 8003a56:	4603      	mov	r3, r0
 8003a58:	e056      	b.n	8003b08 <_SysClk_Init+0x1fc>
		for (tot = 0; LL_RCC_PLL_IsReady() && !LL_RCC_HSE_IsReady(); ++tot)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	60fb      	str	r3, [r7, #12]
 8003a60:	f7ff fe38 	bl	80036d4 <LL_RCC_PLL_IsReady>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d004      	beq.n	8003a74 <_SysClk_Init+0x168>
 8003a6a:	f7ff fd67 	bl	800353c <LL_RCC_HSE_IsReady>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d0ea      	beq.n	8003a4a <_SysClk_Init+0x13e>
		}

		LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE,
 8003a74:	4a29      	ldr	r2, [pc, #164]	; (8003b1c <_SysClk_Init+0x210>)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	2100      	movs	r1, #0
 8003a80:	2003      	movs	r0, #3
 8003a82:	f7ff fe3b 	bl	80036fc <LL_RCC_PLL_ConfigDomain_SYS>
		STRHAL_SYSCLK_EXT_PLL_M, 2 * STRHAL_SYSCLK_FREQ / freq,
		STRHAL_SYSCLK_EXT_PLL_R);

		LL_RCC_PLL_EnableDomain_SYS();
 8003a86:	f7ff fe59 	bl	800373c <LL_RCC_PLL_EnableDomain_SYS>
		LL_RCC_PLL_Enable();
 8003a8a:	f7ff fe03 	bl	8003694 <LL_RCC_PLL_Enable>

		for (tot = 0; !LL_RCC_PLL_IsReady(); ++tot)
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60fb      	str	r3, [r7, #12]
 8003a92:	e00a      	b.n	8003aaa <_SysClk_Init+0x19e>
		{
			if (tot > STRHAL_SYSCLK_START_TOT)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	4a1f      	ldr	r2, [pc, #124]	; (8003b14 <_SysClk_Init+0x208>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d903      	bls.n	8003aa4 <_SysClk_Init+0x198>
				return _SysClk_Backup();
 8003a9c:	f000 f840 	bl	8003b20 <_SysClk_Backup>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	e031      	b.n	8003b08 <_SysClk_Init+0x1fc>
		for (tot = 0; !LL_RCC_PLL_IsReady(); ++tot)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	60fb      	str	r3, [r7, #12]
 8003aaa:	f7ff fe13 	bl	80036d4 <LL_RCC_PLL_IsReady>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d0ef      	beq.n	8003a94 <_SysClk_Init+0x188>
		}
		LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8003ab4:	2003      	movs	r0, #3
 8003ab6:	f7ff fd8f 	bl	80035d8 <LL_RCC_SetSysClkSource>

		for (tot = 0; LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL; ++tot)
 8003aba:	2300      	movs	r3, #0
 8003abc:	60fb      	str	r3, [r7, #12]
 8003abe:	e00a      	b.n	8003ad6 <_SysClk_Init+0x1ca>
		{
			if (tot > STRHAL_SYSCLK_START_TOT)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	4a14      	ldr	r2, [pc, #80]	; (8003b14 <_SysClk_Init+0x208>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d903      	bls.n	8003ad0 <_SysClk_Init+0x1c4>
				return _SysClk_Backup();
 8003ac8:	f000 f82a 	bl	8003b20 <_SysClk_Backup>
 8003acc:	4603      	mov	r3, r0
 8003ace:	e01b      	b.n	8003b08 <_SysClk_Init+0x1fc>
		for (tot = 0; LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL; ++tot)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	60fb      	str	r3, [r7, #12]
 8003ad6:	f7ff fd93 	bl	8003600 <LL_RCC_GetSysClkSource>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b0c      	cmp	r3, #12
 8003ade:	d1ef      	bne.n	8003ac0 <_SysClk_Init+0x1b4>
		}

		LL_Init1msTick(STRHAL_SYSCLK_FREQ);
 8003ae0:	480b      	ldr	r0, [pc, #44]	; (8003b10 <_SysClk_Init+0x204>)
 8003ae2:	f7ff fbfd 	bl	80032e0 <LL_Init1msTick>
		LL_SetSystemCoreClock(STRHAL_SYSCLK_FREQ);
 8003ae6:	480a      	ldr	r0, [pc, #40]	; (8003b10 <_SysClk_Init+0x204>)
 8003ae8:	f7ff fc30 	bl	800334c <LL_SetSystemCoreClock>
		_SysClk_Src = STRHAL_SYSCLK_SRC_EXT;
 8003aec:	4b0a      	ldr	r3, [pc, #40]	; (8003b18 <_SysClk_Init+0x20c>)
 8003aee:	2202      	movs	r2, #2
 8003af0:	701a      	strb	r2, [r3, #0]
	}

	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8003af2:	2000      	movs	r0, #0
 8003af4:	f7ff fd92 	bl	800361c <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8003af8:	2000      	movs	r0, #0
 8003afa:	f7ff fda3 	bl	8003644 <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8003afe:	2000      	movs	r0, #0
 8003b00:	f7ff fdb4 	bl	800366c <LL_RCC_SetAPB2Prescaler>
	return _SysClk_Src;
 8003b04:	4b04      	ldr	r3, [pc, #16]	; (8003b18 <_SysClk_Init+0x20c>)
 8003b06:	781b      	ldrb	r3, [r3, #0]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	09896800 	.word	0x09896800
 8003b14:	00f42400 	.word	0x00f42400
 8003b18:	200009fc 	.word	0x200009fc
 8003b1c:	1312d000 	.word	0x1312d000

08003b20 <_SysClk_Backup>:

inline STRHAL_SysClk_Src_t _SysClk_Backup()
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8003b24:	2001      	movs	r0, #1
 8003b26:	f7ff fe31 	bl	800378c <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8003b2a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003b2e:	f7ff fe15 	bl	800375c <LL_APB1_GRP1_EnableClock>

	LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8003b32:	2000      	movs	r0, #0
 8003b34:	f7ff fe7a 	bl	800382c <LL_FLASH_SetLatency>
	while (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0);
 8003b38:	bf00      	nop
 8003b3a:	f7ff fe8b 	bl	8003854 <LL_FLASH_GetLatency>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1fa      	bne.n	8003b3a <_SysClk_Backup+0x1a>

	LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8003b44:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003b48:	f7ff fe38 	bl	80037bc <LL_PWR_SetRegulVoltageScaling>
	LL_PWR_DisableRange1BoostMode();
 8003b4c:	f7ff fe5c 	bl	8003808 <LL_PWR_DisableRange1BoostMode>

	LL_RCC_HSI_Enable();
 8003b50:	f7ff fd08 	bl	8003564 <LL_RCC_HSI_Enable>
	while (!LL_RCC_HSI_IsReady());
 8003b54:	bf00      	nop
 8003b56:	f7ff fd15 	bl	8003584 <LL_RCC_HSI_IsReady>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d0fa      	beq.n	8003b56 <_SysClk_Backup+0x36>

	LL_RCC_HSI_SetCalibTrimming(64);
 8003b60:	2040      	movs	r0, #64	; 0x40
 8003b62:	f7ff fd23 	bl	80035ac <LL_RCC_HSI_SetCalibTrimming>

	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8003b66:	2001      	movs	r0, #1
 8003b68:	f7ff fd36 	bl	80035d8 <LL_RCC_SetSysClkSource>
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 8003b6c:	bf00      	nop
 8003b6e:	f7ff fd47 	bl	8003600 <LL_RCC_GetSysClkSource>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b04      	cmp	r3, #4
 8003b76:	d1fa      	bne.n	8003b6e <_SysClk_Backup+0x4e>

	/* Set AHB prescaler*/
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8003b78:	2000      	movs	r0, #0
 8003b7a:	f7ff fd4f 	bl	800361c <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8003b7e:	2000      	movs	r0, #0
 8003b80:	f7ff fd60 	bl	8003644 <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8003b84:	2000      	movs	r0, #0
 8003b86:	f7ff fd71 	bl	800366c <LL_RCC_SetAPB2Prescaler>

	LL_Init1msTick(HSI_VALUE);
 8003b8a:	4806      	ldr	r0, [pc, #24]	; (8003ba4 <_SysClk_Backup+0x84>)
 8003b8c:	f7ff fba8 	bl	80032e0 <LL_Init1msTick>
	LL_SetSystemCoreClock(HSI_VALUE);
 8003b90:	4804      	ldr	r0, [pc, #16]	; (8003ba4 <_SysClk_Backup+0x84>)
 8003b92:	f7ff fbdb 	bl	800334c <LL_SetSystemCoreClock>

	_SysClk_Src = STRHAL_SYSCLK_SRC_BKP;
 8003b96:	4b04      	ldr	r3, [pc, #16]	; (8003ba8 <_SysClk_Backup+0x88>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	701a      	strb	r2, [r3, #0]

	return _SysClk_Src;
 8003b9c:	4b02      	ldr	r3, [pc, #8]	; (8003ba8 <_SysClk_Backup+0x88>)
 8003b9e:	781b      	ldrb	r3, [r3, #0]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	00f42400 	.word	0x00f42400
 8003ba8:	200009fc 	.word	0x200009fc

08003bac <LL_ADC_DMA_GetRegAddr>:
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  if (Register == LL_ADC_DMA_REG_REGULAR_DATA)
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d103      	bne.n	8003bc4 <LL_ADC_DMA_GetRegAddr+0x18>
    data_reg_addr = (uint32_t) &(ADCx->DR);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	3340      	adds	r3, #64	; 0x40
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	e00c      	b.n	8003bde <LL_ADC_DMA_GetRegAddr+0x32>
    data_reg_addr = (uint32_t) &((__LL_ADC_COMMON_INSTANCE(ADCx))->CDR);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bca:	d003      	beq.n	8003bd4 <LL_ADC_DMA_GetRegAddr+0x28>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a07      	ldr	r2, [pc, #28]	; (8003bec <LL_ADC_DMA_GetRegAddr+0x40>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d101      	bne.n	8003bd8 <LL_ADC_DMA_GetRegAddr+0x2c>
 8003bd4:	4b06      	ldr	r3, [pc, #24]	; (8003bf0 <LL_ADC_DMA_GetRegAddr+0x44>)
 8003bd6:	e000      	b.n	8003bda <LL_ADC_DMA_GetRegAddr+0x2e>
 8003bd8:	4b06      	ldr	r3, [pc, #24]	; (8003bf4 <LL_ADC_DMA_GetRegAddr+0x48>)
 8003bda:	330c      	adds	r3, #12
 8003bdc:	60fb      	str	r3, [r7, #12]
  return data_reg_addr;
 8003bde:	68fb      	ldr	r3, [r7, #12]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3714      	adds	r7, #20
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr
 8003bec:	50000100 	.word	0x50000100
 8003bf0:	50000300 	.word	0x50000300
 8003bf4:	50000700 	.word	0x50000700

08003bf8 <LL_ADC_SetGainCompensation>:
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003c08:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003c0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	431a      	orrs	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_CFGR2_GCOMP_Pos);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c22:	683a      	ldr	r2, [r7, #0]
 8003c24:	2a00      	cmp	r2, #0
 8003c26:	d002      	beq.n	8003c2e <LL_ADC_SetGainCompensation+0x36>
 8003c28:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003c2c:	e000      	b.n	8003c30 <LL_ADC_SetGainCompensation+0x38>
 8003c2e:	2200      	movs	r2, #0
 8003c30:	431a      	orrs	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	611a      	str	r2, [r3, #16]
}
 8003c36:	bf00      	nop
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <LL_ADC_REG_SetSequencerLength>:
{
 8003c42:	b480      	push	{r7}
 8003c44:	b083      	sub	sp, #12
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
 8003c4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c50:	f023 020f 	bic.w	r2, r3, #15
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	431a      	orrs	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <LL_ADC_REG_SetSequencerRanks>:
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b087      	sub	sp, #28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	3330      	adds	r3, #48	; 0x30
 8003c78:	461a      	mov	r2, r3
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	0a1b      	lsrs	r3, r3, #8
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	f003 030c 	and.w	r3, r3, #12
 8003c84:	4413      	add	r3, r2
 8003c86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	f003 031f 	and.w	r3, r3, #31
 8003c92:	211f      	movs	r1, #31
 8003c94:	fa01 f303 	lsl.w	r3, r1, r3
 8003c98:	43db      	mvns	r3, r3
 8003c9a:	401a      	ands	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	0e9b      	lsrs	r3, r3, #26
 8003ca0:	f003 011f 	and.w	r1, r3, #31
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	f003 031f 	and.w	r3, r3, #31
 8003caa:	fa01 f303 	lsl.w	r3, r1, r3
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	601a      	str	r2, [r3, #0]
}
 8003cb4:	bf00      	nop
 8003cb6:	371c      	adds	r7, #28
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <LL_ADC_SetChannelSamplingTime>:
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b087      	sub	sp, #28
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	3314      	adds	r3, #20
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	0e5b      	lsrs	r3, r3, #25
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	f003 0304 	and.w	r3, r3, #4
 8003cdc:	4413      	add	r3, r2
 8003cde:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	0d1b      	lsrs	r3, r3, #20
 8003ce8:	f003 031f 	and.w	r3, r3, #31
 8003cec:	2107      	movs	r1, #7
 8003cee:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	401a      	ands	r2, r3
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	0d1b      	lsrs	r3, r3, #20
 8003cfa:	f003 031f 	and.w	r3, r3, #31
 8003cfe:	6879      	ldr	r1, [r7, #4]
 8003d00:	fa01 f303 	lsl.w	r3, r1, r3
 8003d04:	431a      	orrs	r2, r3
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	601a      	str	r2, [r3, #0]
}
 8003d0a:	bf00      	nop
 8003d0c:	371c      	adds	r7, #28
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
	...

08003d18 <LL_ADC_SetChannelSingleDiff>:
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a0f      	ldr	r2, [pc, #60]	; (8003d64 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d10a      	bne.n	8003d42 <LL_ADC_SetChannelSingleDiff+0x2a>
    SET_BIT(ADCx->DIFSEL,
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d38:	431a      	orrs	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003d40:	e00a      	b.n	8003d58 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d4e:	43db      	mvns	r3, r3
 8003d50:	401a      	ands	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003d58:	bf00      	nop
 8003d5a:	3714      	adds	r7, #20
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	407f0000 	.word	0x407f0000

08003d68 <LL_ADC_SetOverSamplingScope>:
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d7a:	f023 0303 	bic.w	r3, r3, #3
 8003d7e:	683a      	ldr	r2, [r7, #0]
 8003d80:	431a      	orrs	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	611a      	str	r2, [r3, #16]
}
 8003d86:	bf00      	nop
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <LL_ADC_DisableDeepPowerDown>:
{
 8003d92:	b480      	push	{r7}
 8003d94:	b083      	sub	sp, #12
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003da2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	6093      	str	r3, [r2, #8]
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <LL_ADC_EnableInternalRegulator>:
{
 8003db6:	b480      	push	{r7}
 8003db8:	b083      	sub	sp, #12
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003dc6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003dca:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	609a      	str	r2, [r3, #8]
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <LL_ADC_Enable>:
{
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003dee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003df2:	f043 0201 	orr.w	r2, r3, #1
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	609a      	str	r2, [r3, #8]
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <LL_ADC_StartCalibration>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t SingleDiff)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
 8003e0e:	6039      	str	r1, [r7, #0]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003e18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003e22:	4313      	orrs	r3, r2
 8003e24:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	609a      	str	r2, [r3, #8]
             ADC_CR_ADCALDIF | ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL | (SingleDiff & ADC_SINGLEDIFF_CALIB_START_MASK));
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e4c:	d101      	bne.n	8003e52 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e000      	b.n	8003e54 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e74:	f043 0204 	orr.w	r2, r3, #4
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <LL_ADC_IsActiveFlag_ADRDY>:
  * @rmtoll ISR      ADRDY          LL_ADC_IsActiveFlag_ADRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d101      	bne.n	8003ea0 <LL_ADC_IsActiveFlag_ADRDY+0x18>
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e000      	b.n	8003ea2 <LL_ADC_IsActiveFlag_ADRDY+0x1a>
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
	...

08003eb0 <LL_AHB1_GRP1_EnableClock>:
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003eb8:	4b08      	ldr	r3, [pc, #32]	; (8003edc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003eba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ebc:	4907      	ldr	r1, [pc, #28]	; (8003edc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003ec4:	4b05      	ldr	r3, [pc, #20]	; (8003edc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003ec6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003ece:	68fb      	ldr	r3, [r7, #12]
}
 8003ed0:	bf00      	nop
 8003ed2:	3714      	adds	r7, #20
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	40021000 	.word	0x40021000

08003ee0 <LL_AHB2_GRP1_EnableClock>:
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003ee8:	4b08      	ldr	r3, [pc, #32]	; (8003f0c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8003eea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003eec:	4907      	ldr	r1, [pc, #28]	; (8003f0c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003ef4:	4b05      	ldr	r3, [pc, #20]	; (8003f0c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8003ef6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4013      	ands	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003efe:	68fb      	ldr	r3, [r7, #12]
}
 8003f00:	bf00      	nop
 8003f02:	3714      	adds	r7, #20
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr
 8003f0c:	40021000 	.word	0x40021000

08003f10 <LL_DMA_EnableChannel>:
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8003f1e:	4a0c      	ldr	r2, [pc, #48]	; (8003f50 <LL_DMA_EnableChannel+0x40>)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	4413      	add	r3, r2
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	461a      	mov	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4908      	ldr	r1, [pc, #32]	; (8003f50 <LL_DMA_EnableChannel+0x40>)
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	440a      	add	r2, r1
 8003f34:	7812      	ldrb	r2, [r2, #0]
 8003f36:	4611      	mov	r1, r2
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	440a      	add	r2, r1
 8003f3c:	f043 0301 	orr.w	r3, r3, #1
 8003f40:	6013      	str	r3, [r2, #0]
}
 8003f42:	bf00      	nop
 8003f44:	3714      	adds	r7, #20
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	08006f2c 	.word	0x08006f2c

08003f54 <LL_DMA_IsEnabledChannel>:
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	60fb      	str	r3, [r7, #12]
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8003f62:	4a0a      	ldr	r2, [pc, #40]	; (8003f8c <LL_DMA_IsEnabledChannel+0x38>)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	4413      	add	r3, r2
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	4413      	add	r3, r2
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0301 	and.w	r3, r3, #1
                    DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d101      	bne.n	8003f7e <LL_DMA_IsEnabledChannel+0x2a>
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e000      	b.n	8003f80 <LL_DMA_IsEnabledChannel+0x2c>
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3714      	adds	r7, #20
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	08006f2c 	.word	0x08006f2c

08003f90 <LL_DMA_SetDataLength>:
{
 8003f90:	b480      	push	{r7}
 8003f92:	b087      	sub	sp, #28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 8003fa0:	4a0d      	ldr	r2, [pc, #52]	; (8003fd8 <LL_DMA_SetDataLength+0x48>)
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	461a      	mov	r2, r3
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	4413      	add	r3, r2
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	0c1b      	lsrs	r3, r3, #16
 8003fb2:	041b      	lsls	r3, r3, #16
 8003fb4:	4908      	ldr	r1, [pc, #32]	; (8003fd8 <LL_DMA_SetDataLength+0x48>)
 8003fb6:	68ba      	ldr	r2, [r7, #8]
 8003fb8:	440a      	add	r2, r1
 8003fba:	7812      	ldrb	r2, [r2, #0]
 8003fbc:	4611      	mov	r1, r2
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	440a      	add	r2, r1
 8003fc2:	4611      	mov	r1, r2
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	604b      	str	r3, [r1, #4]
}
 8003fca:	bf00      	nop
 8003fcc:	371c      	adds	r7, #28
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	08006f2c 	.word	0x08006f2c

08003fdc <LL_RCC_SetADCClockSource>:
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, 3U << ((ADCxSource & 0x001F0000U) >> 16U), ((ADCxSource & 0x000000FFU) << ((ADCxSource & 0x001F0000U) >> 16U)));
 8003fe4:	4b0e      	ldr	r3, [pc, #56]	; (8004020 <LL_RCC_SetADCClockSource+0x44>)
 8003fe6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	0c1b      	lsrs	r3, r3, #16
 8003fee:	f003 031f 	and.w	r3, r3, #31
 8003ff2:	2103      	movs	r1, #3
 8003ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff8:	43db      	mvns	r3, r3
 8003ffa:	401a      	ands	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	b2d9      	uxtb	r1, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	0c1b      	lsrs	r3, r3, #16
 8004004:	f003 031f 	and.w	r3, r3, #31
 8004008:	fa01 f303 	lsl.w	r3, r1, r3
 800400c:	4904      	ldr	r1, [pc, #16]	; (8004020 <LL_RCC_SetADCClockSource+0x44>)
 800400e:	4313      	orrs	r3, r2
 8004010:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	40021000 	.word	0x40021000

08004024 <STRHAL_ADC_RegInit>:
} adc1_buf, adc2_buf, adc3_buf, adc4_buf, adc5_buf;

static volatile uint64_t STRHAL_ADC_ChannelState[2] = { 0, 0 };

static void STRHAL_ADC_RegInit(ADC_TypeDef *ADCx)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b08c      	sub	sp, #48	; 0x30
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
	LL_ADC_InitTypeDef ADC_InitStruct =
 800402c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	605a      	str	r2, [r3, #4]
 8004036:	609a      	str	r2, [r3, #8]
	{ 0 };
	LL_ADC_REG_InitTypeDef ADC_REG_InitStruct =
 8004038:	f107 030c 	add.w	r3, r7, #12
 800403c:	2200      	movs	r2, #0
 800403e:	601a      	str	r2, [r3, #0]
 8004040:	605a      	str	r2, [r3, #4]
 8004042:	609a      	str	r2, [r3, #8]
 8004044:	60da      	str	r2, [r3, #12]
 8004046:	611a      	str	r2, [r3, #16]
 8004048:	615a      	str	r2, [r3, #20]
	{ 0 };
	ADC_InitStruct.Resolution = STRHAL_ADC_RESOLUTION;
 800404a:	2300      	movs	r3, #0
 800404c:	627b      	str	r3, [r7, #36]	; 0x24
	ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 800404e:	2300      	movs	r3, #0
 8004050:	62bb      	str	r3, [r7, #40]	; 0x28
	ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8004052:	2300      	movs	r3, #0
 8004054:	62fb      	str	r3, [r7, #44]	; 0x2c
	LL_ADC_Init(ADCx, &ADC_InitStruct);
 8004056:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800405a:	4619      	mov	r1, r3
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f7fe fc6b 	bl	8002938 <LL_ADC_Init>
	ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8004062:	2300      	movs	r3, #0
 8004064:	60fb      	str	r3, [r7, #12]
	ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8004066:	2300      	movs	r3, #0
 8004068:	613b      	str	r3, [r7, #16]
	ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 800406a:	2300      	movs	r3, #0
 800406c:	617b      	str	r3, [r7, #20]
	ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 800406e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004072:	61bb      	str	r3, [r7, #24]
	//ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
	ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 8004074:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004078:	623b      	str	r3, [r7, #32]
	ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 800407a:	2303      	movs	r3, #3
 800407c:	61fb      	str	r3, [r7, #28]
	LL_ADC_REG_Init(ADCx, &ADC_REG_InitStruct);
 800407e:	f107 030c 	add.w	r3, r7, #12
 8004082:	4619      	mov	r1, r3
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f7fe fc7d 	bl	8002984 <LL_ADC_REG_Init>
	LL_ADC_SetGainCompensation(ADCx, 0);
 800408a:	2100      	movs	r1, #0
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f7ff fdb3 	bl	8003bf8 <LL_ADC_SetGainCompensation>
	LL_ADC_SetOverSamplingScope(ADCx, LL_ADC_OVS_DISABLE);
 8004092:	2100      	movs	r1, #0
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f7ff fe67 	bl	8003d68 <LL_ADC_SetOverSamplingScope>
	LL_ADC_DisableDeepPowerDown(ADCx);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7ff fe79 	bl	8003d92 <LL_ADC_DisableDeepPowerDown>
}
 80040a0:	bf00      	nop
 80040a2:	3730      	adds	r7, #48	; 0x30
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <STRHAL_ADC_DmaInit>:

static void STRHAL_ADC_DmaInit(DMA_TypeDef *DMAx, uint32_t dmaChannel, uint32_t dest, uint32_t src, uint32_t periph)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b090      	sub	sp, #64	; 0x40
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
 80040b4:	603b      	str	r3, [r7, #0]
	LL_DMA_InitTypeDef DMA_InitStruct =
 80040b6:	f107 0314 	add.w	r3, r7, #20
 80040ba:	222c      	movs	r2, #44	; 0x2c
 80040bc:	2100      	movs	r1, #0
 80040be:	4618      	mov	r0, r3
 80040c0:	f002 fd76 	bl	8006bb0 <memset>
	{ 0 };

	DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 80040c4:	2300      	movs	r3, #0
 80040c6:	61fb      	str	r3, [r7, #28]
	DMA_InitStruct.MemoryOrM2MDstAddress = dest;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	61bb      	str	r3, [r7, #24]
	DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_HALFWORD;
 80040cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040d0:	633b      	str	r3, [r7, #48]	; 0x30
	DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 80040d2:	2380      	movs	r3, #128	; 0x80
 80040d4:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStruct.Mode = LL_DMA_MODE_CIRCULAR;
 80040d6:	2320      	movs	r3, #32
 80040d8:	623b      	str	r3, [r7, #32]
	DMA_InitStruct.NbData = 0;
 80040da:	2300      	movs	r3, #0
 80040dc:	637b      	str	r3, [r7, #52]	; 0x34
	DMA_InitStruct.PeriphOrM2MSrcAddress = src;
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	617b      	str	r3, [r7, #20]
	DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_HALFWORD;
 80040e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 80040e8:	2300      	movs	r3, #0
 80040ea:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStruct.PeriphRequest = periph;
 80040ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040ee:	63bb      	str	r3, [r7, #56]	; 0x38
	DMA_InitStruct.Priority = STRHAL_ADC_DMA_PRIORITY;
 80040f0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80040f4:	63fb      	str	r3, [r7, #60]	; 0x3c

	LL_DMA_Init(DMAx, dmaChannel, &DMA_InitStruct);
 80040f6:	f107 0314 	add.w	r3, r7, #20
 80040fa:	461a      	mov	r2, r3
 80040fc:	68b9      	ldr	r1, [r7, #8]
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f7fe fd36 	bl	8002b70 <LL_DMA_Init>
}
 8004104:	bf00      	nop
 8004106:	3740      	adds	r7, #64	; 0x40
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <STRHAL_ADC_Calibrate>:

static void STRHAL_ADC_Calibrate()
{
 800410c:	b580      	push	{r7, lr}
 800410e:	af00      	add	r7, sp, #0
	LL_ADC_EnableInternalRegulator(ADC1);
 8004110:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004114:	f7ff fe4f 	bl	8003db6 <LL_ADC_EnableInternalRegulator>
	LL_mDelay(100);
 8004118:	2064      	movs	r0, #100	; 0x64
 800411a:	f7ff f8ef 	bl	80032fc <LL_mDelay>
	LL_ADC_StartCalibration(ADC1, STRHAL_ADC_SINGLEDIFF);
 800411e:	217f      	movs	r1, #127	; 0x7f
 8004120:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004124:	f7ff fe6f 	bl	8003e06 <LL_ADC_StartCalibration>
	while (LL_ADC_IsCalibrationOnGoing(ADC1));
 8004128:	bf00      	nop
 800412a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800412e:	f7ff fe83 	bl	8003e38 <LL_ADC_IsCalibrationOnGoing>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1f8      	bne.n	800412a <STRHAL_ADC_Calibrate+0x1e>

	LL_ADC_EnableInternalRegulator(ADC2);
 8004138:	4823      	ldr	r0, [pc, #140]	; (80041c8 <STRHAL_ADC_Calibrate+0xbc>)
 800413a:	f7ff fe3c 	bl	8003db6 <LL_ADC_EnableInternalRegulator>
	LL_mDelay(100);
 800413e:	2064      	movs	r0, #100	; 0x64
 8004140:	f7ff f8dc 	bl	80032fc <LL_mDelay>
	LL_ADC_StartCalibration(ADC2, STRHAL_ADC_SINGLEDIFF);
 8004144:	217f      	movs	r1, #127	; 0x7f
 8004146:	4820      	ldr	r0, [pc, #128]	; (80041c8 <STRHAL_ADC_Calibrate+0xbc>)
 8004148:	f7ff fe5d 	bl	8003e06 <LL_ADC_StartCalibration>
	while (LL_ADC_IsCalibrationOnGoing(ADC2));
 800414c:	bf00      	nop
 800414e:	481e      	ldr	r0, [pc, #120]	; (80041c8 <STRHAL_ADC_Calibrate+0xbc>)
 8004150:	f7ff fe72 	bl	8003e38 <LL_ADC_IsCalibrationOnGoing>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1f9      	bne.n	800414e <STRHAL_ADC_Calibrate+0x42>

	LL_ADC_EnableInternalRegulator(ADC3);
 800415a:	481c      	ldr	r0, [pc, #112]	; (80041cc <STRHAL_ADC_Calibrate+0xc0>)
 800415c:	f7ff fe2b 	bl	8003db6 <LL_ADC_EnableInternalRegulator>
	LL_mDelay(100);
 8004160:	2064      	movs	r0, #100	; 0x64
 8004162:	f7ff f8cb 	bl	80032fc <LL_mDelay>
	LL_ADC_StartCalibration(ADC3, STRHAL_ADC_SINGLEDIFF);
 8004166:	217f      	movs	r1, #127	; 0x7f
 8004168:	4818      	ldr	r0, [pc, #96]	; (80041cc <STRHAL_ADC_Calibrate+0xc0>)
 800416a:	f7ff fe4c 	bl	8003e06 <LL_ADC_StartCalibration>
	while (LL_ADC_IsCalibrationOnGoing(ADC3));
 800416e:	bf00      	nop
 8004170:	4816      	ldr	r0, [pc, #88]	; (80041cc <STRHAL_ADC_Calibrate+0xc0>)
 8004172:	f7ff fe61 	bl	8003e38 <LL_ADC_IsCalibrationOnGoing>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1f9      	bne.n	8004170 <STRHAL_ADC_Calibrate+0x64>

	LL_ADC_EnableInternalRegulator(ADC4);
 800417c:	4814      	ldr	r0, [pc, #80]	; (80041d0 <STRHAL_ADC_Calibrate+0xc4>)
 800417e:	f7ff fe1a 	bl	8003db6 <LL_ADC_EnableInternalRegulator>
	LL_mDelay(100);
 8004182:	2064      	movs	r0, #100	; 0x64
 8004184:	f7ff f8ba 	bl	80032fc <LL_mDelay>
	LL_ADC_StartCalibration(ADC4, STRHAL_ADC_SINGLEDIFF);
 8004188:	217f      	movs	r1, #127	; 0x7f
 800418a:	4811      	ldr	r0, [pc, #68]	; (80041d0 <STRHAL_ADC_Calibrate+0xc4>)
 800418c:	f7ff fe3b 	bl	8003e06 <LL_ADC_StartCalibration>
	while (LL_ADC_IsCalibrationOnGoing(ADC4));
 8004190:	bf00      	nop
 8004192:	480f      	ldr	r0, [pc, #60]	; (80041d0 <STRHAL_ADC_Calibrate+0xc4>)
 8004194:	f7ff fe50 	bl	8003e38 <LL_ADC_IsCalibrationOnGoing>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1f9      	bne.n	8004192 <STRHAL_ADC_Calibrate+0x86>

	LL_ADC_EnableInternalRegulator(ADC5);
 800419e:	480d      	ldr	r0, [pc, #52]	; (80041d4 <STRHAL_ADC_Calibrate+0xc8>)
 80041a0:	f7ff fe09 	bl	8003db6 <LL_ADC_EnableInternalRegulator>
	LL_mDelay(100);
 80041a4:	2064      	movs	r0, #100	; 0x64
 80041a6:	f7ff f8a9 	bl	80032fc <LL_mDelay>
	LL_ADC_StartCalibration(ADC5, STRHAL_ADC_SINGLEDIFF);
 80041aa:	217f      	movs	r1, #127	; 0x7f
 80041ac:	4809      	ldr	r0, [pc, #36]	; (80041d4 <STRHAL_ADC_Calibrate+0xc8>)
 80041ae:	f7ff fe2a 	bl	8003e06 <LL_ADC_StartCalibration>
	while (LL_ADC_IsCalibrationOnGoing(ADC5));
 80041b2:	bf00      	nop
 80041b4:	4807      	ldr	r0, [pc, #28]	; (80041d4 <STRHAL_ADC_Calibrate+0xc8>)
 80041b6:	f7ff fe3f 	bl	8003e38 <LL_ADC_IsCalibrationOnGoing>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1f9      	bne.n	80041b4 <STRHAL_ADC_Calibrate+0xa8>
}
 80041c0:	bf00      	nop
 80041c2:	bf00      	nop
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	50000100 	.word	0x50000100
 80041cc:	50000400 	.word	0x50000400
 80041d0:	50000500 	.word	0x50000500
 80041d4:	50000600 	.word	0x50000600

080041d8 <STRHAL_ADC_Init>:

void STRHAL_ADC_Init()
{
 80041d8:	b590      	push	{r4, r7, lr}
 80041da:	b087      	sub	sp, #28
 80041dc:	af02      	add	r7, sp, #8
	{
		LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
	}
	else if (STRHAL_ADC_DMA == DMA2)
	{
		LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 80041de:	2002      	movs	r0, #2
 80041e0:	f7ff fe66 	bl	8003eb0 <LL_AHB1_GRP1_EnableClock>
	}

	LL_RCC_SetADCClockSource(LL_RCC_ADC12_CLKSOURCE_SYSCLK);
 80041e4:	4846      	ldr	r0, [pc, #280]	; (8004300 <STRHAL_ADC_Init+0x128>)
 80041e6:	f7ff fef9 	bl	8003fdc <LL_RCC_SetADCClockSource>
	LL_RCC_SetADCClockSource(LL_RCC_ADC345_CLKSOURCE_SYSCLK);
 80041ea:	4846      	ldr	r0, [pc, #280]	; (8004304 <STRHAL_ADC_Init+0x12c>)
 80041ec:	f7ff fef6 	bl	8003fdc <LL_RCC_SetADCClockSource>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMAMUX1);
 80041f0:	2004      	movs	r0, #4
 80041f2:	f7ff fe5d 	bl	8003eb0 <LL_AHB1_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC12);
 80041f6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80041fa:	f7ff fe71 	bl	8003ee0 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC345);
 80041fe:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004202:	f7ff fe6d 	bl	8003ee0 <LL_AHB2_GRP1_EnableClock>

	//Init DMA for ADC123
	STRHAL_ADC_DmaInit(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL, (uint32_t) adc1_buf.data, LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA), LL_DMAMUX_REQ_ADC1);
 8004206:	4c40      	ldr	r4, [pc, #256]	; (8004308 <STRHAL_ADC_Init+0x130>)
 8004208:	2100      	movs	r1, #0
 800420a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800420e:	f7ff fccd 	bl	8003bac <LL_ADC_DMA_GetRegAddr>
 8004212:	4603      	mov	r3, r0
 8004214:	2205      	movs	r2, #5
 8004216:	9200      	str	r2, [sp, #0]
 8004218:	4622      	mov	r2, r4
 800421a:	2100      	movs	r1, #0
 800421c:	483b      	ldr	r0, [pc, #236]	; (800430c <STRHAL_ADC_Init+0x134>)
 800421e:	f7ff ff43 	bl	80040a8 <STRHAL_ADC_DmaInit>
	STRHAL_ADC_DmaInit(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 1, (uint32_t) adc2_buf.data, LL_ADC_DMA_GetRegAddr(ADC2, LL_ADC_DMA_REG_REGULAR_DATA), LL_DMAMUX_REQ_ADC2);
 8004222:	4c3b      	ldr	r4, [pc, #236]	; (8004310 <STRHAL_ADC_Init+0x138>)
 8004224:	2100      	movs	r1, #0
 8004226:	483b      	ldr	r0, [pc, #236]	; (8004314 <STRHAL_ADC_Init+0x13c>)
 8004228:	f7ff fcc0 	bl	8003bac <LL_ADC_DMA_GetRegAddr>
 800422c:	4603      	mov	r3, r0
 800422e:	2224      	movs	r2, #36	; 0x24
 8004230:	9200      	str	r2, [sp, #0]
 8004232:	4622      	mov	r2, r4
 8004234:	2101      	movs	r1, #1
 8004236:	4835      	ldr	r0, [pc, #212]	; (800430c <STRHAL_ADC_Init+0x134>)
 8004238:	f7ff ff36 	bl	80040a8 <STRHAL_ADC_DmaInit>
	STRHAL_ADC_DmaInit(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 2, (uint32_t) adc3_buf.data, LL_ADC_DMA_GetRegAddr(ADC3, LL_ADC_DMA_REG_REGULAR_DATA), LL_DMAMUX_REQ_ADC3);
 800423c:	4c36      	ldr	r4, [pc, #216]	; (8004318 <STRHAL_ADC_Init+0x140>)
 800423e:	2100      	movs	r1, #0
 8004240:	4836      	ldr	r0, [pc, #216]	; (800431c <STRHAL_ADC_Init+0x144>)
 8004242:	f7ff fcb3 	bl	8003bac <LL_ADC_DMA_GetRegAddr>
 8004246:	4603      	mov	r3, r0
 8004248:	2225      	movs	r2, #37	; 0x25
 800424a:	9200      	str	r2, [sp, #0]
 800424c:	4622      	mov	r2, r4
 800424e:	2102      	movs	r1, #2
 8004250:	482e      	ldr	r0, [pc, #184]	; (800430c <STRHAL_ADC_Init+0x134>)
 8004252:	f7ff ff29 	bl	80040a8 <STRHAL_ADC_DmaInit>
	STRHAL_ADC_DmaInit(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 3, (uint32_t) adc4_buf.data, LL_ADC_DMA_GetRegAddr(ADC4, LL_ADC_DMA_REG_REGULAR_DATA), LL_DMAMUX_REQ_ADC4);
 8004256:	4c32      	ldr	r4, [pc, #200]	; (8004320 <STRHAL_ADC_Init+0x148>)
 8004258:	2100      	movs	r1, #0
 800425a:	4832      	ldr	r0, [pc, #200]	; (8004324 <STRHAL_ADC_Init+0x14c>)
 800425c:	f7ff fca6 	bl	8003bac <LL_ADC_DMA_GetRegAddr>
 8004260:	4603      	mov	r3, r0
 8004262:	2226      	movs	r2, #38	; 0x26
 8004264:	9200      	str	r2, [sp, #0]
 8004266:	4622      	mov	r2, r4
 8004268:	2103      	movs	r1, #3
 800426a:	4828      	ldr	r0, [pc, #160]	; (800430c <STRHAL_ADC_Init+0x134>)
 800426c:	f7ff ff1c 	bl	80040a8 <STRHAL_ADC_DmaInit>
	STRHAL_ADC_DmaInit(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 4, (uint32_t) adc5_buf.data, LL_ADC_DMA_GetRegAddr(ADC5, LL_ADC_DMA_REG_REGULAR_DATA), LL_DMAMUX_REQ_ADC5);
 8004270:	4c2d      	ldr	r4, [pc, #180]	; (8004328 <STRHAL_ADC_Init+0x150>)
 8004272:	2100      	movs	r1, #0
 8004274:	482d      	ldr	r0, [pc, #180]	; (800432c <STRHAL_ADC_Init+0x154>)
 8004276:	f7ff fc99 	bl	8003bac <LL_ADC_DMA_GetRegAddr>
 800427a:	4603      	mov	r3, r0
 800427c:	2227      	movs	r2, #39	; 0x27
 800427e:	9200      	str	r2, [sp, #0]
 8004280:	4622      	mov	r2, r4
 8004282:	2104      	movs	r1, #4
 8004284:	4821      	ldr	r0, [pc, #132]	; (800430c <STRHAL_ADC_Init+0x134>)
 8004286:	f7ff ff0f 	bl	80040a8 <STRHAL_ADC_DmaInit>

	LL_ADC_CommonInitTypeDef ADC_CommonInitStruct =
 800428a:	463b      	mov	r3, r7
 800428c:	2200      	movs	r2, #0
 800428e:	601a      	str	r2, [r3, #0]
 8004290:	605a      	str	r2, [r3, #4]
 8004292:	609a      	str	r2, [r3, #8]
 8004294:	60da      	str	r2, [r3, #12]
	{ 0 };

	ADC_CommonInitStruct.CommonClock = STRHAL_ADC_COMMONCLOCK;
 8004296:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800429a:	603b      	str	r3, [r7, #0]
	ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 800429c:	2300      	movs	r3, #0
 800429e:	607b      	str	r3, [r7, #4]
	LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80042a0:	463b      	mov	r3, r7
 80042a2:	4619      	mov	r1, r3
 80042a4:	4822      	ldr	r0, [pc, #136]	; (8004330 <STRHAL_ADC_Init+0x158>)
 80042a6:	f7fe fae3 	bl	8002870 <LL_ADC_CommonInit>
	LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC2), &ADC_CommonInitStruct);
 80042aa:	463b      	mov	r3, r7
 80042ac:	4619      	mov	r1, r3
 80042ae:	4820      	ldr	r0, [pc, #128]	; (8004330 <STRHAL_ADC_Init+0x158>)
 80042b0:	f7fe fade 	bl	8002870 <LL_ADC_CommonInit>
	LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC3), &ADC_CommonInitStruct);
 80042b4:	463b      	mov	r3, r7
 80042b6:	4619      	mov	r1, r3
 80042b8:	481e      	ldr	r0, [pc, #120]	; (8004334 <STRHAL_ADC_Init+0x15c>)
 80042ba:	f7fe fad9 	bl	8002870 <LL_ADC_CommonInit>
	LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC4), &ADC_CommonInitStruct);
 80042be:	463b      	mov	r3, r7
 80042c0:	4619      	mov	r1, r3
 80042c2:	481c      	ldr	r0, [pc, #112]	; (8004334 <STRHAL_ADC_Init+0x15c>)
 80042c4:	f7fe fad4 	bl	8002870 <LL_ADC_CommonInit>
	LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC5), &ADC_CommonInitStruct);
 80042c8:	463b      	mov	r3, r7
 80042ca:	4619      	mov	r1, r3
 80042cc:	4819      	ldr	r0, [pc, #100]	; (8004334 <STRHAL_ADC_Init+0x15c>)
 80042ce:	f7fe facf 	bl	8002870 <LL_ADC_CommonInit>

	STRHAL_ADC_RegInit(ADC1);
 80042d2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80042d6:	f7ff fea5 	bl	8004024 <STRHAL_ADC_RegInit>
	STRHAL_ADC_RegInit(ADC2);
 80042da:	480e      	ldr	r0, [pc, #56]	; (8004314 <STRHAL_ADC_Init+0x13c>)
 80042dc:	f7ff fea2 	bl	8004024 <STRHAL_ADC_RegInit>
	STRHAL_ADC_RegInit(ADC3);
 80042e0:	480e      	ldr	r0, [pc, #56]	; (800431c <STRHAL_ADC_Init+0x144>)
 80042e2:	f7ff fe9f 	bl	8004024 <STRHAL_ADC_RegInit>
	STRHAL_ADC_RegInit(ADC4);
 80042e6:	480f      	ldr	r0, [pc, #60]	; (8004324 <STRHAL_ADC_Init+0x14c>)
 80042e8:	f7ff fe9c 	bl	8004024 <STRHAL_ADC_RegInit>
	STRHAL_ADC_RegInit(ADC5);
 80042ec:	480f      	ldr	r0, [pc, #60]	; (800432c <STRHAL_ADC_Init+0x154>)
 80042ee:	f7ff fe99 	bl	8004024 <STRHAL_ADC_RegInit>

	STRHAL_ADC_Calibrate();
 80042f2:	f7ff ff0b 	bl	800410c <STRHAL_ADC_Calibrate>
}
 80042f6:	bf00      	nop
 80042f8:	3714      	adds	r7, #20
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd90      	pop	{r4, r7, pc}
 80042fe:	bf00      	nop
 8004300:	001c0002 	.word	0x001c0002
 8004304:	001e0002 	.word	0x001e0002
 8004308:	20000a08 	.word	0x20000a08
 800430c:	40020400 	.word	0x40020400
 8004310:	20000a34 	.word	0x20000a34
 8004314:	50000100 	.word	0x50000100
 8004318:	20000a60 	.word	0x20000a60
 800431c:	50000400 	.word	0x50000400
 8004320:	20000a8c 	.word	0x20000a8c
 8004324:	50000500 	.word	0x50000500
 8004328:	20000ab8 	.word	0x20000ab8
 800432c:	50000600 	.word	0x50000600
 8004330:	50000300 	.word	0x50000300
 8004334:	50000700 	.word	0x50000700

08004338 <STRHAL_ADC_SubscribeChannel>:

STRHAL_ADC_Data_t* STRHAL_ADC_SubscribeChannel(STRHAL_ADC_Channel_t *channel, STRHAL_ADC_InType_t type)
{
 8004338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800433c:	b097      	sub	sp, #92	; 0x5c
 800433e:	af00      	add	r7, sp, #0
 8004340:	60f8      	str	r0, [r7, #12]
 8004342:	460b      	mov	r3, r1
 8004344:	72fb      	strb	r3, [r7, #11]

	STRHAL_ADC_AnalogPin_t analogPin;
	STRHAL_ADC_Data_t *data_ptr = NULL;
 8004346:	2300      	movs	r3, #0
 8004348:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t *length_ptr = NULL;
 800434a:	2300      	movs	r3, #0
 800434c:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t dmaChannel = 0;
 800434e:	2300      	movs	r3, #0
 8004350:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint64_t adcChannelMsk[2] = { 0, 0 };
 8004352:	f04f 0200 	mov.w	r2, #0
 8004356:	f04f 0300 	mov.w	r3, #0
 800435a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800435e:	f04f 0200 	mov.w	r2, #0
 8004362:	f04f 0300 	mov.w	r3, #0
 8004366:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	if (channel->ADCx == ADC1)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004372:	d11a      	bne.n	80043aa <STRHAL_ADC_SubscribeChannel+0x72>
	{
		analogPin = gpioMapping[0][channel->channelId];
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	791b      	ldrb	r3, [r3, #4]
 8004378:	4a9c      	ldr	r2, [pc, #624]	; (80045ec <STRHAL_ADC_SubscribeChannel+0x2b4>)
 800437a:	011b      	lsls	r3, r3, #4
 800437c:	4413      	add	r3, r2
 800437e:	f107 0638 	add.w	r6, r7, #56	; 0x38
 8004382:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004384:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		data_ptr = adc1_buf.data;
 8004388:	4b99      	ldr	r3, [pc, #612]	; (80045f0 <STRHAL_ADC_SubscribeChannel+0x2b8>)
 800438a:	657b      	str	r3, [r7, #84]	; 0x54
		length_ptr = &adc1_buf.length;
 800438c:	4b99      	ldr	r3, [pc, #612]	; (80045f4 <STRHAL_ADC_SubscribeChannel+0x2bc>)
 800438e:	653b      	str	r3, [r7, #80]	; 0x50
		dmaChannel = STRHAL_ADC_DMA_CHANNEL;
 8004390:	2300      	movs	r3, #0
 8004392:	64fb      	str	r3, [r7, #76]	; 0x4c
		adcChannelMsk[0] = (1U) << (channel->channelId);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	791b      	ldrb	r3, [r3, #4]
 8004398:	461a      	mov	r2, r3
 800439a:	2301      	movs	r3, #1
 800439c:	4093      	lsls	r3, r2
 800439e:	461a      	mov	r2, r3
 80043a0:	f04f 0300 	mov.w	r3, #0
 80043a4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80043a8:	e089      	b.n	80044be <STRHAL_ADC_SubscribeChannel+0x186>
	}
	else if (channel->ADCx == ADC2)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a92      	ldr	r2, [pc, #584]	; (80045f8 <STRHAL_ADC_SubscribeChannel+0x2c0>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d11c      	bne.n	80043ee <STRHAL_ADC_SubscribeChannel+0xb6>
	{
		analogPin = gpioMapping[1][channel->channelId];
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	791b      	ldrb	r3, [r3, #4]
 80043b8:	4a8c      	ldr	r2, [pc, #560]	; (80045ec <STRHAL_ADC_SubscribeChannel+0x2b4>)
 80043ba:	3313      	adds	r3, #19
 80043bc:	011b      	lsls	r3, r3, #4
 80043be:	4413      	add	r3, r2
 80043c0:	f107 0638 	add.w	r6, r7, #56	; 0x38
 80043c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043c6:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		data_ptr = adc2_buf.data;
 80043ca:	4b8c      	ldr	r3, [pc, #560]	; (80045fc <STRHAL_ADC_SubscribeChannel+0x2c4>)
 80043cc:	657b      	str	r3, [r7, #84]	; 0x54
		length_ptr = &adc2_buf.length;
 80043ce:	4b8c      	ldr	r3, [pc, #560]	; (8004600 <STRHAL_ADC_SubscribeChannel+0x2c8>)
 80043d0:	653b      	str	r3, [r7, #80]	; 0x50
		dmaChannel = STRHAL_ADC_DMA_CHANNEL + 1;
 80043d2:	2301      	movs	r3, #1
 80043d4:	64fb      	str	r3, [r7, #76]	; 0x4c
		adcChannelMsk[0] = (1U) << (STRHAL_ADC_CHANNEL_LAST + channel->channelId);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	791b      	ldrb	r3, [r3, #4]
 80043da:	3313      	adds	r3, #19
 80043dc:	2201      	movs	r2, #1
 80043de:	fa02 f303 	lsl.w	r3, r2, r3
 80043e2:	461a      	mov	r2, r3
 80043e4:	f04f 0300 	mov.w	r3, #0
 80043e8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80043ec:	e067      	b.n	80044be <STRHAL_ADC_SubscribeChannel+0x186>
	}
	else if (channel->ADCx == ADC3)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a84      	ldr	r2, [pc, #528]	; (8004604 <STRHAL_ADC_SubscribeChannel+0x2cc>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d11c      	bne.n	8004432 <STRHAL_ADC_SubscribeChannel+0xfa>
	{
		analogPin = gpioMapping[2][channel->channelId];
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	791b      	ldrb	r3, [r3, #4]
 80043fc:	4a7b      	ldr	r2, [pc, #492]	; (80045ec <STRHAL_ADC_SubscribeChannel+0x2b4>)
 80043fe:	3326      	adds	r3, #38	; 0x26
 8004400:	011b      	lsls	r3, r3, #4
 8004402:	4413      	add	r3, r2
 8004404:	f107 0638 	add.w	r6, r7, #56	; 0x38
 8004408:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800440a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		data_ptr = adc3_buf.data;
 800440e:	4b7e      	ldr	r3, [pc, #504]	; (8004608 <STRHAL_ADC_SubscribeChannel+0x2d0>)
 8004410:	657b      	str	r3, [r7, #84]	; 0x54
		length_ptr = &adc3_buf.length;
 8004412:	4b7e      	ldr	r3, [pc, #504]	; (800460c <STRHAL_ADC_SubscribeChannel+0x2d4>)
 8004414:	653b      	str	r3, [r7, #80]	; 0x50
		dmaChannel = STRHAL_ADC_DMA_CHANNEL + 2;
 8004416:	2302      	movs	r3, #2
 8004418:	64fb      	str	r3, [r7, #76]	; 0x4c
		adcChannelMsk[0] = (1U) << (2 * STRHAL_ADC_CHANNEL_LAST + channel->channelId);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	791b      	ldrb	r3, [r3, #4]
 800441e:	3326      	adds	r3, #38	; 0x26
 8004420:	2201      	movs	r2, #1
 8004422:	fa02 f303 	lsl.w	r3, r2, r3
 8004426:	461a      	mov	r2, r3
 8004428:	f04f 0300 	mov.w	r3, #0
 800442c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8004430:	e045      	b.n	80044be <STRHAL_ADC_SubscribeChannel+0x186>
	}
	else if (channel->ADCx == ADC4)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a76      	ldr	r2, [pc, #472]	; (8004610 <STRHAL_ADC_SubscribeChannel+0x2d8>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d11c      	bne.n	8004476 <STRHAL_ADC_SubscribeChannel+0x13e>
	{
		analogPin = gpioMapping[3][channel->channelId];
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	791b      	ldrb	r3, [r3, #4]
 8004440:	4a6a      	ldr	r2, [pc, #424]	; (80045ec <STRHAL_ADC_SubscribeChannel+0x2b4>)
 8004442:	3339      	adds	r3, #57	; 0x39
 8004444:	011b      	lsls	r3, r3, #4
 8004446:	4413      	add	r3, r2
 8004448:	f107 0638 	add.w	r6, r7, #56	; 0x38
 800444c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800444e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		data_ptr = adc3_buf.data;
 8004452:	4b6d      	ldr	r3, [pc, #436]	; (8004608 <STRHAL_ADC_SubscribeChannel+0x2d0>)
 8004454:	657b      	str	r3, [r7, #84]	; 0x54
		length_ptr = &adc3_buf.length;
 8004456:	4b6d      	ldr	r3, [pc, #436]	; (800460c <STRHAL_ADC_SubscribeChannel+0x2d4>)
 8004458:	653b      	str	r3, [r7, #80]	; 0x50
		dmaChannel = STRHAL_ADC_DMA_CHANNEL + 3;
 800445a:	2303      	movs	r3, #3
 800445c:	64fb      	str	r3, [r7, #76]	; 0x4c
		adcChannelMsk[1] = (1U) << (2 * STRHAL_ADC_CHANNEL_LAST + channel->channelId);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	791b      	ldrb	r3, [r3, #4]
 8004462:	3326      	adds	r3, #38	; 0x26
 8004464:	2201      	movs	r2, #1
 8004466:	fa02 f303 	lsl.w	r3, r2, r3
 800446a:	461a      	mov	r2, r3
 800446c:	f04f 0300 	mov.w	r3, #0
 8004470:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8004474:	e023      	b.n	80044be <STRHAL_ADC_SubscribeChannel+0x186>
	}
	else if (channel->ADCx == ADC5)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a66      	ldr	r2, [pc, #408]	; (8004614 <STRHAL_ADC_SubscribeChannel+0x2dc>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d11c      	bne.n	80044ba <STRHAL_ADC_SubscribeChannel+0x182>
	{
		analogPin = gpioMapping[4][channel->channelId];
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	791b      	ldrb	r3, [r3, #4]
 8004484:	4a59      	ldr	r2, [pc, #356]	; (80045ec <STRHAL_ADC_SubscribeChannel+0x2b4>)
 8004486:	334c      	adds	r3, #76	; 0x4c
 8004488:	011b      	lsls	r3, r3, #4
 800448a:	4413      	add	r3, r2
 800448c:	f107 0638 	add.w	r6, r7, #56	; 0x38
 8004490:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004492:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		data_ptr = adc3_buf.data;
 8004496:	4b5c      	ldr	r3, [pc, #368]	; (8004608 <STRHAL_ADC_SubscribeChannel+0x2d0>)
 8004498:	657b      	str	r3, [r7, #84]	; 0x54
		length_ptr = &adc3_buf.length;
 800449a:	4b5c      	ldr	r3, [pc, #368]	; (800460c <STRHAL_ADC_SubscribeChannel+0x2d4>)
 800449c:	653b      	str	r3, [r7, #80]	; 0x50
		dmaChannel = STRHAL_ADC_DMA_CHANNEL + 4;
 800449e:	2304      	movs	r3, #4
 80044a0:	64fb      	str	r3, [r7, #76]	; 0x4c
		adcChannelMsk[1] = (1U) << (2 * STRHAL_ADC_CHANNEL_LAST + channel->channelId);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	791b      	ldrb	r3, [r3, #4]
 80044a6:	3326      	adds	r3, #38	; 0x26
 80044a8:	2201      	movs	r2, #1
 80044aa:	fa02 f303 	lsl.w	r3, r2, r3
 80044ae:	461a      	mov	r2, r3
 80044b0:	f04f 0300 	mov.w	r3, #0
 80044b4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80044b8:	e001      	b.n	80044be <STRHAL_ADC_SubscribeChannel+0x186>
	}
	else
	{
		return NULL;
 80044ba:	2300      	movs	r3, #0
 80044bc:	e091      	b.n	80045e2 <STRHAL_ADC_SubscribeChannel+0x2aa>
	}

	// wrong input type passed
	if (analogPin.type != type)
 80044be:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80044c2:	7afa      	ldrb	r2, [r7, #11]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d001      	beq.n	80044cc <STRHAL_ADC_SubscribeChannel+0x194>
	{
		return NULL;
 80044c8:	2300      	movs	r3, #0
 80044ca:	e08a      	b.n	80045e2 <STRHAL_ADC_SubscribeChannel+0x2aa>
	}

	// channel already initialized
	if ((STRHAL_ADC_ChannelState[0] & adcChannelMsk[0]) && (STRHAL_ADC_ChannelState[1] & adcChannelMsk[1]))
 80044cc:	4b52      	ldr	r3, [pc, #328]	; (8004618 <STRHAL_ADC_SubscribeChannel+0x2e0>)
 80044ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80044d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044d6:	ea00 0602 	and.w	r6, r0, r2
 80044da:	603e      	str	r6, [r7, #0]
 80044dc:	400b      	ands	r3, r1
 80044de:	607b      	str	r3, [r7, #4]
 80044e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	d00d      	beq.n	8004504 <STRHAL_ADC_SubscribeChannel+0x1cc>
 80044e8:	4b4b      	ldr	r3, [pc, #300]	; (8004618 <STRHAL_ADC_SubscribeChannel+0x2e0>)
 80044ea:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80044ee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80044f2:	ea00 0a02 	and.w	sl, r0, r2
 80044f6:	ea01 0b03 	and.w	fp, r1, r3
 80044fa:	ea5a 030b 	orrs.w	r3, sl, fp
 80044fe:	d001      	beq.n	8004504 <STRHAL_ADC_SubscribeChannel+0x1cc>
	{
		return NULL;
 8004500:	2300      	movs	r3, #0
 8004502:	e06e      	b.n	80045e2 <STRHAL_ADC_SubscribeChannel+0x2aa>
	}

	STRHAL_ADC_ChannelState[0] |= adcChannelMsk[0];
 8004504:	4b44      	ldr	r3, [pc, #272]	; (8004618 <STRHAL_ADC_SubscribeChannel+0x2e0>)
 8004506:	e9d3 0100 	ldrd	r0, r1, [r3]
 800450a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800450e:	ea40 0802 	orr.w	r8, r0, r2
 8004512:	ea41 0903 	orr.w	r9, r1, r3
 8004516:	4b40      	ldr	r3, [pc, #256]	; (8004618 <STRHAL_ADC_SubscribeChannel+0x2e0>)
 8004518:	e9c3 8900 	strd	r8, r9, [r3]
	STRHAL_ADC_ChannelState[1] |= adcChannelMsk[1];
 800451c:	4b3e      	ldr	r3, [pc, #248]	; (8004618 <STRHAL_ADC_SubscribeChannel+0x2e0>)
 800451e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004522:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004526:	ea40 0402 	orr.w	r4, r0, r2
 800452a:	ea41 0503 	orr.w	r5, r1, r3
 800452e:	4b3a      	ldr	r3, [pc, #232]	; (8004618 <STRHAL_ADC_SubscribeChannel+0x2e0>)
 8004530:	e9c3 4502 	strd	r4, r5, [r3, #8]

	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8004534:	2004      	movs	r0, #4
 8004536:	f7ff fcd3 	bl	8003ee0 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 800453a:	2020      	movs	r0, #32
 800453c:	f7ff fcd0 	bl	8003ee0 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8004540:	2001      	movs	r0, #1
 8004542:	f7ff fccd 	bl	8003ee0 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8004546:	2002      	movs	r0, #2
 8004548:	f7ff fcca 	bl	8003ee0 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 800454c:	2010      	movs	r0, #16
 800454e:	f7ff fcc7 	bl	8003ee0 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 8004552:	2008      	movs	r0, #8
 8004554:	f7ff fcc4 	bl	8003ee0 <LL_AHB2_GRP1_EnableClock>

	if (type == STRHAL_ADC_INTYPE_REGULAR)
 8004558:	7afb      	ldrb	r3, [r7, #11]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d115      	bne.n	800458a <STRHAL_ADC_SubscribeChannel+0x252>
	{
		LL_GPIO_InitTypeDef GPIO_InitStruct =
 800455e:	f107 0310 	add.w	r3, r7, #16
 8004562:	2200      	movs	r2, #0
 8004564:	601a      	str	r2, [r3, #0]
 8004566:	605a      	str	r2, [r3, #4]
 8004568:	609a      	str	r2, [r3, #8]
 800456a:	60da      	str	r2, [r3, #12]
 800456c:	611a      	str	r2, [r3, #16]
 800456e:	615a      	str	r2, [r3, #20]
		{ 0 };

		GPIO_InitStruct.Pin = analogPin.pin;
 8004570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004572:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004574:	2303      	movs	r3, #3
 8004576:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004578:	2300      	movs	r3, #0
 800457a:	623b      	str	r3, [r7, #32]
		LL_GPIO_Init(analogPin.port, &GPIO_InitStruct);
 800457c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800457e:	f107 0210 	add.w	r2, r7, #16
 8004582:	4611      	mov	r1, r2
 8004584:	4618      	mov	r0, r3
 8004586:	f7fe fc7e 	bl	8002e86 <LL_GPIO_Init>
	}

	LL_ADC_SetChannelSamplingTime(channel->ADCx, analogPin.channel, STRHAL_ADC_CHANNEL_SAMPLINGTIME);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004590:	2206      	movs	r2, #6
 8004592:	4618      	mov	r0, r3
 8004594:	f7ff fb94 	bl	8003cc0 <LL_ADC_SetChannelSamplingTime>
	LL_ADC_SetChannelSingleDiff(channel->ADCx, analogPin.channel, STRHAL_ADC_SINGLEDIFF);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800459e:	227f      	movs	r2, #127	; 0x7f
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7ff fbb9 	bl	8003d18 <LL_ADC_SetChannelSingleDiff>

	LL_ADC_REG_SetSequencerRanks(channel->ADCx, adcRanks[*length_ptr], analogPin.channel);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6818      	ldr	r0, [r3, #0]
 80045aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a1b      	ldr	r2, [pc, #108]	; (800461c <STRHAL_ADC_SubscribeChannel+0x2e4>)
 80045b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045b6:	4619      	mov	r1, r3
 80045b8:	f7ff fb56 	bl	8003c68 <LL_ADC_REG_SetSequencerRanks>
	uint32_t length = *length_ptr;
 80045bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	64bb      	str	r3, [r7, #72]	; 0x48
	LL_DMA_SetDataLength(STRHAL_ADC_DMA, dmaChannel, length + 1);
 80045c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045c4:	3301      	adds	r3, #1
 80045c6:	461a      	mov	r2, r3
 80045c8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80045ca:	4815      	ldr	r0, [pc, #84]	; (8004620 <STRHAL_ADC_SubscribeChannel+0x2e8>)
 80045cc:	f7ff fce0 	bl	8003f90 <LL_DMA_SetDataLength>
	(*length_ptr)++;
 80045d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	1c5a      	adds	r2, r3, #1
 80045d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045d8:	601a      	str	r2, [r3, #0]
	return &data_ptr[length];
 80045da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80045e0:	4413      	add	r3, r2
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	375c      	adds	r7, #92	; 0x5c
 80045e6:	46bd      	mov	sp, r7
 80045e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045ec:	08006fb4 	.word	0x08006fb4
 80045f0:	20000a08 	.word	0x20000a08
 80045f4:	20000a30 	.word	0x20000a30
 80045f8:	50000100 	.word	0x50000100
 80045fc:	20000a34 	.word	0x20000a34
 8004600:	20000a5c 	.word	0x20000a5c
 8004604:	50000400 	.word	0x50000400
 8004608:	20000a60 	.word	0x20000a60
 800460c:	20000a88 	.word	0x20000a88
 8004610:	50000500 	.word	0x50000500
 8004614:	50000600 	.word	0x50000600
 8004618:	20000ae8 	.word	0x20000ae8
 800461c:	08006f34 	.word	0x08006f34
 8004620:	40020400 	.word	0x40020400

08004624 <STRHAL_ADC_Run>:

void STRHAL_ADC_Run()
{
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
	LL_ADC_REG_SetSequencerLength(ADC1, adcSeqRanks[adc1_buf.length - 1]);
 8004628:	4b5a      	ldr	r3, [pc, #360]	; (8004794 <STRHAL_ADC_Run+0x170>)
 800462a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462c:	3b01      	subs	r3, #1
 800462e:	4a5a      	ldr	r2, [pc, #360]	; (8004798 <STRHAL_ADC_Run+0x174>)
 8004630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004634:	4619      	mov	r1, r3
 8004636:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800463a:	f7ff fb02 	bl	8003c42 <LL_ADC_REG_SetSequencerLength>
	LL_ADC_REG_SetSequencerLength(ADC2, adcSeqRanks[adc2_buf.length - 1]);
 800463e:	4b57      	ldr	r3, [pc, #348]	; (800479c <STRHAL_ADC_Run+0x178>)
 8004640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004642:	3b01      	subs	r3, #1
 8004644:	4a54      	ldr	r2, [pc, #336]	; (8004798 <STRHAL_ADC_Run+0x174>)
 8004646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800464a:	4619      	mov	r1, r3
 800464c:	4854      	ldr	r0, [pc, #336]	; (80047a0 <STRHAL_ADC_Run+0x17c>)
 800464e:	f7ff faf8 	bl	8003c42 <LL_ADC_REG_SetSequencerLength>
	LL_ADC_REG_SetSequencerLength(ADC3, adcSeqRanks[adc3_buf.length - 1]);
 8004652:	4b54      	ldr	r3, [pc, #336]	; (80047a4 <STRHAL_ADC_Run+0x180>)
 8004654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004656:	3b01      	subs	r3, #1
 8004658:	4a4f      	ldr	r2, [pc, #316]	; (8004798 <STRHAL_ADC_Run+0x174>)
 800465a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800465e:	4619      	mov	r1, r3
 8004660:	4851      	ldr	r0, [pc, #324]	; (80047a8 <STRHAL_ADC_Run+0x184>)
 8004662:	f7ff faee 	bl	8003c42 <LL_ADC_REG_SetSequencerLength>
	LL_ADC_REG_SetSequencerLength(ADC4, adcSeqRanks[adc4_buf.length - 1]);
 8004666:	4b51      	ldr	r3, [pc, #324]	; (80047ac <STRHAL_ADC_Run+0x188>)
 8004668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466a:	3b01      	subs	r3, #1
 800466c:	4a4a      	ldr	r2, [pc, #296]	; (8004798 <STRHAL_ADC_Run+0x174>)
 800466e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004672:	4619      	mov	r1, r3
 8004674:	484e      	ldr	r0, [pc, #312]	; (80047b0 <STRHAL_ADC_Run+0x18c>)
 8004676:	f7ff fae4 	bl	8003c42 <LL_ADC_REG_SetSequencerLength>
	LL_ADC_REG_SetSequencerLength(ADC5, adcSeqRanks[adc5_buf.length - 1]);
 800467a:	4b4e      	ldr	r3, [pc, #312]	; (80047b4 <STRHAL_ADC_Run+0x190>)
 800467c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467e:	3b01      	subs	r3, #1
 8004680:	4a45      	ldr	r2, [pc, #276]	; (8004798 <STRHAL_ADC_Run+0x174>)
 8004682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004686:	4619      	mov	r1, r3
 8004688:	484b      	ldr	r0, [pc, #300]	; (80047b8 <STRHAL_ADC_Run+0x194>)
 800468a:	f7ff fada 	bl	8003c42 <LL_ADC_REG_SetSequencerLength>

	LL_DMA_EnableChannel(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL);
 800468e:	2100      	movs	r1, #0
 8004690:	484a      	ldr	r0, [pc, #296]	; (80047bc <STRHAL_ADC_Run+0x198>)
 8004692:	f7ff fc3d 	bl	8003f10 <LL_DMA_EnableChannel>
	while (!LL_DMA_IsEnabledChannel(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL));
 8004696:	bf00      	nop
 8004698:	2100      	movs	r1, #0
 800469a:	4848      	ldr	r0, [pc, #288]	; (80047bc <STRHAL_ADC_Run+0x198>)
 800469c:	f7ff fc5a 	bl	8003f54 <LL_DMA_IsEnabledChannel>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d0f8      	beq.n	8004698 <STRHAL_ADC_Run+0x74>
	LL_DMA_EnableChannel(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 1);
 80046a6:	2101      	movs	r1, #1
 80046a8:	4844      	ldr	r0, [pc, #272]	; (80047bc <STRHAL_ADC_Run+0x198>)
 80046aa:	f7ff fc31 	bl	8003f10 <LL_DMA_EnableChannel>
	while (!LL_DMA_IsEnabledChannel(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 1));
 80046ae:	bf00      	nop
 80046b0:	2101      	movs	r1, #1
 80046b2:	4842      	ldr	r0, [pc, #264]	; (80047bc <STRHAL_ADC_Run+0x198>)
 80046b4:	f7ff fc4e 	bl	8003f54 <LL_DMA_IsEnabledChannel>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d0f8      	beq.n	80046b0 <STRHAL_ADC_Run+0x8c>
	LL_DMA_EnableChannel(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 2);
 80046be:	2102      	movs	r1, #2
 80046c0:	483e      	ldr	r0, [pc, #248]	; (80047bc <STRHAL_ADC_Run+0x198>)
 80046c2:	f7ff fc25 	bl	8003f10 <LL_DMA_EnableChannel>
	while (!LL_DMA_IsEnabledChannel(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 2));
 80046c6:	bf00      	nop
 80046c8:	2102      	movs	r1, #2
 80046ca:	483c      	ldr	r0, [pc, #240]	; (80047bc <STRHAL_ADC_Run+0x198>)
 80046cc:	f7ff fc42 	bl	8003f54 <LL_DMA_IsEnabledChannel>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d0f8      	beq.n	80046c8 <STRHAL_ADC_Run+0xa4>
	LL_DMA_EnableChannel(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 3);
 80046d6:	2103      	movs	r1, #3
 80046d8:	4838      	ldr	r0, [pc, #224]	; (80047bc <STRHAL_ADC_Run+0x198>)
 80046da:	f7ff fc19 	bl	8003f10 <LL_DMA_EnableChannel>
	while (!LL_DMA_IsEnabledChannel(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 3));
 80046de:	bf00      	nop
 80046e0:	2103      	movs	r1, #3
 80046e2:	4836      	ldr	r0, [pc, #216]	; (80047bc <STRHAL_ADC_Run+0x198>)
 80046e4:	f7ff fc36 	bl	8003f54 <LL_DMA_IsEnabledChannel>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d0f8      	beq.n	80046e0 <STRHAL_ADC_Run+0xbc>
	LL_DMA_EnableChannel(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 4);
 80046ee:	2104      	movs	r1, #4
 80046f0:	4832      	ldr	r0, [pc, #200]	; (80047bc <STRHAL_ADC_Run+0x198>)
 80046f2:	f7ff fc0d 	bl	8003f10 <LL_DMA_EnableChannel>
	while (!LL_DMA_IsEnabledChannel(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 4));
 80046f6:	bf00      	nop
 80046f8:	2104      	movs	r1, #4
 80046fa:	4830      	ldr	r0, [pc, #192]	; (80047bc <STRHAL_ADC_Run+0x198>)
 80046fc:	f7ff fc2a 	bl	8003f54 <LL_DMA_IsEnabledChannel>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d0f8      	beq.n	80046f8 <STRHAL_ADC_Run+0xd4>

	LL_ADC_Enable(ADC1);
 8004706:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800470a:	f7ff fb68 	bl	8003dde <LL_ADC_Enable>
	while (LL_ADC_IsActiveFlag_ADRDY(ADC1) == 0);
 800470e:	bf00      	nop
 8004710:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004714:	f7ff fbb8 	bl	8003e88 <LL_ADC_IsActiveFlag_ADRDY>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d0f8      	beq.n	8004710 <STRHAL_ADC_Run+0xec>
	LL_ADC_Enable(ADC2);
 800471e:	4820      	ldr	r0, [pc, #128]	; (80047a0 <STRHAL_ADC_Run+0x17c>)
 8004720:	f7ff fb5d 	bl	8003dde <LL_ADC_Enable>
	while (LL_ADC_IsActiveFlag_ADRDY(ADC2) == 0);
 8004724:	bf00      	nop
 8004726:	481e      	ldr	r0, [pc, #120]	; (80047a0 <STRHAL_ADC_Run+0x17c>)
 8004728:	f7ff fbae 	bl	8003e88 <LL_ADC_IsActiveFlag_ADRDY>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d0f9      	beq.n	8004726 <STRHAL_ADC_Run+0x102>
	LL_ADC_Enable(ADC3);
 8004732:	481d      	ldr	r0, [pc, #116]	; (80047a8 <STRHAL_ADC_Run+0x184>)
 8004734:	f7ff fb53 	bl	8003dde <LL_ADC_Enable>
	while (LL_ADC_IsActiveFlag_ADRDY(ADC3) == 0);
 8004738:	bf00      	nop
 800473a:	481b      	ldr	r0, [pc, #108]	; (80047a8 <STRHAL_ADC_Run+0x184>)
 800473c:	f7ff fba4 	bl	8003e88 <LL_ADC_IsActiveFlag_ADRDY>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d0f9      	beq.n	800473a <STRHAL_ADC_Run+0x116>
	LL_ADC_Enable(ADC4);
 8004746:	481a      	ldr	r0, [pc, #104]	; (80047b0 <STRHAL_ADC_Run+0x18c>)
 8004748:	f7ff fb49 	bl	8003dde <LL_ADC_Enable>
	while (LL_ADC_IsActiveFlag_ADRDY(ADC4) == 0);
 800474c:	bf00      	nop
 800474e:	4818      	ldr	r0, [pc, #96]	; (80047b0 <STRHAL_ADC_Run+0x18c>)
 8004750:	f7ff fb9a 	bl	8003e88 <LL_ADC_IsActiveFlag_ADRDY>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d0f9      	beq.n	800474e <STRHAL_ADC_Run+0x12a>
	LL_ADC_Enable(ADC5);
 800475a:	4817      	ldr	r0, [pc, #92]	; (80047b8 <STRHAL_ADC_Run+0x194>)
 800475c:	f7ff fb3f 	bl	8003dde <LL_ADC_Enable>
	while (LL_ADC_IsActiveFlag_ADRDY(ADC5) == 0);
 8004760:	bf00      	nop
 8004762:	4815      	ldr	r0, [pc, #84]	; (80047b8 <STRHAL_ADC_Run+0x194>)
 8004764:	f7ff fb90 	bl	8003e88 <LL_ADC_IsActiveFlag_ADRDY>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d0f9      	beq.n	8004762 <STRHAL_ADC_Run+0x13e>

	LL_ADC_REG_StartConversion(ADC1);
 800476e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004772:	f7ff fb75 	bl	8003e60 <LL_ADC_REG_StartConversion>
	LL_ADC_REG_StartConversion(ADC2);
 8004776:	480a      	ldr	r0, [pc, #40]	; (80047a0 <STRHAL_ADC_Run+0x17c>)
 8004778:	f7ff fb72 	bl	8003e60 <LL_ADC_REG_StartConversion>
	LL_ADC_REG_StartConversion(ADC3);
 800477c:	480a      	ldr	r0, [pc, #40]	; (80047a8 <STRHAL_ADC_Run+0x184>)
 800477e:	f7ff fb6f 	bl	8003e60 <LL_ADC_REG_StartConversion>
	LL_ADC_REG_StartConversion(ADC4);
 8004782:	480b      	ldr	r0, [pc, #44]	; (80047b0 <STRHAL_ADC_Run+0x18c>)
 8004784:	f7ff fb6c 	bl	8003e60 <LL_ADC_REG_StartConversion>
	LL_ADC_REG_StartConversion(ADC5);
 8004788:	480b      	ldr	r0, [pc, #44]	; (80047b8 <STRHAL_ADC_Run+0x194>)
 800478a:	f7ff fb69 	bl	8003e60 <LL_ADC_REG_StartConversion>
}
 800478e:	bf00      	nop
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	20000a08 	.word	0x20000a08
 8004798:	08006f74 	.word	0x08006f74
 800479c:	20000a34 	.word	0x20000a34
 80047a0:	50000100 	.word	0x50000100
 80047a4:	20000a60 	.word	0x20000a60
 80047a8:	50000400 	.word	0x50000400
 80047ac:	20000a8c 	.word	0x20000a8c
 80047b0:	50000500 	.word	0x50000500
 80047b4:	20000ab8 	.word	0x20000ab8
 80047b8:	50000600 	.word	0x50000600
 80047bc:	40020400 	.word	0x40020400

080047c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047c0:	b480      	push	{r7}
 80047c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047c4:	4b04      	ldr	r3, [pc, #16]	; (80047d8 <__NVIC_GetPriorityGrouping+0x18>)
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	0a1b      	lsrs	r3, r3, #8
 80047ca:	f003 0307 	and.w	r3, r3, #7
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr
 80047d8:	e000ed00 	.word	0xe000ed00

080047dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	4603      	mov	r3, r0
 80047e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	db0b      	blt.n	8004806 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047ee:	79fb      	ldrb	r3, [r7, #7]
 80047f0:	f003 021f 	and.w	r2, r3, #31
 80047f4:	4907      	ldr	r1, [pc, #28]	; (8004814 <__NVIC_EnableIRQ+0x38>)
 80047f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047fa:	095b      	lsrs	r3, r3, #5
 80047fc:	2001      	movs	r0, #1
 80047fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004806:	bf00      	nop
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	e000e100 	.word	0xe000e100

08004818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	4603      	mov	r3, r0
 8004820:	6039      	str	r1, [r7, #0]
 8004822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004828:	2b00      	cmp	r3, #0
 800482a:	db0a      	blt.n	8004842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	b2da      	uxtb	r2, r3
 8004830:	490c      	ldr	r1, [pc, #48]	; (8004864 <__NVIC_SetPriority+0x4c>)
 8004832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004836:	0112      	lsls	r2, r2, #4
 8004838:	b2d2      	uxtb	r2, r2
 800483a:	440b      	add	r3, r1
 800483c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004840:	e00a      	b.n	8004858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	b2da      	uxtb	r2, r3
 8004846:	4908      	ldr	r1, [pc, #32]	; (8004868 <__NVIC_SetPriority+0x50>)
 8004848:	79fb      	ldrb	r3, [r7, #7]
 800484a:	f003 030f 	and.w	r3, r3, #15
 800484e:	3b04      	subs	r3, #4
 8004850:	0112      	lsls	r2, r2, #4
 8004852:	b2d2      	uxtb	r2, r2
 8004854:	440b      	add	r3, r1
 8004856:	761a      	strb	r2, [r3, #24]
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr
 8004864:	e000e100 	.word	0xe000e100
 8004868:	e000ed00 	.word	0xe000ed00

0800486c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800486c:	b480      	push	{r7}
 800486e:	b089      	sub	sp, #36	; 0x24
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f003 0307 	and.w	r3, r3, #7
 800487e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	f1c3 0307 	rsb	r3, r3, #7
 8004886:	2b04      	cmp	r3, #4
 8004888:	bf28      	it	cs
 800488a:	2304      	movcs	r3, #4
 800488c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	3304      	adds	r3, #4
 8004892:	2b06      	cmp	r3, #6
 8004894:	d902      	bls.n	800489c <NVIC_EncodePriority+0x30>
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	3b03      	subs	r3, #3
 800489a:	e000      	b.n	800489e <NVIC_EncodePriority+0x32>
 800489c:	2300      	movs	r3, #0
 800489e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	fa02 f303 	lsl.w	r3, r2, r3
 80048aa:	43da      	mvns	r2, r3
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	401a      	ands	r2, r3
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	fa01 f303 	lsl.w	r3, r1, r3
 80048be:	43d9      	mvns	r1, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048c4:	4313      	orrs	r3, r2
         );
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3724      	adds	r7, #36	; 0x24
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
	...

080048d4 <LL_AHB2_GRP1_EnableClock>:
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80048dc:	4b08      	ldr	r3, [pc, #32]	; (8004900 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80048de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048e0:	4907      	ldr	r1, [pc, #28]	; (8004900 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80048e8:	4b05      	ldr	r3, [pc, #20]	; (8004900 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80048ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4013      	ands	r3, r2
 80048f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80048f2:	68fb      	ldr	r3, [r7, #12]
}
 80048f4:	bf00      	nop
 80048f6:	3714      	adds	r7, #20
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr
 8004900:	40021000 	.word	0x40021000

08004904 <LL_APB1_GRP1_EnableClock>:
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800490c:	4b08      	ldr	r3, [pc, #32]	; (8004930 <LL_APB1_GRP1_EnableClock+0x2c>)
 800490e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004910:	4907      	ldr	r1, [pc, #28]	; (8004930 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4313      	orrs	r3, r2
 8004916:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004918:	4b05      	ldr	r3, [pc, #20]	; (8004930 <LL_APB1_GRP1_EnableClock+0x2c>)
 800491a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4013      	ands	r3, r2
 8004920:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004922:	68fb      	ldr	r3, [r7, #12]
}
 8004924:	bf00      	nop
 8004926:	3714      	adds	r7, #20
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr
 8004930:	40021000 	.word	0x40021000

08004934 <LL_RCC_SetFDCANClockSource>:
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_FDCANSEL, FDCANxSource);
 800493c:	4b07      	ldr	r3, [pc, #28]	; (800495c <LL_RCC_SetFDCANClockSource+0x28>)
 800493e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004942:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004946:	4905      	ldr	r1, [pc, #20]	; (800495c <LL_RCC_SetFDCANClockSource+0x28>)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4313      	orrs	r3, r2
 800494c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	40021000 	.word	0x40021000

08004960 <STRHAL_CAN_Init_GPIO>:
{ [STRHAL_FDCAN1] =
{ .can = FDCAN1, .can_ram = FDCAN1_MESSAGE_RAM, .state = STRHAL_CAN_STATE_0, .filter_n = 0, .fifo_sub_state = 0 }, [STRHAL_FDCAN2] =
{ .can = FDCAN2, .can_ram = FDCAN2_MESSAGE_RAM, .state = STRHAL_CAN_STATE_0, .filter_n = 0, .fifo_sub_state = 0 } };

static void STRHAL_CAN_Init_GPIO(void)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af00      	add	r7, sp, #0

	LL_GPIO_InitTypeDef GPIO_InitStruct =
 8004966:	463b      	mov	r3, r7
 8004968:	2200      	movs	r2, #0
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	605a      	str	r2, [r3, #4]
 800496e:	609a      	str	r2, [r3, #8]
 8004970:	60da      	str	r2, [r3, #12]
 8004972:	611a      	str	r2, [r3, #16]
 8004974:	615a      	str	r2, [r3, #20]
	{ 0 };

	LL_RCC_SetFDCANClockSource(LL_RCC_FDCAN_CLKSOURCE_PCLK1);
 8004976:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800497a:	f7ff ffdb 	bl	8004934 <LL_RCC_SetFDCANClockSource>

	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_FDCAN);
 800497e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8004982:	f7ff ffbf 	bl	8004904 <LL_APB1_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8004986:	2001      	movs	r0, #1
 8004988:	f7ff ffa4 	bl	80048d4 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800498c:	2002      	movs	r0, #2
 800498e:	f7ff ffa1 	bl	80048d4 <LL_AHB2_GRP1_EnableClock>

	//FDCAN1 GPIO Configuration
	//PA11     ------> FDCAN1_RX
	//PA12     ------> FDCAN1_TX

	GPIO_InitStruct.Pin = LL_GPIO_PIN_11 | LL_GPIO_PIN_12;
 8004992:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004996:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004998:	2302      	movs	r3, #2
 800499a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800499c:	2300      	movs	r3, #0
 800499e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80049a0:	2300      	movs	r3, #0
 80049a2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80049a4:	2303      	movs	r3, #3
 80049a6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_9;
 80049a8:	2309      	movs	r3, #9
 80049aa:	617b      	str	r3, [r7, #20]

	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049ac:	463b      	mov	r3, r7
 80049ae:	4619      	mov	r1, r3
 80049b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80049b4:	f7fe fa67 	bl	8002e86 <LL_GPIO_Init>

	//FDCAN2 GPIO Configuration
	//PB5     ------> FDCAN2_RX
	//PB6     ------> FDCAN2_TX

	GPIO_InitStruct.Pin = LL_GPIO_PIN_5 | LL_GPIO_PIN_6;
 80049b8:	2360      	movs	r3, #96	; 0x60
 80049ba:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80049bc:	2302      	movs	r3, #2
 80049be:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80049c0:	2300      	movs	r3, #0
 80049c2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80049c4:	2300      	movs	r3, #0
 80049c6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80049c8:	2303      	movs	r3, #3
 80049ca:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_9;
 80049cc:	2309      	movs	r3, #9
 80049ce:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049d0:	463b      	mov	r3, r7
 80049d2:	4619      	mov	r1, r3
 80049d4:	4803      	ldr	r0, [pc, #12]	; (80049e4 <STRHAL_CAN_Init_GPIO+0x84>)
 80049d6:	f7fe fa56 	bl	8002e86 <LL_GPIO_Init>

}
 80049da:	bf00      	nop
 80049dc:	3718      	adds	r7, #24
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	48000400 	.word	0x48000400

080049e8 <STRHAL_CAN_Instance_Init>:

int STRHAL_CAN_Instance_Init(STRHAL_FDCAN_Id_t fdcan_id)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	4603      	mov	r3, r0
 80049f0:	71fb      	strb	r3, [r7, #7]
	if (fdcan_id < 0 || fdcan_id >= STRHAL_N_FDCAN)
 80049f2:	79fb      	ldrb	r3, [r7, #7]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d902      	bls.n	80049fe <STRHAL_CAN_Instance_Init+0x16>
		return -1;
 80049f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049fc:	e0e9      	b.n	8004bd2 <STRHAL_CAN_Instance_Init+0x1ea>

	_fdcans[fdcan_id].state = STRHAL_CAN_STATE_INITIALISING;
 80049fe:	79fa      	ldrb	r2, [r7, #7]
 8004a00:	4976      	ldr	r1, [pc, #472]	; (8004bdc <STRHAL_CAN_Instance_Init+0x1f4>)
 8004a02:	4613      	mov	r3, r2
 8004a04:	005b      	lsls	r3, r3, #1
 8004a06:	4413      	add	r3, r2
 8004a08:	00db      	lsls	r3, r3, #3
 8004a0a:	440b      	add	r3, r1
 8004a0c:	3308      	adds	r3, #8
 8004a0e:	2201      	movs	r2, #1
 8004a10:	701a      	strb	r2, [r3, #0]

	FDCAN_GlobalTypeDef *can = _fdcans[fdcan_id].can;
 8004a12:	79fa      	ldrb	r2, [r7, #7]
 8004a14:	4971      	ldr	r1, [pc, #452]	; (8004bdc <STRHAL_CAN_Instance_Init+0x1f4>)
 8004a16:	4613      	mov	r3, r2
 8004a18:	005b      	lsls	r3, r3, #1
 8004a1a:	4413      	add	r3, r2
 8004a1c:	00db      	lsls	r3, r3, #3
 8004a1e:	440b      	add	r3, r1
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	60bb      	str	r3, [r7, #8]
	//Can_Message_RAM *can_ram = handles[can_handle_index].can_ram;
	LL_RCC_SetFDCANClockSource(LL_RCC_FDCAN_CLKSOURCE_PCLK1);
 8004a24:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8004a28:	f7ff ff84 	bl	8004934 <LL_RCC_SetFDCANClockSource>

	CLEAR_BIT(can->CCCR, FDCAN_CCCR_CSR);
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	f023 0210 	bic.w	r2, r3, #16
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	619a      	str	r2, [r3, #24]

	uint32_t tot = 0;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	60fb      	str	r3, [r7, #12]

	// Check Sleep mode acknowledge
	while ((can->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004a3c:	e009      	b.n	8004a52 <STRHAL_CAN_Instance_Init+0x6a>
	{
		tot++;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	3301      	adds	r3, #1
 8004a42:	60fb      	str	r3, [r7, #12]
		if (tot > STRHAL_CAN_START_TOT)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4a66      	ldr	r2, [pc, #408]	; (8004be0 <STRHAL_CAN_Instance_Init+0x1f8>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d902      	bls.n	8004a52 <STRHAL_CAN_Instance_Init+0x6a>
			return -1;
 8004a4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a50:	e0bf      	b.n	8004bd2 <STRHAL_CAN_Instance_Init+0x1ea>
	while ((can->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	f003 0308 	and.w	r3, r3, #8
 8004a5a:	2b08      	cmp	r3, #8
 8004a5c:	d0ef      	beq.n	8004a3e <STRHAL_CAN_Instance_Init+0x56>
	}

	SET_BIT(can->CCCR, FDCAN_CCCR_INIT);
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	f043 0201 	orr.w	r2, r3, #1
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	619a      	str	r2, [r3, #24]

	// Wait until the INIT bit into CCCR register is set
	while ((can->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004a6a:	e009      	b.n	8004a80 <STRHAL_CAN_Instance_Init+0x98>
	{
		tot++;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	3301      	adds	r3, #1
 8004a70:	60fb      	str	r3, [r7, #12]
		if (tot > STRHAL_CAN_START_TOT)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	4a5a      	ldr	r2, [pc, #360]	; (8004be0 <STRHAL_CAN_Instance_Init+0x1f8>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d902      	bls.n	8004a80 <STRHAL_CAN_Instance_Init+0x98>
			return -1;
 8004a7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a7e:	e0a8      	b.n	8004bd2 <STRHAL_CAN_Instance_Init+0x1ea>
	while ((can->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	f003 0301 	and.w	r3, r3, #1
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d0ef      	beq.n	8004a6c <STRHAL_CAN_Instance_Init+0x84>
	}

	// Enable configuration change
	SET_BIT(can->CCCR, FDCAN_CCCR_CCE);
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	f043 0202 	orr.w	r2, r3, #2
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	619a      	str	r2, [r3, #24]
	// Wait until the CCE bit into CCCR register is set
	while ((can->CCCR & FDCAN_CCCR_CCE) == 0U)
 8004a98:	e009      	b.n	8004aae <STRHAL_CAN_Instance_Init+0xc6>
	{
		tot++;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	60fb      	str	r3, [r7, #12]
		if (tot > STRHAL_CAN_START_TOT)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4a4f      	ldr	r2, [pc, #316]	; (8004be0 <STRHAL_CAN_Instance_Init+0x1f8>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d902      	bls.n	8004aae <STRHAL_CAN_Instance_Init+0xc6>
			return -1;
 8004aa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004aac:	e091      	b.n	8004bd2 <STRHAL_CAN_Instance_Init+0x1ea>
	while ((can->CCCR & FDCAN_CCCR_CCE) == 0U)
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d0ef      	beq.n	8004a9a <STRHAL_CAN_Instance_Init+0xb2>
	}

	//SET_BIT(can->CCCR, FDCAN_CCCR_DAR);  //AutoRetransmission Disabled
	CLEAR_BIT(can->CCCR, FDCAN_CCCR_DAR);  //AutoRetransmission Enabled
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	619a      	str	r2, [r3, #24]

	CLEAR_BIT(can->CCCR, FDCAN_CCCR_TXP);  //transmit pause Disabled
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	619a      	str	r2, [r3, #24]

	SET_BIT(can->CCCR, FDCAN_CCCR_PXHD); //Protocol Exception Handling  Disabled
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	619a      	str	r2, [r3, #24]

	SET_BIT(can->CCCR, FDCAN_FRAME_FD_BRS); //FD mode with BitRate Switching
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	619a      	str	r2, [r3, #24]

	CLEAR_BIT(can->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	f023 02a4 	bic.w	r2, r3, #164	; 0xa4
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	619a      	str	r2, [r3, #24]
	CLEAR_BIT(can->TEST, FDCAN_TEST_LBCK);
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	f023 0210 	bic.w	r2, r3, #16
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	611a      	str	r2, [r3, #16]

	//if(fdcan_id == STRHAL_FDCAN1) { // TODO find out why this is here - it is here because the FDCAN_CONFIG reg needs only to be set once
	MODIFY_REG(FDCAN_CONFIG->CKDIV, FDCAN_CKDIV_PDIV, FDCAN_CLOCK_DIV2);
 8004b02:	4b38      	ldr	r3, [pc, #224]	; (8004be4 <STRHAL_CAN_Instance_Init+0x1fc>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f023 030f 	bic.w	r3, r3, #15
 8004b0a:	4a36      	ldr	r2, [pc, #216]	; (8004be4 <STRHAL_CAN_Instance_Init+0x1fc>)
 8004b0c:	f043 0301 	orr.w	r3, r3, #1
 8004b10:	6013      	str	r3, [r2, #0]
	//}

	// Set the nominal bit timing register
	can->NBTP = ((((uint32_t) FDCAN_NOMINAL_SYNC_JUMP_WIDTH - 1U) << FDCAN_NBTP_NSJW_Pos) | (((uint32_t) FDCAN_NOMINAL_TIMESEG_1 - 1U) << FDCAN_NBTP_NTSEG1_Pos) | (((uint32_t) FDCAN_NOMINAL_TIMESEG_2 - 1U) << FDCAN_NBTP_NTSEG2_Pos) | (((uint32_t) FDCAN_NOMINAL_PRESCALER - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	4a34      	ldr	r2, [pc, #208]	; (8004be8 <STRHAL_CAN_Instance_Init+0x200>)
 8004b16:	61da      	str	r2, [r3, #28]

	// Bit Rate Switching Enable
	can->DBTP = ((((uint32_t) FDCAN_DATA_SYNC_JUMP_WIDTH - 1U) << FDCAN_DBTP_DSJW_Pos) | (((uint32_t) FDCAN_DATA_TIMESEG_1 - 1U) << FDCAN_DBTP_DTSEG1_Pos) | (((uint32_t) FDCAN_DATA_TIMESEG_2 - 1U) << FDCAN_DBTP_DTSEG2_Pos) | (((uint32_t) FDCAN_DATA_PRESCALER - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	4a34      	ldr	r2, [pc, #208]	; (8004bec <STRHAL_CAN_Instance_Init+0x204>)
 8004b1c:	60da      	str	r2, [r3, #12]

	MODIFY_REG(can->RXGFC, FDCAN_RXGFC_LSS, (STRHAL_CAN_STD_FILTER_NUMBER << FDCAN_RXGFC_LSS_Pos)); // Standard filter elements number
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b24:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	MODIFY_REG(can->RXGFC, FDCAN_RXGFC_LSE, (STRHAL_CAN_EXT_FILTER_NUMBER << FDCAN_RXGFC_LSE_Pos)); // Extended filter elements number
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b34:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	MODIFY_REG(can->RXGFC, FDCAN_RXGFC_F0OM, (FDCAN_RX_FIFO_BLOCKING << FDCAN_RXGFC_F0OM_Pos)); // FIFO 0 operation mode
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b44:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	MODIFY_REG(can->RXGFC, FDCAN_RXGFC_F1OM, (FDCAN_RX_FIFO_BLOCKING << FDCAN_RXGFC_F1OM_Pos)); // FIFO 1 operation mode
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	MODIFY_REG(can->RXGFC, FDCAN_RXGFC_ANFS, (FDCAN_REJECT << FDCAN_RXGFC_ANFS_Pos)); // Accept Non-matching Frames Standard
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b64:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004b68:	f043 0220 	orr.w	r2, r3, #32
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	MODIFY_REG(can->RXGFC, FDCAN_RXGFC_ANFE, (FDCAN_REJECT << FDCAN_RXGFC_ANFE_Pos)); // Accept Non-matching Frames Extended
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b78:	f023 030c 	bic.w	r3, r3, #12
 8004b7c:	f043 0208 	orr.w	r2, r3, #8
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	MODIFY_REG(can->RXGFC, FDCAN_RXGFC_RRFS, (FDCAN_FILTER_REMOTE << FDCAN_RXGFC_RRFS_Pos)); // Reject Remote Frames Standard
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b8c:	f023 0202 	bic.w	r2, r3, #2
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	MODIFY_REG(can->RXGFC, FDCAN_RXGFC_RRFE, (FDCAN_REJECT_REMOTE << FDCAN_RXGFC_RRFE_Pos)); // Reject Remote Frames Extended
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b9c:	f043 0201 	orr.w	r2, r3, #1
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	CLEAR_BIT(can->TXBC, FDCAN_TXBC_TFQM); // Tx FIFO/Queue Mode
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004bac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

	//Config TxDelayCompensation
	can->TDCR = ((FDCAN_TDC_FILTER << FDCAN_TDCR_TDCF_Pos) | (FDCAN_TDC_OFFSET << FDCAN_TDCR_TDCO_Pos));
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	f240 5206 	movw	r2, #1286	; 0x506
 8004bbc:	649a      	str	r2, [r3, #72]	; 0x48

	// Enable transmitter delay compensation
	SET_BIT(can->DBTP, FDCAN_DBTP_TDC);
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	60da      	str	r2, [r3, #12]

	LL_mDelay(100);
 8004bca:	2064      	movs	r0, #100	; 0x64
 8004bcc:	f7fe fb96 	bl	80032fc <LL_mDelay>

	return 0;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	20000004 	.word	0x20000004
 8004be0:	00f42400 	.word	0x00f42400
 8004be4:	40006500 	.word	0x40006500
 8004be8:	0001160f 	.word	0x0001160f
 8004bec:	00010611 	.word	0x00010611

08004bf0 <STRHAL_CAN_Subscribe>:

int STRHAL_CAN_Subscribe(STRHAL_FDCAN_Id_t fdcan_id, STRHAL_FDCAN_Rx_Id_t rx_id, STRHAL_FDCAN_Filter_t *filter, uint8_t n, STRHAL_CAN_Receptor_t receptor)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b087      	sub	sp, #28
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	603a      	str	r2, [r7, #0]
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	71fb      	strb	r3, [r7, #7]
 8004bfe:	460b      	mov	r3, r1
 8004c00:	71bb      	strb	r3, [r7, #6]
 8004c02:	4613      	mov	r3, r2
 8004c04:	717b      	strb	r3, [r7, #5]
	/* Error handling for user inputs */
	if (fdcan_id < 0 || fdcan_id >= STRHAL_N_FDCAN) // invalid fdcan instance
 8004c06:	79fb      	ldrb	r3, [r7, #7]
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d902      	bls.n	8004c12 <STRHAL_CAN_Subscribe+0x22>
		return -1;
 8004c0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c10:	e0bd      	b.n	8004d8e <STRHAL_CAN_Subscribe+0x19e>

	STRHAL_CAN_Handle_t *fdcan = &_fdcans[fdcan_id];
 8004c12:	79fa      	ldrb	r2, [r7, #7]
 8004c14:	4613      	mov	r3, r2
 8004c16:	005b      	lsls	r3, r3, #1
 8004c18:	4413      	add	r3, r2
 8004c1a:	00db      	lsls	r3, r3, #3
 8004c1c:	4a5f      	ldr	r2, [pc, #380]	; (8004d9c <STRHAL_CAN_Subscribe+0x1ac>)
 8004c1e:	4413      	add	r3, r2
 8004c20:	613b      	str	r3, [r7, #16]
	if (fdcan->state != STRHAL_CAN_STATE_INITIALISING)	// fdcan not in init mode (Subscribe called in wrong order)
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	7a1b      	ldrb	r3, [r3, #8]
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d002      	beq.n	8004c32 <STRHAL_CAN_Subscribe+0x42>
		return -1;
 8004c2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c30:	e0ad      	b.n	8004d8e <STRHAL_CAN_Subscribe+0x19e>

	if (filter == NULL || receptor == NULL) // Nullptr check
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d002      	beq.n	8004c3e <STRHAL_CAN_Subscribe+0x4e>
 8004c38:	6a3b      	ldr	r3, [r7, #32]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d101      	bne.n	8004c42 <STRHAL_CAN_Subscribe+0x52>
		return 0;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	e0a5      	b.n	8004d8e <STRHAL_CAN_Subscribe+0x19e>

	if (n > STRHAL_CAN_RAM_N_FILTER - fdcan->filter_n) // Correct Filter Nbr
 8004c42:	797a      	ldrb	r2, [r7, #5]
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	7d1b      	ldrb	r3, [r3, #20]
 8004c48:	f1c3 031c 	rsb	r3, r3, #28
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	dd04      	ble.n	8004c5a <STRHAL_CAN_Subscribe+0x6a>
		n = fdcan->filter_n - n;
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	7d1a      	ldrb	r2, [r3, #20]
 8004c54:	797b      	ldrb	r3, [r7, #5]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	717b      	strb	r3, [r7, #5]

	if (fdcan->fifo_sub_state & (1U << rx_id)) // Already subscribed to this fifo
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	7d5b      	ldrb	r3, [r3, #21]
 8004c5e:	461a      	mov	r2, r3
 8004c60:	79bb      	ldrb	r3, [r7, #6]
 8004c62:	fa22 f303 	lsr.w	r3, r2, r3
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d002      	beq.n	8004c74 <STRHAL_CAN_Subscribe+0x84>
		return -1;
 8004c6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c72:	e08c      	b.n	8004d8e <STRHAL_CAN_Subscribe+0x19e>

	Can_Message_RAM *can_ram = fdcan->can_ram;
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	60fb      	str	r3, [r7, #12]

	uint32_t sfec;

	switch (rx_id)
 8004c7a:	79bb      	ldrb	r3, [r7, #6]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d002      	beq.n	8004c86 <STRHAL_CAN_Subscribe+0x96>
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d010      	beq.n	8004ca6 <STRHAL_CAN_Subscribe+0xb6>
 8004c84:	e01b      	b.n	8004cbe <STRHAL_CAN_Subscribe+0xce>
	{
		case STRHAL_FDCAN_RX0:
			fdcan->rxReceptors[0] = receptor;
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	6a3a      	ldr	r2, [r7, #32]
 8004c8a:	60da      	str	r2, [r3, #12]
			fdcan->fifo_sub_state |= 1U << STRHAL_FDCAN_RX0;
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	7d5b      	ldrb	r3, [r3, #21]
 8004c90:	f043 0301 	orr.w	r3, r3, #1
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	755a      	strb	r2, [r3, #21]
			sfec = FDCAN_FILTER_TO_RXFIFO0;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	60bb      	str	r3, [r7, #8]
			break;
 8004c9e:	bf00      	nop
		default:
			return -1;
	}

	uint8_t i;
	for (i = 0; i < n; i++, fdcan->filter_n++)
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	75fb      	strb	r3, [r7, #23]
 8004ca4:	e05f      	b.n	8004d66 <STRHAL_CAN_Subscribe+0x176>
			fdcan->rxReceptors[1] = receptor;
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	6a3a      	ldr	r2, [r7, #32]
 8004caa:	611a      	str	r2, [r3, #16]
			fdcan->fifo_sub_state |= 1U << STRHAL_FDCAN_RX1;
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	7d5b      	ldrb	r3, [r3, #21]
 8004cb0:	f043 0302 	orr.w	r3, r3, #2
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	755a      	strb	r2, [r3, #21]
			sfec = FDCAN_FILTER_TO_RXFIFO1;
 8004cba:	2302      	movs	r3, #2
 8004cbc:	60bb      	str	r3, [r7, #8]
			return -1;
 8004cbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cc2:	e064      	b.n	8004d8e <STRHAL_CAN_Subscribe+0x19e>
	{
		can_ram->std_filters[i].S0.bit.SFEC = sfec;
 8004cc4:	7df9      	ldrb	r1, [r7, #23]
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	f003 0307 	and.w	r3, r3, #7
 8004ccc:	b2d8      	uxtb	r0, r3
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004cd4:	f360 63dd 	bfi	r3, r0, #27, #3
 8004cd8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		can_ram->std_filters[i].S0.bit.SFID1 = filter[i].value_id1;
 8004cdc:	7dfa      	ldrb	r2, [r7, #23]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	005b      	lsls	r3, r3, #1
 8004ce2:	4413      	add	r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	4413      	add	r3, r2
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	7df9      	ldrb	r1, [r7, #23]
 8004cf0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cf4:	b298      	uxth	r0, r3
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004cfc:	f360 431a 	bfi	r3, r0, #16, #11
 8004d00:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		can_ram->std_filters[i].S0.bit.SFID2 = filter[i].mask_id2;
 8004d04:	7dfa      	ldrb	r2, [r7, #23]
 8004d06:	4613      	mov	r3, r2
 8004d08:	005b      	lsls	r3, r3, #1
 8004d0a:	4413      	add	r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	461a      	mov	r2, r3
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	4413      	add	r3, r2
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	7df9      	ldrb	r1, [r7, #23]
 8004d18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d1c:	b298      	uxth	r0, r3
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004d24:	f360 030a 	bfi	r3, r0, #0, #11
 8004d28:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		can_ram->std_filters[i].S0.bit.SFT = filter[i].type;
 8004d2c:	7dfa      	ldrb	r2, [r7, #23]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	005b      	lsls	r3, r3, #1
 8004d32:	4413      	add	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	461a      	mov	r2, r3
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	7df9      	ldrb	r1, [r7, #23]
 8004d40:	f003 0303 	and.w	r3, r3, #3
 8004d44:	b2d8      	uxtb	r0, r3
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004d4c:	f360 739f 	bfi	r3, r0, #30, #2
 8004d50:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	for (i = 0; i < n; i++, fdcan->filter_n++)
 8004d54:	7dfb      	ldrb	r3, [r7, #23]
 8004d56:	3301      	adds	r3, #1
 8004d58:	75fb      	strb	r3, [r7, #23]
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	7d1b      	ldrb	r3, [r3, #20]
 8004d5e:	3301      	adds	r3, #1
 8004d60:	b2da      	uxtb	r2, r3
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	751a      	strb	r2, [r3, #20]
 8004d66:	7dfa      	ldrb	r2, [r7, #23]
 8004d68:	797b      	ldrb	r3, [r7, #5]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d3aa      	bcc.n	8004cc4 <STRHAL_CAN_Subscribe+0xd4>
	}
	MODIFY_REG(fdcan->can->RXGFC, FDCAN_RXGFC_LSS, (fdcan->filter_n << FDCAN_RXGFC_LSS_Pos)); // Standard filter elements number
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d76:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	7d1b      	ldrb	r3, [r3, #20]
 8004d7e:	041b      	lsls	r3, r3, #16
 8004d80:	4619      	mov	r1, r3
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	430a      	orrs	r2, r1
 8004d88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	return n;
 8004d8c:	797b      	ldrb	r3, [r7, #5]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	371c      	adds	r7, #28
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	20000004 	.word	0x20000004

08004da0 <STRHAL_CAN_Init>:

STRHAL_Oof_t STRHAL_CAN_Init()
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
	STRHAL_Oof_t status = STRHAL_NOICE;
 8004da6:	2300      	movs	r3, #0
 8004da8:	71fb      	strb	r3, [r7, #7]
	STRHAL_CAN_Init_GPIO();
 8004daa:	f7ff fdd9 	bl	8004960 <STRHAL_CAN_Init_GPIO>

	return status;
 8004dae:	79fb      	ldrb	r3, [r7, #7]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <STRHAL_CAN_Send>:
	*rxfXA = i & 0x7;
	return n;
}

int32_t STRHAL_CAN_Send(STRHAL_FDCAN_Id_t fdcan_id, uint32_t id, const uint8_t *data, uint32_t n)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b08b      	sub	sp, #44	; 0x2c
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60b9      	str	r1, [r7, #8]
 8004dc0:	607a      	str	r2, [r7, #4]
 8004dc2:	603b      	str	r3, [r7, #0]
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	73fb      	strb	r3, [r7, #15]
	if (fdcan_id < 0 || fdcan_id >= STRHAL_N_FDCAN)
 8004dc8:	7bfb      	ldrb	r3, [r7, #15]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d902      	bls.n	8004dd4 <STRHAL_CAN_Send+0x1c>
		return -1;
 8004dce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004dd2:	e0b8      	b.n	8004f46 <STRHAL_CAN_Send+0x18e>

	if (n == 0)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <STRHAL_CAN_Send+0x26>
		return 0;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	e0b3      	b.n	8004f46 <STRHAL_CAN_Send+0x18e>

	FDCAN_GlobalTypeDef *can = _fdcans[fdcan_id].can;
 8004dde:	7bfa      	ldrb	r2, [r7, #15]
 8004de0:	495c      	ldr	r1, [pc, #368]	; (8004f54 <STRHAL_CAN_Send+0x19c>)
 8004de2:	4613      	mov	r3, r2
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	4413      	add	r3, r2
 8004de8:	00db      	lsls	r3, r3, #3
 8004dea:	440b      	add	r3, r1
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	61fb      	str	r3, [r7, #28]
	Can_Message_RAM *can_ram = _fdcans[fdcan_id].can_ram;
 8004df0:	7bfa      	ldrb	r2, [r7, #15]
 8004df2:	4958      	ldr	r1, [pc, #352]	; (8004f54 <STRHAL_CAN_Send+0x19c>)
 8004df4:	4613      	mov	r3, r2
 8004df6:	005b      	lsls	r3, r3, #1
 8004df8:	4413      	add	r3, r2
 8004dfa:	00db      	lsls	r3, r3, #3
 8004dfc:	440b      	add	r3, r1
 8004dfe:	3304      	adds	r3, #4
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	61bb      	str	r3, [r7, #24]

	if (!(can->TXFQS & FDCAN_TXFQS_TFFL))
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004e0a:	f003 0307 	and.w	r3, r3, #7
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d102      	bne.n	8004e18 <STRHAL_CAN_Send+0x60>
		return -1;
 8004e12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e16:	e096      	b.n	8004f46 <STRHAL_CAN_Send+0x18e>

	if (n > FDCAN_ELMTS_ARRAY_SIZE)
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	2b40      	cmp	r3, #64	; 0x40
 8004e1c:	d901      	bls.n	8004e22 <STRHAL_CAN_Send+0x6a>
		n = FDCAN_ELMTS_ARRAY_SIZE;
 8004e1e:	2340      	movs	r3, #64	; 0x40
 8004e20:	603b      	str	r3, [r7, #0]

	uint8_t i = ((can->TXFQS & FDCAN_TXFQS_TFQPI_Msk) >> FDCAN_TXFQS_TFQPI_Pos);
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004e28:	0c1b      	lsrs	r3, r3, #16
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	f003 0303 	and.w	r3, r3, #3
 8004e30:	75fb      	strb	r3, [r7, #23]

	Can_Tx_Element *frame = &can_ram->tx_buffer[i];
 8004e32:	7dfa      	ldrb	r2, [r7, #23]
 8004e34:	4613      	mov	r3, r2
 8004e36:	00db      	lsls	r3, r3, #3
 8004e38:	4413      	add	r3, r2
 8004e3a:	00db      	lsls	r3, r3, #3
 8004e3c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	4413      	add	r3, r2
 8004e44:	613b      	str	r3, [r7, #16]
	frame->T0.bit.XTD = 0;
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	6813      	ldr	r3, [r2, #0]
 8004e4a:	f36f 739e 	bfc	r3, #30, #1
 8004e4e:	6013      	str	r3, [r2, #0]
	frame->T0.bit.ID = id << 18;
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	049b      	lsls	r3, r3, #18
 8004e54:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	6813      	ldr	r3, [r2, #0]
 8004e5c:	f361 031c 	bfi	r3, r1, #0, #29
 8004e60:	6013      	str	r3, [r2, #0]
	frame->T0.bit.RTR = 0;
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	6813      	ldr	r3, [r2, #0]
 8004e66:	f36f 735d 	bfc	r3, #29, #1
 8004e6a:	6013      	str	r3, [r2, #0]
	frame->T1.bit.FDF = 1;
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	6853      	ldr	r3, [r2, #4]
 8004e70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e74:	6053      	str	r3, [r2, #4]
	frame->T1.bit.BRS = 1;
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	6853      	ldr	r3, [r2, #4]
 8004e7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e7e:	6053      	str	r3, [r2, #4]
	frame->T1.bit.DLC = Can_LengthToDlc[n];
 8004e80:	4a35      	ldr	r2, [pc, #212]	; (8004f58 <STRHAL_CAN_Send+0x1a0>)
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e88:	f003 030f 	and.w	r3, r3, #15
 8004e8c:	b2d9      	uxtb	r1, r3
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	6853      	ldr	r3, [r2, #4]
 8004e92:	f361 4313 	bfi	r3, r1, #16, #4
 8004e96:	6053      	str	r3, [r2, #4]
	frame->T1.bit.EFCC = 0;
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	6853      	ldr	r3, [r2, #4]
 8004e9c:	f36f 53d7 	bfc	r3, #23, #1
 8004ea0:	6053      	str	r3, [r2, #4]
	frame->T1.bit.MM = 0;
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	6853      	ldr	r3, [r2, #4]
 8004ea6:	f36f 631f 	bfc	r3, #24, #8
 8004eaa:	6053      	str	r3, [r2, #4]
	/*if(frame->T0.bit.ID == 0 || frame->T1.bit.DLC == 0) {
	 uint8_t temp = 1;
	 (void) temp;
	 }*/

	uint32_t j = 0;
 8004eac:	2300      	movs	r3, #0
 8004eae:	627b      	str	r3, [r7, #36]	; 0x24
	for (uint32_t c = 0; c < n; c += 4)
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	623b      	str	r3, [r7, #32]
 8004eb4:	e025      	b.n	8004f02 <STRHAL_CAN_Send+0x14a>
		frame->data.word[j++] = data[c] | data[c + 1] << 8 | data[c + 2] << 16 | data[c + 3] << 24;
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	6a3b      	ldr	r3, [r7, #32]
 8004eba:	4413      	add	r3, r2
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	6a3b      	ldr	r3, [r7, #32]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	021b      	lsls	r3, r3, #8
 8004ecc:	ea41 0203 	orr.w	r2, r1, r3
 8004ed0:	6a3b      	ldr	r3, [r7, #32]
 8004ed2:	3302      	adds	r3, #2
 8004ed4:	6879      	ldr	r1, [r7, #4]
 8004ed6:	440b      	add	r3, r1
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	041b      	lsls	r3, r3, #16
 8004edc:	431a      	orrs	r2, r3
 8004ede:	6a3b      	ldr	r3, [r7, #32]
 8004ee0:	3303      	adds	r3, #3
 8004ee2:	6879      	ldr	r1, [r7, #4]
 8004ee4:	440b      	add	r3, r1
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	061b      	lsls	r3, r3, #24
 8004eea:	ea42 0103 	orr.w	r1, r2, r3
 8004eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef0:	1c5a      	adds	r2, r3, #1
 8004ef2:	627a      	str	r2, [r7, #36]	; 0x24
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	3302      	adds	r3, #2
 8004ef8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint32_t c = 0; c < n; c += 4)
 8004efc:	6a3b      	ldr	r3, [r7, #32]
 8004efe:	3304      	adds	r3, #4
 8004f00:	623b      	str	r3, [r7, #32]
 8004f02:	6a3a      	ldr	r2, [r7, #32]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d3d5      	bcc.n	8004eb6 <STRHAL_CAN_Send+0xfe>
	while (j < Can_DlcToLength[Can_LengthToDlc[n]] / 4)
 8004f0a:	e007      	b.n	8004f1c <STRHAL_CAN_Send+0x164>
		frame->data.word[j++] = 0;
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	1c5a      	adds	r2, r3, #1
 8004f10:	627a      	str	r2, [r7, #36]	; 0x24
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	3302      	adds	r3, #2
 8004f16:	2100      	movs	r1, #0
 8004f18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	while (j < Can_DlcToLength[Can_LengthToDlc[n]] / 4)
 8004f1c:	4a0e      	ldr	r2, [pc, #56]	; (8004f58 <STRHAL_CAN_Send+0x1a0>)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f24:	4a0d      	ldr	r2, [pc, #52]	; (8004f5c <STRHAL_CAN_Send+0x1a4>)
 8004f26:	5cd3      	ldrb	r3, [r2, r3]
 8004f28:	089b      	lsrs	r3, r3, #2
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d3eb      	bcc.n	8004f0c <STRHAL_CAN_Send+0x154>

	can->TXBAR = (1 << i);
 8004f34:	7dfb      	ldrb	r3, [r7, #23]
 8004f36:	2201      	movs	r2, #1
 8004f38:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

	return n;
 8004f44:	683b      	ldr	r3, [r7, #0]
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	372c      	adds	r7, #44	; 0x2c
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	20000004 	.word	0x20000004
 8004f58:	080075b4 	.word	0x080075b4
 8004f5c:	080075a4 	.word	0x080075a4

08004f60 <STRHAL_CAN_Run>:

void STRHAL_CAN_Run()
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
	// End initialisation - start FDCANs
	STRHAL_CAN_Handle_t *fdcan1 = &_fdcans[STRHAL_FDCAN1];
 8004f66:	4b55      	ldr	r3, [pc, #340]	; (80050bc <STRHAL_CAN_Run+0x15c>)
 8004f68:	607b      	str	r3, [r7, #4]
	STRHAL_CAN_Handle_t *fdcan2 = &_fdcans[STRHAL_FDCAN2];
 8004f6a:	4b55      	ldr	r3, [pc, #340]	; (80050c0 <STRHAL_CAN_Run+0x160>)
 8004f6c:	603b      	str	r3, [r7, #0]
	if (fdcan1->state == STRHAL_CAN_STATE_INITIALISING)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	7a1b      	ldrb	r3, [r3, #8]
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d14b      	bne.n	8005010 <STRHAL_CAN_Run+0xb0>
	{
		if (fdcan1->fifo_sub_state & (1U << STRHAL_FDCAN_RX0))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	7d5b      	ldrb	r3, [r3, #21]
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d011      	beq.n	8004fa8 <STRHAL_CAN_Run+0x48>
		{
			CLEAR_BIT(FDCAN1->ILS, FDCAN_ILS_RXFIFO0);
 8004f84:	4b4f      	ldr	r3, [pc, #316]	; (80050c4 <STRHAL_CAN_Run+0x164>)
 8004f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f88:	4a4e      	ldr	r2, [pc, #312]	; (80050c4 <STRHAL_CAN_Run+0x164>)
 8004f8a:	f023 0301 	bic.w	r3, r3, #1
 8004f8e:	6593      	str	r3, [r2, #88]	; 0x58
			SET_BIT(FDCAN1->ILE, FDCAN_ILE_EINT0);
 8004f90:	4b4c      	ldr	r3, [pc, #304]	; (80050c4 <STRHAL_CAN_Run+0x164>)
 8004f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f94:	4a4b      	ldr	r2, [pc, #300]	; (80050c4 <STRHAL_CAN_Run+0x164>)
 8004f96:	f043 0301 	orr.w	r3, r3, #1
 8004f9a:	65d3      	str	r3, [r2, #92]	; 0x5c
			SET_BIT(FDCAN1->IE, FDCAN_IE_RF0NE);
 8004f9c:	4b49      	ldr	r3, [pc, #292]	; (80050c4 <STRHAL_CAN_Run+0x164>)
 8004f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa0:	4a48      	ldr	r2, [pc, #288]	; (80050c4 <STRHAL_CAN_Run+0x164>)
 8004fa2:	f043 0301 	orr.w	r3, r3, #1
 8004fa6:	6553      	str	r3, [r2, #84]	; 0x54
		}
		if (fdcan1->fifo_sub_state & (1U << STRHAL_FDCAN_RX1))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	7d5b      	ldrb	r3, [r3, #21]
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d011      	beq.n	8004fd8 <STRHAL_CAN_Run+0x78>
		{
			CLEAR_BIT(FDCAN1->ILS, FDCAN_ILS_RXFIFO1);
 8004fb4:	4b43      	ldr	r3, [pc, #268]	; (80050c4 <STRHAL_CAN_Run+0x164>)
 8004fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb8:	4a42      	ldr	r2, [pc, #264]	; (80050c4 <STRHAL_CAN_Run+0x164>)
 8004fba:	f023 0302 	bic.w	r3, r3, #2
 8004fbe:	6593      	str	r3, [r2, #88]	; 0x58
			SET_BIT(FDCAN1->ILE, FDCAN_ILE_EINT0);
 8004fc0:	4b40      	ldr	r3, [pc, #256]	; (80050c4 <STRHAL_CAN_Run+0x164>)
 8004fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fc4:	4a3f      	ldr	r2, [pc, #252]	; (80050c4 <STRHAL_CAN_Run+0x164>)
 8004fc6:	f043 0301 	orr.w	r3, r3, #1
 8004fca:	65d3      	str	r3, [r2, #92]	; 0x5c
			SET_BIT(FDCAN1->IE, FDCAN_IE_RF1NE);
 8004fcc:	4b3d      	ldr	r3, [pc, #244]	; (80050c4 <STRHAL_CAN_Run+0x164>)
 8004fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd0:	4a3c      	ldr	r2, [pc, #240]	; (80050c4 <STRHAL_CAN_Run+0x164>)
 8004fd2:	f043 0308 	orr.w	r3, r3, #8
 8004fd6:	6553      	str	r3, [r2, #84]	; 0x54
		}

		NVIC_SetPriority(FDCAN1_IT0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 1));
 8004fd8:	f7ff fbf2 	bl	80047c0 <__NVIC_GetPriorityGrouping>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2201      	movs	r2, #1
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7ff fc42 	bl	800486c <NVIC_EncodePriority>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	4619      	mov	r1, r3
 8004fec:	2015      	movs	r0, #21
 8004fee:	f7ff fc13 	bl	8004818 <__NVIC_SetPriority>
		NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8004ff2:	2015      	movs	r0, #21
 8004ff4:	f7ff fbf2 	bl	80047dc <__NVIC_EnableIRQ>

		CLEAR_BIT(FDCAN1->CCCR, FDCAN_CCCR_INIT);
 8004ff8:	4b32      	ldr	r3, [pc, #200]	; (80050c4 <STRHAL_CAN_Run+0x164>)
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	4a31      	ldr	r2, [pc, #196]	; (80050c4 <STRHAL_CAN_Run+0x164>)
 8004ffe:	f023 0301 	bic.w	r3, r3, #1
 8005002:	6193      	str	r3, [r2, #24]

		_fdcans[STRHAL_FDCAN1].state = STRHAL_CAN_STATE_RUNNING;
 8005004:	4b2d      	ldr	r3, [pc, #180]	; (80050bc <STRHAL_CAN_Run+0x15c>)
 8005006:	2202      	movs	r2, #2
 8005008:	721a      	strb	r2, [r3, #8]
		LL_mDelay(100);
 800500a:	2064      	movs	r0, #100	; 0x64
 800500c:	f7fe f976 	bl	80032fc <LL_mDelay>
	}
	if (fdcan2->state == STRHAL_CAN_STATE_INITIALISING)
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	7a1b      	ldrb	r3, [r3, #8]
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b01      	cmp	r3, #1
 8005018:	d14c      	bne.n	80050b4 <STRHAL_CAN_Run+0x154>
	{
		if (fdcan2->fifo_sub_state & (1U << STRHAL_FDCAN_RX0))
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	7d5b      	ldrb	r3, [r3, #21]
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b00      	cmp	r3, #0
 8005024:	d011      	beq.n	800504a <STRHAL_CAN_Run+0xea>
		{
			CLEAR_BIT(FDCAN2->ILS, FDCAN_ILS_RXFIFO0);
 8005026:	4b28      	ldr	r3, [pc, #160]	; (80050c8 <STRHAL_CAN_Run+0x168>)
 8005028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800502a:	4a27      	ldr	r2, [pc, #156]	; (80050c8 <STRHAL_CAN_Run+0x168>)
 800502c:	f023 0301 	bic.w	r3, r3, #1
 8005030:	6593      	str	r3, [r2, #88]	; 0x58
			SET_BIT(FDCAN2->ILE, FDCAN_ILE_EINT0);
 8005032:	4b25      	ldr	r3, [pc, #148]	; (80050c8 <STRHAL_CAN_Run+0x168>)
 8005034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005036:	4a24      	ldr	r2, [pc, #144]	; (80050c8 <STRHAL_CAN_Run+0x168>)
 8005038:	f043 0301 	orr.w	r3, r3, #1
 800503c:	65d3      	str	r3, [r2, #92]	; 0x5c
			SET_BIT(FDCAN2->IE, FDCAN_IE_RF0NE);
 800503e:	4b22      	ldr	r3, [pc, #136]	; (80050c8 <STRHAL_CAN_Run+0x168>)
 8005040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005042:	4a21      	ldr	r2, [pc, #132]	; (80050c8 <STRHAL_CAN_Run+0x168>)
 8005044:	f043 0301 	orr.w	r3, r3, #1
 8005048:	6553      	str	r3, [r2, #84]	; 0x54
		}
		if (fdcan2->fifo_sub_state & (1U << STRHAL_FDCAN_RX1))
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	7d5b      	ldrb	r3, [r3, #21]
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d011      	beq.n	800507a <STRHAL_CAN_Run+0x11a>
		{
			CLEAR_BIT(FDCAN2->ILS, FDCAN_ILS_RXFIFO1);
 8005056:	4b1c      	ldr	r3, [pc, #112]	; (80050c8 <STRHAL_CAN_Run+0x168>)
 8005058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800505a:	4a1b      	ldr	r2, [pc, #108]	; (80050c8 <STRHAL_CAN_Run+0x168>)
 800505c:	f023 0302 	bic.w	r3, r3, #2
 8005060:	6593      	str	r3, [r2, #88]	; 0x58
			SET_BIT(FDCAN2->ILE, FDCAN_ILE_EINT0);
 8005062:	4b19      	ldr	r3, [pc, #100]	; (80050c8 <STRHAL_CAN_Run+0x168>)
 8005064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005066:	4a18      	ldr	r2, [pc, #96]	; (80050c8 <STRHAL_CAN_Run+0x168>)
 8005068:	f043 0301 	orr.w	r3, r3, #1
 800506c:	65d3      	str	r3, [r2, #92]	; 0x5c
			SET_BIT(FDCAN2->IE, FDCAN_IE_RF1NE);
 800506e:	4b16      	ldr	r3, [pc, #88]	; (80050c8 <STRHAL_CAN_Run+0x168>)
 8005070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005072:	4a15      	ldr	r2, [pc, #84]	; (80050c8 <STRHAL_CAN_Run+0x168>)
 8005074:	f043 0308 	orr.w	r3, r3, #8
 8005078:	6553      	str	r3, [r2, #84]	; 0x54
		}

		NVIC_SetPriority(FDCAN2_IT0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 2));
 800507a:	f7ff fba1 	bl	80047c0 <__NVIC_GetPriorityGrouping>
 800507e:	4603      	mov	r3, r0
 8005080:	2202      	movs	r2, #2
 8005082:	2100      	movs	r1, #0
 8005084:	4618      	mov	r0, r3
 8005086:	f7ff fbf1 	bl	800486c <NVIC_EncodePriority>
 800508a:	4603      	mov	r3, r0
 800508c:	4619      	mov	r1, r3
 800508e:	2056      	movs	r0, #86	; 0x56
 8005090:	f7ff fbc2 	bl	8004818 <__NVIC_SetPriority>
		NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8005094:	2056      	movs	r0, #86	; 0x56
 8005096:	f7ff fba1 	bl	80047dc <__NVIC_EnableIRQ>

		CLEAR_BIT(FDCAN2->CCCR, FDCAN_CCCR_INIT);
 800509a:	4b0b      	ldr	r3, [pc, #44]	; (80050c8 <STRHAL_CAN_Run+0x168>)
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	4a0a      	ldr	r2, [pc, #40]	; (80050c8 <STRHAL_CAN_Run+0x168>)
 80050a0:	f023 0301 	bic.w	r3, r3, #1
 80050a4:	6193      	str	r3, [r2, #24]
		_fdcans[STRHAL_FDCAN2].state = STRHAL_CAN_STATE_RUNNING;
 80050a6:	4b05      	ldr	r3, [pc, #20]	; (80050bc <STRHAL_CAN_Run+0x15c>)
 80050a8:	2202      	movs	r2, #2
 80050aa:	f883 2020 	strb.w	r2, [r3, #32]
		LL_mDelay(100);
 80050ae:	2064      	movs	r0, #100	; 0x64
 80050b0:	f7fe f924 	bl	80032fc <LL_mDelay>
	}

}
 80050b4:	bf00      	nop
 80050b6:	3708      	adds	r7, #8
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	20000004 	.word	0x20000004
 80050c0:	2000001c 	.word	0x2000001c
 80050c4:	40006400 	.word	0x40006400
 80050c8:	40006800 	.word	0x40006800

080050cc <FDCAN1_IT0_IRQHandler>:

void FDCAN1_IT0_IRQHandler(void)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b08c      	sub	sp, #48	; 0x30
 80050d0:	af00      	add	r7, sp, #0
	if (FDCAN1->IR & FDCAN_IR_RF0N)
 80050d2:	4b47      	ldr	r3, [pc, #284]	; (80051f0 <FDCAN1_IT0_IRQHandler+0x124>)
 80050d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d03f      	beq.n	800515e <FDCAN1_IT0_IRQHandler+0x92>
	{
		SET_BIT(FDCAN1->IR, FDCAN_IR_RF0N);
 80050de:	4b44      	ldr	r3, [pc, #272]	; (80051f0 <FDCAN1_IT0_IRQHandler+0x124>)
 80050e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050e2:	4a43      	ldr	r2, [pc, #268]	; (80051f0 <FDCAN1_IT0_IRQHandler+0x124>)
 80050e4:	f043 0301 	orr.w	r3, r3, #1
 80050e8:	6513      	str	r3, [r2, #80]	; 0x50

		STRHAL_CAN_Receptor_t rec = _fdcans[STRHAL_FDCAN1].rxReceptors[0];
 80050ea:	4b42      	ldr	r3, [pc, #264]	; (80051f4 <FDCAN1_IT0_IRQHandler+0x128>)
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	62fb      	str	r3, [r7, #44]	; 0x2c
		Can_Message_RAM *can_ram = _fdcans[STRHAL_FDCAN1].can_ram;
 80050f0:	4b40      	ldr	r3, [pc, #256]	; (80051f4 <FDCAN1_IT0_IRQHandler+0x128>)
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	62bb      	str	r3, [r7, #40]	; 0x28

		uint8_t i;
		uint32_t l;
		uint32_t id;

		i = ((FDCAN_RXF0S_F0GI_Msk & FDCAN1->RXF0S) >> FDCAN_RXF0S_F0GI_Pos);
 80050f6:	4b3e      	ldr	r3, [pc, #248]	; (80051f0 <FDCAN1_IT0_IRQHandler+0x124>)
 80050f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050fc:	0a1b      	lsrs	r3, r3, #8
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	f003 0303 	and.w	r3, r3, #3
 8005104:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		Can_Rx_Element *rx_fifo = &can_ram->rx_fifo0[i];
 8005108:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800510c:	4613      	mov	r3, r2
 800510e:	00db      	lsls	r3, r3, #3
 8005110:	4413      	add	r3, r2
 8005112:	00db      	lsls	r3, r3, #3
 8005114:	33b0      	adds	r3, #176	; 0xb0
 8005116:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005118:	4413      	add	r3, r2
 800511a:	623b      	str	r3, [r7, #32]

		id = rx_fifo->R0.bit.ID >> 18;
 800511c:	6a3b      	ldr	r3, [r7, #32]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f3c3 031c 	ubfx	r3, r3, #0, #29
 8005124:	149b      	asrs	r3, r3, #18
 8005126:	61fb      	str	r3, [r7, #28]
		l = Can_DlcToLength[rx_fifo->R1.bit.DLC];
 8005128:	6a3b      	ldr	r3, [r7, #32]
 800512a:	799b      	ldrb	r3, [r3, #6]
 800512c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005130:	b2db      	uxtb	r3, r3
 8005132:	461a      	mov	r2, r3
 8005134:	4b30      	ldr	r3, [pc, #192]	; (80051f8 <FDCAN1_IT0_IRQHandler+0x12c>)
 8005136:	5c9b      	ldrb	r3, [r3, r2]
 8005138:	61bb      	str	r3, [r7, #24]

		if (rec != NULL)
 800513a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800513c:	2b00      	cmp	r3, #0
 800513e:	d007      	beq.n	8005150 <FDCAN1_IT0_IRQHandler+0x84>
			rec(id, rx_fifo->data.byte, l - 2);
 8005140:	6a3b      	ldr	r3, [r7, #32]
 8005142:	f103 0108 	add.w	r1, r3, #8
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	1e9a      	subs	r2, r3, #2
 800514a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800514c:	69f8      	ldr	r0, [r7, #28]
 800514e:	4798      	blx	r3

		FDCAN1->RXF0A = i & 0x7;
 8005150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005154:	4a26      	ldr	r2, [pc, #152]	; (80051f0 <FDCAN1_IT0_IRQHandler+0x124>)
 8005156:	f003 0307 	and.w	r3, r3, #7
 800515a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	}
	if (FDCAN1->IR & FDCAN_IR_RF1N)
 800515e:	4b24      	ldr	r3, [pc, #144]	; (80051f0 <FDCAN1_IT0_IRQHandler+0x124>)
 8005160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005162:	f003 0308 	and.w	r3, r3, #8
 8005166:	2b00      	cmp	r3, #0
 8005168:	d03d      	beq.n	80051e6 <FDCAN1_IT0_IRQHandler+0x11a>
	{
		SET_BIT(FDCAN1->IR, FDCAN_IR_RF1N);
 800516a:	4b21      	ldr	r3, [pc, #132]	; (80051f0 <FDCAN1_IT0_IRQHandler+0x124>)
 800516c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800516e:	4a20      	ldr	r2, [pc, #128]	; (80051f0 <FDCAN1_IT0_IRQHandler+0x124>)
 8005170:	f043 0308 	orr.w	r3, r3, #8
 8005174:	6513      	str	r3, [r2, #80]	; 0x50

		STRHAL_CAN_Receptor_t rec = _fdcans[STRHAL_FDCAN1].rxReceptors[1];
 8005176:	4b1f      	ldr	r3, [pc, #124]	; (80051f4 <FDCAN1_IT0_IRQHandler+0x128>)
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	617b      	str	r3, [r7, #20]
		Can_Message_RAM *can_ram = _fdcans[STRHAL_FDCAN1].can_ram;
 800517c:	4b1d      	ldr	r3, [pc, #116]	; (80051f4 <FDCAN1_IT0_IRQHandler+0x128>)
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	613b      	str	r3, [r7, #16]

		uint8_t i;
		uint32_t l;
		uint32_t id;

		i = ((FDCAN_RXF1S_F1GI_Msk & FDCAN1->RXF1S) >> FDCAN_RXF1S_F1GI_Pos);
 8005182:	4b1b      	ldr	r3, [pc, #108]	; (80051f0 <FDCAN1_IT0_IRQHandler+0x124>)
 8005184:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005188:	0a1b      	lsrs	r3, r3, #8
 800518a:	b2db      	uxtb	r3, r3
 800518c:	f003 0303 	and.w	r3, r3, #3
 8005190:	73fb      	strb	r3, [r7, #15]

		Can_Rx_Element *rx_fifo = &can_ram->rx_fifo1[i];
 8005192:	7bfa      	ldrb	r2, [r7, #15]
 8005194:	4613      	mov	r3, r2
 8005196:	00db      	lsls	r3, r3, #3
 8005198:	4413      	add	r3, r2
 800519a:	00db      	lsls	r3, r3, #3
 800519c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	4413      	add	r3, r2
 80051a4:	60bb      	str	r3, [r7, #8]

		id = rx_fifo->R0.bit.ID >> 18;
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f3c3 031c 	ubfx	r3, r3, #0, #29
 80051ae:	149b      	asrs	r3, r3, #18
 80051b0:	607b      	str	r3, [r7, #4]
		l = Can_DlcToLength[rx_fifo->R1.bit.DLC];
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	799b      	ldrb	r3, [r3, #6]
 80051b6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	461a      	mov	r2, r3
 80051be:	4b0e      	ldr	r3, [pc, #56]	; (80051f8 <FDCAN1_IT0_IRQHandler+0x12c>)
 80051c0:	5c9b      	ldrb	r3, [r3, r2]
 80051c2:	603b      	str	r3, [r7, #0]

		//rec(id, rx_fifo->data.byte, l);
		if (rec != NULL)
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d007      	beq.n	80051da <FDCAN1_IT0_IRQHandler+0x10e>
			rec(id, rx_fifo->data.byte, l - 2);
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	f103 0108 	add.w	r1, r3, #8
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	1e9a      	subs	r2, r3, #2
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	4798      	blx	r3
		FDCAN1->RXF1A = i & 0x7;
 80051da:	7bfb      	ldrb	r3, [r7, #15]
 80051dc:	4a04      	ldr	r2, [pc, #16]	; (80051f0 <FDCAN1_IT0_IRQHandler+0x124>)
 80051de:	f003 0307 	and.w	r3, r3, #7
 80051e2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	}
}
 80051e6:	bf00      	nop
 80051e8:	3730      	adds	r7, #48	; 0x30
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	40006400 	.word	0x40006400
 80051f4:	20000004 	.word	0x20000004
 80051f8:	080075a4 	.word	0x080075a4

080051fc <FDCAN2_IT0_IRQHandler>:

void FDCAN2_IT0_IRQHandler(void)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b08c      	sub	sp, #48	; 0x30
 8005200:	af00      	add	r7, sp, #0
	if (FDCAN2->IR & FDCAN_IR_RF0N)
 8005202:	4b47      	ldr	r3, [pc, #284]	; (8005320 <FDCAN2_IT0_IRQHandler+0x124>)
 8005204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005206:	f003 0301 	and.w	r3, r3, #1
 800520a:	2b00      	cmp	r3, #0
 800520c:	d03f      	beq.n	800528e <FDCAN2_IT0_IRQHandler+0x92>
	{
		CLEAR_BIT(FDCAN2->IR, FDCAN_IR_RF0N);
 800520e:	4b44      	ldr	r3, [pc, #272]	; (8005320 <FDCAN2_IT0_IRQHandler+0x124>)
 8005210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005212:	4a43      	ldr	r2, [pc, #268]	; (8005320 <FDCAN2_IT0_IRQHandler+0x124>)
 8005214:	f023 0301 	bic.w	r3, r3, #1
 8005218:	6513      	str	r3, [r2, #80]	; 0x50

		STRHAL_CAN_Receptor_t rec = _fdcans[STRHAL_FDCAN2].rxReceptors[0];
 800521a:	4b42      	ldr	r3, [pc, #264]	; (8005324 <FDCAN2_IT0_IRQHandler+0x128>)
 800521c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521e:	62fb      	str	r3, [r7, #44]	; 0x2c
		Can_Message_RAM *can_ram = _fdcans[STRHAL_FDCAN2].can_ram;
 8005220:	4b40      	ldr	r3, [pc, #256]	; (8005324 <FDCAN2_IT0_IRQHandler+0x128>)
 8005222:	69db      	ldr	r3, [r3, #28]
 8005224:	62bb      	str	r3, [r7, #40]	; 0x28

		uint8_t i;
		uint32_t l;
		uint32_t id;

		i = ((FDCAN_RXF0S_F0GI_Msk & FDCAN2->RXF0S) >> FDCAN_RXF0S_F0GI_Pos);
 8005226:	4b3e      	ldr	r3, [pc, #248]	; (8005320 <FDCAN2_IT0_IRQHandler+0x124>)
 8005228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800522c:	0a1b      	lsrs	r3, r3, #8
 800522e:	b2db      	uxtb	r3, r3
 8005230:	f003 0303 	and.w	r3, r3, #3
 8005234:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		Can_Rx_Element *rx_fifo = &can_ram->rx_fifo0[i];
 8005238:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800523c:	4613      	mov	r3, r2
 800523e:	00db      	lsls	r3, r3, #3
 8005240:	4413      	add	r3, r2
 8005242:	00db      	lsls	r3, r3, #3
 8005244:	33b0      	adds	r3, #176	; 0xb0
 8005246:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005248:	4413      	add	r3, r2
 800524a:	623b      	str	r3, [r7, #32]

		id = rx_fifo->R0.bit.ID >> 18;
 800524c:	6a3b      	ldr	r3, [r7, #32]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f3c3 031c 	ubfx	r3, r3, #0, #29
 8005254:	149b      	asrs	r3, r3, #18
 8005256:	61fb      	str	r3, [r7, #28]
		l = Can_DlcToLength[rx_fifo->R1.bit.DLC];
 8005258:	6a3b      	ldr	r3, [r7, #32]
 800525a:	799b      	ldrb	r3, [r3, #6]
 800525c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005260:	b2db      	uxtb	r3, r3
 8005262:	461a      	mov	r2, r3
 8005264:	4b30      	ldr	r3, [pc, #192]	; (8005328 <FDCAN2_IT0_IRQHandler+0x12c>)
 8005266:	5c9b      	ldrb	r3, [r3, r2]
 8005268:	61bb      	str	r3, [r7, #24]

		//rec(id, rx_fifo->data.byte, l);
		if (rec != NULL)
 800526a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800526c:	2b00      	cmp	r3, #0
 800526e:	d007      	beq.n	8005280 <FDCAN2_IT0_IRQHandler+0x84>
			rec(id, rx_fifo->data.byte, l - 2);
 8005270:	6a3b      	ldr	r3, [r7, #32]
 8005272:	f103 0108 	add.w	r1, r3, #8
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	1e9a      	subs	r2, r3, #2
 800527a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800527c:	69f8      	ldr	r0, [r7, #28]
 800527e:	4798      	blx	r3

		FDCAN2->RXF0A = i & 0x7;
 8005280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005284:	4a26      	ldr	r2, [pc, #152]	; (8005320 <FDCAN2_IT0_IRQHandler+0x124>)
 8005286:	f003 0307 	and.w	r3, r3, #7
 800528a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

	}
	if (FDCAN2->IR & FDCAN_IR_RF1N)
 800528e:	4b24      	ldr	r3, [pc, #144]	; (8005320 <FDCAN2_IT0_IRQHandler+0x124>)
 8005290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005292:	f003 0308 	and.w	r3, r3, #8
 8005296:	2b00      	cmp	r3, #0
 8005298:	d03d      	beq.n	8005316 <FDCAN2_IT0_IRQHandler+0x11a>
	{
		CLEAR_BIT(FDCAN2->IR, FDCAN_IR_RF1N);
 800529a:	4b21      	ldr	r3, [pc, #132]	; (8005320 <FDCAN2_IT0_IRQHandler+0x124>)
 800529c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800529e:	4a20      	ldr	r2, [pc, #128]	; (8005320 <FDCAN2_IT0_IRQHandler+0x124>)
 80052a0:	f023 0308 	bic.w	r3, r3, #8
 80052a4:	6513      	str	r3, [r2, #80]	; 0x50

		STRHAL_CAN_Receptor_t rec = _fdcans[STRHAL_FDCAN2].rxReceptors[1];
 80052a6:	4b1f      	ldr	r3, [pc, #124]	; (8005324 <FDCAN2_IT0_IRQHandler+0x128>)
 80052a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052aa:	617b      	str	r3, [r7, #20]
		Can_Message_RAM *can_ram = _fdcans[STRHAL_FDCAN2].can_ram;
 80052ac:	4b1d      	ldr	r3, [pc, #116]	; (8005324 <FDCAN2_IT0_IRQHandler+0x128>)
 80052ae:	69db      	ldr	r3, [r3, #28]
 80052b0:	613b      	str	r3, [r7, #16]

		uint8_t i;
		uint32_t l;
		uint32_t id;

		i = ((FDCAN_RXF1S_F1GI_Msk & FDCAN2->RXF1S) >> FDCAN_RXF1S_F1GI_Pos);
 80052b2:	4b1b      	ldr	r3, [pc, #108]	; (8005320 <FDCAN2_IT0_IRQHandler+0x124>)
 80052b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052b8:	0a1b      	lsrs	r3, r3, #8
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	f003 0303 	and.w	r3, r3, #3
 80052c0:	73fb      	strb	r3, [r7, #15]

		Can_Rx_Element *rx_fifo = &can_ram->rx_fifo1[i];
 80052c2:	7bfa      	ldrb	r2, [r7, #15]
 80052c4:	4613      	mov	r3, r2
 80052c6:	00db      	lsls	r3, r3, #3
 80052c8:	4413      	add	r3, r2
 80052ca:	00db      	lsls	r3, r3, #3
 80052cc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	4413      	add	r3, r2
 80052d4:	60bb      	str	r3, [r7, #8]

		id = rx_fifo->R0.bit.ID >> 18;
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f3c3 031c 	ubfx	r3, r3, #0, #29
 80052de:	149b      	asrs	r3, r3, #18
 80052e0:	607b      	str	r3, [r7, #4]
		l = Can_DlcToLength[rx_fifo->R1.bit.DLC];
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	799b      	ldrb	r3, [r3, #6]
 80052e6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	461a      	mov	r2, r3
 80052ee:	4b0e      	ldr	r3, [pc, #56]	; (8005328 <FDCAN2_IT0_IRQHandler+0x12c>)
 80052f0:	5c9b      	ldrb	r3, [r3, r2]
 80052f2:	603b      	str	r3, [r7, #0]

		//rec(id, rx_fifo->data.byte, l);
		if (rec != NULL)
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d007      	beq.n	800530a <FDCAN2_IT0_IRQHandler+0x10e>
			rec(id, rx_fifo->data.byte, l - 2);
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	f103 0108 	add.w	r1, r3, #8
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	1e9a      	subs	r2, r3, #2
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	4798      	blx	r3
		FDCAN2->RXF1A = i & 0x7;
 800530a:	7bfb      	ldrb	r3, [r7, #15]
 800530c:	4a04      	ldr	r2, [pc, #16]	; (8005320 <FDCAN2_IT0_IRQHandler+0x124>)
 800530e:	f003 0307 	and.w	r3, r3, #7
 8005312:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	}
}
 8005316:	bf00      	nop
 8005318:	3730      	adds	r7, #48	; 0x30
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	40006800 	.word	0x40006800
 8005324:	20000004 	.word	0x20000004
 8005328:	080075a4 	.word	0x080075a4

0800532c <STRHAL_Clock_Init>:
#include <STRHAL_Clock.h>

void STRHAL_Clock_Init()
{
 800532c:	b480      	push	{r7}
 800532e:	af00      	add	r7, sp, #0

}
 8005330:	bf00      	nop
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <LL_GPIO_ReadOutputPort>:
{
 800533a:	b480      	push	{r7}
 800533c:	b083      	sub	sp, #12
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	695b      	ldr	r3, [r3, #20]
}
 8005346:	4618      	mov	r0, r3
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr

08005352 <LL_GPIO_SetOutputPin>:
{
 8005352:	b480      	push	{r7}
 8005354:	b083      	sub	sp, #12
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
 800535a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	683a      	ldr	r2, [r7, #0]
 8005360:	619a      	str	r2, [r3, #24]
}
 8005362:	bf00      	nop
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr

0800536e <LL_GPIO_ResetOutputPin>:
{
 800536e:	b480      	push	{r7}
 8005370:	b083      	sub	sp, #12
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
 8005376:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	683a      	ldr	r2, [r7, #0]
 800537c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800537e:	bf00      	nop
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
	...

0800538c <LL_AHB2_GRP1_EnableClock>:
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005394:	4b08      	ldr	r3, [pc, #32]	; (80053b8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8005396:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005398:	4907      	ldr	r1, [pc, #28]	; (80053b8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4313      	orrs	r3, r2
 800539e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80053a0:	4b05      	ldr	r3, [pc, #20]	; (80053b8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80053a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4013      	ands	r3, r2
 80053a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80053aa:	68fb      	ldr	r3, [r7, #12]
}
 80053ac:	bf00      	nop
 80053ae:	3714      	adds	r7, #20
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr
 80053b8:	40021000 	.word	0x40021000

080053bc <STRHAL_GPIO_Init>:
#include <stm32g4xx_ll_gpio.h>
#include <stm32g4xx_ll_rcc.h>
#include <STRHAL_GPIO.h>

void STRHAL_GPIO_Init()
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	af00      	add	r7, sp, #0
	/* GPIO Ports Clock Enable */
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80053c0:	2001      	movs	r0, #1
 80053c2:	f7ff ffe3 	bl	800538c <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80053c6:	2002      	movs	r0, #2
 80053c8:	f7ff ffe0 	bl	800538c <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80053cc:	2004      	movs	r0, #4
 80053ce:	f7ff ffdd 	bl	800538c <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 80053d2:	2008      	movs	r0, #8
 80053d4:	f7ff ffda 	bl	800538c <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 80053d8:	2010      	movs	r0, #16
 80053da:	f7ff ffd7 	bl	800538c <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 80053de:	2020      	movs	r0, #32
 80053e0:	f7ff ffd4 	bl	800538c <LL_AHB2_GRP1_EnableClock>
}
 80053e4:	bf00      	nop
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <STRHAL_GPIO_SingleInit>:

// requires the type parameter and the gpio type to be the same TODO: find a better way to enforce that!
void STRHAL_GPIO_SingleInit(const STRHAL_GPIO_t *gpio, STRHAL_GPIO_Type_t type)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b088      	sub	sp, #32
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	460b      	mov	r3, r1
 80053f2:	70fb      	strb	r3, [r7, #3]
	if (gpio->pin > 0x1F)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	791b      	ldrb	r3, [r3, #4]
 80053f8:	2b1f      	cmp	r3, #31
 80053fa:	d84d      	bhi.n	8005498 <STRHAL_GPIO_SingleInit+0xb0>
		return;

	LL_GPIO_InitTypeDef GPIO_InitStruct =
 80053fc:	f107 0308 	add.w	r3, r7, #8
 8005400:	2200      	movs	r2, #0
 8005402:	601a      	str	r2, [r3, #0]
 8005404:	605a      	str	r2, [r3, #4]
 8005406:	609a      	str	r2, [r3, #8]
 8005408:	60da      	str	r2, [r3, #12]
 800540a:	611a      	str	r2, [r3, #16]
 800540c:	615a      	str	r2, [r3, #20]
	{ 0 };

	LL_GPIO_ResetOutputPin(gpio->port, (1 << gpio->pin));
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	791b      	ldrb	r3, [r3, #4]
 8005416:	4619      	mov	r1, r3
 8005418:	2301      	movs	r3, #1
 800541a:	408b      	lsls	r3, r1
 800541c:	4619      	mov	r1, r3
 800541e:	4610      	mov	r0, r2
 8005420:	f7ff ffa5 	bl	800536e <LL_GPIO_ResetOutputPin>

	GPIO_InitStruct.Pin = (1 << gpio->pin);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	791b      	ldrb	r3, [r3, #4]
 8005428:	461a      	mov	r2, r3
 800542a:	2301      	movs	r3, #1
 800542c:	4093      	lsls	r3, r2
 800542e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8005430:	2302      	movs	r3, #2
 8005432:	613b      	str	r3, [r7, #16]
	switch (type)
 8005434:	78fb      	ldrb	r3, [r7, #3]
 8005436:	2b04      	cmp	r3, #4
 8005438:	d825      	bhi.n	8005486 <STRHAL_GPIO_SingleInit+0x9e>
 800543a:	a201      	add	r2, pc, #4	; (adr r2, 8005440 <STRHAL_GPIO_SingleInit+0x58>)
 800543c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005440:	08005455 	.word	0x08005455
 8005444:	0800545f 	.word	0x0800545f
 8005448:	08005469 	.word	0x08005469
 800544c:	08005473 	.word	0x08005473
 8005450:	0800547d 	.word	0x0800547d
	{
		case STRHAL_GPIO_TYPE_OPP:
			GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8005454:	2301      	movs	r3, #1
 8005456:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005458:	2300      	movs	r3, #0
 800545a:	617b      	str	r3, [r7, #20]
			break;
 800545c:	e013      	b.n	8005486 <STRHAL_GPIO_SingleInit+0x9e>

		case STRHAL_GPIO_TYPE_OOD:
			GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800545e:	2301      	movs	r3, #1
 8005460:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8005462:	2301      	movs	r3, #1
 8005464:	617b      	str	r3, [r7, #20]
			break;
 8005466:	e00e      	b.n	8005486 <STRHAL_GPIO_SingleInit+0x9e>

		case STRHAL_GPIO_TYPE_IHZ:
			GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8005468:	2300      	movs	r3, #0
 800546a:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800546c:	2300      	movs	r3, #0
 800546e:	61bb      	str	r3, [r7, #24]
			break;
 8005470:	e009      	b.n	8005486 <STRHAL_GPIO_SingleInit+0x9e>

		case STRHAL_GPIO_TYPE_IPU:
			GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8005472:	2300      	movs	r3, #0
 8005474:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8005476:	2301      	movs	r3, #1
 8005478:	61bb      	str	r3, [r7, #24]
			break;
 800547a:	e004      	b.n	8005486 <STRHAL_GPIO_SingleInit+0x9e>

		case STRHAL_GPIO_TYPE_IPD:
			GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800547c:	2300      	movs	r3, #0
 800547e:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8005480:	2302      	movs	r3, #2
 8005482:	61bb      	str	r3, [r7, #24]
			break;
 8005484:	bf00      	nop
	}
	LL_GPIO_Init(gpio->port, &GPIO_InitStruct);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f107 0208 	add.w	r2, r7, #8
 800548e:	4611      	mov	r1, r2
 8005490:	4618      	mov	r0, r3
 8005492:	f7fd fcf8 	bl	8002e86 <LL_GPIO_Init>
 8005496:	e000      	b.n	800549a <STRHAL_GPIO_SingleInit+0xb2>
		return;
 8005498:	bf00      	nop
	//gpio->type = type;
}
 800549a:	3720      	adds	r7, #32
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <STRHAL_GPIO_Write>:
		STRHAL_GPIO_SingleInit(&gpios->gpios[i], type);
	}
}

inline void STRHAL_GPIO_Write(const STRHAL_GPIO_t *gpio, STRHAL_GPIO_Value_t value)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	460b      	mov	r3, r1
 80054aa:	70fb      	strb	r3, [r7, #3]
	if (gpio->pin > 0x1F)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	791b      	ldrb	r3, [r3, #4]
 80054b0:	2b1f      	cmp	r3, #31
 80054b2:	d81a      	bhi.n	80054ea <STRHAL_GPIO_Write+0x4a>
		return;

	if (value == STRHAL_GPIO_VALUE_H)
 80054b4:	78fb      	ldrb	r3, [r7, #3]
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d10b      	bne.n	80054d2 <STRHAL_GPIO_Write+0x32>
	{
		LL_GPIO_SetOutputPin(gpio->port, (1 << gpio->pin));
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	791b      	ldrb	r3, [r3, #4]
 80054c2:	4619      	mov	r1, r3
 80054c4:	2301      	movs	r3, #1
 80054c6:	408b      	lsls	r3, r1
 80054c8:	4619      	mov	r1, r3
 80054ca:	4610      	mov	r0, r2
 80054cc:	f7ff ff41 	bl	8005352 <LL_GPIO_SetOutputPin>
 80054d0:	e00c      	b.n	80054ec <STRHAL_GPIO_Write+0x4c>
	}
	else
	{
		LL_GPIO_ResetOutputPin(gpio->port, (1 << gpio->pin));
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	791b      	ldrb	r3, [r3, #4]
 80054da:	4619      	mov	r1, r3
 80054dc:	2301      	movs	r3, #1
 80054de:	408b      	lsls	r3, r1
 80054e0:	4619      	mov	r1, r3
 80054e2:	4610      	mov	r0, r2
 80054e4:	f7ff ff43 	bl	800536e <LL_GPIO_ResetOutputPin>
 80054e8:	e000      	b.n	80054ec <STRHAL_GPIO_Write+0x4c>
		return;
 80054ea:	bf00      	nop
	}

}
 80054ec:	3708      	adds	r7, #8
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <STRHAL_GPIO_ReadOutput>:

	return (LL_GPIO_ReadInputPort(gpio->port) & (1 << gpio->pin)) ? 1 : 0;
}

STRHAL_GPIO_Value_t STRHAL_GPIO_ReadOutput(const STRHAL_GPIO_t *gpio)
{
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b082      	sub	sp, #8
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
	if (gpio->pin > 0x1F)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	791b      	ldrb	r3, [r3, #4]
 80054fe:	2b1f      	cmp	r3, #31
 8005500:	d901      	bls.n	8005506 <STRHAL_GPIO_ReadOutput+0x14>
		return STRHAL_GPIO_VALUE_L;
 8005502:	2300      	movs	r3, #0
 8005504:	e010      	b.n	8005528 <STRHAL_GPIO_ReadOutput+0x36>

	return (LL_GPIO_ReadOutputPort(gpio->port) & (1 << gpio->pin)) ? 1 : 0;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4618      	mov	r0, r3
 800550c:	f7ff ff15 	bl	800533a <LL_GPIO_ReadOutputPort>
 8005510:	4602      	mov	r2, r0
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	791b      	ldrb	r3, [r3, #4]
 8005516:	4619      	mov	r1, r3
 8005518:	2301      	movs	r3, #1
 800551a:	408b      	lsls	r3, r1
 800551c:	4013      	ands	r3, r2
 800551e:	2b00      	cmp	r3, #0
 8005520:	bf14      	ite	ne
 8005522:	2301      	movne	r3, #1
 8005524:	2300      	moveq	r3, #0
 8005526:	b2db      	uxtb	r3, r3
}
 8005528:	4618      	mov	r0, r3
 800552a:	3708      	adds	r7, #8
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <LL_AHB2_GRP1_EnableClock>:
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005538:	4b08      	ldr	r3, [pc, #32]	; (800555c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800553a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800553c:	4907      	ldr	r1, [pc, #28]	; (800555c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4313      	orrs	r3, r2
 8005542:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005544:	4b05      	ldr	r3, [pc, #20]	; (800555c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8005546:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4013      	ands	r3, r2
 800554c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800554e:	68fb      	ldr	r3, [r7, #12]
}
 8005550:	bf00      	nop
 8005552:	3714      	adds	r7, #20
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr
 800555c:	40021000 	.word	0x40021000

08005560 <LL_APB2_GRP1_EnableClock>:
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8005568:	4b08      	ldr	r3, [pc, #32]	; (800558c <LL_APB2_GRP1_EnableClock+0x2c>)
 800556a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800556c:	4907      	ldr	r1, [pc, #28]	; (800558c <LL_APB2_GRP1_EnableClock+0x2c>)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4313      	orrs	r3, r2
 8005572:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005574:	4b05      	ldr	r3, [pc, #20]	; (800558c <LL_APB2_GRP1_EnableClock+0x2c>)
 8005576:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4013      	ands	r3, r2
 800557c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800557e:	68fb      	ldr	r3, [r7, #12]
}
 8005580:	bf00      	nop
 8005582:	3714      	adds	r7, #20
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr
 800558c:	40021000 	.word	0x40021000

08005590 <LL_GPIO_SetPinMode>:
{
 8005590:	b480      	push	{r7}
 8005592:	b08b      	sub	sp, #44	; 0x2c
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	fa93 f3a3 	rbit	r3, r3
 80055aa:	613b      	str	r3, [r7, #16]
  return result;
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d101      	bne.n	80055ba <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80055b6:	2320      	movs	r3, #32
 80055b8:	e003      	b.n	80055c2 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	fab3 f383 	clz	r3, r3
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	005b      	lsls	r3, r3, #1
 80055c4:	2103      	movs	r1, #3
 80055c6:	fa01 f303 	lsl.w	r3, r1, r3
 80055ca:	43db      	mvns	r3, r3
 80055cc:	401a      	ands	r2, r3
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055d2:	6a3b      	ldr	r3, [r7, #32]
 80055d4:	fa93 f3a3 	rbit	r3, r3
 80055d8:	61fb      	str	r3, [r7, #28]
  return result;
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80055de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d101      	bne.n	80055e8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80055e4:	2320      	movs	r3, #32
 80055e6:	e003      	b.n	80055f0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80055e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ea:	fab3 f383 	clz	r3, r3
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	005b      	lsls	r3, r3, #1
 80055f2:	6879      	ldr	r1, [r7, #4]
 80055f4:	fa01 f303 	lsl.w	r3, r1, r3
 80055f8:	431a      	orrs	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	601a      	str	r2, [r3, #0]
}
 80055fe:	bf00      	nop
 8005600:	372c      	adds	r7, #44	; 0x2c
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <LL_OPAMP_SetFunctionalMode>:
  *         @arg @ref LL_OPAMP_MODE_PGA_IO0_BIAS
  *         @arg @ref LL_OPAMP_MODE_PGA_IO0_IO1_BIAS
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_SetFunctionalMode(OPAMP_TypeDef *OPAMPx, uint32_t FunctionalMode)
{
 800560a:	b480      	push	{r7}
 800560c:	b083      	sub	sp, #12
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
 8005612:	6039      	str	r1, [r7, #0]
  /* Note: Bit OPAMP_CSR_CALON reset to ensure to be in functional mode */
  MODIFY_REG(OPAMPx->CSR, OPAMP_CSR_PGGAIN_4 | OPAMP_CSR_PGGAIN_3 | OPAMP_CSR_VMSEL | OPAMP_CSR_CALON, FunctionalMode);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f423 23c1 	bic.w	r3, r3, #395264	; 0x60800
 800561c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005620:	683a      	ldr	r2, [r7, #0]
 8005622:	431a      	orrs	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	601a      	str	r2, [r3, #0]
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <LL_OPAMP_SetPGAGain>:
  *         @arg @ref LL_OPAMP_PGA_GAIN_32_OR_MINUS_31
  *         @arg @ref LL_OPAMP_PGA_GAIN_64_OR_MINUS_63
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_SetPGAGain(OPAMP_TypeDef *OPAMPx, uint32_t PGAGain)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(OPAMPx->CSR, OPAMP_CSR_PGGAIN_2 | OPAMP_CSR_PGGAIN_1 | OPAMP_CSR_PGGAIN_0, PGAGain);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f423 32e0 	bic.w	r2, r3, #114688	; 0x1c000
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	431a      	orrs	r2, r3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	601a      	str	r2, [r3, #0]
}
 800564e:	bf00      	nop
 8005650:	370c      	adds	r7, #12
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr

0800565a <LL_OPAMP_SetInputNonInverting>:
  *         @arg @ref LL_OPAMP_INPUT_NONINVERT_IO3
  *         @arg @ref LL_OPAMP_INPUT_NONINVERT_DAC
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_SetInputNonInverting(OPAMP_TypeDef *OPAMPx, uint32_t InputNonInverting)
{
 800565a:	b480      	push	{r7}
 800565c:	b083      	sub	sp, #12
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
 8005662:	6039      	str	r1, [r7, #0]
  MODIFY_REG(OPAMPx->CSR, OPAMP_CSR_VPSEL, InputNonInverting);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f023 020c 	bic.w	r2, r3, #12
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	431a      	orrs	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	601a      	str	r2, [r3, #0]
}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <LL_OPAMP_SetInputInverting>:
  *         @arg @ref LL_OPAMP_INPUT_INVERT_IO1
  *         @arg @ref LL_OPAMP_INPUT_INVERT_CONNECT_NO
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_SetInputInverting(OPAMP_TypeDef *OPAMPx, uint32_t InputInverting)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  /* Manage cases of OPAMP inverting input not connected (0x10 and 0x11)      */
  /* to not modify OPAMP mode follower or PGA.                                */
  /* Bit OPAMP_CSR_VMSEL_1 is set by OPAMP mode (follower, PGA). */
  MODIFY_REG(OPAMPx->CSR, (~(InputInverting >> 1)) & OPAMP_CSR_VMSEL_0, InputInverting);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	085b      	lsrs	r3, r3, #1
 8005692:	43db      	mvns	r3, r3
 8005694:	f003 0320 	and.w	r3, r3, #32
 8005698:	43db      	mvns	r3, r3
 800569a:	401a      	ands	r2, r3
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	431a      	orrs	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	601a      	str	r2, [r3, #0]
}
 80056a4:	bf00      	nop
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <LL_OPAMP_SetInternalOutput>:
  *         @arg @ref LL_OPAMP_INTERNAL_OUPUT_DISABLED
  *         @arg @ref LL_OPAMP_INTERNAL_OUPUT_ENABLED
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_SetInternalOutput(OPAMP_TypeDef *OPAMPx, uint32_t InternalOutput)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(OPAMPx->CSR, OPAMP_CSR_OPAMPINTEN, InternalOutput);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	431a      	orrs	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	601a      	str	r2, [r3, #0]
}
 80056ca:	bf00      	nop
 80056cc:	370c      	adds	r7, #12
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
	...

080056d8 <STRHAL_OPAMP_Init>:
#include <STRHAL_OPAMP.h>

void STRHAL_OPAMP_Init()
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	af00      	add	r7, sp, #0

	// GPIO init
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80056dc:	2004      	movs	r0, #4
 80056de:	f7ff ff27 	bl	8005530 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 80056e2:	2020      	movs	r0, #32
 80056e4:	f7ff ff24 	bl	8005530 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80056e8:	2001      	movs	r0, #1
 80056ea:	f7ff ff21 	bl	8005530 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80056ee:	2002      	movs	r0, #2
 80056f0:	f7ff ff1e 	bl	8005530 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 80056f4:	2010      	movs	r0, #16
 80056f6:	f7ff ff1b 	bl	8005530 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 80056fa:	2008      	movs	r0, #8
 80056fc:	f7ff ff18 	bl	8005530 <LL_AHB2_GRP1_EnableClock>

	LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_7, LL_GPIO_MODE_ANALOG);
 8005700:	2203      	movs	r2, #3
 8005702:	2180      	movs	r1, #128	; 0x80
 8005704:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005708:	f7ff ff42 	bl	8005590 <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_0, LL_GPIO_MODE_ANALOG);
 800570c:	2203      	movs	r2, #3
 800570e:	2101      	movs	r1, #1
 8005710:	4819      	ldr	r0, [pc, #100]	; (8005778 <STRHAL_OPAMP_Init+0xa0>)
 8005712:	f7ff ff3d 	bl	8005590 <LL_GPIO_SetPinMode>

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8005716:	2001      	movs	r0, #1
 8005718:	f7ff ff22 	bl	8005560 <LL_APB2_GRP1_EnableClock>

	LL_OPAMP_SetFunctionalMode(OPAMP2, LL_OPAMP_MODE_PGA);
 800571c:	2140      	movs	r1, #64	; 0x40
 800571e:	4817      	ldr	r0, [pc, #92]	; (800577c <STRHAL_OPAMP_Init+0xa4>)
 8005720:	f7ff ff73 	bl	800560a <LL_OPAMP_SetFunctionalMode>
	LL_OPAMP_SetPGAGain(OPAMP2, LL_OPAMP_PGA_GAIN_32_OR_MINUS_31);
 8005724:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8005728:	4814      	ldr	r0, [pc, #80]	; (800577c <STRHAL_OPAMP_Init+0xa4>)
 800572a:	f7ff ff83 	bl	8005634 <LL_OPAMP_SetPGAGain>
	LL_OPAMP_SetInputNonInverting(OPAMP2, LL_OPAMP_INPUT_NONINVERT_IO0);
 800572e:	2100      	movs	r1, #0
 8005730:	4812      	ldr	r0, [pc, #72]	; (800577c <STRHAL_OPAMP_Init+0xa4>)
 8005732:	f7ff ff92 	bl	800565a <LL_OPAMP_SetInputNonInverting>
	LL_OPAMP_SetInputInverting(OPAMP2, LL_OPAMP_INPUT_INVERT_CONNECT_NO);
 8005736:	2140      	movs	r1, #64	; 0x40
 8005738:	4810      	ldr	r0, [pc, #64]	; (800577c <STRHAL_OPAMP_Init+0xa4>)
 800573a:	f7ff ffa1 	bl	8005680 <LL_OPAMP_SetInputInverting>
	LL_OPAMP_SetInternalOutput(OPAMP2, LL_OPAMP_INTERNAL_OUPUT_ENABLED);
 800573e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005742:	480e      	ldr	r0, [pc, #56]	; (800577c <STRHAL_OPAMP_Init+0xa4>)
 8005744:	f7ff ffb4 	bl	80056b0 <LL_OPAMP_SetInternalOutput>
	LL_OPAMP_SetFunctionalMode(OPAMP3, LL_OPAMP_MODE_PGA);
 8005748:	2140      	movs	r1, #64	; 0x40
 800574a:	480d      	ldr	r0, [pc, #52]	; (8005780 <STRHAL_OPAMP_Init+0xa8>)
 800574c:	f7ff ff5d 	bl	800560a <LL_OPAMP_SetFunctionalMode>
	LL_OPAMP_SetPGAGain(OPAMP3, LL_OPAMP_PGA_GAIN_32_OR_MINUS_31);
 8005750:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8005754:	480a      	ldr	r0, [pc, #40]	; (8005780 <STRHAL_OPAMP_Init+0xa8>)
 8005756:	f7ff ff6d 	bl	8005634 <LL_OPAMP_SetPGAGain>
	LL_OPAMP_SetInputNonInverting(OPAMP3, LL_OPAMP_INPUT_NONINVERT_IO0);
 800575a:	2100      	movs	r1, #0
 800575c:	4808      	ldr	r0, [pc, #32]	; (8005780 <STRHAL_OPAMP_Init+0xa8>)
 800575e:	f7ff ff7c 	bl	800565a <LL_OPAMP_SetInputNonInverting>
	LL_OPAMP_SetInputInverting(OPAMP3, LL_OPAMP_INPUT_INVERT_CONNECT_NO);
 8005762:	2140      	movs	r1, #64	; 0x40
 8005764:	4806      	ldr	r0, [pc, #24]	; (8005780 <STRHAL_OPAMP_Init+0xa8>)
 8005766:	f7ff ff8b 	bl	8005680 <LL_OPAMP_SetInputInverting>
	LL_OPAMP_SetInternalOutput(OPAMP3, LL_OPAMP_INTERNAL_OUPUT_ENABLED);
 800576a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800576e:	4804      	ldr	r0, [pc, #16]	; (8005780 <STRHAL_OPAMP_Init+0xa8>)
 8005770:	f7ff ff9e 	bl	80056b0 <LL_OPAMP_SetInternalOutput>
}
 8005774:	bf00      	nop
 8005776:	bd80      	pop	{r7, pc}
 8005778:	48000400 	.word	0x48000400
 800577c:	40010304 	.word	0x40010304
 8005780:	40010308 	.word	0x40010308

08005784 <LL_AHB2_GRP1_EnableClock>:
{
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800578c:	4b08      	ldr	r3, [pc, #32]	; (80057b0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800578e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005790:	4907      	ldr	r1, [pc, #28]	; (80057b0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4313      	orrs	r3, r2
 8005796:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005798:	4b05      	ldr	r3, [pc, #20]	; (80057b0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800579a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4013      	ands	r3, r2
 80057a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80057a2:	68fb      	ldr	r3, [r7, #12]
}
 80057a4:	bf00      	nop
 80057a6:	3714      	adds	r7, #20
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	40021000 	.word	0x40021000

080057b4 <LL_AHB3_GRP1_EnableClock>:
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80057bc:	4b08      	ldr	r3, [pc, #32]	; (80057e0 <LL_AHB3_GRP1_EnableClock+0x2c>)
 80057be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80057c0:	4907      	ldr	r1, [pc, #28]	; (80057e0 <LL_AHB3_GRP1_EnableClock+0x2c>)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80057c8:	4b05      	ldr	r3, [pc, #20]	; (80057e0 <LL_AHB3_GRP1_EnableClock+0x2c>)
 80057ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4013      	ands	r3, r2
 80057d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80057d2:	68fb      	ldr	r3, [r7, #12]
}
 80057d4:	bf00      	nop
 80057d6:	3714      	adds	r7, #20
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr
 80057e0:	40021000 	.word	0x40021000

080057e4 <_init_GPIO>:
static inline int _wait_for_status(uint32_t flag, uint16_t tot);
static inline int _wait_for_status_clear(uint32_t flag, uint16_t);
static inline void _clear_status(uint32_t flags);

static void _init_GPIO()
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af00      	add	r7, sp, #0
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 80057ea:	2010      	movs	r0, #16
 80057ec:	f7ff ffca 	bl	8005784 <LL_AHB2_GRP1_EnableClock>

	LL_GPIO_InitTypeDef GPIO_InitStruct =
 80057f0:	463b      	mov	r3, r7
 80057f2:	2200      	movs	r2, #0
 80057f4:	601a      	str	r2, [r3, #0]
 80057f6:	605a      	str	r2, [r3, #4]
 80057f8:	609a      	str	r2, [r3, #8]
 80057fa:	60da      	str	r2, [r3, #12]
 80057fc:	611a      	str	r2, [r3, #16]
 80057fe:	615a      	str	r2, [r3, #20]
	{ 0 };
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005800:	2300      	movs	r3, #0
 8005802:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005804:	2300      	movs	r3, #0
 8005806:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8005808:	2302      	movs	r3, #2
 800580a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pin = LL_GPIO_PIN_10 | LL_GPIO_PIN_11 | LL_GPIO_PIN_12 | LL_GPIO_PIN_13 | LL_GPIO_PIN_14 | LL_GPIO_PIN_15;
 800580c:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8005810:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005812:	2302      	movs	r3, #2
 8005814:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_10;
 8005816:	230a      	movs	r3, #10
 8005818:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800581a:	463b      	mov	r3, r7
 800581c:	4619      	mov	r1, r3
 800581e:	4803      	ldr	r0, [pc, #12]	; (800582c <_init_GPIO+0x48>)
 8005820:	f7fd fb31 	bl	8002e86 <LL_GPIO_Init>
}
 8005824:	bf00      	nop
 8005826:	3718      	adds	r7, #24
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	48001000 	.word	0x48001000

08005830 <STRHAL_QSPI_Init>:

void STRHAL_QSPI_Init()
{
 8005830:	b580      	push	{r7, lr}
 8005832:	af00      	add	r7, sp, #0
	LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_QSPI);
 8005834:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005838:	f7ff ffbc 	bl	80057b4 <LL_AHB3_GRP1_EnableClock>
}
 800583c:	bf00      	nop
 800583e:	bd80      	pop	{r7, pc}

08005840 <STRHAL_QSPI_Flash_Init>:

int STRHAL_QSPI_Flash_Init(const STRHAL_QSPI_Config_t *config)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
	STRHAL_QSPI_Reset();
 8005848:	f000 f848 	bl	80058dc <STRHAL_QSPI_Reset>

	_init_GPIO();
 800584c:	f7ff ffca 	bl	80057e4 <_init_GPIO>

	QUADSPI->CR |= STRHAL_QSPI_FIFO_THRESH << QUADSPI_CR_FTHRES_Pos;
 8005850:	4b21      	ldr	r3, [pc, #132]	; (80058d8 <STRHAL_QSPI_Flash_Init+0x98>)
 8005852:	4a21      	ldr	r2, [pc, #132]	; (80058d8 <STRHAL_QSPI_Flash_Init+0x98>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	6013      	str	r3, [r2, #0]

	if (_wait_for_status_clear(QUADSPI_SR_BUSY, 100) < 0)
 8005858:	2164      	movs	r1, #100	; 0x64
 800585a:	2020      	movs	r0, #32
 800585c:	f000 fa1e 	bl	8005c9c <_wait_for_status_clear>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	da02      	bge.n	800586c <STRHAL_QSPI_Flash_Init+0x2c>
		return -1;
 8005866:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800586a:	e031      	b.n	80058d0 <STRHAL_QSPI_Flash_Init+0x90>

	QUADSPI->CR |= config->psc << QUADSPI_CR_PRESCALER_Pos;
 800586c:	4b1a      	ldr	r3, [pc, #104]	; (80058d8 <STRHAL_QSPI_Flash_Init+0x98>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	7812      	ldrb	r2, [r2, #0]
 8005874:	f3c2 0204 	ubfx	r2, r2, #0, #5
 8005878:	b2d2      	uxtb	r2, r2
 800587a:	0612      	lsls	r2, r2, #24
 800587c:	4611      	mov	r1, r2
 800587e:	4a16      	ldr	r2, [pc, #88]	; (80058d8 <STRHAL_QSPI_Flash_Init+0x98>)
 8005880:	430b      	orrs	r3, r1
 8005882:	6013      	str	r3, [r2, #0]
	QUADSPI->DCR |= config->flash_size << QUADSPI_DCR_FSIZE_Pos;
 8005884:	4b14      	ldr	r3, [pc, #80]	; (80058d8 <STRHAL_QSPI_Flash_Init+0x98>)
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	7852      	ldrb	r2, [r2, #1]
 800588c:	f3c2 0204 	ubfx	r2, r2, #0, #5
 8005890:	b2d2      	uxtb	r2, r2
 8005892:	0412      	lsls	r2, r2, #16
 8005894:	4611      	mov	r1, r2
 8005896:	4a10      	ldr	r2, [pc, #64]	; (80058d8 <STRHAL_QSPI_Flash_Init+0x98>)
 8005898:	430b      	orrs	r3, r1
 800589a:	6053      	str	r3, [r2, #4]
	QUADSPI->DCR |= config->ncs_high_time << QUADSPI_DCR_CSHT_Pos;
 800589c:	4b0e      	ldr	r3, [pc, #56]	; (80058d8 <STRHAL_QSPI_Flash_Init+0x98>)
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	7852      	ldrb	r2, [r2, #1]
 80058a4:	f3c2 1242 	ubfx	r2, r2, #5, #3
 80058a8:	b2d2      	uxtb	r2, r2
 80058aa:	0212      	lsls	r2, r2, #8
 80058ac:	4611      	mov	r1, r2
 80058ae:	4a0a      	ldr	r2, [pc, #40]	; (80058d8 <STRHAL_QSPI_Flash_Init+0x98>)
 80058b0:	430b      	orrs	r3, r1
 80058b2:	6053      	str	r3, [r2, #4]
	QUADSPI->DCR |= config->clk_level << QUADSPI_DCR_CKMODE_Pos;
 80058b4:	4b08      	ldr	r3, [pc, #32]	; (80058d8 <STRHAL_QSPI_Flash_Init+0x98>)
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	7892      	ldrb	r2, [r2, #2]
 80058bc:	f3c2 0200 	ubfx	r2, r2, #0, #1
 80058c0:	b2d2      	uxtb	r2, r2
 80058c2:	4611      	mov	r1, r2
 80058c4:	4a04      	ldr	r2, [pc, #16]	; (80058d8 <STRHAL_QSPI_Flash_Init+0x98>)
 80058c6:	430b      	orrs	r3, r1
 80058c8:	6053      	str	r3, [r2, #4]

	STRHAL_QSPI_Run();
 80058ca:	f000 f82b 	bl	8005924 <STRHAL_QSPI_Run>

	return 0;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3708      	adds	r7, #8
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	a0001000 	.word	0xa0001000

080058dc <STRHAL_QSPI_Reset>:

void STRHAL_QSPI_Reset()
{
 80058dc:	b480      	push	{r7}
 80058de:	af00      	add	r7, sp, #0
	if (QUADSPI->CR & QUADSPI_CR_EN)
 80058e0:	4b0f      	ldr	r3, [pc, #60]	; (8005920 <STRHAL_QSPI_Reset+0x44>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0301 	and.w	r3, r3, #1
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d005      	beq.n	80058f8 <STRHAL_QSPI_Reset+0x1c>
		QUADSPI->CR &= ~QUADSPI_CR_EN;
 80058ec:	4b0c      	ldr	r3, [pc, #48]	; (8005920 <STRHAL_QSPI_Reset+0x44>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a0b      	ldr	r2, [pc, #44]	; (8005920 <STRHAL_QSPI_Reset+0x44>)
 80058f2:	f023 0301 	bic.w	r3, r3, #1
 80058f6:	6013      	str	r3, [r2, #0]

	CLEAR_REG(QUADSPI->CR);
 80058f8:	4b09      	ldr	r3, [pc, #36]	; (8005920 <STRHAL_QSPI_Reset+0x44>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	601a      	str	r2, [r3, #0]
	CLEAR_REG(QUADSPI->DCR);
 80058fe:	4b08      	ldr	r3, [pc, #32]	; (8005920 <STRHAL_QSPI_Reset+0x44>)
 8005900:	2200      	movs	r2, #0
 8005902:	605a      	str	r2, [r3, #4]
	CLEAR_REG(QUADSPI->CCR);
 8005904:	4b06      	ldr	r3, [pc, #24]	; (8005920 <STRHAL_QSPI_Reset+0x44>)
 8005906:	2200      	movs	r2, #0
 8005908:	615a      	str	r2, [r3, #20]

	QUADSPI->FCR |= (QUADSPI_FCR_CSMF | QUADSPI_FCR_CTCF | QUADSPI_FCR_CTEF | QUADSPI_FCR_CTOF);
 800590a:	4b05      	ldr	r3, [pc, #20]	; (8005920 <STRHAL_QSPI_Reset+0x44>)
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	4a04      	ldr	r2, [pc, #16]	; (8005920 <STRHAL_QSPI_Reset+0x44>)
 8005910:	f043 031b 	orr.w	r3, r3, #27
 8005914:	60d3      	str	r3, [r2, #12]
}
 8005916:	bf00      	nop
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr
 8005920:	a0001000 	.word	0xa0001000

08005924 <STRHAL_QSPI_Run>:

void STRHAL_QSPI_Run()
{
 8005924:	b480      	push	{r7}
 8005926:	af00      	add	r7, sp, #0
	QUADSPI->CR |= QUADSPI_CR_EN; // Enable QSPI
 8005928:	4b05      	ldr	r3, [pc, #20]	; (8005940 <STRHAL_QSPI_Run+0x1c>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a04      	ldr	r2, [pc, #16]	; (8005940 <STRHAL_QSPI_Run+0x1c>)
 800592e:	f043 0301 	orr.w	r3, r3, #1
 8005932:	6013      	str	r3, [r2, #0]
}
 8005934:	bf00      	nop
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	a0001000 	.word	0xa0001000

08005944 <STRHAL_QSPI_Indirect_Write>:
{
	QUADSPI->CR &= ~QUADSPI_CR_EN;  // Enable QSPI
}

uint32_t STRHAL_QSPI_Indirect_Write(const STRHAL_QSPI_Command_t *cmd, const uint8_t *data, uint32_t n, uint16_t tot)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b088      	sub	sp, #32
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	607a      	str	r2, [r7, #4]
 8005950:	807b      	strh	r3, [r7, #2]
	if (_wait_for_status_clear(QUADSPI_SR_BUSY, tot) < 0)
 8005952:	887b      	ldrh	r3, [r7, #2]
 8005954:	4619      	mov	r1, r3
 8005956:	2020      	movs	r0, #32
 8005958:	f000 f9a0 	bl	8005c9c <_wait_for_status_clear>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	da02      	bge.n	8005968 <STRHAL_QSPI_Indirect_Write+0x24>
		return -1;
 8005962:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005966:	e09e      	b.n	8005aa6 <STRHAL_QSPI_Indirect_Write+0x162>

	__IO uint32_t *data_reg = &QUADSPI->DR;
 8005968:	4b51      	ldr	r3, [pc, #324]	; (8005ab0 <STRHAL_QSPI_Indirect_Write+0x16c>)
 800596a:	617b      	str	r3, [r7, #20]
	_clear_status(QUADSPI_FCR_CSMF | QUADSPI_FCR_CTCF | QUADSPI_FCR_CTEF | QUADSPI_FCR_CTOF);
 800596c:	201b      	movs	r0, #27
 800596e:	f000 f9bf 	bl	8005cf0 <_clear_status>

	uint32_t ccr = 0x00000000;
 8005972:	2300      	movs	r3, #0
 8005974:	61fb      	str	r3, [r7, #28]

	if (n > 0)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d007      	beq.n	800598c <STRHAL_QSPI_Indirect_Write+0x48>
	{
		ccr |= QUADSPI_CCR_DMODE_0;
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005982:	61fb      	str	r3, [r7, #28]
		WRITE_REG(QUADSPI->DLR, n - 1U);
 8005984:	4a4b      	ldr	r2, [pc, #300]	; (8005ab4 <STRHAL_QSPI_Indirect_Write+0x170>)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	3b01      	subs	r3, #1
 800598a:	6113      	str	r3, [r2, #16]
	}

	if (cmd->alt_size > 0)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	7a5b      	ldrb	r3, [r3, #9]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d010      	beq.n	80059b6 <STRHAL_QSPI_Indirect_Write+0x72>
	{
		ccr |= QUADSPI_CCR_ABMODE_0;
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800599a:	61fb      	str	r3, [r7, #28]
		ccr |= ((cmd->alt_size - 1) & 0x3) << QUADSPI_CCR_ABSIZE_Pos;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	7a5b      	ldrb	r3, [r3, #9]
 80059a0:	3b01      	subs	r3, #1
 80059a2:	041b      	lsls	r3, r3, #16
 80059a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80059a8:	69fa      	ldr	r2, [r7, #28]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	61fb      	str	r3, [r7, #28]
		WRITE_REG(QUADSPI->ABR, cmd->alt);
 80059ae:	4a41      	ldr	r2, [pc, #260]	; (8005ab4 <STRHAL_QSPI_Indirect_Write+0x170>)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	61d3      	str	r3, [r2, #28]
	}

	ccr |= (cmd->dummy_size & 0x1F) << QUADSPI_CCR_DCYC_Pos;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	7c1b      	ldrb	r3, [r3, #16]
 80059ba:	049b      	lsls	r3, r3, #18
 80059bc:	f403 03f8 	and.w	r3, r3, #8126464	; 0x7c0000
 80059c0:	69fa      	ldr	r2, [r7, #28]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	61fb      	str	r3, [r7, #28]

	if (cmd->instruction_size > 0)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	785b      	ldrb	r3, [r3, #1]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d026      	beq.n	8005a1c <STRHAL_QSPI_Indirect_Write+0xd8>
	{
		ccr |= QUADSPI_CCR_IMODE_0;
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059d4:	61fb      	str	r3, [r7, #28]
		ccr |= cmd->instruction << QUADSPI_CCR_INSTRUCTION_Pos;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	461a      	mov	r2, r3
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	4313      	orrs	r3, r2
 80059e0:	61fb      	str	r3, [r7, #28]
		if (cmd->addr_size > 0)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	7a1b      	ldrb	r3, [r3, #8]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d014      	beq.n	8005a14 <STRHAL_QSPI_Indirect_Write+0xd0>
		{
			ccr |= QUADSPI_CCR_ADMODE_0;
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80059f0:	61fb      	str	r3, [r7, #28]
			ccr |= ((cmd->addr_size - 1) & 0x3) << QUADSPI_CCR_ADSIZE_Pos;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	7a1b      	ldrb	r3, [r3, #8]
 80059f6:	3b01      	subs	r3, #1
 80059f8:	031b      	lsls	r3, r3, #12
 80059fa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80059fe:	69fa      	ldr	r2, [r7, #28]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	61fb      	str	r3, [r7, #28]
			WRITE_REG(QUADSPI->CCR, ccr);
 8005a04:	4a2b      	ldr	r2, [pc, #172]	; (8005ab4 <STRHAL_QSPI_Indirect_Write+0x170>)
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	6153      	str	r3, [r2, #20]
			WRITE_REG(QUADSPI->AR, cmd->addr);
 8005a0a:	4a2a      	ldr	r2, [pc, #168]	; (8005ab4 <STRHAL_QSPI_Indirect_Write+0x170>)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	6193      	str	r3, [r2, #24]
 8005a12:	e01f      	b.n	8005a54 <STRHAL_QSPI_Indirect_Write+0x110>
		}
		else
		{
			WRITE_REG(QUADSPI->CCR, ccr);
 8005a14:	4a27      	ldr	r2, [pc, #156]	; (8005ab4 <STRHAL_QSPI_Indirect_Write+0x170>)
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	6153      	str	r3, [r2, #20]
 8005a1a:	e01b      	b.n	8005a54 <STRHAL_QSPI_Indirect_Write+0x110>
		}
	}
	else
	{
		if (cmd->addr_size > 0)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	7a1b      	ldrb	r3, [r3, #8]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d014      	beq.n	8005a4e <STRHAL_QSPI_Indirect_Write+0x10a>
		{
			ccr |= QUADSPI_CCR_ADMODE_0;
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a2a:	61fb      	str	r3, [r7, #28]
			ccr |= ((cmd->addr_size - 1) & 0x3) << QUADSPI_CCR_ADSIZE_Pos;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	7a1b      	ldrb	r3, [r3, #8]
 8005a30:	3b01      	subs	r3, #1
 8005a32:	031b      	lsls	r3, r3, #12
 8005a34:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005a38:	69fa      	ldr	r2, [r7, #28]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	61fb      	str	r3, [r7, #28]
			WRITE_REG(QUADSPI->CCR, ccr);
 8005a3e:	4a1d      	ldr	r2, [pc, #116]	; (8005ab4 <STRHAL_QSPI_Indirect_Write+0x170>)
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	6153      	str	r3, [r2, #20]
			WRITE_REG(QUADSPI->AR, cmd->addr);
 8005a44:	4a1b      	ldr	r2, [pc, #108]	; (8005ab4 <STRHAL_QSPI_Indirect_Write+0x170>)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	6193      	str	r3, [r2, #24]
 8005a4c:	e002      	b.n	8005a54 <STRHAL_QSPI_Indirect_Write+0x110>
		}
		else
		{
			WRITE_REG(QUADSPI->CCR, ccr);
 8005a4e:	4a19      	ldr	r2, [pc, #100]	; (8005ab4 <STRHAL_QSPI_Indirect_Write+0x170>)
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	6153      	str	r3, [r2, #20]
		}
	}

	uint32_t i;
	for (i = 0; i < n; ++i)
 8005a54:	2300      	movs	r3, #0
 8005a56:	61bb      	str	r3, [r7, #24]
 8005a58:	e012      	b.n	8005a80 <STRHAL_QSPI_Indirect_Write+0x13c>
	{
		if (_wait_for_status(QUADSPI_SR_FTF, tot) < 0)
 8005a5a:	887b      	ldrh	r3, [r7, #2]
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	2004      	movs	r0, #4
 8005a60:	f000 f8f2 	bl	8005c48 <_wait_for_status>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	da01      	bge.n	8005a6e <STRHAL_QSPI_Indirect_Write+0x12a>
			return i;
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	e01b      	b.n	8005aa6 <STRHAL_QSPI_Indirect_Write+0x162>

		*((__IO uint8_t*) data_reg) = data[i];
 8005a6e:	68ba      	ldr	r2, [r7, #8]
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	4413      	add	r3, r2
 8005a74:	781a      	ldrb	r2, [r3, #0]
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n; ++i)
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	61bb      	str	r3, [r7, #24]
 8005a80:	69ba      	ldr	r2, [r7, #24]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d3e8      	bcc.n	8005a5a <STRHAL_QSPI_Indirect_Write+0x116>

	}

	if (_wait_for_status(QUADSPI_SR_TCF, tot) == 0)
 8005a88:	887b      	ldrh	r3, [r7, #2]
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	2002      	movs	r0, #2
 8005a8e:	f000 f8db 	bl	8005c48 <_wait_for_status>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d105      	bne.n	8005aa4 <STRHAL_QSPI_Indirect_Write+0x160>
	{
		SET_BIT(QUADSPI->FCR, QUADSPI_FCR_CTCF);
 8005a98:	4b06      	ldr	r3, [pc, #24]	; (8005ab4 <STRHAL_QSPI_Indirect_Write+0x170>)
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	4a05      	ldr	r2, [pc, #20]	; (8005ab4 <STRHAL_QSPI_Indirect_Write+0x170>)
 8005a9e:	f043 0302 	orr.w	r3, r3, #2
 8005aa2:	60d3      	str	r3, [r2, #12]
	}

	return i;
 8005aa4:	69bb      	ldr	r3, [r7, #24]
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3720      	adds	r7, #32
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	a0001020 	.word	0xa0001020
 8005ab4:	a0001000 	.word	0xa0001000

08005ab8 <STRHAL_QSPI_Indirect_Read>:

uint32_t STRHAL_QSPI_Indirect_Read(const STRHAL_QSPI_Command_t *cmd, uint8_t *data, uint32_t n, uint16_t tot)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b088      	sub	sp, #32
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
 8005ac4:	807b      	strh	r3, [r7, #2]
	if (_wait_for_status_clear(QUADSPI_SR_BUSY, tot) < 0)
 8005ac6:	887b      	ldrh	r3, [r7, #2]
 8005ac8:	4619      	mov	r1, r3
 8005aca:	2020      	movs	r0, #32
 8005acc:	f000 f8e6 	bl	8005c9c <_wait_for_status_clear>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	da02      	bge.n	8005adc <STRHAL_QSPI_Indirect_Read+0x24>
		return -1;
 8005ad6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ada:	e0ad      	b.n	8005c38 <STRHAL_QSPI_Indirect_Read+0x180>

	__IO uint32_t *data_reg = &QUADSPI->DR;
 8005adc:	4b58      	ldr	r3, [pc, #352]	; (8005c40 <STRHAL_QSPI_Indirect_Read+0x188>)
 8005ade:	617b      	str	r3, [r7, #20]
	_clear_status(QUADSPI_FCR_CSMF | QUADSPI_FCR_CTCF | QUADSPI_FCR_CTEF | QUADSPI_FCR_CTOF);
 8005ae0:	201b      	movs	r0, #27
 8005ae2:	f000 f905 	bl	8005cf0 <_clear_status>

	uint32_t ccr = 0x00000000;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	61fb      	str	r3, [r7, #28]

	ccr |= QUADSPI_CCR_FMODE_0;
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005af0:	61fb      	str	r3, [r7, #28]

	if (n > 0)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d007      	beq.n	8005b08 <STRHAL_QSPI_Indirect_Read+0x50>
	{
		ccr |= QUADSPI_CCR_DMODE_0;
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005afe:	61fb      	str	r3, [r7, #28]
		WRITE_REG(QUADSPI->DLR, n - 1U);
 8005b00:	4a50      	ldr	r2, [pc, #320]	; (8005c44 <STRHAL_QSPI_Indirect_Read+0x18c>)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	3b01      	subs	r3, #1
 8005b06:	6113      	str	r3, [r2, #16]
	}
	if (cmd->alt_size > 0)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	7a5b      	ldrb	r3, [r3, #9]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d010      	beq.n	8005b32 <STRHAL_QSPI_Indirect_Read+0x7a>
	{
		ccr |= QUADSPI_CCR_ABMODE_0;
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b16:	61fb      	str	r3, [r7, #28]
		ccr |= ((cmd->alt_size - 1) & 0x3) << QUADSPI_CCR_ABSIZE_Pos;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	7a5b      	ldrb	r3, [r3, #9]
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	041b      	lsls	r3, r3, #16
 8005b20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b24:	69fa      	ldr	r2, [r7, #28]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	61fb      	str	r3, [r7, #28]
		WRITE_REG(QUADSPI->ABR, cmd->alt);
 8005b2a:	4a46      	ldr	r2, [pc, #280]	; (8005c44 <STRHAL_QSPI_Indirect_Read+0x18c>)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	61d3      	str	r3, [r2, #28]
	}

	ccr |= (cmd->dummy_size & 0x1F) << QUADSPI_CCR_DCYC_Pos;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	7c1b      	ldrb	r3, [r3, #16]
 8005b36:	049b      	lsls	r3, r3, #18
 8005b38:	f403 03f8 	and.w	r3, r3, #8126464	; 0x7c0000
 8005b3c:	69fa      	ldr	r2, [r7, #28]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	61fb      	str	r3, [r7, #28]

	if (cmd->instruction_size > 0)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	785b      	ldrb	r3, [r3, #1]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d026      	beq.n	8005b98 <STRHAL_QSPI_Indirect_Read+0xe0>
	{
		ccr |= QUADSPI_CCR_IMODE_0;
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b50:	61fb      	str	r3, [r7, #28]
		ccr |= cmd->instruction << QUADSPI_CCR_INSTRUCTION_Pos;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	461a      	mov	r2, r3
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	61fb      	str	r3, [r7, #28]
		if (cmd->addr_size > 0)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	7a1b      	ldrb	r3, [r3, #8]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d014      	beq.n	8005b90 <STRHAL_QSPI_Indirect_Read+0xd8>
		{
			ccr |= QUADSPI_CCR_ADMODE_0;
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b6c:	61fb      	str	r3, [r7, #28]
			ccr |= ((cmd->addr_size - 1) & 0x3) << QUADSPI_CCR_ADSIZE_Pos;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	7a1b      	ldrb	r3, [r3, #8]
 8005b72:	3b01      	subs	r3, #1
 8005b74:	031b      	lsls	r3, r3, #12
 8005b76:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005b7a:	69fa      	ldr	r2, [r7, #28]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	61fb      	str	r3, [r7, #28]
			WRITE_REG(QUADSPI->CCR, ccr);
 8005b80:	4a30      	ldr	r2, [pc, #192]	; (8005c44 <STRHAL_QSPI_Indirect_Read+0x18c>)
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	6153      	str	r3, [r2, #20]
			WRITE_REG(QUADSPI->AR, cmd->addr);
 8005b86:	4a2f      	ldr	r2, [pc, #188]	; (8005c44 <STRHAL_QSPI_Indirect_Read+0x18c>)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	6193      	str	r3, [r2, #24]
 8005b8e:	e01f      	b.n	8005bd0 <STRHAL_QSPI_Indirect_Read+0x118>
		}
		else
		{
			WRITE_REG(QUADSPI->CCR, ccr);
 8005b90:	4a2c      	ldr	r2, [pc, #176]	; (8005c44 <STRHAL_QSPI_Indirect_Read+0x18c>)
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	6153      	str	r3, [r2, #20]
 8005b96:	e01b      	b.n	8005bd0 <STRHAL_QSPI_Indirect_Read+0x118>
		}
	}
	else
	{
		if (cmd->addr_size > 0)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	7a1b      	ldrb	r3, [r3, #8]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d014      	beq.n	8005bca <STRHAL_QSPI_Indirect_Read+0x112>
		{
			ccr |= QUADSPI_CCR_ADMODE_0;
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ba6:	61fb      	str	r3, [r7, #28]
			ccr |= ((cmd->addr_size - 1) & 0x3) << QUADSPI_CCR_ADSIZE_Pos;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	7a1b      	ldrb	r3, [r3, #8]
 8005bac:	3b01      	subs	r3, #1
 8005bae:	031b      	lsls	r3, r3, #12
 8005bb0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005bb4:	69fa      	ldr	r2, [r7, #28]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	61fb      	str	r3, [r7, #28]
			WRITE_REG(QUADSPI->CCR, ccr);
 8005bba:	4a22      	ldr	r2, [pc, #136]	; (8005c44 <STRHAL_QSPI_Indirect_Read+0x18c>)
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	6153      	str	r3, [r2, #20]
			WRITE_REG(QUADSPI->AR, cmd->addr);
 8005bc0:	4a20      	ldr	r2, [pc, #128]	; (8005c44 <STRHAL_QSPI_Indirect_Read+0x18c>)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	6193      	str	r3, [r2, #24]
 8005bc8:	e002      	b.n	8005bd0 <STRHAL_QSPI_Indirect_Read+0x118>
		}
		else
		{
			WRITE_REG(QUADSPI->CCR, ccr);
 8005bca:	4a1e      	ldr	r2, [pc, #120]	; (8005c44 <STRHAL_QSPI_Indirect_Read+0x18c>)
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	6153      	str	r3, [r2, #20]
		}
	}

	if (_wait_for_status(QUADSPI_SR_BUSY, tot) < 0)
 8005bd0:	887b      	ldrh	r3, [r7, #2]
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	2020      	movs	r0, #32
 8005bd6:	f000 f837 	bl	8005c48 <_wait_for_status>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	da01      	bge.n	8005be4 <STRHAL_QSPI_Indirect_Read+0x12c>
		return 0;
 8005be0:	2300      	movs	r3, #0
 8005be2:	e029      	b.n	8005c38 <STRHAL_QSPI_Indirect_Read+0x180>

	uint32_t i;
	for (i = 0; i < n; ++i)
 8005be4:	2300      	movs	r3, #0
 8005be6:	61bb      	str	r3, [r7, #24]
 8005be8:	e016      	b.n	8005c18 <STRHAL_QSPI_Indirect_Read+0x160>
	{
		if (_wait_for_status(QUADSPI_SR_FTF | QUADSPI_SR_TCF, tot) < 0)
 8005bea:	887b      	ldrh	r3, [r7, #2]
 8005bec:	4619      	mov	r1, r3
 8005bee:	2006      	movs	r0, #6
 8005bf0:	f000 f82a 	bl	8005c48 <_wait_for_status>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	da04      	bge.n	8005c04 <STRHAL_QSPI_Indirect_Read+0x14c>
		{
			_clear_status(QUADSPI_SR_TCF);
 8005bfa:	2002      	movs	r0, #2
 8005bfc:	f000 f878 	bl	8005cf0 <_clear_status>
			return i;
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	e019      	b.n	8005c38 <STRHAL_QSPI_Indirect_Read+0x180>
		}
		data[i] = *((__IO uint8_t*) data_reg);
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	4413      	add	r3, r2
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	7812      	ldrb	r2, [r2, #0]
 8005c0e:	b2d2      	uxtb	r2, r2
 8005c10:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n; ++i)
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	3301      	adds	r3, #1
 8005c16:	61bb      	str	r3, [r7, #24]
 8005c18:	69ba      	ldr	r2, [r7, #24]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d3e4      	bcc.n	8005bea <STRHAL_QSPI_Indirect_Read+0x132>
	}

	if (_wait_for_status(QUADSPI_SR_TCF, tot) == 0)
 8005c20:	887b      	ldrh	r3, [r7, #2]
 8005c22:	4619      	mov	r1, r3
 8005c24:	2002      	movs	r0, #2
 8005c26:	f000 f80f 	bl	8005c48 <_wait_for_status>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d102      	bne.n	8005c36 <STRHAL_QSPI_Indirect_Read+0x17e>
	{
		_clear_status(QUADSPI_SR_TCF);
 8005c30:	2002      	movs	r0, #2
 8005c32:	f000 f85d 	bl	8005cf0 <_clear_status>
	}
	return i;
 8005c36:	69bb      	ldr	r3, [r7, #24]
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3720      	adds	r7, #32
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	a0001020 	.word	0xa0001020
 8005c44:	a0001000 	.word	0xa0001000

08005c48 <_wait_for_status>:

int _wait_for_status(uint32_t flag, uint16_t tot)
{
 8005c48:	b5b0      	push	{r4, r5, r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	460b      	mov	r3, r1
 8005c52:	807b      	strh	r3, [r7, #2]
	uint64_t start = STRHAL_Systick_GetTick();
 8005c54:	f000 f91c 	bl	8005e90 <STRHAL_Systick_GetTick>
 8005c58:	e9c7 0102 	strd	r0, r1, [r7, #8]

	while (!(QUADSPI->SR & flag))
 8005c5c:	e010      	b.n	8005c80 <_wait_for_status+0x38>
	{
		if (STRHAL_Systick_GetTick() - start > tot)
 8005c5e:	f000 f917 	bl	8005e90 <STRHAL_Systick_GetTick>
 8005c62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c66:	1a84      	subs	r4, r0, r2
 8005c68:	eb61 0503 	sbc.w	r5, r1, r3
 8005c6c:	887a      	ldrh	r2, [r7, #2]
 8005c6e:	f04f 0300 	mov.w	r3, #0
 8005c72:	42ab      	cmp	r3, r5
 8005c74:	bf08      	it	eq
 8005c76:	42a2      	cmpeq	r2, r4
 8005c78:	d202      	bcs.n	8005c80 <_wait_for_status+0x38>
			return -1;
 8005c7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c7e:	e006      	b.n	8005c8e <_wait_for_status+0x46>
	while (!(QUADSPI->SR & flag))
 8005c80:	4b05      	ldr	r3, [pc, #20]	; (8005c98 <_wait_for_status+0x50>)
 8005c82:	689a      	ldr	r2, [r3, #8]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4013      	ands	r3, r2
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d0e8      	beq.n	8005c5e <_wait_for_status+0x16>
	}
	return 0;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3710      	adds	r7, #16
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bdb0      	pop	{r4, r5, r7, pc}
 8005c96:	bf00      	nop
 8005c98:	a0001000 	.word	0xa0001000

08005c9c <_wait_for_status_clear>:

int _wait_for_status_clear(uint32_t flag, uint16_t tot)
{
 8005c9c:	b5b0      	push	{r4, r5, r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	807b      	strh	r3, [r7, #2]
	uint64_t start = STRHAL_Systick_GetTick();
 8005ca8:	f000 f8f2 	bl	8005e90 <STRHAL_Systick_GetTick>
 8005cac:	e9c7 0102 	strd	r0, r1, [r7, #8]

	while (QUADSPI->SR & flag)
 8005cb0:	e010      	b.n	8005cd4 <_wait_for_status_clear+0x38>
	{
		if (STRHAL_Systick_GetTick() - start > tot)
 8005cb2:	f000 f8ed 	bl	8005e90 <STRHAL_Systick_GetTick>
 8005cb6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005cba:	1a84      	subs	r4, r0, r2
 8005cbc:	eb61 0503 	sbc.w	r5, r1, r3
 8005cc0:	887a      	ldrh	r2, [r7, #2]
 8005cc2:	f04f 0300 	mov.w	r3, #0
 8005cc6:	42ab      	cmp	r3, r5
 8005cc8:	bf08      	it	eq
 8005cca:	42a2      	cmpeq	r2, r4
 8005ccc:	d202      	bcs.n	8005cd4 <_wait_for_status_clear+0x38>
			return -1;
 8005cce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cd2:	e006      	b.n	8005ce2 <_wait_for_status_clear+0x46>
	while (QUADSPI->SR & flag)
 8005cd4:	4b05      	ldr	r3, [pc, #20]	; (8005cec <_wait_for_status_clear+0x50>)
 8005cd6:	689a      	ldr	r2, [r3, #8]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4013      	ands	r3, r2
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d1e8      	bne.n	8005cb2 <_wait_for_status_clear+0x16>
	}
	return 0;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3710      	adds	r7, #16
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bdb0      	pop	{r4, r5, r7, pc}
 8005cea:	bf00      	nop
 8005cec:	a0001000 	.word	0xa0001000

08005cf0 <_clear_status>:

void _clear_status(uint32_t flags)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
	QUADSPI->FCR |= (flags);
 8005cf8:	4b05      	ldr	r3, [pc, #20]	; (8005d10 <_clear_status+0x20>)
 8005cfa:	68da      	ldr	r2, [r3, #12]
 8005cfc:	4904      	ldr	r1, [pc, #16]	; (8005d10 <_clear_status+0x20>)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	60cb      	str	r3, [r1, #12]
}
 8005d04:	bf00      	nop
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr
 8005d10:	a0001000 	.word	0xa0001000

08005d14 <LL_AHB2_GRP1_EnableClock>:
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005d1c:	4b08      	ldr	r3, [pc, #32]	; (8005d40 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8005d1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d20:	4907      	ldr	r1, [pc, #28]	; (8005d40 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005d28:	4b05      	ldr	r3, [pc, #20]	; (8005d40 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8005d2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4013      	ands	r3, r2
 8005d30:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005d32:	68fb      	ldr	r3, [r7, #12]
}
 8005d34:	bf00      	nop
 8005d36:	3714      	adds	r7, #20
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr
 8005d40:	40021000 	.word	0x40021000

08005d44 <LL_APB1_GRP1_EnableClock>:
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8005d4c:	4b08      	ldr	r3, [pc, #32]	; (8005d70 <LL_APB1_GRP1_EnableClock+0x2c>)
 8005d4e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005d50:	4907      	ldr	r1, [pc, #28]	; (8005d70 <LL_APB1_GRP1_EnableClock+0x2c>)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8005d58:	4b05      	ldr	r3, [pc, #20]	; (8005d70 <LL_APB1_GRP1_EnableClock+0x2c>)
 8005d5a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4013      	ands	r3, r2
 8005d60:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005d62:	68fb      	ldr	r3, [r7, #12]
}
 8005d64:	bf00      	nop
 8005d66:	3714      	adds	r7, #20
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr
 8005d70:	40021000 	.word	0x40021000

08005d74 <LL_APB2_GRP1_EnableClock>:
{
 8005d74:	b480      	push	{r7}
 8005d76:	b085      	sub	sp, #20
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8005d7c:	4b08      	ldr	r3, [pc, #32]	; (8005da0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005d7e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005d80:	4907      	ldr	r1, [pc, #28]	; (8005da0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005d88:	4b05      	ldr	r3, [pc, #20]	; (8005da0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005d8a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4013      	ands	r3, r2
 8005d90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005d92:	68fb      	ldr	r3, [r7, #12]
}
 8005d94:	bf00      	nop
 8005d96:	3714      	adds	r7, #20
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr
 8005da0:	40021000 	.word	0x40021000

08005da4 <LL_SPI_Disable>:
  * @rmtoll CR1          SPE           LL_SPI_Disable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Disable(SPI_TypeDef *SPIx)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	601a      	str	r2, [r3, #0]
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <STRHAL_SPI_Init>:
static inline int _wait_for_rxtxend(SPI_TypeDef *spix, uint16_t tot);
static inline int _wait_for_rxne(SPI_TypeDef *spix, uint16_t tot);
static inline int _rx_flush(SPI_TypeDef *spix, uint16_t tot);

void STRHAL_SPI_Init()
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	af00      	add	r7, sp, #0
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8005dc8:	2004      	movs	r0, #4
 8005dca:	f7ff ffa3 	bl	8005d14 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8005dce:	2020      	movs	r0, #32
 8005dd0:	f7ff ffa0 	bl	8005d14 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8005dd4:	2001      	movs	r0, #1
 8005dd6:	f7ff ff9d 	bl	8005d14 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8005dda:	2002      	movs	r0, #2
 8005ddc:	f7ff ff9a 	bl	8005d14 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 8005de0:	2010      	movs	r0, #16
 8005de2:	f7ff ff97 	bl	8005d14 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 8005de6:	2008      	movs	r0, #8
 8005de8:	f7ff ff94 	bl	8005d14 <LL_AHB2_GRP1_EnableClock>

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8005dec:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005df0:	f7ff ffc0 	bl	8005d74 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8005df4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005df8:	f7ff ffa4 	bl	8005d44 <LL_APB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8005dfc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005e00:	f7ff ffa0 	bl	8005d44 <LL_APB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI4);
 8005e04:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005e08:	f7ff ff9c 	bl	8005d44 <LL_APB1_GRP1_EnableClock>

	LL_SPI_DeInit(SPI1);
 8005e0c:	480c      	ldr	r0, [pc, #48]	; (8005e40 <STRHAL_SPI_Init+0x7c>)
 8005e0e:	f7fd f8f5 	bl	8002ffc <LL_SPI_DeInit>
	LL_SPI_DeInit(SPI2);
 8005e12:	480c      	ldr	r0, [pc, #48]	; (8005e44 <STRHAL_SPI_Init+0x80>)
 8005e14:	f7fd f8f2 	bl	8002ffc <LL_SPI_DeInit>
	LL_SPI_DeInit(SPI3);
 8005e18:	480b      	ldr	r0, [pc, #44]	; (8005e48 <STRHAL_SPI_Init+0x84>)
 8005e1a:	f7fd f8ef 	bl	8002ffc <LL_SPI_DeInit>
	LL_SPI_DeInit(SPI4);
 8005e1e:	480b      	ldr	r0, [pc, #44]	; (8005e4c <STRHAL_SPI_Init+0x88>)
 8005e20:	f7fd f8ec 	bl	8002ffc <LL_SPI_DeInit>

	LL_SPI_Disable(SPI1);
 8005e24:	4806      	ldr	r0, [pc, #24]	; (8005e40 <STRHAL_SPI_Init+0x7c>)
 8005e26:	f7ff ffbd 	bl	8005da4 <LL_SPI_Disable>
	LL_SPI_Disable(SPI2);
 8005e2a:	4806      	ldr	r0, [pc, #24]	; (8005e44 <STRHAL_SPI_Init+0x80>)
 8005e2c:	f7ff ffba 	bl	8005da4 <LL_SPI_Disable>
	LL_SPI_Disable(SPI3);
 8005e30:	4805      	ldr	r0, [pc, #20]	; (8005e48 <STRHAL_SPI_Init+0x84>)
 8005e32:	f7ff ffb7 	bl	8005da4 <LL_SPI_Disable>
	LL_SPI_Disable(SPI4);
 8005e36:	4805      	ldr	r0, [pc, #20]	; (8005e4c <STRHAL_SPI_Init+0x88>)
 8005e38:	f7ff ffb4 	bl	8005da4 <LL_SPI_Disable>
}
 8005e3c:	bf00      	nop
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	40013000 	.word	0x40013000
 8005e44:	40003800 	.word	0x40003800
 8005e48:	40003c00 	.word	0x40003c00
 8005e4c:	40013c00 	.word	0x40013c00

08005e50 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 8005e50:	b480      	push	{r7}
 8005e52:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8005e54:	4b05      	ldr	r3, [pc, #20]	; (8005e6c <LL_SYSTICK_EnableIT+0x1c>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a04      	ldr	r2, [pc, #16]	; (8005e6c <LL_SYSTICK_EnableIT+0x1c>)
 8005e5a:	f043 0302 	orr.w	r3, r3, #2
 8005e5e:	6013      	str	r3, [r2, #0]
}
 8005e60:	bf00      	nop
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	e000e010 	.word	0xe000e010

08005e70 <STRHAL_SysTick_Init>:
#include <STRHAL_SysTick.h>

static volatile uint64_t systick_count = 0;

void STRHAL_SysTick_Init()
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	af00      	add	r7, sp, #0
	//LL_Init1msTick(SystemCoreClock);
	//1ms tick already in STRHAL.c sysclock init
	LL_SYSTICK_EnableIT();
 8005e74:	f7ff ffec 	bl	8005e50 <LL_SYSTICK_EnableIT>
	systick_count = 0;
 8005e78:	4904      	ldr	r1, [pc, #16]	; (8005e8c <STRHAL_SysTick_Init+0x1c>)
 8005e7a:	f04f 0200 	mov.w	r2, #0
 8005e7e:	f04f 0300 	mov.w	r3, #0
 8005e82:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005e86:	bf00      	nop
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	20000af8 	.word	0x20000af8

08005e90 <STRHAL_Systick_GetTick>:
	uint64_t end = systick_count + ticks;
	while (systick_count < end);
}

uint64_t STRHAL_Systick_GetTick()
{
 8005e90:	b480      	push	{r7}
 8005e92:	af00      	add	r7, sp, #0
	return systick_count;
 8005e94:	4b04      	ldr	r3, [pc, #16]	; (8005ea8 <STRHAL_Systick_GetTick+0x18>)
 8005e96:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8005e9a:	4610      	mov	r0, r2
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	20000af8 	.word	0x20000af8

08005eac <SysTick_Handler>:

void SysTick_Handler()
{
 8005eac:	b480      	push	{r7}
 8005eae:	af00      	add	r7, sp, #0
	systick_count++;
 8005eb0:	4b06      	ldr	r3, [pc, #24]	; (8005ecc <SysTick_Handler+0x20>)
 8005eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb6:	1c50      	adds	r0, r2, #1
 8005eb8:	f143 0100 	adc.w	r1, r3, #0
 8005ebc:	4b03      	ldr	r3, [pc, #12]	; (8005ecc <SysTick_Handler+0x20>)
 8005ebe:	e9c3 0100 	strd	r0, r1, [r3]
}
 8005ec2:	bf00      	nop
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr
 8005ecc:	20000af8 	.word	0x20000af8

08005ed0 <__NVIC_GetPriorityGrouping>:
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ed4:	4b04      	ldr	r3, [pc, #16]	; (8005ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	0a1b      	lsrs	r3, r3, #8
 8005eda:	f003 0307 	and.w	r3, r3, #7
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr
 8005ee8:	e000ed00 	.word	0xe000ed00

08005eec <__NVIC_EnableIRQ>:
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	db0b      	blt.n	8005f16 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005efe:	79fb      	ldrb	r3, [r7, #7]
 8005f00:	f003 021f 	and.w	r2, r3, #31
 8005f04:	4907      	ldr	r1, [pc, #28]	; (8005f24 <__NVIC_EnableIRQ+0x38>)
 8005f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f0a:	095b      	lsrs	r3, r3, #5
 8005f0c:	2001      	movs	r0, #1
 8005f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8005f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005f16:	bf00      	nop
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	e000e100 	.word	0xe000e100

08005f28 <__NVIC_SetPriority>:
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	4603      	mov	r3, r0
 8005f30:	6039      	str	r1, [r7, #0]
 8005f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	db0a      	blt.n	8005f52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	b2da      	uxtb	r2, r3
 8005f40:	490c      	ldr	r1, [pc, #48]	; (8005f74 <__NVIC_SetPriority+0x4c>)
 8005f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f46:	0112      	lsls	r2, r2, #4
 8005f48:	b2d2      	uxtb	r2, r2
 8005f4a:	440b      	add	r3, r1
 8005f4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005f50:	e00a      	b.n	8005f68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	b2da      	uxtb	r2, r3
 8005f56:	4908      	ldr	r1, [pc, #32]	; (8005f78 <__NVIC_SetPriority+0x50>)
 8005f58:	79fb      	ldrb	r3, [r7, #7]
 8005f5a:	f003 030f 	and.w	r3, r3, #15
 8005f5e:	3b04      	subs	r3, #4
 8005f60:	0112      	lsls	r2, r2, #4
 8005f62:	b2d2      	uxtb	r2, r2
 8005f64:	440b      	add	r3, r1
 8005f66:	761a      	strb	r2, [r3, #24]
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	e000e100 	.word	0xe000e100
 8005f78:	e000ed00 	.word	0xe000ed00

08005f7c <NVIC_EncodePriority>:
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b089      	sub	sp, #36	; 0x24
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f003 0307 	and.w	r3, r3, #7
 8005f8e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	f1c3 0307 	rsb	r3, r3, #7
 8005f96:	2b04      	cmp	r3, #4
 8005f98:	bf28      	it	cs
 8005f9a:	2304      	movcs	r3, #4
 8005f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	3304      	adds	r3, #4
 8005fa2:	2b06      	cmp	r3, #6
 8005fa4:	d902      	bls.n	8005fac <NVIC_EncodePriority+0x30>
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	3b03      	subs	r3, #3
 8005faa:	e000      	b.n	8005fae <NVIC_EncodePriority+0x32>
 8005fac:	2300      	movs	r3, #0
 8005fae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fba:	43da      	mvns	r2, r3
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	401a      	ands	r2, r3
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005fc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	fa01 f303 	lsl.w	r3, r1, r3
 8005fce:	43d9      	mvns	r1, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fd4:	4313      	orrs	r3, r2
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3724      	adds	r7, #36	; 0x24
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
	...

08005fe4 <LL_AHB2_GRP1_EnableClock>:
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b085      	sub	sp, #20
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005fec:	4b08      	ldr	r3, [pc, #32]	; (8006010 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8005fee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ff0:	4907      	ldr	r1, [pc, #28]	; (8006010 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005ff8:	4b05      	ldr	r3, [pc, #20]	; (8006010 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8005ffa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4013      	ands	r3, r2
 8006000:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006002:	68fb      	ldr	r3, [r7, #12]
}
 8006004:	bf00      	nop
 8006006:	3714      	adds	r7, #20
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr
 8006010:	40021000 	.word	0x40021000

08006014 <LL_APB1_GRP1_EnableClock>:
{
 8006014:	b480      	push	{r7}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800601c:	4b08      	ldr	r3, [pc, #32]	; (8006040 <LL_APB1_GRP1_EnableClock+0x2c>)
 800601e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006020:	4907      	ldr	r1, [pc, #28]	; (8006040 <LL_APB1_GRP1_EnableClock+0x2c>)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4313      	orrs	r3, r2
 8006026:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8006028:	4b05      	ldr	r3, [pc, #20]	; (8006040 <LL_APB1_GRP1_EnableClock+0x2c>)
 800602a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4013      	ands	r3, r2
 8006030:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006032:	68fb      	ldr	r3, [r7, #12]
}
 8006034:	bf00      	nop
 8006036:	3714      	adds	r7, #20
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr
 8006040:	40021000 	.word	0x40021000

08006044 <LL_APB2_GRP1_EnableClock>:
{
 8006044:	b480      	push	{r7}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800604c:	4b08      	ldr	r3, [pc, #32]	; (8006070 <LL_APB2_GRP1_EnableClock+0x2c>)
 800604e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006050:	4907      	ldr	r1, [pc, #28]	; (8006070 <LL_APB2_GRP1_EnableClock+0x2c>)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4313      	orrs	r3, r2
 8006056:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006058:	4b05      	ldr	r3, [pc, #20]	; (8006070 <LL_APB2_GRP1_EnableClock+0x2c>)
 800605a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4013      	ands	r3, r2
 8006060:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006062:	68fb      	ldr	r3, [r7, #12]
}
 8006064:	bf00      	nop
 8006066:	3714      	adds	r7, #20
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr
 8006070:	40021000 	.word	0x40021000

08006074 <LL_TIM_EnableCounter>:
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f043 0201 	orr.w	r2, r3, #1
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	601a      	str	r2, [r3, #0]
}
 8006088:	bf00      	nop
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <LL_TIM_IsEnabledCounter>:
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->CR1, TIM_CR1_CEN) == (TIM_CR1_CEN)) ? 1UL : 0UL);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d101      	bne.n	80060ac <LL_TIM_IsEnabledCounter+0x18>
 80060a8:	2301      	movs	r3, #1
 80060aa:	e000      	b.n	80060ae <LL_TIM_IsEnabledCounter+0x1a>
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	370c      	adds	r7, #12
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <LL_TIM_EnableARRPreload>:
{
 80060ba:	b480      	push	{r7}
 80060bc:	b083      	sub	sp, #12
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	601a      	str	r2, [r3, #0]
}
 80060ce:	bf00      	nop
 80060d0:	370c      	adds	r7, #12
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr

080060da <LL_TIM_CC_EnableChannel>:
{
 80060da:	b480      	push	{r7}
 80060dc:	b083      	sub	sp, #12
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
 80060e2:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a1a      	ldr	r2, [r3, #32]
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	431a      	orrs	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	621a      	str	r2, [r3, #32]
}
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <LL_TIM_CC_DisableChannel>:
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a1a      	ldr	r2, [r3, #32]
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	43db      	mvns	r3, r3
 800610e:	401a      	ands	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	621a      	str	r2, [r3, #32]
}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <LL_TIM_ClearFlag_UPDATE>:
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f06f 0201 	mvn.w	r2, #1
 800612e:	611a      	str	r2, [r3, #16]
}
 8006130:	bf00      	nop
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <LL_TIM_IsActiveFlag_UPDATE>:
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	f003 0301 	and.w	r3, r3, #1
 800614c:	2b01      	cmp	r3, #1
 800614e:	d101      	bne.n	8006154 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8006150:	2301      	movs	r3, #1
 8006152:	e000      	b.n	8006156 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	370c      	adds	r7, #12
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr

08006162 <LL_TIM_EnableIT_UPDATE>:
{
 8006162:	b480      	push	{r7}
 8006164:	b083      	sub	sp, #12
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	f043 0201 	orr.w	r2, r3, #1
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	60da      	str	r2, [r3, #12]
}
 8006176:	bf00      	nop
 8006178:	370c      	adds	r7, #12
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr

08006182 <STRHAL_TIM_Init>:
 [STRHAL_TIM_TIM8_CH4N_PC13] = { .tim = &_tims[STRHAL_TIM_TIM8], .port = GPIOC, .pin = LL_GPIO_PIN_13, .afn = LL_GPIO_AF_4,  .n = LL_TIM_CHANNEL_CH4N, .ccr = &TIM8->CCR4, },
 [STRHAL_TIM_TIM8_CH4N_PD0]  = { .tim = &_tims[STRHAL_TIM_TIM8], .port = GPIOC, .pin = LL_GPIO_PIN_0,  .afn = LL_GPIO_AF_6,  .n = LL_TIM_CHANNEL_CH4N, .ccr = &TIM8->CCR4, },
 [STRHAL_TIM_TIM8_CH4_PD1]   = { .tim = &_tims[STRHAL_TIM_TIM8], .port = GPIOC, .pin = LL_GPIO_PIN_1,  .afn = LL_GPIO_AF_4,  .n = LL_TIM_CHANNEL_CH4,  .ccr = &TIM8->CCR4, }, };

void STRHAL_TIM_Init()
{
 8006182:	b580      	push	{r7, lr}
 8006184:	af00      	add	r7, sp, #0
	/* GPIO Ports Clock Enable */
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8006186:	2001      	movs	r0, #1
 8006188:	f7ff ff2c 	bl	8005fe4 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800618c:	2002      	movs	r0, #2
 800618e:	f7ff ff29 	bl	8005fe4 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8006192:	2004      	movs	r0, #4
 8006194:	f7ff ff26 	bl	8005fe4 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 8006198:	2008      	movs	r0, #8
 800619a:	f7ff ff23 	bl	8005fe4 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 800619e:	2010      	movs	r0, #16
 80061a0:	f7ff ff20 	bl	8005fe4 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 80061a4:	2020      	movs	r0, #32
 80061a6:	f7ff ff1d 	bl	8005fe4 <LL_AHB2_GRP1_EnableClock>

	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80061aa:	2001      	movs	r0, #1
 80061ac:	f7ff ff32 	bl	8006014 <LL_APB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80061b0:	2002      	movs	r0, #2
 80061b2:	f7ff ff2f 	bl	8006014 <LL_APB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 80061b6:	2004      	movs	r0, #4
 80061b8:	f7ff ff2c 	bl	8006014 <LL_APB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 80061bc:	2010      	movs	r0, #16
 80061be:	f7ff ff29 	bl	8006014 <LL_APB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 80061c2:	2020      	movs	r0, #32
 80061c4:	f7ff ff26 	bl	8006014 <LL_APB1_GRP1_EnableClock>

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 80061c8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80061cc:	f7ff ff3a 	bl	8006044 <LL_APB2_GRP1_EnableClock>
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM8);
 80061d0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80061d4:	f7ff ff36 	bl	8006044 <LL_APB2_GRP1_EnableClock>

	NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80061d8:	2036      	movs	r0, #54	; 0x36
 80061da:	f7ff fe87 	bl	8005eec <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(TIM7_DAC_IRQn);
 80061de:	2037      	movs	r0, #55	; 0x37
 80061e0:	f7ff fe84 	bl	8005eec <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM6_DAC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 1, 3));
 80061e4:	f7ff fe74 	bl	8005ed0 <__NVIC_GetPriorityGrouping>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2203      	movs	r2, #3
 80061ec:	2101      	movs	r1, #1
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7ff fec4 	bl	8005f7c <NVIC_EncodePriority>
 80061f4:	4603      	mov	r3, r0
 80061f6:	4619      	mov	r1, r3
 80061f8:	2036      	movs	r0, #54	; 0x36
 80061fa:	f7ff fe95 	bl	8005f28 <__NVIC_SetPriority>
	NVIC_SetPriority(TIM7_DAC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 1, 2)); //TODO check priorities
 80061fe:	f7ff fe67 	bl	8005ed0 <__NVIC_GetPriorityGrouping>
 8006202:	4603      	mov	r3, r0
 8006204:	2202      	movs	r2, #2
 8006206:	2101      	movs	r1, #1
 8006208:	4618      	mov	r0, r3
 800620a:	f7ff feb7 	bl	8005f7c <NVIC_EncodePriority>
 800620e:	4603      	mov	r3, r0
 8006210:	4619      	mov	r1, r3
 8006212:	2037      	movs	r0, #55	; 0x37
 8006214:	f7ff fe88 	bl	8005f28 <__NVIC_SetPriority>
}
 8006218:	bf00      	nop
 800621a:	bd80      	pop	{r7, pc}

0800621c <STRHAL_TIM_PWM_Enable>:
	*ch->ccr = duty;
	return duty;
}

int STRHAL_TIM_PWM_Enable(STRHAL_TIM_PWM_Channel_t *pwmChannel, int enable)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
	if (pwmChannel->channelId > STRHAL_TIM_N_TIM_CHANNELS)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	2b5b      	cmp	r3, #91	; 0x5b
 800622c:	d902      	bls.n	8006234 <STRHAL_TIM_PWM_Enable+0x18>
		return -1;
 800622e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006232:	e037      	b.n	80062a4 <STRHAL_TIM_PWM_Enable+0x88>

	const STRHAL_TIM_Channel_t *ch = &_tim_channels[pwmChannel->channelId];
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	461a      	mov	r2, r3
 800623a:	4613      	mov	r3, r2
 800623c:	005b      	lsls	r3, r3, #1
 800623e:	4413      	add	r3, r2
 8006240:	00db      	lsls	r3, r3, #3
 8006242:	4a1a      	ldr	r2, [pc, #104]	; (80062ac <STRHAL_TIM_PWM_Enable+0x90>)
 8006244:	4413      	add	r3, r2
 8006246:	60fb      	str	r3, [r7, #12]
	if (ch->tim->utype != STRHAL_TIM_USAGE_PWM)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	79db      	ldrb	r3, [r3, #7]
 800624e:	2b02      	cmp	r3, #2
 8006250:	d002      	beq.n	8006258 <STRHAL_TIM_PWM_Enable+0x3c>
		return -1;
 8006252:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006256:	e025      	b.n	80062a4 <STRHAL_TIM_PWM_Enable+0x88>

	if (enable)
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d018      	beq.n	8006290 <STRHAL_TIM_PWM_Enable+0x74>
	{
		LL_TIM_CC_EnableChannel(ch->tim->timx, ch->n);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	4619      	mov	r1, r3
 800626a:	4610      	mov	r0, r2
 800626c:	f7ff ff35 	bl	80060da <LL_TIM_CC_EnableChannel>
		if (!LL_TIM_IsEnabledCounter(ch->tim->timx))
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4618      	mov	r0, r3
 8006278:	f7ff ff0c 	bl	8006094 <LL_TIM_IsEnabledCounter>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10f      	bne.n	80062a2 <STRHAL_TIM_PWM_Enable+0x86>
			LL_TIM_EnableCounter(ch->tim->timx);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4618      	mov	r0, r3
 800628a:	f7ff fef3 	bl	8006074 <LL_TIM_EnableCounter>
 800628e:	e008      	b.n	80062a2 <STRHAL_TIM_PWM_Enable+0x86>
	}
	else
	{
		LL_TIM_CC_DisableChannel(ch->tim->timx, ch->n);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	4619      	mov	r1, r3
 800629c:	4610      	mov	r0, r2
 800629e:	f7ff ff2d 	bl	80060fc <LL_TIM_CC_DisableChannel>
	}

	return enable;
 80062a2:	683b      	ldr	r3, [r7, #0]
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	080076b8 	.word	0x080076b8

080062b0 <STRHAL_TIM_Heartbeat_Init>:

int32_t STRHAL_TIM_Heartbeat_Init(STRHAL_TIM_BasicTimerId_t id, uint16_t psc, uint16_t res)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b08a      	sub	sp, #40	; 0x28
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	4603      	mov	r3, r0
 80062b8:	71fb      	strb	r3, [r7, #7]
 80062ba:	460b      	mov	r3, r1
 80062bc:	80bb      	strh	r3, [r7, #4]
 80062be:	4613      	mov	r3, r2
 80062c0:	807b      	strh	r3, [r7, #2]
	if (id > STRHAL_TIM_N_BASICTIM || id < 0)
 80062c2:	79fb      	ldrb	r3, [r7, #7]
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	d902      	bls.n	80062ce <STRHAL_TIM_Heartbeat_Init+0x1e>
		return -1;
 80062c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062cc:	e043      	b.n	8006356 <STRHAL_TIM_Heartbeat_Init+0xa6>

	STRHAL_TIM_BasicTimer_t *tim = &_basicTims[id];
 80062ce:	79fa      	ldrb	r2, [r7, #7]
 80062d0:	4613      	mov	r3, r2
 80062d2:	005b      	lsls	r3, r3, #1
 80062d4:	4413      	add	r3, r2
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	4a21      	ldr	r2, [pc, #132]	; (8006360 <STRHAL_TIM_Heartbeat_Init+0xb0>)
 80062da:	4413      	add	r3, r2
 80062dc:	627b      	str	r3, [r7, #36]	; 0x24
	if (tim->utype != STRHAL_TIM_USAGE_000)
 80062de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e0:	799b      	ldrb	r3, [r3, #6]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d002      	beq.n	80062ec <STRHAL_TIM_Heartbeat_Init+0x3c>
		return -1;
 80062e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062ea:	e034      	b.n	8006356 <STRHAL_TIM_Heartbeat_Init+0xa6>

	LL_TIM_InitTypeDef TIM_InitStruct =
 80062ec:	f107 030c 	add.w	r3, r7, #12
 80062f0:	2200      	movs	r2, #0
 80062f2:	601a      	str	r2, [r3, #0]
 80062f4:	605a      	str	r2, [r3, #4]
 80062f6:	609a      	str	r2, [r3, #8]
 80062f8:	60da      	str	r2, [r3, #12]
 80062fa:	611a      	str	r2, [r3, #16]
	{ 0 };
	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80062fc:	2300      	movs	r3, #0
 80062fe:	61bb      	str	r3, [r7, #24]
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERDIRECTION_UP;
 8006300:	2300      	movs	r3, #0
 8006302:	613b      	str	r3, [r7, #16]
	TIM_InitStruct.Autoreload = res - 1;
 8006304:	887b      	ldrh	r3, [r7, #2]
 8006306:	3b01      	subs	r3, #1
 8006308:	617b      	str	r3, [r7, #20]
	TIM_InitStruct.Prescaler = psc > 0 ? psc - 1 : psc;
 800630a:	88bb      	ldrh	r3, [r7, #4]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d003      	beq.n	8006318 <STRHAL_TIM_Heartbeat_Init+0x68>
 8006310:	88bb      	ldrh	r3, [r7, #4]
 8006312:	3b01      	subs	r3, #1
 8006314:	b29b      	uxth	r3, r3
 8006316:	e000      	b.n	800631a <STRHAL_TIM_Heartbeat_Init+0x6a>
 8006318:	88bb      	ldrh	r3, [r7, #4]
 800631a:	81bb      	strh	r3, [r7, #12]
	LL_TIM_Init(tim->timx, &TIM_InitStruct);
 800631c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f107 020c 	add.w	r2, r7, #12
 8006324:	4611      	mov	r1, r2
 8006326:	4618      	mov	r0, r3
 8006328:	f7fc feee 	bl	8003108 <LL_TIM_Init>

	LL_TIM_EnableARRPreload(tim->timx);
 800632c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4618      	mov	r0, r3
 8006332:	f7ff fec2 	bl	80060ba <LL_TIM_EnableARRPreload>

	tim->cfreq = 0;
 8006336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006338:	2200      	movs	r2, #0
 800633a:	809a      	strh	r2, [r3, #4]
	tim->utype = STRHAL_TIM_USAGE_BRN;
 800633c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633e:	2203      	movs	r2, #3
 8006340:	719a      	strb	r2, [r3, #6]

	uint16_t freq = SystemCoreClock / (res * psc);
 8006342:	4b08      	ldr	r3, [pc, #32]	; (8006364 <STRHAL_TIM_Heartbeat_Init+0xb4>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	887a      	ldrh	r2, [r7, #2]
 8006348:	88b9      	ldrh	r1, [r7, #4]
 800634a:	fb01 f202 	mul.w	r2, r1, r2
 800634e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006352:	847b      	strh	r3, [r7, #34]	; 0x22
	return freq;
 8006354:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
}
 8006356:	4618      	mov	r0, r3
 8006358:	3728      	adds	r7, #40	; 0x28
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	20000034 	.word	0x20000034
 8006364:	20000000 	.word	0x20000000

08006368 <STRHAL_TIM_Heartbeat_Subscribe>:

int STRHAL_TIM_Heartbeat_Subscribe(STRHAL_TIM_BasicTimerId_t id, STRHAL_TIM_Burnable_t burn)
{
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
 800636e:	4603      	mov	r3, r0
 8006370:	6039      	str	r1, [r7, #0]
 8006372:	71fb      	strb	r3, [r7, #7]
	if (id > STRHAL_TIM_N_BASICTIM || id < 0)
 8006374:	79fb      	ldrb	r3, [r7, #7]
 8006376:	2b02      	cmp	r3, #2
 8006378:	d902      	bls.n	8006380 <STRHAL_TIM_Heartbeat_Subscribe+0x18>
		return -1;
 800637a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800637e:	e012      	b.n	80063a6 <STRHAL_TIM_Heartbeat_Subscribe+0x3e>

	STRHAL_TIM_BasicTimer_t *tim = &_basicTims[id];
 8006380:	79fa      	ldrb	r2, [r7, #7]
 8006382:	4613      	mov	r3, r2
 8006384:	005b      	lsls	r3, r3, #1
 8006386:	4413      	add	r3, r2
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4a0a      	ldr	r2, [pc, #40]	; (80063b4 <STRHAL_TIM_Heartbeat_Subscribe+0x4c>)
 800638c:	4413      	add	r3, r2
 800638e:	60fb      	str	r3, [r7, #12]
	if (tim->utype != STRHAL_TIM_USAGE_BRN)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	799b      	ldrb	r3, [r3, #6]
 8006394:	2b03      	cmp	r3, #3
 8006396:	d002      	beq.n	800639e <STRHAL_TIM_Heartbeat_Subscribe+0x36>
		return -1;
 8006398:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800639c:	e003      	b.n	80063a6 <STRHAL_TIM_Heartbeat_Subscribe+0x3e>

	tim->burnie = burn;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	683a      	ldr	r2, [r7, #0]
 80063a2:	609a      	str	r2, [r3, #8]
	return 0;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3714      	adds	r7, #20
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	20000034 	.word	0x20000034

080063b8 <STRHAL_TIM_Heartbeat_StartHeartbeat>:

int STRHAL_TIM_Heartbeat_StartHeartbeat(STRHAL_TIM_BasicTimerId_t id)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	4603      	mov	r3, r0
 80063c0:	71fb      	strb	r3, [r7, #7]
	if (id > STRHAL_TIM_N_BASICTIM || id < 0)
 80063c2:	79fb      	ldrb	r3, [r7, #7]
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d902      	bls.n	80063ce <STRHAL_TIM_Heartbeat_StartHeartbeat+0x16>
		return -1;
 80063c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063cc:	e01e      	b.n	800640c <STRHAL_TIM_Heartbeat_StartHeartbeat+0x54>

	STRHAL_TIM_BasicTimer_t *tim = &_basicTims[id];
 80063ce:	79fa      	ldrb	r2, [r7, #7]
 80063d0:	4613      	mov	r3, r2
 80063d2:	005b      	lsls	r3, r3, #1
 80063d4:	4413      	add	r3, r2
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4a0e      	ldr	r2, [pc, #56]	; (8006414 <STRHAL_TIM_Heartbeat_StartHeartbeat+0x5c>)
 80063da:	4413      	add	r3, r2
 80063dc:	60fb      	str	r3, [r7, #12]
	if (tim->utype != STRHAL_TIM_USAGE_BRN)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	799b      	ldrb	r3, [r3, #6]
 80063e2:	2b03      	cmp	r3, #3
 80063e4:	d002      	beq.n	80063ec <STRHAL_TIM_Heartbeat_StartHeartbeat+0x34>
		return -1;
 80063e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063ea:	e00f      	b.n	800640c <STRHAL_TIM_Heartbeat_StartHeartbeat+0x54>

	LL_TIM_ClearFlag_UPDATE(tim->timx);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7ff fe95 	bl	8006120 <LL_TIM_ClearFlag_UPDATE>
	LL_TIM_EnableIT_UPDATE(tim->timx);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7ff feb1 	bl	8006162 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(tim->timx);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4618      	mov	r0, r3
 8006406:	f7ff fe35 	bl	8006074 <LL_TIM_EnableCounter>
	return 0;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	20000034 	.word	0x20000034

08006418 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af00      	add	r7, sp, #0
	if (LL_TIM_IsActiveFlag_UPDATE(TIM6))
 800641e:	480b      	ldr	r0, [pc, #44]	; (800644c <TIM6_DAC_IRQHandler+0x34>)
 8006420:	f7ff fe8c 	bl	800613c <LL_TIM_IsActiveFlag_UPDATE>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00b      	beq.n	8006442 <TIM6_DAC_IRQHandler+0x2a>
	{
		STRHAL_TIM_BasicTimer_t *tim = &_basicTims[STRHAL_TIM_TIM6];
 800642a:	4b09      	ldr	r3, [pc, #36]	; (8006450 <TIM6_DAC_IRQHandler+0x38>)
 800642c:	607b      	str	r3, [r7, #4]

		if (tim->burnie != NULL)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d002      	beq.n	800643c <TIM6_DAC_IRQHandler+0x24>
			tim->burnie();
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	4798      	blx	r3

		LL_TIM_ClearFlag_UPDATE(TIM6);
 800643c:	4803      	ldr	r0, [pc, #12]	; (800644c <TIM6_DAC_IRQHandler+0x34>)
 800643e:	f7ff fe6f 	bl	8006120 <LL_TIM_ClearFlag_UPDATE>
	}
}
 8006442:	bf00      	nop
 8006444:	3708      	adds	r7, #8
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	40001000 	.word	0x40001000
 8006450:	20000034 	.word	0x20000034

08006454 <TIM7_IRQHandler>:

void TIM7_IRQHandler(void)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
	if (LL_TIM_IsActiveFlag_UPDATE(TIM7))
 800645a:	480b      	ldr	r0, [pc, #44]	; (8006488 <TIM7_IRQHandler+0x34>)
 800645c:	f7ff fe6e 	bl	800613c <LL_TIM_IsActiveFlag_UPDATE>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00b      	beq.n	800647e <TIM7_IRQHandler+0x2a>
	{
		STRHAL_TIM_BasicTimer_t *tim = &_basicTims[STRHAL_TIM_TIM7];
 8006466:	4b09      	ldr	r3, [pc, #36]	; (800648c <TIM7_IRQHandler+0x38>)
 8006468:	607b      	str	r3, [r7, #4]

		if (tim->burnie != NULL)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d002      	beq.n	8006478 <TIM7_IRQHandler+0x24>
			tim->burnie();
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	4798      	blx	r3

		LL_TIM_ClearFlag_UPDATE(TIM7);
 8006478:	4803      	ldr	r0, [pc, #12]	; (8006488 <TIM7_IRQHandler+0x34>)
 800647a:	f7ff fe51 	bl	8006120 <LL_TIM_ClearFlag_UPDATE>
	}
}
 800647e:	bf00      	nop
 8006480:	3708      	adds	r7, #8
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	40001400 	.word	0x40001400
 800648c:	20000040 	.word	0x20000040

08006490 <LL_AHB1_GRP1_EnableClock>:
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8006498:	4b08      	ldr	r3, [pc, #32]	; (80064bc <LL_AHB1_GRP1_EnableClock+0x2c>)
 800649a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800649c:	4907      	ldr	r1, [pc, #28]	; (80064bc <LL_AHB1_GRP1_EnableClock+0x2c>)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80064a4:	4b05      	ldr	r3, [pc, #20]	; (80064bc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80064a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4013      	ands	r3, r2
 80064ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80064ae:	68fb      	ldr	r3, [r7, #12]
}
 80064b0:	bf00      	nop
 80064b2:	3714      	adds	r7, #20
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr
 80064bc:	40021000 	.word	0x40021000

080064c0 <LL_AHB2_GRP1_EnableClock>:
{
 80064c0:	b480      	push	{r7}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80064c8:	4b08      	ldr	r3, [pc, #32]	; (80064ec <LL_AHB2_GRP1_EnableClock+0x2c>)
 80064ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064cc:	4907      	ldr	r1, [pc, #28]	; (80064ec <LL_AHB2_GRP1_EnableClock+0x2c>)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80064d4:	4b05      	ldr	r3, [pc, #20]	; (80064ec <LL_AHB2_GRP1_EnableClock+0x2c>)
 80064d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4013      	ands	r3, r2
 80064dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80064de:	68fb      	ldr	r3, [r7, #12]
}
 80064e0:	bf00      	nop
 80064e2:	3714      	adds	r7, #20
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr
 80064ec:	40021000 	.word	0x40021000

080064f0 <LL_APB1_GRP1_EnableClock>:
{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80064f8:	4b08      	ldr	r3, [pc, #32]	; (800651c <LL_APB1_GRP1_EnableClock+0x2c>)
 80064fa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80064fc:	4907      	ldr	r1, [pc, #28]	; (800651c <LL_APB1_GRP1_EnableClock+0x2c>)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4313      	orrs	r3, r2
 8006502:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8006504:	4b05      	ldr	r3, [pc, #20]	; (800651c <LL_APB1_GRP1_EnableClock+0x2c>)
 8006506:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4013      	ands	r3, r2
 800650c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800650e:	68fb      	ldr	r3, [r7, #12]
}
 8006510:	bf00      	nop
 8006512:	3714      	adds	r7, #20
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr
 800651c:	40021000 	.word	0x40021000

08006520 <LL_DMA_GetDataLength>:
{
 8006520:	b480      	push	{r7}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	60fb      	str	r3, [r7, #12]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 800652e:	4a07      	ldr	r2, [pc, #28]	; (800654c <LL_DMA_GetDataLength+0x2c>)
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	4413      	add	r3, r2
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	461a      	mov	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	4413      	add	r3, r2
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	b29b      	uxth	r3, r3
}
 8006540:	4618      	mov	r0, r3
 8006542:	3714      	adds	r7, #20
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr
 800654c:	08007f40 	.word	0x08007f40

08006550 <LL_DMA_IsActiveFlag_TC1>:
  * @rmtoll ISR          TCIF1         LL_DMA_IsActiveFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC1(DMA_TypeDef *DMAx)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1)) ? 1UL : 0UL);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 0302 	and.w	r3, r3, #2
 8006560:	2b02      	cmp	r3, #2
 8006562:	d101      	bne.n	8006568 <LL_DMA_IsActiveFlag_TC1+0x18>
 8006564:	2301      	movs	r3, #1
 8006566:	e000      	b.n	800656a <LL_DMA_IsActiveFlag_TC1+0x1a>
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	370c      	adds	r7, #12
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr

08006576 <LL_DMA_IsActiveFlag_TC2>:
  * @rmtoll ISR          TCIF2         LL_DMA_IsActiveFlag_TC2
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC2(DMA_TypeDef *DMAx)
{
 8006576:	b480      	push	{r7}
 8006578:	b083      	sub	sp, #12
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF2) == (DMA_ISR_TCIF2)) ? 1UL : 0UL);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 0320 	and.w	r3, r3, #32
 8006586:	2b20      	cmp	r3, #32
 8006588:	d101      	bne.n	800658e <LL_DMA_IsActiveFlag_TC2+0x18>
 800658a:	2301      	movs	r3, #1
 800658c:	e000      	b.n	8006590 <LL_DMA_IsActiveFlag_TC2+0x1a>
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <LL_DMA_IsActiveFlag_TE1>:
  * @rmtoll ISR          TEIF1         LL_DMA_IsActiveFlag_TE1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE1(DMA_TypeDef *DMAx)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF1) == (DMA_ISR_TEIF1)) ? 1UL : 0UL);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 0308 	and.w	r3, r3, #8
 80065ac:	2b08      	cmp	r3, #8
 80065ae:	d101      	bne.n	80065b4 <LL_DMA_IsActiveFlag_TE1+0x18>
 80065b0:	2301      	movs	r3, #1
 80065b2:	e000      	b.n	80065b6 <LL_DMA_IsActiveFlag_TE1+0x1a>
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	370c      	adds	r7, #12
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr

080065c2 <LL_DMA_IsActiveFlag_TE2>:
  * @rmtoll ISR          TEIF2         LL_DMA_IsActiveFlag_TE2
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE2(DMA_TypeDef *DMAx)
{
 80065c2:	b480      	push	{r7}
 80065c4:	b083      	sub	sp, #12
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF2) == (DMA_ISR_TEIF2)) ? 1UL : 0UL);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065d2:	2b80      	cmp	r3, #128	; 0x80
 80065d4:	d101      	bne.n	80065da <LL_DMA_IsActiveFlag_TE2+0x18>
 80065d6:	2301      	movs	r3, #1
 80065d8:	e000      	b.n	80065dc <LL_DMA_IsActiveFlag_TE2+0x1a>
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	370c      	adds	r7, #12
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <LL_DMA_ClearFlag_TC1>:
  * @rmtoll IFCR         CTCIF1        LL_DMA_ClearFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2202      	movs	r2, #2
 80065f4:	605a      	str	r2, [r3, #4]
}
 80065f6:	bf00      	nop
 80065f8:	370c      	adds	r7, #12
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr

08006602 <LL_DMA_ClearFlag_TC2>:
  * @rmtoll IFCR         CTCIF2        LL_DMA_ClearFlag_TC2
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC2(DMA_TypeDef *DMAx)
{
 8006602:	b480      	push	{r7}
 8006604:	b083      	sub	sp, #12
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF2);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2220      	movs	r2, #32
 800660e:	605a      	str	r2, [r3, #4]
}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <LL_DMA_ClearFlag_TE1>:
  * @rmtoll IFCR         CTEIF1        LL_DMA_ClearFlag_TE1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE1(DMA_TypeDef *DMAx)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF1);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2208      	movs	r2, #8
 8006628:	605a      	str	r2, [r3, #4]
}
 800662a:	bf00      	nop
 800662c:	370c      	adds	r7, #12
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr

08006636 <LL_DMA_ClearFlag_TE2>:
  * @rmtoll IFCR         CTEIF2        LL_DMA_ClearFlag_TE2
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE2(DMA_TypeDef *DMAx)
{
 8006636:	b480      	push	{r7}
 8006638:	b083      	sub	sp, #12
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF2);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2280      	movs	r2, #128	; 0x80
 8006642:	605a      	str	r2, [r3, #4]
}
 8006644:	bf00      	nop
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <LL_DMA_IsEnabledIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8006650:	b480      	push	{r7}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	60fb      	str	r3, [r7, #12]
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 800665e:	4a0a      	ldr	r2, [pc, #40]	; (8006688 <LL_DMA_IsEnabledIT_TC+0x38>)
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	4413      	add	r3, r2
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	461a      	mov	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	4413      	add	r3, r2
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 0302 	and.w	r3, r3, #2
                    DMA_CCR_TCIE) == (DMA_CCR_TCIE)) ? 1UL : 0UL);
 8006672:	2b02      	cmp	r3, #2
 8006674:	d101      	bne.n	800667a <LL_DMA_IsEnabledIT_TC+0x2a>
 8006676:	2301      	movs	r3, #1
 8006678:	e000      	b.n	800667c <LL_DMA_IsEnabledIT_TC+0x2c>
 800667a:	2300      	movs	r3, #0
}
 800667c:	4618      	mov	r0, r3
 800667e:	3714      	adds	r7, #20
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr
 8006688:	08007f40 	.word	0x08007f40

0800668c <LL_DMA_IsEnabledIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	60fb      	str	r3, [r7, #12]
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 800669a:	4a0a      	ldr	r2, [pc, #40]	; (80066c4 <LL_DMA_IsEnabledIT_TE+0x38>)
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	4413      	add	r3, r2
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	461a      	mov	r2, r3
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	4413      	add	r3, r2
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0308 	and.w	r3, r3, #8
                    DMA_CCR_TEIE) == (DMA_CCR_TEIE)) ? 1UL : 0UL);
 80066ae:	2b08      	cmp	r3, #8
 80066b0:	d101      	bne.n	80066b6 <LL_DMA_IsEnabledIT_TE+0x2a>
 80066b2:	2301      	movs	r3, #1
 80066b4:	e000      	b.n	80066b8 <LL_DMA_IsEnabledIT_TE+0x2c>
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3714      	adds	r7, #20
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr
 80066c4:	08007f40 	.word	0x08007f40

080066c8 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	69db      	ldr	r3, [r3, #28]
 80066d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d8:	2b40      	cmp	r3, #64	; 0x40
 80066da:	d101      	bne.n	80066e0 <LL_USART_IsActiveFlag_TC+0x18>
 80066dc:	2301      	movs	r3, #1
 80066de:	e000      	b.n	80066e2 <LL_USART_IsActiveFlag_TC+0x1a>
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	370c      	adds	r7, #12
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr

080066ee <LL_USART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_USART_IsActiveFlag_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(USART_TypeDef *USARTx)
{
 80066ee:	b480      	push	{r7}
 80066f0:	b083      	sub	sp, #12
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	69db      	ldr	r3, [r3, #28]
 80066fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066fe:	2b80      	cmp	r3, #128	; 0x80
 8006700:	d101      	bne.n	8006706 <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 8006702:	2301      	movs	r3, #1
 8006704:	e000      	b.n	8006708 <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <STRHAL_UART_Init>:
//{ .uart = USART3, .dma_rx_channel = LL_DMA_CHANNEL_1, .dma_tx_channel = LL_DMA_CHANNEL_2, .dma_rx_request = LL_DMAMUX_REQ_USART3_RX, .dma_tx_request = LL_DMAMUX_REQ_USART3_TX, .it_rx_handler = DMA1_Channel3_IRQn, .it_tx_handler = DMA1_Channel4_IRQn, .baud_rate = 115200, .swap = 0 },
[STRHAL_UART4] =
{ .uart = UART4, .dma_rx_channel = LL_DMA_CHANNEL_1, .dma_tx_channel = LL_DMA_CHANNEL_2, .dma_rx_request = LL_DMAMUX_REQ_UART4_RX, .dma_tx_request = LL_DMAMUX_REQ_UART4_TX, .it_rx_handler = DMA1_Channel3_IRQn, .it_tx_handler = DMA1_Channel4_IRQn, .baud_rate = 115200, .swap = 0 } };

void STRHAL_UART_Init()
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b086      	sub	sp, #24
 8006718:	af00      	add	r7, sp, #0
	//LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART3);
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 800671a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800671e:	f7ff fee7 	bl	80064f0 <LL_APB1_GRP1_EnableClock>
	//LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8006722:	2004      	movs	r0, #4
 8006724:	f7ff fecc 	bl	80064c0 <LL_AHB2_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMAMUX1);
 8006728:	2004      	movs	r0, #4
 800672a:	f7ff feb1 	bl	8006490 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 800672e:	2001      	movs	r0, #1
 8006730:	f7ff feae 	bl	8006490 <LL_AHB1_GRP1_EnableClock>

	LL_GPIO_InitTypeDef GPIO_InitStruct =
 8006734:	463b      	mov	r3, r7
 8006736:	2200      	movs	r2, #0
 8006738:	601a      	str	r2, [r3, #0]
 800673a:	605a      	str	r2, [r3, #4]
 800673c:	609a      	str	r2, [r3, #8]
 800673e:	60da      	str	r2, [r3, #12]
 8006740:	611a      	str	r2, [r3, #16]
 8006742:	615a      	str	r2, [r3, #20]
	{ 0 };
	GPIO_InitStruct.Pin = LL_GPIO_PIN_10 | LL_GPIO_PIN_11;
 8006744:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006748:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800674a:	2302      	movs	r3, #2
 800674c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800674e:	2302      	movs	r3, #2
 8006750:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006752:	2300      	movs	r3, #0
 8006754:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8006756:	2301      	movs	r3, #1
 8006758:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800675a:	2305      	movs	r3, #5
 800675c:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800675e:	463b      	mov	r3, r7
 8006760:	4619      	mov	r1, r3
 8006762:	4803      	ldr	r0, [pc, #12]	; (8006770 <STRHAL_UART_Init+0x5c>)
 8006764:	f7fc fb8f 	bl	8002e86 <LL_GPIO_Init>

//	GPIO_InitStruct.Pin = LL_GPIO_PIN_3 | LL_GPIO_PIN_4;
//	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}
 8006768:	bf00      	nop
 800676a:	3718      	adds	r7, #24
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}
 8006770:	48000800 	.word	0x48000800

08006774 <STRHAL_UART_Debug_Write_Blocking>:
{
	return STRHAL_UART_Write_DMA(STRHAL_UART_DEBUG, data, n);
}

int32_t STRHAL_UART_Debug_Write_Blocking(const char *data, uint32_t n, uint16_t timeout)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	4613      	mov	r3, r2
 8006780:	80fb      	strh	r3, [r7, #6]
	return STRHAL_UART_Write_Blocking(STRHAL_UART_DEBUG, data, n, timeout);
 8006782:	88fb      	ldrh	r3, [r7, #6]
 8006784:	68ba      	ldr	r2, [r7, #8]
 8006786:	68f9      	ldr	r1, [r7, #12]
 8006788:	2002      	movs	r0, #2
 800678a:	f000 f805 	bl	8006798 <STRHAL_UART_Write_Blocking>
 800678e:	4603      	mov	r3, r0
}
 8006790:	4618      	mov	r0, r3
 8006792:	3710      	adds	r7, #16
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <STRHAL_UART_Write_Blocking>:

	return n;
}

int32_t STRHAL_UART_Write_Blocking(STRHAL_UART_Id_t uart_id, const char *data, uint32_t n, uint16_t timeout)
{
 8006798:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800679c:	b08a      	sub	sp, #40	; 0x28
 800679e:	af00      	add	r7, sp, #0
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	607a      	str	r2, [r7, #4]
 80067a4:	461a      	mov	r2, r3
 80067a6:	4603      	mov	r3, r0
 80067a8:	73fb      	strb	r3, [r7, #15]
 80067aa:	4613      	mov	r3, r2
 80067ac:	81bb      	strh	r3, [r7, #12]
	if (uart_id < 0 || uart_id >= STRHAL_N_UART)
 80067ae:	7bfb      	ldrb	r3, [r7, #15]
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d902      	bls.n	80067ba <STRHAL_UART_Write_Blocking+0x22>
		return -1;
 80067b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067b8:	e0a1      	b.n	80068fe <STRHAL_UART_Write_Blocking+0x166>

	STRHAL_UART_Handle_t *_uart = &_uarts[uart_id];
 80067ba:	7bfb      	ldrb	r3, [r7, #15]
 80067bc:	f44f 720e 	mov.w	r2, #568	; 0x238
 80067c0:	fb02 f303 	mul.w	r3, r2, r3
 80067c4:	4a50      	ldr	r2, [pc, #320]	; (8006908 <STRHAL_UART_Write_Blocking+0x170>)
 80067c6:	4413      	add	r3, r2
 80067c8:	61fb      	str	r3, [r7, #28]

	if (_uart->state & (STRHAL_UART_STATE_TX | STRHAL_UART_STATE_TE) || n > STRHAL_UART_BUF_SIZE)
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 80067d0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d103      	bne.n	80067e0 <STRHAL_UART_Write_Blocking+0x48>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067de:	d901      	bls.n	80067e4 <STRHAL_UART_Write_Blocking+0x4c>
		return 0;
 80067e0:	2300      	movs	r3, #0
 80067e2:	e08c      	b.n	80068fe <STRHAL_UART_Write_Blocking+0x166>

	uint32_t i;
	for (i = 0; i < n; ++i)
 80067e4:	2300      	movs	r3, #0
 80067e6:	627b      	str	r3, [r7, #36]	; 0x24
 80067e8:	e00c      	b.n	8006804 <STRHAL_UART_Write_Blocking+0x6c>
		_uart->tx_buf.data[i] = data[i];
 80067ea:	68ba      	ldr	r2, [r7, #8]
 80067ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ee:	4413      	add	r3, r2
 80067f0:	7819      	ldrb	r1, [r3, #0]
 80067f2:	69fa      	ldr	r2, [r7, #28]
 80067f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f6:	4413      	add	r3, r2
 80067f8:	3304      	adds	r3, #4
 80067fa:	460a      	mov	r2, r1
 80067fc:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n; ++i)
 80067fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006800:	3301      	adds	r3, #1
 8006802:	627b      	str	r3, [r7, #36]	; 0x24
 8006804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	429a      	cmp	r2, r3
 800680a:	d3ee      	bcc.n	80067ea <STRHAL_UART_Write_Blocking+0x52>

	_uart->tx_buf.n = n;
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

	_uart->state &= ~STRHAL_UART_STATE_TC;
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 800681a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800681e:	b2da      	uxtb	r2, r3
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	_uart->state |= STRHAL_UART_STATE_TX;
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 800682c:	f043 0320 	orr.w	r3, r3, #32
 8006830:	b2da      	uxtb	r2, r3
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214

	uint8_t *tx_data = (uint8_t*) _uart->tx_buf.data;
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	3304      	adds	r3, #4
 800683c:	623b      	str	r3, [r7, #32]

	uint64_t tx_starttime = STRHAL_Systick_GetTick();
 800683e:	f7ff fb27 	bl	8005e90 <STRHAL_Systick_GetTick>
 8006842:	e9c7 0104 	strd	r0, r1, [r7, #16]

	while (_uart->tx_buf.n > 0)
 8006846:	e028      	b.n	800689a <STRHAL_UART_Write_Blocking+0x102>
	{
		// wait until byte transmitted, or timeout
		while (!LL_USART_IsActiveFlag_TXE_TXFNF(_uart->uart))
		{
			if (STRHAL_Systick_GetTick() - tx_starttime > timeout)
 8006848:	f7ff fb22 	bl	8005e90 <STRHAL_Systick_GetTick>
 800684c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006850:	ebb0 0802 	subs.w	r8, r0, r2
 8006854:	eb61 0903 	sbc.w	r9, r1, r3
 8006858:	89ba      	ldrh	r2, [r7, #12]
 800685a:	f04f 0300 	mov.w	r3, #0
 800685e:	454b      	cmp	r3, r9
 8006860:	bf08      	it	eq
 8006862:	4542      	cmpeq	r2, r8
 8006864:	d202      	bcs.n	800686c <STRHAL_UART_Write_Blocking+0xd4>
				return -1;
 8006866:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800686a:	e048      	b.n	80068fe <STRHAL_UART_Write_Blocking+0x166>
		while (!LL_USART_IsActiveFlag_TXE_TXFNF(_uart->uart))
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4618      	mov	r0, r3
 8006872:	f7ff ff3c 	bl	80066ee <LL_USART_IsActiveFlag_TXE_TXFNF>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d0e5      	beq.n	8006848 <STRHAL_UART_Write_Blocking+0xb0>
		}
		_uart->uart->TDR = (uint8_t) (*tx_data & 0xFFU);
 800687c:	6a3b      	ldr	r3, [r7, #32]
 800687e:	781a      	ldrb	r2, [r3, #0]
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	629a      	str	r2, [r3, #40]	; 0x28
		tx_data++;
 8006886:	6a3b      	ldr	r3, [r7, #32]
 8006888:	3301      	adds	r3, #1
 800688a:	623b      	str	r3, [r7, #32]
		_uart->tx_buf.n--;
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8006892:	1e5a      	subs	r2, r3, #1
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	while (_uart->tx_buf.n > 0)
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d1e3      	bne.n	800686c <STRHAL_UART_Write_Blocking+0xd4>
	}

	// wait until transmission complete, or timeout
	while (!LL_USART_IsActiveFlag_TC(_uart->uart))
 80068a4:	e010      	b.n	80068c8 <STRHAL_UART_Write_Blocking+0x130>
	{
		if (STRHAL_Systick_GetTick() - tx_starttime > timeout)
 80068a6:	f7ff faf3 	bl	8005e90 <STRHAL_Systick_GetTick>
 80068aa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80068ae:	1a84      	subs	r4, r0, r2
 80068b0:	eb61 0503 	sbc.w	r5, r1, r3
 80068b4:	89ba      	ldrh	r2, [r7, #12]
 80068b6:	f04f 0300 	mov.w	r3, #0
 80068ba:	42ab      	cmp	r3, r5
 80068bc:	bf08      	it	eq
 80068be:	42a2      	cmpeq	r2, r4
 80068c0:	d202      	bcs.n	80068c8 <STRHAL_UART_Write_Blocking+0x130>
			return -1;
 80068c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068c6:	e01a      	b.n	80068fe <STRHAL_UART_Write_Blocking+0x166>
	while (!LL_USART_IsActiveFlag_TC(_uart->uart))
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7ff fefb 	bl	80066c8 <LL_USART_IsActiveFlag_TC>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d0e6      	beq.n	80068a6 <STRHAL_UART_Write_Blocking+0x10e>
	}

	_uart->state &= ~STRHAL_UART_STATE_TX;
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 80068de:	f023 0320 	bic.w	r3, r3, #32
 80068e2:	b2da      	uxtb	r2, r3
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	_uart->state |= STRHAL_UART_STATE_TC;
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 80068f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068f4:	b2da      	uxtb	r2, r3
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214

	return n;
 80068fc:	687b      	ldr	r3, [r7, #4]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3728      	adds	r7, #40	; 0x28
 8006902:	46bd      	mov	sp, r7
 8006904:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006908:	20000074 	.word	0x20000074

0800690c <DMA1_Channel1_IRQHandler>:
{
	return _uarts[uart_id].state;
}

void DMA1_Channel1_IRQHandler(void)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
	STRHAL_UART_Handle_t *_uart = &_uarts[STRHAL_UART4];
 8006912:	4b3f      	ldr	r3, [pc, #252]	; (8006a10 <DMA1_Channel1_IRQHandler+0x104>)
 8006914:	607b      	str	r3, [r7, #4]
	if (LL_DMA_IsEnabledIT_TC(DMA1, LL_DMA_CHANNEL_1) && LL_DMA_IsActiveFlag_TC1(DMA1))
 8006916:	2100      	movs	r1, #0
 8006918:	483e      	ldr	r0, [pc, #248]	; (8006a14 <DMA1_Channel1_IRQHandler+0x108>)
 800691a:	f7ff fe99 	bl	8006650 <LL_DMA_IsEnabledIT_TC>
 800691e:	4603      	mov	r3, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d037      	beq.n	8006994 <DMA1_Channel1_IRQHandler+0x88>
 8006924:	483b      	ldr	r0, [pc, #236]	; (8006a14 <DMA1_Channel1_IRQHandler+0x108>)
 8006926:	f7ff fe13 	bl	8006550 <LL_DMA_IsActiveFlag_TC1>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d031      	beq.n	8006994 <DMA1_Channel1_IRQHandler+0x88>
	{
		LL_DMA_ClearFlag_TC1(DMA1);
 8006930:	4838      	ldr	r0, [pc, #224]	; (8006a14 <DMA1_Channel1_IRQHandler+0x108>)
 8006932:	f7ff fe59 	bl	80065e8 <LL_DMA_ClearFlag_TC1>
		_uart->rx_buf.n += _uart->rx_buf.n_dma;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006942:	441a      	add	r2, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		_uart->rx_buf.n_dma = STRHAL_UART_BUF_SIZE;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006950:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (_uart->rx_buf.n > STRHAL_UART_BUF_SIZE)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800695a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800695e:	d953      	bls.n	8006a08 <DMA1_Channel1_IRQHandler+0xfc>
		{
			_uart->rx_buf.h += _uart->rx_buf.n % STRHAL_UART_BUF_SIZE;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800696c:	b2db      	uxtb	r3, r3
 800696e:	441a      	add	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			_uart->rx_buf.n = STRHAL_UART_BUF_SIZE;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f44f 7280 	mov.w	r2, #256	; 0x100
 800697c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

			_uart->state |= STRHAL_UART_STATE_RO;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 8006986:	f043 0308 	orr.w	r3, r3, #8
 800698a:	b2da      	uxtb	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
		if (_uart->rx_buf.n > STRHAL_UART_BUF_SIZE)
 8006992:	e039      	b.n	8006a08 <DMA1_Channel1_IRQHandler+0xfc>
		}
	}

	else if (LL_DMA_IsEnabledIT_TE(DMA1, LL_DMA_CHANNEL_1) && LL_DMA_IsActiveFlag_TE1(DMA1))
 8006994:	2100      	movs	r1, #0
 8006996:	481f      	ldr	r0, [pc, #124]	; (8006a14 <DMA1_Channel1_IRQHandler+0x108>)
 8006998:	f7ff fe78 	bl	800668c <LL_DMA_IsEnabledIT_TE>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d032      	beq.n	8006a08 <DMA1_Channel1_IRQHandler+0xfc>
 80069a2:	481c      	ldr	r0, [pc, #112]	; (8006a14 <DMA1_Channel1_IRQHandler+0x108>)
 80069a4:	f7ff fdfa 	bl	800659c <LL_DMA_IsActiveFlag_TE1>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d02c      	beq.n	8006a08 <DMA1_Channel1_IRQHandler+0xfc>
	{
		LL_DMA_ClearFlag_TE1(DMA1);
 80069ae:	4819      	ldr	r0, [pc, #100]	; (8006a14 <DMA1_Channel1_IRQHandler+0x108>)
 80069b0:	f7ff fe34 	bl	800661c <LL_DMA_ClearFlag_TE1>
		_uart->rx_buf.n = STRHAL_UART_BUF_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_1);
 80069b4:	2100      	movs	r1, #0
 80069b6:	4817      	ldr	r0, [pc, #92]	; (8006a14 <DMA1_Channel1_IRQHandler+0x108>)
 80069b8:	f7ff fdb2 	bl	8006520 <LL_DMA_GetDataLength>
 80069bc:	4603      	mov	r3, r0
 80069be:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

		_uart->state &= ~STRHAL_UART_STATE_RX;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 80069ce:	f023 0302 	bic.w	r3, r3, #2
 80069d2:	b2da      	uxtb	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
		_uart->state &= ~STRHAL_UART_STATE_RC;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 80069e0:	f023 0304 	bic.w	r3, r3, #4
 80069e4:	b2da      	uxtb	r2, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
		_uart->state |= STRHAL_UART_STATE_RE;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 80069f2:	f043 0310 	orr.w	r3, r3, #16
 80069f6:	b2da      	uxtb	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214

		STRHAL_OofHandler(STRHAL_OOF_UART, "DMA FAIL");
 80069fe:	4906      	ldr	r1, [pc, #24]	; (8006a18 <DMA1_Channel1_IRQHandler+0x10c>)
 8006a00:	2008      	movs	r0, #8
 8006a02:	f7fa fad7 	bl	8000fb4 <STRHAL_OofHandler>
	}
}
 8006a06:	e7ff      	b.n	8006a08 <DMA1_Channel1_IRQHandler+0xfc>
 8006a08:	bf00      	nop
 8006a0a:	3708      	adds	r7, #8
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	200004e4 	.word	0x200004e4
 8006a14:	40020000 	.word	0x40020000
 8006a18:	08006e20 	.word	0x08006e20

08006a1c <DMA1_Channel2_IRQHandler>:

void DMA1_Channel2_IRQHandler(void)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
	STRHAL_UART_Handle_t *_uart = &_uarts[STRHAL_UART4];
 8006a22:	4b2a      	ldr	r3, [pc, #168]	; (8006acc <DMA1_Channel2_IRQHandler+0xb0>)
 8006a24:	607b      	str	r3, [r7, #4]
	if (LL_DMA_IsEnabledIT_TC(DMA1, LL_DMA_CHANNEL_2) && LL_DMA_IsActiveFlag_TC2(DMA1))
 8006a26:	2101      	movs	r1, #1
 8006a28:	4829      	ldr	r0, [pc, #164]	; (8006ad0 <DMA1_Channel2_IRQHandler+0xb4>)
 8006a2a:	f7ff fe11 	bl	8006650 <LL_DMA_IsEnabledIT_TC>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d01b      	beq.n	8006a6c <DMA1_Channel2_IRQHandler+0x50>
 8006a34:	4826      	ldr	r0, [pc, #152]	; (8006ad0 <DMA1_Channel2_IRQHandler+0xb4>)
 8006a36:	f7ff fd9e 	bl	8006576 <LL_DMA_IsActiveFlag_TC2>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d015      	beq.n	8006a6c <DMA1_Channel2_IRQHandler+0x50>
	{
		LL_DMA_ClearFlag_TC2(DMA1);
 8006a40:	4823      	ldr	r0, [pc, #140]	; (8006ad0 <DMA1_Channel2_IRQHandler+0xb4>)
 8006a42:	f7ff fdde 	bl	8006602 <LL_DMA_ClearFlag_TC2>
		_uart->state &= ~STRHAL_UART_STATE_TX;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 8006a4c:	f023 0320 	bic.w	r3, r3, #32
 8006a50:	b2da      	uxtb	r2, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
		_uart->state |= STRHAL_UART_STATE_TC;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 8006a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a62:	b2da      	uxtb	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
		LL_DMA_ClearFlag_TE2(DMA1);
		_uart->state &= ~STRHAL_UART_STATE_TX;
		_uart->state &= ~STRHAL_UART_STATE_TC;
		_uart->state |= STRHAL_UART_STATE_TE;
	}
}
 8006a6a:	e02a      	b.n	8006ac2 <DMA1_Channel2_IRQHandler+0xa6>
	else if (LL_DMA_IsEnabledIT_TE(DMA1, LL_DMA_CHANNEL_2) && LL_DMA_IsActiveFlag_TE2(DMA1))
 8006a6c:	2101      	movs	r1, #1
 8006a6e:	4818      	ldr	r0, [pc, #96]	; (8006ad0 <DMA1_Channel2_IRQHandler+0xb4>)
 8006a70:	f7ff fe0c 	bl	800668c <LL_DMA_IsEnabledIT_TE>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d023      	beq.n	8006ac2 <DMA1_Channel2_IRQHandler+0xa6>
 8006a7a:	4815      	ldr	r0, [pc, #84]	; (8006ad0 <DMA1_Channel2_IRQHandler+0xb4>)
 8006a7c:	f7ff fda1 	bl	80065c2 <LL_DMA_IsActiveFlag_TE2>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d01d      	beq.n	8006ac2 <DMA1_Channel2_IRQHandler+0xa6>
		LL_DMA_ClearFlag_TE2(DMA1);
 8006a86:	4812      	ldr	r0, [pc, #72]	; (8006ad0 <DMA1_Channel2_IRQHandler+0xb4>)
 8006a88:	f7ff fdd5 	bl	8006636 <LL_DMA_ClearFlag_TE2>
		_uart->state &= ~STRHAL_UART_STATE_TX;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 8006a92:	f023 0320 	bic.w	r3, r3, #32
 8006a96:	b2da      	uxtb	r2, r3
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
		_uart->state &= ~STRHAL_UART_STATE_TC;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 8006aa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006aa8:	b2da      	uxtb	r2, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
		_uart->state |= STRHAL_UART_STATE_TE;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 8006ab6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006aba:	b2da      	uxtb	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
}
 8006ac2:	bf00      	nop
 8006ac4:	3708      	adds	r7, #8
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	200004e4 	.word	0x200004e4
 8006ad0:	40020000 	.word	0x40020000

08006ad4 <_ZdlPvj>:
 8006ad4:	f000 b812 	b.w	8006afc <_ZdlPv>

08006ad8 <__cxa_guard_acquire>:
 8006ad8:	6803      	ldr	r3, [r0, #0]
 8006ada:	07db      	lsls	r3, r3, #31
 8006adc:	d406      	bmi.n	8006aec <__cxa_guard_acquire+0x14>
 8006ade:	7843      	ldrb	r3, [r0, #1]
 8006ae0:	b103      	cbz	r3, 8006ae4 <__cxa_guard_acquire+0xc>
 8006ae2:	deff      	udf	#255	; 0xff
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	7043      	strb	r3, [r0, #1]
 8006ae8:	4618      	mov	r0, r3
 8006aea:	4770      	bx	lr
 8006aec:	2000      	movs	r0, #0
 8006aee:	4770      	bx	lr

08006af0 <__cxa_guard_release>:
 8006af0:	2301      	movs	r3, #1
 8006af2:	6003      	str	r3, [r0, #0]
 8006af4:	4770      	bx	lr

08006af6 <__cxa_pure_virtual>:
 8006af6:	b508      	push	{r3, lr}
 8006af8:	f000 f80e 	bl	8006b18 <_ZSt9terminatev>

08006afc <_ZdlPv>:
 8006afc:	f000 b842 	b.w	8006b84 <free>

08006b00 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8006b00:	b508      	push	{r3, lr}
 8006b02:	4780      	blx	r0
 8006b04:	f000 f80d 	bl	8006b22 <abort>

08006b08 <_ZSt13get_terminatev>:
 8006b08:	4b02      	ldr	r3, [pc, #8]	; (8006b14 <_ZSt13get_terminatev+0xc>)
 8006b0a:	6818      	ldr	r0, [r3, #0]
 8006b0c:	f3bf 8f5b 	dmb	ish
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop
 8006b14:	2000071c 	.word	0x2000071c

08006b18 <_ZSt9terminatev>:
 8006b18:	b508      	push	{r3, lr}
 8006b1a:	f7ff fff5 	bl	8006b08 <_ZSt13get_terminatev>
 8006b1e:	f7ff ffef 	bl	8006b00 <_ZN10__cxxabiv111__terminateEPFvvE>

08006b22 <abort>:
 8006b22:	b508      	push	{r3, lr}
 8006b24:	2006      	movs	r0, #6
 8006b26:	f000 f8c3 	bl	8006cb0 <raise>
 8006b2a:	2001      	movs	r0, #1
 8006b2c:	f7fa faa4 	bl	8001078 <_exit>

08006b30 <__errno>:
 8006b30:	4b01      	ldr	r3, [pc, #4]	; (8006b38 <__errno+0x8>)
 8006b32:	6818      	ldr	r0, [r3, #0]
 8006b34:	4770      	bx	lr
 8006b36:	bf00      	nop
 8006b38:	20000720 	.word	0x20000720

08006b3c <__libc_init_array>:
 8006b3c:	b570      	push	{r4, r5, r6, lr}
 8006b3e:	4d0d      	ldr	r5, [pc, #52]	; (8006b74 <__libc_init_array+0x38>)
 8006b40:	4c0d      	ldr	r4, [pc, #52]	; (8006b78 <__libc_init_array+0x3c>)
 8006b42:	1b64      	subs	r4, r4, r5
 8006b44:	10a4      	asrs	r4, r4, #2
 8006b46:	2600      	movs	r6, #0
 8006b48:	42a6      	cmp	r6, r4
 8006b4a:	d109      	bne.n	8006b60 <__libc_init_array+0x24>
 8006b4c:	4d0b      	ldr	r5, [pc, #44]	; (8006b7c <__libc_init_array+0x40>)
 8006b4e:	4c0c      	ldr	r4, [pc, #48]	; (8006b80 <__libc_init_array+0x44>)
 8006b50:	f000 f8d8 	bl	8006d04 <_init>
 8006b54:	1b64      	subs	r4, r4, r5
 8006b56:	10a4      	asrs	r4, r4, #2
 8006b58:	2600      	movs	r6, #0
 8006b5a:	42a6      	cmp	r6, r4
 8006b5c:	d105      	bne.n	8006b6a <__libc_init_array+0x2e>
 8006b5e:	bd70      	pop	{r4, r5, r6, pc}
 8006b60:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b64:	4798      	blx	r3
 8006b66:	3601      	adds	r6, #1
 8006b68:	e7ee      	b.n	8006b48 <__libc_init_array+0xc>
 8006b6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b6e:	4798      	blx	r3
 8006b70:	3601      	adds	r6, #1
 8006b72:	e7f2      	b.n	8006b5a <__libc_init_array+0x1e>
 8006b74:	08007f48 	.word	0x08007f48
 8006b78:	08007f48 	.word	0x08007f48
 8006b7c:	08007f48 	.word	0x08007f48
 8006b80:	08007f4c 	.word	0x08007f4c

08006b84 <free>:
 8006b84:	4b02      	ldr	r3, [pc, #8]	; (8006b90 <free+0xc>)
 8006b86:	4601      	mov	r1, r0
 8006b88:	6818      	ldr	r0, [r3, #0]
 8006b8a:	f000 b819 	b.w	8006bc0 <_free_r>
 8006b8e:	bf00      	nop
 8006b90:	20000720 	.word	0x20000720

08006b94 <memcpy>:
 8006b94:	440a      	add	r2, r1
 8006b96:	4291      	cmp	r1, r2
 8006b98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006b9c:	d100      	bne.n	8006ba0 <memcpy+0xc>
 8006b9e:	4770      	bx	lr
 8006ba0:	b510      	push	{r4, lr}
 8006ba2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ba6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006baa:	4291      	cmp	r1, r2
 8006bac:	d1f9      	bne.n	8006ba2 <memcpy+0xe>
 8006bae:	bd10      	pop	{r4, pc}

08006bb0 <memset>:
 8006bb0:	4402      	add	r2, r0
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d100      	bne.n	8006bba <memset+0xa>
 8006bb8:	4770      	bx	lr
 8006bba:	f803 1b01 	strb.w	r1, [r3], #1
 8006bbe:	e7f9      	b.n	8006bb4 <memset+0x4>

08006bc0 <_free_r>:
 8006bc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006bc2:	2900      	cmp	r1, #0
 8006bc4:	d048      	beq.n	8006c58 <_free_r+0x98>
 8006bc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bca:	9001      	str	r0, [sp, #4]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f1a1 0404 	sub.w	r4, r1, #4
 8006bd2:	bfb8      	it	lt
 8006bd4:	18e4      	addlt	r4, r4, r3
 8006bd6:	f000 f887 	bl	8006ce8 <__malloc_lock>
 8006bda:	4a20      	ldr	r2, [pc, #128]	; (8006c5c <_free_r+0x9c>)
 8006bdc:	9801      	ldr	r0, [sp, #4]
 8006bde:	6813      	ldr	r3, [r2, #0]
 8006be0:	4615      	mov	r5, r2
 8006be2:	b933      	cbnz	r3, 8006bf2 <_free_r+0x32>
 8006be4:	6063      	str	r3, [r4, #4]
 8006be6:	6014      	str	r4, [r2, #0]
 8006be8:	b003      	add	sp, #12
 8006bea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bee:	f000 b881 	b.w	8006cf4 <__malloc_unlock>
 8006bf2:	42a3      	cmp	r3, r4
 8006bf4:	d90b      	bls.n	8006c0e <_free_r+0x4e>
 8006bf6:	6821      	ldr	r1, [r4, #0]
 8006bf8:	1862      	adds	r2, r4, r1
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	bf04      	itt	eq
 8006bfe:	681a      	ldreq	r2, [r3, #0]
 8006c00:	685b      	ldreq	r3, [r3, #4]
 8006c02:	6063      	str	r3, [r4, #4]
 8006c04:	bf04      	itt	eq
 8006c06:	1852      	addeq	r2, r2, r1
 8006c08:	6022      	streq	r2, [r4, #0]
 8006c0a:	602c      	str	r4, [r5, #0]
 8006c0c:	e7ec      	b.n	8006be8 <_free_r+0x28>
 8006c0e:	461a      	mov	r2, r3
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	b10b      	cbz	r3, 8006c18 <_free_r+0x58>
 8006c14:	42a3      	cmp	r3, r4
 8006c16:	d9fa      	bls.n	8006c0e <_free_r+0x4e>
 8006c18:	6811      	ldr	r1, [r2, #0]
 8006c1a:	1855      	adds	r5, r2, r1
 8006c1c:	42a5      	cmp	r5, r4
 8006c1e:	d10b      	bne.n	8006c38 <_free_r+0x78>
 8006c20:	6824      	ldr	r4, [r4, #0]
 8006c22:	4421      	add	r1, r4
 8006c24:	1854      	adds	r4, r2, r1
 8006c26:	42a3      	cmp	r3, r4
 8006c28:	6011      	str	r1, [r2, #0]
 8006c2a:	d1dd      	bne.n	8006be8 <_free_r+0x28>
 8006c2c:	681c      	ldr	r4, [r3, #0]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	6053      	str	r3, [r2, #4]
 8006c32:	4421      	add	r1, r4
 8006c34:	6011      	str	r1, [r2, #0]
 8006c36:	e7d7      	b.n	8006be8 <_free_r+0x28>
 8006c38:	d902      	bls.n	8006c40 <_free_r+0x80>
 8006c3a:	230c      	movs	r3, #12
 8006c3c:	6003      	str	r3, [r0, #0]
 8006c3e:	e7d3      	b.n	8006be8 <_free_r+0x28>
 8006c40:	6825      	ldr	r5, [r4, #0]
 8006c42:	1961      	adds	r1, r4, r5
 8006c44:	428b      	cmp	r3, r1
 8006c46:	bf04      	itt	eq
 8006c48:	6819      	ldreq	r1, [r3, #0]
 8006c4a:	685b      	ldreq	r3, [r3, #4]
 8006c4c:	6063      	str	r3, [r4, #4]
 8006c4e:	bf04      	itt	eq
 8006c50:	1949      	addeq	r1, r1, r5
 8006c52:	6021      	streq	r1, [r4, #0]
 8006c54:	6054      	str	r4, [r2, #4]
 8006c56:	e7c7      	b.n	8006be8 <_free_r+0x28>
 8006c58:	b003      	add	sp, #12
 8006c5a:	bd30      	pop	{r4, r5, pc}
 8006c5c:	20000b00 	.word	0x20000b00

08006c60 <_raise_r>:
 8006c60:	291f      	cmp	r1, #31
 8006c62:	b538      	push	{r3, r4, r5, lr}
 8006c64:	4604      	mov	r4, r0
 8006c66:	460d      	mov	r5, r1
 8006c68:	d904      	bls.n	8006c74 <_raise_r+0x14>
 8006c6a:	2316      	movs	r3, #22
 8006c6c:	6003      	str	r3, [r0, #0]
 8006c6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c72:	bd38      	pop	{r3, r4, r5, pc}
 8006c74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006c76:	b112      	cbz	r2, 8006c7e <_raise_r+0x1e>
 8006c78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006c7c:	b94b      	cbnz	r3, 8006c92 <_raise_r+0x32>
 8006c7e:	4620      	mov	r0, r4
 8006c80:	f000 f830 	bl	8006ce4 <_getpid_r>
 8006c84:	462a      	mov	r2, r5
 8006c86:	4601      	mov	r1, r0
 8006c88:	4620      	mov	r0, r4
 8006c8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c8e:	f000 b817 	b.w	8006cc0 <_kill_r>
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d00a      	beq.n	8006cac <_raise_r+0x4c>
 8006c96:	1c59      	adds	r1, r3, #1
 8006c98:	d103      	bne.n	8006ca2 <_raise_r+0x42>
 8006c9a:	2316      	movs	r3, #22
 8006c9c:	6003      	str	r3, [r0, #0]
 8006c9e:	2001      	movs	r0, #1
 8006ca0:	e7e7      	b.n	8006c72 <_raise_r+0x12>
 8006ca2:	2400      	movs	r4, #0
 8006ca4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006ca8:	4628      	mov	r0, r5
 8006caa:	4798      	blx	r3
 8006cac:	2000      	movs	r0, #0
 8006cae:	e7e0      	b.n	8006c72 <_raise_r+0x12>

08006cb0 <raise>:
 8006cb0:	4b02      	ldr	r3, [pc, #8]	; (8006cbc <raise+0xc>)
 8006cb2:	4601      	mov	r1, r0
 8006cb4:	6818      	ldr	r0, [r3, #0]
 8006cb6:	f7ff bfd3 	b.w	8006c60 <_raise_r>
 8006cba:	bf00      	nop
 8006cbc:	20000720 	.word	0x20000720

08006cc0 <_kill_r>:
 8006cc0:	b538      	push	{r3, r4, r5, lr}
 8006cc2:	4d07      	ldr	r5, [pc, #28]	; (8006ce0 <_kill_r+0x20>)
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	4604      	mov	r4, r0
 8006cc8:	4608      	mov	r0, r1
 8006cca:	4611      	mov	r1, r2
 8006ccc:	602b      	str	r3, [r5, #0]
 8006cce:	f7fa f9c3 	bl	8001058 <_kill>
 8006cd2:	1c43      	adds	r3, r0, #1
 8006cd4:	d102      	bne.n	8006cdc <_kill_r+0x1c>
 8006cd6:	682b      	ldr	r3, [r5, #0]
 8006cd8:	b103      	cbz	r3, 8006cdc <_kill_r+0x1c>
 8006cda:	6023      	str	r3, [r4, #0]
 8006cdc:	bd38      	pop	{r3, r4, r5, pc}
 8006cde:	bf00      	nop
 8006ce0:	20000b04 	.word	0x20000b04

08006ce4 <_getpid_r>:
 8006ce4:	f7fa b9b0 	b.w	8001048 <_getpid>

08006ce8 <__malloc_lock>:
 8006ce8:	4801      	ldr	r0, [pc, #4]	; (8006cf0 <__malloc_lock+0x8>)
 8006cea:	f000 b809 	b.w	8006d00 <__retarget_lock_acquire_recursive>
 8006cee:	bf00      	nop
 8006cf0:	20000b0c 	.word	0x20000b0c

08006cf4 <__malloc_unlock>:
 8006cf4:	4801      	ldr	r0, [pc, #4]	; (8006cfc <__malloc_unlock+0x8>)
 8006cf6:	f000 b804 	b.w	8006d02 <__retarget_lock_release_recursive>
 8006cfa:	bf00      	nop
 8006cfc:	20000b0c 	.word	0x20000b0c

08006d00 <__retarget_lock_acquire_recursive>:
 8006d00:	4770      	bx	lr

08006d02 <__retarget_lock_release_recursive>:
 8006d02:	4770      	bx	lr

08006d04 <_init>:
 8006d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d06:	bf00      	nop
 8006d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d0a:	bc08      	pop	{r3}
 8006d0c:	469e      	mov	lr, r3
 8006d0e:	4770      	bx	lr

08006d10 <_fini>:
 8006d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d12:	bf00      	nop
 8006d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d16:	bc08      	pop	{r3}
 8006d18:	469e      	mov	lr, r3
 8006d1a:	4770      	bx	lr
