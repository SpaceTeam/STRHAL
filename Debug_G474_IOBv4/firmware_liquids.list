
firmware_liquids.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a38  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000133c  08009c10  08009c10  00019c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af4c  0800af4c  00020784  2**0
                  CONTENTS
  4 .ARM          00000000  0800af4c  0800af4c  00020784  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800af4c  0800af4c  00020784  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af4c  0800af4c  0001af4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af50  0800af50  0001af50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000784  20000000  0800af54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e4  20000788  0800b6d8  00020788  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000b6c  0800b6d8  00020b6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020784  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002741e  00000000  00000000  000207b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006863  00000000  00000000  00047bd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001910  00000000  00000000  0004e438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016e8  00000000  00000000  0004fd48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b009  00000000  00000000  00051430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019cda  00000000  00000000  0007c439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df8f6  00000000  00000000  00096113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00175a09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b90  00000000  00000000  00175a5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000788 	.word	0x20000788
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009bf8 	.word	0x08009bf8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000078c 	.word	0x2000078c
 8000214:	08009bf8 	.word	0x08009bf8

08000218 <_ZN11AbstractComC1Em>:
#include <AbstractCom.h>

AbstractCom::AbstractCom(uint32_t nodeId) :
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
		nodeId(nodeId)
 8000222:	4a06      	ldr	r2, [pc, #24]	; (800023c <_ZN11AbstractComC1Em+0x24>)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	601a      	str	r2, [r3, #0]
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	683a      	ldr	r2, [r7, #0]
 800022c:	605a      	str	r2, [r3, #4]
{
}
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	4618      	mov	r0, r3
 8000232:	370c      	adds	r7, #12
 8000234:	46bd      	mov	sp, r7
 8000236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023a:	4770      	bx	lr
 800023c:	08009d38 	.word	0x08009d38

08000240 <_ZN3CanC1Em>:
#include <cstdio>

Com_Receptor_t Can::standardReceptor = nullptr;
uint32_t Can::_nodeId = 0; // TODO fix this pfusch

Can::Can(uint32_t nodeId) :
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
 8000248:	6039      	str	r1, [r7, #0]
		AbstractCom(nodeId)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	6839      	ldr	r1, [r7, #0]
 800024e:	4618      	mov	r0, r3
 8000250:	f7ff ffe2 	bl	8000218 <_ZN11AbstractComC1Em>
 8000254:	4a03      	ldr	r2, [pc, #12]	; (8000264 <_ZN3CanC1Em+0x24>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	601a      	str	r2, [r3, #0]
{
}
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	4618      	mov	r0, r3
 800025e:	3708      	adds	r7, #8
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	08009d48 	.word	0x08009d48

08000268 <_ZN3Can8instanceEm>:

Can& Can::instance(uint32_t nodeId)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
	static Can can(nodeId);
 8000270:	4b15      	ldr	r3, [pc, #84]	; (80002c8 <_ZN3Can8instanceEm+0x60>)
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	f3bf 8f5b 	dmb	ish
 8000278:	b2db      	uxtb	r3, r3
 800027a:	f003 0301 	and.w	r3, r3, #1
 800027e:	2b00      	cmp	r3, #0
 8000280:	bf0c      	ite	eq
 8000282:	2301      	moveq	r3, #1
 8000284:	2300      	movne	r3, #0
 8000286:	b2db      	uxtb	r3, r3
 8000288:	2b00      	cmp	r3, #0
 800028a:	d011      	beq.n	80002b0 <_ZN3Can8instanceEm+0x48>
 800028c:	480e      	ldr	r0, [pc, #56]	; (80002c8 <_ZN3Can8instanceEm+0x60>)
 800028e:	f009 fba1 	bl	80099d4 <__cxa_guard_acquire>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	bf14      	ite	ne
 8000298:	2301      	movne	r3, #1
 800029a:	2300      	moveq	r3, #0
 800029c:	b2db      	uxtb	r3, r3
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d006      	beq.n	80002b0 <_ZN3Can8instanceEm+0x48>
 80002a2:	6879      	ldr	r1, [r7, #4]
 80002a4:	4809      	ldr	r0, [pc, #36]	; (80002cc <_ZN3Can8instanceEm+0x64>)
 80002a6:	f7ff ffcb 	bl	8000240 <_ZN3CanC1Em>
 80002aa:	4807      	ldr	r0, [pc, #28]	; (80002c8 <_ZN3Can8instanceEm+0x60>)
 80002ac:	f009 fb9e 	bl	80099ec <__cxa_guard_release>

	if (nodeId != 0)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d002      	beq.n	80002bc <_ZN3Can8instanceEm+0x54>
		_nodeId = nodeId;
 80002b6:	4a06      	ldr	r2, [pc, #24]	; (80002d0 <_ZN3Can8instanceEm+0x68>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	6013      	str	r3, [r2, #0]

	return can;
 80002bc:	4b03      	ldr	r3, [pc, #12]	; (80002cc <_ZN3Can8instanceEm+0x64>)
}
 80002be:	4618      	mov	r0, r3
 80002c0:	3708      	adds	r7, #8
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	200007b4 	.word	0x200007b4
 80002cc:	200007ac 	.word	0x200007ac
 80002d0:	200007a8 	.word	0x200007a8

080002d4 <_ZN3Can4initEPFvmPhmEPFvvE>:

int Can::init(Com_Receptor_t receptor, Com_Heartbeat_t heartbeat)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
 80002da:	60f8      	str	r0, [r7, #12]
 80002dc:	60b9      	str	r1, [r7, #8]
 80002de:	607a      	str	r2, [r7, #4]
	return Can::init(receptor, heartbeat, COMMode::STANDARD_COM_MODE);
 80002e0:	2300      	movs	r3, #0
 80002e2:	687a      	ldr	r2, [r7, #4]
 80002e4:	68b9      	ldr	r1, [r7, #8]
 80002e6:	68f8      	ldr	r0, [r7, #12]
 80002e8:	f000 f806 	bl	80002f8 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode>
 80002ec:	4603      	mov	r3, r0
}
 80002ee:	4618      	mov	r0, r3
 80002f0:	3710      	adds	r7, #16
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
	...

080002f8 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode>:

int Can::init(Com_Receptor_t receptor, Com_Heartbeat_t heartbeat, COMMode mode)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b0a4      	sub	sp, #144	; 0x90
 80002fc:	af02      	add	r7, sp, #8
 80002fe:	60f8      	str	r0, [r7, #12]
 8000300:	60b9      	str	r1, [r7, #8]
 8000302:	607a      	str	r2, [r7, #4]
 8000304:	603b      	str	r3, [r7, #0]
	if(nodeId == 0)
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	685b      	ldr	r3, [r3, #4]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d102      	bne.n	8000314 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x1c>
		return -1;
 800030e:	f04f 33ff 	mov.w	r3, #4294967295
 8000312:	e17a      	b.n	800060a <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x312>

	standardReceptor = receptor;
 8000314:	4abf      	ldr	r2, [pc, #764]	; (8000614 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x31c>)
 8000316:	68bb      	ldr	r3, [r7, #8]
 8000318:	6013      	str	r3, [r2, #0]

	if (STRHAL_CAN_Instance_Init(STRHAL_FDCAN1) != 0)
 800031a:	2000      	movs	r0, #0
 800031c:	f006 fd5e 	bl	8006ddc <STRHAL_CAN_Instance_Init>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	bf14      	ite	ne
 8000326:	2301      	movne	r3, #1
 8000328:	2300      	moveq	r3, #0
 800032a:	b2db      	uxtb	r3, r3
 800032c:	2b00      	cmp	r3, #0
 800032e:	d002      	beq.n	8000336 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x3e>
		return -1;
 8000330:	f04f 33ff 	mov.w	r3, #4294967295
 8000334:	e169      	b.n	800060a <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x312>

	//if (STRHAL_CAN_Instance_Init(STRHAL_FDCAN2) != 0)
	//	return -1;

	if (STRHAL_TIM_Heartbeat_Init(STRHAL_TIM_TIM7, 1600, 1000) != 100)
 8000336:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800033a:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800033e:	2001      	movs	r0, #1
 8000340:	f008 fbf6 	bl	8008b30 <STRHAL_TIM_Heartbeat_Init>
 8000344:	4603      	mov	r3, r0
 8000346:	2b64      	cmp	r3, #100	; 0x64
 8000348:	bf14      	ite	ne
 800034a:	2301      	movne	r3, #1
 800034c:	2300      	moveq	r3, #0
 800034e:	b2db      	uxtb	r3, r3
 8000350:	2b00      	cmp	r3, #0
 8000352:	d002      	beq.n	800035a <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x62>
		return -1;
 8000354:	f04f 33ff 	mov.w	r3, #4294967295
 8000358:	e157      	b.n	800060a <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x312>

	if (STRHAL_TIM_Heartbeat_Subscribe(STRHAL_TIM_TIM7, heartbeat) != 0)
 800035a:	6879      	ldr	r1, [r7, #4]
 800035c:	2001      	movs	r0, #1
 800035e:	f008 fc43 	bl	8008be8 <STRHAL_TIM_Heartbeat_Subscribe>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	bf14      	ite	ne
 8000368:	2301      	movne	r3, #1
 800036a:	2300      	moveq	r3, #0
 800036c:	b2db      	uxtb	r3, r3
 800036e:	2b00      	cmp	r3, #0
 8000370:	d002      	beq.n	8000378 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x80>
		return -1;
 8000372:	f04f 33ff 	mov.w	r3, #4294967295
 8000376:	e148      	b.n	800060a <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x312>

	if (mode == COMMode::STANDARD_COM_MODE)
 8000378:	683b      	ldr	r3, [r7, #0]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d16f      	bne.n	800045e <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x166>
	{
		Can_MessageId_t mask =
 800037e:	2300      	movs	r3, #0
 8000380:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		{ 0 };
		mask.info.direction = 0x1;
 8000384:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8000388:	f043 0301 	orr.w	r3, r3, #1
 800038c:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
		mask.info.node_id = 0x3F;
 8000390:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8000394:	f043 037e 	orr.w	r3, r3, #126	; 0x7e
 8000398:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
		mask.info.special_cmd = 0x3;
 800039c:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80003a0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80003a4:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

		Can_MessageId_t id =
 80003a8:	2300      	movs	r3, #0
 80003aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		{ 0 };
		id.info.direction = MASTER2NODE_DIRECTION;
 80003ae:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80003b2:	f36f 0300 	bfc	r3, #0, #1
 80003b6:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
		id.info.special_cmd = STANDARD_SPECIAL_CMD;
 80003ba:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 80003be:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80003c2:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
		id.info.node_id = nodeId;
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	685b      	ldr	r3, [r3, #4]
 80003ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80003ce:	b2da      	uxtb	r2, r3
 80003d0:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80003d4:	f362 0346 	bfi	r3, r2, #1, #6
 80003d8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
		Can_MessageId_t id2 =
 80003dc:	2300      	movs	r3, #0
 80003de:	67fb      	str	r3, [r7, #124]	; 0x7c
		{ 0 };
		id2.info.direction = MASTER2NODE_DIRECTION;
 80003e0:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80003e4:	f36f 0300 	bfc	r3, #0, #1
 80003e8:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
		id2.info.special_cmd = STANDARD_SPECIAL_CMD;
 80003ec:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80003f0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80003f4:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
		id2.info.node_id = 0;
 80003f8:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80003fc:	f36f 0346 	bfc	r3, #1, #6
 8000400:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c

		STRHAL_FDCAN_Filter_t mainFilter[] =
 8000404:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000408:	2200      	movs	r2, #0
 800040a:	601a      	str	r2, [r3, #0]
 800040c:	605a      	str	r2, [r3, #4]
 800040e:	609a      	str	r2, [r3, #8]
 8000410:	60da      	str	r2, [r3, #12]
 8000412:	611a      	str	r2, [r3, #16]
 8000414:	615a      	str	r2, [r3, #20]
 8000416:	2302      	movs	r3, #2
 8000418:	66fb      	str	r3, [r7, #108]	; 0x6c
 800041a:	2302      	movs	r3, #2
 800041c:	67bb      	str	r3, [r7, #120]	; 0x78
		{
		{ .value_id1 = id.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
 800041e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
		{ .value_id1 = id2.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK } };
 8000422:	667b      	str	r3, [r7, #100]	; 0x64
		{ .value_id1 = id.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
 8000424:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
		{ .value_id1 = id2.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK } };
 8000428:	66bb      	str	r3, [r7, #104]	; 0x68
 800042a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800042c:	673b      	str	r3, [r7, #112]	; 0x70
 800042e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000432:	677b      	str	r3, [r7, #116]	; 0x74

		if (STRHAL_CAN_Subscribe(STRHAL_FDCAN1, STRHAL_FDCAN_RX0, mainFilter, 2, receptor) != 2)
 8000434:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8000438:	68bb      	ldr	r3, [r7, #8]
 800043a:	9300      	str	r3, [sp, #0]
 800043c:	2302      	movs	r3, #2
 800043e:	2100      	movs	r1, #0
 8000440:	2000      	movs	r0, #0
 8000442:	f006 fdcf 	bl	8006fe4 <STRHAL_CAN_Subscribe>
 8000446:	4603      	mov	r3, r0
 8000448:	2b02      	cmp	r3, #2
 800044a:	bf14      	ite	ne
 800044c:	2301      	movne	r3, #1
 800044e:	2300      	moveq	r3, #0
 8000450:	b2db      	uxtb	r3, r3
 8000452:	2b00      	cmp	r3, #0
 8000454:	f000 80d8 	beq.w	8000608 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x310>
			return -1;
 8000458:	f04f 33ff 	mov.w	r3, #4294967295
 800045c:	e0d5      	b.n	800060a <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x312>
	}
	else if (mode == COMMode::LISTENER_COM_MODE)
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	2b02      	cmp	r3, #2
 8000462:	f040 809f 	bne.w	80005a4 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x2ac>
	{
		Can_MessageId_t mask =
 8000466:	2300      	movs	r3, #0
 8000468:	663b      	str	r3, [r7, #96]	; 0x60
		{ 0 };
		mask.info.direction = 0x1;
 800046a:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800046e:	f043 0301 	orr.w	r3, r3, #1
 8000472:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
		mask.info.node_id = 0x1F;
 8000476:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800047a:	221f      	movs	r2, #31
 800047c:	f362 0346 	bfi	r3, r2, #1, #6
 8000480:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
		mask.info.special_cmd = 0x3;
 8000484:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8000488:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800048c:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60

		Can_MessageId_t id =
 8000490:	2300      	movs	r3, #0
 8000492:	65fb      	str	r3, [r7, #92]	; 0x5c
		{ 0 };
		id.info.direction = MASTER2NODE_DIRECTION;
 8000494:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8000498:	f36f 0300 	bfc	r3, #0, #1
 800049c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
		id.info.special_cmd = STANDARD_SPECIAL_CMD;
 80004a0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80004a4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80004a8:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
		id.info.node_id = nodeId;
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	685b      	ldr	r3, [r3, #4]
 80004b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80004b4:	b2da      	uxtb	r2, r3
 80004b6:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80004ba:	f362 0346 	bfi	r3, r2, #1, #6
 80004be:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

		Can_MessageId_t id2 =
 80004c2:	2300      	movs	r3, #0
 80004c4:	65bb      	str	r3, [r7, #88]	; 0x58
		{ 0 };
		id2.info.direction = MASTER2NODE_DIRECTION;
 80004c6:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80004ca:	f36f 0300 	bfc	r3, #0, #1
 80004ce:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		id2.info.special_cmd = STANDARD_SPECIAL_CMD;
 80004d2:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80004d6:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80004da:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
		id2.info.node_id = 0;
 80004de:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80004e2:	f36f 0346 	bfc	r3, #1, #6
 80004e6:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

		Can_MessageId_t id3 =
 80004ea:	2300      	movs	r3, #0
 80004ec:	657b      	str	r3, [r7, #84]	; 0x54
		{ 0 };
		id3.info.direction = NODE2MASTER_DIRECTION;
 80004ee:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80004f2:	f043 0301 	orr.w	r3, r3, #1
 80004f6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
		id3.info.special_cmd = STANDARD_SPECIAL_CMD;
 80004fa:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80004fe:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8000502:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
		id3.info.node_id = 6;
 8000506:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800050a:	2206      	movs	r2, #6
 800050c:	f362 0346 	bfi	r3, r2, #1, #6
 8000510:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

		Can_MessageId_t id4 =
 8000514:	2300      	movs	r3, #0
 8000516:	653b      	str	r3, [r7, #80]	; 0x50
		{ 0 };
		id4.info.direction = NODE2MASTER_DIRECTION;
 8000518:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800051c:	f043 0301 	orr.w	r3, r3, #1
 8000520:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
		id4.info.special_cmd = STANDARD_SPECIAL_CMD;
 8000524:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8000528:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800052c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
		id4.info.node_id = 7;
 8000530:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000534:	2207      	movs	r2, #7
 8000536:	f362 0346 	bfi	r3, r2, #1, #6
 800053a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

		STRHAL_FDCAN_Filter_t mainFilter[] =
 800053e:	f107 0314 	add.w	r3, r7, #20
 8000542:	2230      	movs	r2, #48	; 0x30
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f009 fab0 	bl	8009aac <memset>
 800054c:	2302      	movs	r3, #2
 800054e:	61fb      	str	r3, [r7, #28]
 8000550:	2302      	movs	r3, #2
 8000552:	62bb      	str	r3, [r7, #40]	; 0x28
 8000554:	2302      	movs	r3, #2
 8000556:	637b      	str	r3, [r7, #52]	; 0x34
 8000558:	2302      	movs	r3, #2
 800055a:	643b      	str	r3, [r7, #64]	; 0x40
		{
		{ .value_id1 = id.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
 800055c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
		{ .value_id1 = id2.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
		{ .value_id1 = id3.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
		{ .value_id1 = id4.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK } };
 800055e:	617b      	str	r3, [r7, #20]
		{ .value_id1 = id.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
 8000560:	6e3b      	ldr	r3, [r7, #96]	; 0x60
		{ .value_id1 = id4.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK } };
 8000562:	61bb      	str	r3, [r7, #24]
		{ .value_id1 = id2.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
 8000564:	6dbb      	ldr	r3, [r7, #88]	; 0x58
		{ .value_id1 = id4.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK } };
 8000566:	623b      	str	r3, [r7, #32]
		{ .value_id1 = id2.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
 8000568:	6e3b      	ldr	r3, [r7, #96]	; 0x60
		{ .value_id1 = id4.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK } };
 800056a:	627b      	str	r3, [r7, #36]	; 0x24
		{ .value_id1 = id3.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
 800056c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
		{ .value_id1 = id4.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK } };
 800056e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{ .value_id1 = id3.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
 8000570:	6e3b      	ldr	r3, [r7, #96]	; 0x60
		{ .value_id1 = id4.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK } };
 8000572:	633b      	str	r3, [r7, #48]	; 0x30
 8000574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000576:	63bb      	str	r3, [r7, #56]	; 0x38
 8000578:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800057a:	63fb      	str	r3, [r7, #60]	; 0x3c

		if (STRHAL_CAN_Subscribe(STRHAL_FDCAN1, STRHAL_FDCAN_RX0, mainFilter, 4, receptor) != 4)
 800057c:	f107 0214 	add.w	r2, r7, #20
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	2304      	movs	r3, #4
 8000586:	2100      	movs	r1, #0
 8000588:	2000      	movs	r0, #0
 800058a:	f006 fd2b 	bl	8006fe4 <STRHAL_CAN_Subscribe>
 800058e:	4603      	mov	r3, r0
 8000590:	2b04      	cmp	r3, #4
 8000592:	bf14      	ite	ne
 8000594:	2301      	movne	r3, #1
 8000596:	2300      	moveq	r3, #0
 8000598:	b2db      	uxtb	r3, r3
 800059a:	2b00      	cmp	r3, #0
 800059c:	d034      	beq.n	8000608 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x310>
			return -1;
 800059e:	f04f 33ff 	mov.w	r3, #4294967295
 80005a2:	e032      	b.n	800060a <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x312>
	}
	else if (mode == COMMode::BRIDGE_COM_MODE)
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	d12e      	bne.n	8000608 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x310>
	{
		STRHAL_FDCAN_Filter_t mainFilter[] =
 80005aa:	2300      	movs	r3, #0
 80005ac:	647b      	str	r3, [r7, #68]	; 0x44
 80005ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80005b4:	2300      	movs	r3, #0
 80005b6:	64fb      	str	r3, [r7, #76]	; 0x4c
		{
		{ .value_id1 = 0x00, .mask_id2 = 0xFFFF, .type = FDCAN_FILTER_RANGE } };

		if (STRHAL_CAN_Subscribe(STRHAL_FDCAN1, STRHAL_FDCAN_RX0, mainFilter, 1, Can::internalReceptor) != 1)
 80005b8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80005bc:	4b16      	ldr	r3, [pc, #88]	; (8000618 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x320>)
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	2301      	movs	r3, #1
 80005c2:	2100      	movs	r1, #0
 80005c4:	2000      	movs	r0, #0
 80005c6:	f006 fd0d 	bl	8006fe4 <STRHAL_CAN_Subscribe>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	bf14      	ite	ne
 80005d0:	2301      	movne	r3, #1
 80005d2:	2300      	moveq	r3, #0
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d002      	beq.n	80005e0 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x2e8>
			return -1;
 80005da:	f04f 33ff 	mov.w	r3, #4294967295
 80005de:	e014      	b.n	800060a <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x312>

		if (STRHAL_CAN_Subscribe(STRHAL_FDCAN2, STRHAL_FDCAN_RX0, mainFilter, 1, Can::externalReceptor) != 1)
 80005e0:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80005e4:	4b0d      	ldr	r3, [pc, #52]	; (800061c <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x324>)
 80005e6:	9300      	str	r3, [sp, #0]
 80005e8:	2301      	movs	r3, #1
 80005ea:	2100      	movs	r1, #0
 80005ec:	2001      	movs	r0, #1
 80005ee:	f006 fcf9 	bl	8006fe4 <STRHAL_CAN_Subscribe>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	bf14      	ite	ne
 80005f8:	2301      	movne	r3, #1
 80005fa:	2300      	moveq	r3, #0
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d002      	beq.n	8000608 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x310>
			return -1;
 8000602:	f04f 33ff 	mov.w	r3, #4294967295
 8000606:	e000      	b.n	800060a <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x312>
	}

	return 0;
 8000608:	2300      	movs	r3, #0
}
 800060a:	4618      	mov	r0, r3
 800060c:	3788      	adds	r7, #136	; 0x88
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	200007a4 	.word	0x200007a4
 8000618:	08000771 	.word	0x08000771
 800061c:	08000791 	.word	0x08000791

08000620 <_ZN3Can4execEv>:

int Can::exec()
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	STRHAL_CAN_Run();
 8000628:	f006 fe94 	bl	8007354 <STRHAL_CAN_Run>
	if (STRHAL_TIM_Heartbeat_StartHeartbeat(STRHAL_TIM_TIM7) != 0)
 800062c:	2001      	movs	r0, #1
 800062e:	f008 fb03 	bl	8008c38 <STRHAL_TIM_Heartbeat_StartHeartbeat>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	bf14      	ite	ne
 8000638:	2301      	movne	r3, #1
 800063a:	2300      	moveq	r3, #0
 800063c:	b2db      	uxtb	r3, r3
 800063e:	2b00      	cmp	r3, #0
 8000640:	d002      	beq.n	8000648 <_ZN3Can4execEv+0x28>
		return -1;
 8000642:	f04f 33ff 	mov.w	r3, #4294967295
 8000646:	e000      	b.n	800064a <_ZN3Can4execEv+0x2a>

	return 0;
 8000648:	2300      	movs	r3, #0
}
 800064a:	4618      	mov	r0, r3
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <_ZN3Can4sendEmPhh>:

int Can::send(uint32_t id, uint8_t *data, uint8_t n)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b096      	sub	sp, #88	; 0x58
 8000658:	af00      	add	r7, sp, #0
 800065a:	60f8      	str	r0, [r7, #12]
 800065c:	60b9      	str	r1, [r7, #8]
 800065e:	4613      	mov	r3, r2
 8000660:	71fb      	strb	r3, [r7, #7]
	Can_MessageId_t msgId =
 8000662:	2300      	movs	r3, #0
 8000664:	657b      	str	r3, [r7, #84]	; 0x54
	{ 0 };
	msgId.info.special_cmd = STANDARD_SPECIAL_CMD;
 8000666:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800066a:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800066e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	msgId.info.direction = NODE2MASTER_DIRECTION;
 8000672:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000676:	f043 0301 	orr.w	r3, r3, #1
 800067a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	if (id == 0)
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d10b      	bne.n	800069c <_ZN3Can4sendEmPhh+0x48>
	{
		msgId.info.node_id = _nodeId;
 8000684:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <_ZN3Can4sendEmPhh+0xa0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800068c:	b2da      	uxtb	r2, r3
 800068e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000692:	f362 0346 	bfi	r3, r2, #1, #6
 8000696:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800069a:	e009      	b.n	80006b0 <_ZN3Can4sendEmPhh+0x5c>
	}
	else
	{
		msgId.info.node_id = id;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80006a2:	b2da      	uxtb	r2, r3
 80006a4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80006a8:	f362 0346 	bfi	r3, r2, #1, #6
 80006ac:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	}
	msgId.info.priority = STANDARD_PRIORITY;
 80006b0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80006b4:	2202      	movs	r2, #2
 80006b6:	f362 0342 	bfi	r3, r2, #1, #2
 80006ba:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

	Can_MessageData_t msgData =
 80006be:	f107 0310 	add.w	r3, r7, #16
 80006c2:	2242      	movs	r2, #66	; 0x42
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f009 f9f0 	bl	8009aac <memset>
	{ 0 };

	memcpy(msgData.uint8, data, n);
 80006cc:	79fa      	ldrb	r2, [r7, #7]
 80006ce:	f107 0310 	add.w	r3, r7, #16
 80006d2:	68b9      	ldr	r1, [r7, #8]
 80006d4:	4618      	mov	r0, r3
 80006d6:	f009 f9db 	bl	8009a90 <memcpy>

	(void) STRHAL_CAN_Send(STRHAL_FDCAN1, msgId.uint32, msgData.uint8, n);
 80006da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	f107 0210 	add.w	r2, r7, #16
 80006e2:	2000      	movs	r0, #0
 80006e4:	f006 fd62 	bl	80071ac <STRHAL_CAN_Send>
	return 0;
 80006e8:	2300      	movs	r3, #0
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3758      	adds	r7, #88	; 0x58
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	200007a8 	.word	0x200007a8

080006f8 <_ZN3Can14bridgeReceptorE17STRHAL_FDCAN_Id_tmPhm>:

	(void) STRHAL_CAN_Send(STRHAL_FDCAN1, msgId.uint32, msgData.uint8, n);
}

void Can::bridgeReceptor(STRHAL_FDCAN_Id_t bus_id, uint32_t id, uint8_t *data, uint32_t n)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60b9      	str	r1, [r7, #8]
 8000700:	607a      	str	r2, [r7, #4]
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	4603      	mov	r3, r0
 8000706:	73fb      	strb	r3, [r7, #15]
	Can_MessageId_t incoming_id;
	incoming_id.uint32 = id;
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	617b      	str	r3, [r7, #20]

	if (incoming_id.info.node_id == _nodeId)
 800070c:	7d3b      	ldrb	r3, [r7, #20]
 800070e:	f3c3 0345 	ubfx	r3, r3, #1, #6
 8000712:	b2db      	uxtb	r3, r3
 8000714:	461a      	mov	r2, r3
 8000716:	4b14      	ldr	r3, [pc, #80]	; (8000768 <_ZN3Can14bridgeReceptorE17STRHAL_FDCAN_Id_tmPhm+0x70>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	429a      	cmp	r2, r3
 800071c:	d106      	bne.n	800072c <_ZN3Can14bridgeReceptorE17STRHAL_FDCAN_Id_tmPhm+0x34>
	{
		Can::standardReceptor(id, data, n);
 800071e:	4b13      	ldr	r3, [pc, #76]	; (800076c <_ZN3Can14bridgeReceptorE17STRHAL_FDCAN_Id_tmPhm+0x74>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	683a      	ldr	r2, [r7, #0]
 8000724:	6879      	ldr	r1, [r7, #4]
 8000726:	68b8      	ldr	r0, [r7, #8]
 8000728:	4798      	blx	r3
	}
	else
	{
		STRHAL_CAN_Send(bus_id, id, data, n);
	}
}
 800072a:	e018      	b.n	800075e <_ZN3Can14bridgeReceptorE17STRHAL_FDCAN_Id_tmPhm+0x66>
	else if (incoming_id.info.node_id == 0)
 800072c:	7d3b      	ldrb	r3, [r7, #20]
 800072e:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000732:	b2db      	uxtb	r3, r3
 8000734:	2b00      	cmp	r3, #0
 8000736:	d10c      	bne.n	8000752 <_ZN3Can14bridgeReceptorE17STRHAL_FDCAN_Id_tmPhm+0x5a>
		STRHAL_CAN_Send(bus_id, id, data, n);
 8000738:	7bf8      	ldrb	r0, [r7, #15]
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	68b9      	ldr	r1, [r7, #8]
 8000740:	f006 fd34 	bl	80071ac <STRHAL_CAN_Send>
		Can::standardReceptor(id, data, n);
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <_ZN3Can14bridgeReceptorE17STRHAL_FDCAN_Id_tmPhm+0x74>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	683a      	ldr	r2, [r7, #0]
 800074a:	6879      	ldr	r1, [r7, #4]
 800074c:	68b8      	ldr	r0, [r7, #8]
 800074e:	4798      	blx	r3
}
 8000750:	e005      	b.n	800075e <_ZN3Can14bridgeReceptorE17STRHAL_FDCAN_Id_tmPhm+0x66>
		STRHAL_CAN_Send(bus_id, id, data, n);
 8000752:	7bf8      	ldrb	r0, [r7, #15]
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	68b9      	ldr	r1, [r7, #8]
 800075a:	f006 fd27 	bl	80071ac <STRHAL_CAN_Send>
}
 800075e:	bf00      	nop
 8000760:	3718      	adds	r7, #24
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200007a8 	.word	0x200007a8
 800076c:	200007a4 	.word	0x200007a4

08000770 <_ZN3Can16internalReceptorEmPhm>:

void Can::internalReceptor(uint32_t id, uint8_t *data, uint32_t n)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	607a      	str	r2, [r7, #4]
	//Can::bridgeReceptor(STRHAL_FDCAN2, id, data, n);
	STRHAL_CAN_Send(STRHAL_FDCAN2, id, data, n);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	68ba      	ldr	r2, [r7, #8]
 8000780:	68f9      	ldr	r1, [r7, #12]
 8000782:	2001      	movs	r0, #1
 8000784:	f006 fd12 	bl	80071ac <STRHAL_CAN_Send>
}
 8000788:	bf00      	nop
 800078a:	3710      	adds	r7, #16
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <_ZN3Can16externalReceptorEmPhm>:

void Can::externalReceptor(uint32_t id, uint8_t *data, uint32_t n)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
	Can::bridgeReceptor(STRHAL_FDCAN1, id, data, n);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	68ba      	ldr	r2, [r7, #8]
 80007a0:	68f9      	ldr	r1, [r7, #12]
 80007a2:	2000      	movs	r0, #0
 80007a4:	f7ff ffa8 	bl	80006f8 <_ZN3Can14bridgeReceptorE17STRHAL_FDCAN_Id_tmPhm>
}
 80007a8:	bf00      	nop
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <_ZN14GenericChannelD1Ev>:
#include <STRHAL.h>
#include <Radio.h>
#include "../Modules/W25Qxx_Flash.h"
#include <Can.h>

class GenericChannel: public AbstractChannel
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	4a05      	ldr	r2, [pc, #20]	; (80007d0 <_ZN14GenericChannelD1Ev+0x20>)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 fe5b 	bl	800147c <_ZN15AbstractChannelD1Ev>
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4618      	mov	r0, r3
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	08009e38 	.word	0x08009e38

080007d4 <_ZN14GenericChannelD0Ev>:
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f7ff ffe7 	bl	80007b0 <_ZN14GenericChannelD1Ev>
 80007e2:	21c8      	movs	r1, #200	; 0xc8
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f009 f8f3 	bl	80099d0 <_ZdlPvj>
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4618      	mov	r0, r3
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <_ZN12ServoChannelD1Ev>:
	FAULT,
	MOVIN,
	CALIB,
};

class ServoChannel: public AbstractChannel
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	4a05      	ldr	r2, [pc, #20]	; (8000814 <_ZN12ServoChannelD1Ev+0x20>)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4618      	mov	r0, r3
 8000806:	f000 fe39 	bl	800147c <_ZN15AbstractChannelD1Ev>
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4618      	mov	r0, r3
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	08009e94 	.word	0x08009e94

08000818 <_ZN12ServoChannelD0Ev>:
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f7ff ffe7 	bl	80007f4 <_ZN12ServoChannelD1Ev>
 8000826:	2168      	movs	r1, #104	; 0x68
 8000828:	6878      	ldr	r0, [r7, #4]
 800082a:	f009 f8d1 	bl	80099d0 <_ZdlPvj>
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4618      	mov	r0, r3
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <_ZN17DigitalOutChannelD1Ev>:
#include "./Channels/AbstractChannel.h"
#include "./Channels/AbstractControlOutputChannel.h"
#include <can_houbolt/channels/digital_out_channel_def.h>
#include <STRHAL.h>

class DigitalOutChannel: public AbstractChannel, public AbstractControlOutputChannel
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	4a09      	ldr	r2, [pc, #36]	; (8000868 <_ZN17DigitalOutChannelD1Ev+0x30>)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	4a09      	ldr	r2, [pc, #36]	; (800086c <_ZN17DigitalOutChannelD1Ev+0x34>)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	611a      	str	r2, [r3, #16]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	3310      	adds	r3, #16
 8000850:	4618      	mov	r0, r3
 8000852:	f000 fe33 	bl	80014bc <_ZN28AbstractControlOutputChannelD1Ev>
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	4618      	mov	r0, r3
 800085a:	f000 fe0f 	bl	800147c <_ZN15AbstractChannelD1Ev>
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4618      	mov	r0, r3
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	08009de4 	.word	0x08009de4
 800086c:	08009e1c 	.word	0x08009e1c

08000870 <_ZThn16_N17DigitalOutChannelD1Ev>:
 8000870:	f1a0 0010 	sub.w	r0, r0, #16
 8000874:	e7e0      	b.n	8000838 <_ZN17DigitalOutChannelD1Ev>
 8000876:	bf00      	nop

08000878 <_ZN17DigitalOutChannelD0Ev>:
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f7ff ffd9 	bl	8000838 <_ZN17DigitalOutChannelD1Ev>
 8000886:	2130      	movs	r1, #48	; 0x30
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f009 f8a1 	bl	80099d0 <_ZdlPvj>
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4618      	mov	r0, r3
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <_ZThn16_N17DigitalOutChannelD0Ev>:
 8000898:	f1a0 0010 	sub.w	r0, r0, #16
 800089c:	e7ec      	b.n	8000878 <_ZN17DigitalOutChannelD0Ev>
	...

080008a0 <_ZN22PressureControlChannelD1Ev>:
#include "./Channels/DigitalOutChannel.h"
#include "./Channels/ADCChannel.h"
#include <can_houbolt/channels/control_channel_def.h>
#include <STRHAL.h>

class PressureControlChannel: public AbstractChannel
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	4a05      	ldr	r2, [pc, #20]	; (80008c0 <_ZN22PressureControlChannelD1Ev+0x20>)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f000 fde3 	bl	800147c <_ZN15AbstractChannelD1Ev>
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4618      	mov	r0, r3
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	08009e64 	.word	0x08009e64

080008c4 <_ZN22PressureControlChannelD0Ev>:
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f7ff ffe7 	bl	80008a0 <_ZN22PressureControlChannelD1Ev>
 80008d2:	2130      	movs	r1, #48	; 0x30
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f009 f87b 	bl	80099d0 <_ZdlPvj>
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4618      	mov	r0, r3
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <_ZN5IOBv4C1Emmm>:
#include <cstring>


#if defined(IOBv4_BOARD)

IOBv4::IOBv4(uint32_t node_id, uint32_t fw_version, uint32_t refresh_divider) :
 80008e4:	b590      	push	{r4, r7, lr}
 80008e6:	b0c3      	sub	sp, #268	; 0x10c
 80008e8:	af06      	add	r7, sp, #24
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	607a      	str	r2, [r7, #4]
 80008f0:	603b      	str	r3, [r7, #0]
		channel9(9,{ ADC1, STRHAL_ADC_CHANNEL_2 },		{ GPIOA,  0, STRHAL_GPIO_TYPE_OPP }, STRHAL_ADC_INTYPE_REGULAR, 1),
		channel10(10,{ ADC1, STRHAL_ADC_CHANNEL_9 },	{ GPIOC,  2, STRHAL_GPIO_TYPE_OPP }, STRHAL_ADC_INTYPE_REGULAR, 1),
		channel11(11,{ ADC1, STRHAL_ADC_CHANNEL_7 },	{ GPIOB,  3, STRHAL_GPIO_TYPE_OPP }, STRHAL_ADC_INTYPE_REGULAR, 1),
		pressurecontrol0(12, (GenericChannel&)*this, 0, channel6, 1),

		speaker(STRHAL_TIM_TIM8, STRHAL_TIM_TIM8_CH4_PC9)
 80008f2:	68f8      	ldr	r0, [r7, #12]
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	68b9      	ldr	r1, [r7, #8]
 80008fa:	f000 ff71 	bl	80017e0 <_ZN14GenericChannelC1Emmm>
 80008fe:	4ad6      	ldr	r2, [pc, #856]	; (8000c58 <_ZN5IOBv4C1Emmm+0x374>)
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	4ad5      	ldr	r2, [pc, #852]	; (8000c5c <_ZN5IOBv4C1Emmm+0x378>)
 8000908:	33c8      	adds	r3, #200	; 0xc8
 800090a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800090e:	e883 0003 	stmia.w	r3, {r0, r1}
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	4ad2      	ldr	r2, [pc, #840]	; (8000c60 <_ZN5IOBv4C1Emmm+0x37c>)
 8000916:	33d0      	adds	r3, #208	; 0xd0
 8000918:	e892 0003 	ldmia.w	r2, {r0, r1}
 800091c:	e883 0003 	stmia.w	r3, {r0, r1}
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	4ad0      	ldr	r2, [pc, #832]	; (8000c64 <_ZN5IOBv4C1Emmm+0x380>)
 8000924:	33d8      	adds	r3, #216	; 0xd8
 8000926:	e892 0003 	ldmia.w	r2, {r0, r1}
 800092a:	e883 0003 	stmia.w	r3, {r0, r1}
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
		servo1(1, 1, STRHAL_TIM_TIM3, STRHAL_TIM_TIM3_CH3_PC8,{ ADC5, STRHAL_ADC_CHANNEL_2 },{ NULL, STRHAL_ADC_CHANNEL_LAST },{ NULL, 0x3F, STRHAL_GPIO_TYPE_OPP }, 1),
 8000934:	2302      	movs	r3, #2
 8000936:	75bb      	strb	r3, [r7, #22]
 8000938:	2335      	movs	r3, #53	; 0x35
 800093a:	75fb      	strb	r3, [r7, #23]
		speaker(STRHAL_TIM_TIM8, STRHAL_TIM_TIM8_CH4_PC9)
 800093c:	4aca      	ldr	r2, [pc, #808]	; (8000c68 <_ZN5IOBv4C1Emmm+0x384>)
 800093e:	f107 0318 	add.w	r3, r7, #24
 8000942:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000946:	e883 0003 	stmia.w	r3, {r0, r1}
 800094a:	2300      	movs	r3, #0
 800094c:	623b      	str	r3, [r7, #32]
 800094e:	2313      	movs	r3, #19
 8000950:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000954:	2300      	movs	r3, #0
 8000956:	62bb      	str	r3, [r7, #40]	; 0x28
 8000958:	233f      	movs	r3, #63	; 0x3f
 800095a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800095e:	2300      	movs	r3, #0
 8000960:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8000964:	f107 0216 	add.w	r2, r7, #22
 8000968:	2301      	movs	r3, #1
 800096a:	9304      	str	r3, [sp, #16]
 800096c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000970:	9303      	str	r3, [sp, #12]
 8000972:	f107 0320 	add.w	r3, r7, #32
 8000976:	9302      	str	r3, [sp, #8]
 8000978:	f107 0318 	add.w	r3, r7, #24
 800097c:	9301      	str	r3, [sp, #4]
 800097e:	f107 0317 	add.w	r3, r7, #23
 8000982:	9300      	str	r3, [sp, #0]
 8000984:	4613      	mov	r3, r2
 8000986:	2201      	movs	r2, #1
 8000988:	2101      	movs	r1, #1
 800098a:	4620      	mov	r0, r4
 800098c:	f001 fe0e 	bl	80025ac <_ZN12ServoChannelC1EhhRK20STRHAL_TIM_TimerId_tRK22STRHAL_TIM_ChannelId_tRK20STRHAL_ADC_Channel_tS8_RK13STRHAL_GPIO_tm>
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	f503 74a4 	add.w	r4, r3, #328	; 0x148
		servo2(2, 2, STRHAL_TIM_TIM2, STRHAL_TIM_TIM2_CH4_PA10,{ ADC2, STRHAL_ADC_CHANNEL_13 },{ NULL, STRHAL_ADC_CHANNEL_LAST },{ NULL, 0x3F, STRHAL_GPIO_TYPE_OPP }, 1),
 8000996:	2301      	movs	r3, #1
 8000998:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800099c:	2322      	movs	r3, #34	; 0x22
 800099e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		speaker(STRHAL_TIM_TIM8, STRHAL_TIM_TIM8_CH4_PC9)
 80009a2:	4ab2      	ldr	r2, [pc, #712]	; (8000c6c <_ZN5IOBv4C1Emmm+0x388>)
 80009a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009ac:	e883 0003 	stmia.w	r3, {r0, r1}
 80009b0:	2300      	movs	r3, #0
 80009b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80009b4:	2313      	movs	r3, #19
 80009b6:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 80009ba:	2300      	movs	r3, #0
 80009bc:	647b      	str	r3, [r7, #68]	; 0x44
 80009be:	233f      	movs	r3, #63	; 0x3f
 80009c0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 80009c4:	2300      	movs	r3, #0
 80009c6:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 80009ca:	f107 0232 	add.w	r2, r7, #50	; 0x32
 80009ce:	2301      	movs	r3, #1
 80009d0:	9304      	str	r3, [sp, #16]
 80009d2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009d6:	9303      	str	r3, [sp, #12]
 80009d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80009dc:	9302      	str	r3, [sp, #8]
 80009de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009e2:	9301      	str	r3, [sp, #4]
 80009e4:	f107 0333 	add.w	r3, r7, #51	; 0x33
 80009e8:	9300      	str	r3, [sp, #0]
 80009ea:	4613      	mov	r3, r2
 80009ec:	2202      	movs	r2, #2
 80009ee:	2102      	movs	r1, #2
 80009f0:	4620      	mov	r0, r4
 80009f2:	f001 fddb 	bl	80025ac <_ZN12ServoChannelC1EhhRK20STRHAL_TIM_TimerId_tRK22STRHAL_TIM_ChannelId_tRK20STRHAL_ADC_Channel_tS8_RK13STRHAL_GPIO_tm>
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	f503 74d8 	add.w	r4, r3, #432	; 0x1b0
 80009fc:	4a9c      	ldr	r2, [pc, #624]	; (8000c70 <_ZN5IOBv4C1Emmm+0x38c>)
 80009fe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a06:	e883 0003 	stmia.w	r3, {r0, r1}
 8000a0a:	4a9a      	ldr	r2, [pc, #616]	; (8000c74 <_ZN5IOBv4C1Emmm+0x390>)
 8000a0c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a14:	e883 0003 	stmia.w	r3, {r0, r1}
 8000a18:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a1c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8000a20:	2101      	movs	r1, #1
 8000a22:	9101      	str	r1, [sp, #4]
 8000a24:	2100      	movs	r1, #0
 8000a26:	9100      	str	r1, [sp, #0]
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4620      	mov	r0, r4
 8000a2c:	f000 fd56 	bl	80014dc <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	f503 74f0 	add.w	r4, r3, #480	; 0x1e0
 8000a36:	4a90      	ldr	r2, [pc, #576]	; (8000c78 <_ZN5IOBv4C1Emmm+0x394>)
 8000a38:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000a3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a40:	e883 0003 	stmia.w	r3, {r0, r1}
 8000a44:	4a8d      	ldr	r2, [pc, #564]	; (8000c7c <_ZN5IOBv4C1Emmm+0x398>)
 8000a46:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a4e:	e883 0003 	stmia.w	r3, {r0, r1}
 8000a52:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a56:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	9101      	str	r1, [sp, #4]
 8000a5e:	2100      	movs	r1, #0
 8000a60:	9100      	str	r1, [sp, #0]
 8000a62:	2103      	movs	r1, #3
 8000a64:	4620      	mov	r0, r4
 8000a66:	f000 fd39 	bl	80014dc <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	f503 7404 	add.w	r4, r3, #528	; 0x210
 8000a70:	4a83      	ldr	r2, [pc, #524]	; (8000c80 <_ZN5IOBv4C1Emmm+0x39c>)
 8000a72:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a7a:	e883 0003 	stmia.w	r3, {r0, r1}
 8000a7e:	4a81      	ldr	r2, [pc, #516]	; (8000c84 <_ZN5IOBv4C1Emmm+0x3a0>)
 8000a80:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000a84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a88:	e883 0003 	stmia.w	r3, {r0, r1}
 8000a8c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000a90:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8000a94:	2101      	movs	r1, #1
 8000a96:	9101      	str	r1, [sp, #4]
 8000a98:	2100      	movs	r1, #0
 8000a9a:	9100      	str	r1, [sp, #0]
 8000a9c:	2104      	movs	r1, #4
 8000a9e:	4620      	mov	r0, r4
 8000aa0:	f000 fd1c 	bl	80014dc <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	f503 7410 	add.w	r4, r3, #576	; 0x240
 8000aaa:	4a77      	ldr	r2, [pc, #476]	; (8000c88 <_ZN5IOBv4C1Emmm+0x3a4>)
 8000aac:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000ab0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ab4:	e883 0003 	stmia.w	r3, {r0, r1}
 8000ab8:	4a74      	ldr	r2, [pc, #464]	; (8000c8c <_ZN5IOBv4C1Emmm+0x3a8>)
 8000aba:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000abe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ac2:	e883 0003 	stmia.w	r3, {r0, r1}
 8000ac6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000aca:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8000ace:	2101      	movs	r1, #1
 8000ad0:	9101      	str	r1, [sp, #4]
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	9100      	str	r1, [sp, #0]
 8000ad6:	2105      	movs	r1, #5
 8000ad8:	4620      	mov	r0, r4
 8000ada:	f000 fcff 	bl	80014dc <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	f503 741c 	add.w	r4, r3, #624	; 0x270
 8000ae4:	4a6a      	ldr	r2, [pc, #424]	; (8000c90 <_ZN5IOBv4C1Emmm+0x3ac>)
 8000ae6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000aea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000aee:	e883 0003 	stmia.w	r3, {r0, r1}
 8000af2:	4a68      	ldr	r2, [pc, #416]	; (8000c94 <_ZN5IOBv4C1Emmm+0x3b0>)
 8000af4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000af8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000afc:	e883 0003 	stmia.w	r3, {r0, r1}
 8000b00:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000b04:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8000b08:	2101      	movs	r1, #1
 8000b0a:	9101      	str	r1, [sp, #4]
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	9100      	str	r1, [sp, #0]
 8000b10:	2106      	movs	r1, #6
 8000b12:	4620      	mov	r0, r4
 8000b14:	f000 fce2 	bl	80014dc <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	f503 7428 	add.w	r4, r3, #672	; 0x2a0
 8000b1e:	4a5e      	ldr	r2, [pc, #376]	; (8000c98 <_ZN5IOBv4C1Emmm+0x3b4>)
 8000b20:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b28:	e883 0003 	stmia.w	r3, {r0, r1}
 8000b2c:	4a5b      	ldr	r2, [pc, #364]	; (8000c9c <_ZN5IOBv4C1Emmm+0x3b8>)
 8000b2e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b36:	e883 0003 	stmia.w	r3, {r0, r1}
 8000b3a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b3e:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8000b42:	2101      	movs	r1, #1
 8000b44:	9101      	str	r1, [sp, #4]
 8000b46:	2100      	movs	r1, #0
 8000b48:	9100      	str	r1, [sp, #0]
 8000b4a:	2107      	movs	r1, #7
 8000b4c:	4620      	mov	r0, r4
 8000b4e:	f000 fcc5 	bl	80014dc <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	f503 7434 	add.w	r4, r3, #720	; 0x2d0
 8000b58:	4a51      	ldr	r2, [pc, #324]	; (8000ca0 <_ZN5IOBv4C1Emmm+0x3bc>)
 8000b5a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b62:	e883 0003 	stmia.w	r3, {r0, r1}
 8000b66:	4a4f      	ldr	r2, [pc, #316]	; (8000ca4 <_ZN5IOBv4C1Emmm+0x3c0>)
 8000b68:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000b6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b70:	e883 0003 	stmia.w	r3, {r0, r1}
 8000b74:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000b78:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	9101      	str	r1, [sp, #4]
 8000b80:	2100      	movs	r1, #0
 8000b82:	9100      	str	r1, [sp, #0]
 8000b84:	2108      	movs	r1, #8
 8000b86:	4620      	mov	r0, r4
 8000b88:	f000 fca8 	bl	80014dc <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	f503 7440 	add.w	r4, r3, #768	; 0x300
 8000b92:	4a45      	ldr	r2, [pc, #276]	; (8000ca8 <_ZN5IOBv4C1Emmm+0x3c4>)
 8000b94:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000b98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b9c:	e883 0003 	stmia.w	r3, {r0, r1}
 8000ba0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ba4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000ba8:	2300      	movs	r3, #0
 8000baa:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8
 8000bae:	2300      	movs	r3, #0
 8000bb0:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
 8000bb4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000bb8:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	9101      	str	r1, [sp, #4]
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	9100      	str	r1, [sp, #0]
 8000bc4:	2109      	movs	r1, #9
 8000bc6:	4620      	mov	r0, r4
 8000bc8:	f000 fc88 	bl	80014dc <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	f503 744c 	add.w	r4, r3, #816	; 0x330
 8000bd2:	4a36      	ldr	r2, [pc, #216]	; (8000cac <_ZN5IOBv4C1Emmm+0x3c8>)
 8000bd4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000bd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bdc:	e883 0003 	stmia.w	r3, {r0, r1}
 8000be0:	4a33      	ldr	r2, [pc, #204]	; (8000cb0 <_ZN5IOBv4C1Emmm+0x3cc>)
 8000be2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000be6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bea:	e883 0003 	stmia.w	r3, {r0, r1}
 8000bee:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000bf2:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	9101      	str	r1, [sp, #4]
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	9100      	str	r1, [sp, #0]
 8000bfe:	210a      	movs	r1, #10
 8000c00:	4620      	mov	r0, r4
 8000c02:	f000 fc6b 	bl	80014dc <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	f503 7458 	add.w	r4, r3, #864	; 0x360
 8000c0c:	4a29      	ldr	r2, [pc, #164]	; (8000cb4 <_ZN5IOBv4C1Emmm+0x3d0>)
 8000c0e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000c12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c16:	e883 0003 	stmia.w	r3, {r0, r1}
 8000c1a:	4a27      	ldr	r2, [pc, #156]	; (8000cb8 <_ZN5IOBv4C1Emmm+0x3d4>)
 8000c1c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000c20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c24:	e883 0003 	stmia.w	r3, {r0, r1}
 8000c28:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000c2c:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8000c30:	2101      	movs	r1, #1
 8000c32:	9101      	str	r1, [sp, #4]
 8000c34:	2100      	movs	r1, #0
 8000c36:	9100      	str	r1, [sp, #0]
 8000c38:	210b      	movs	r1, #11
 8000c3a:	4620      	mov	r0, r4
 8000c3c:	f000 fc4e 	bl	80014dc <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	f503 7064 	add.w	r0, r3, #912	; 0x390
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8000c4e:	2101      	movs	r1, #1
 8000c50:	9101      	str	r1, [sp, #4]
 8000c52:	9300      	str	r3, [sp, #0]
 8000c54:	e032      	b.n	8000cbc <_ZN5IOBv4C1Emmm+0x3d8>
 8000c56:	bf00      	nop
 8000c58:	08009d58 	.word	0x08009d58
 8000c5c:	08009c10 	.word	0x08009c10
 8000c60:	08009c18 	.word	0x08009c18
 8000c64:	08009c20 	.word	0x08009c20
 8000c68:	08009c28 	.word	0x08009c28
 8000c6c:	08009c30 	.word	0x08009c30
 8000c70:	08009c38 	.word	0x08009c38
 8000c74:	08009c40 	.word	0x08009c40
 8000c78:	08009c48 	.word	0x08009c48
 8000c7c:	08009c50 	.word	0x08009c50
 8000c80:	08009c58 	.word	0x08009c58
 8000c84:	08009c60 	.word	0x08009c60
 8000c88:	08009c68 	.word	0x08009c68
 8000c8c:	08009c70 	.word	0x08009c70
 8000c90:	08009c78 	.word	0x08009c78
 8000c94:	08009c80 	.word	0x08009c80
 8000c98:	08009c88 	.word	0x08009c88
 8000c9c:	08009c90 	.word	0x08009c90
 8000ca0:	08009c98 	.word	0x08009c98
 8000ca4:	08009ca0 	.word	0x08009ca0
 8000ca8:	08009ca8 	.word	0x08009ca8
 8000cac:	08009cb0 	.word	0x08009cb0
 8000cb0:	08009cb8 	.word	0x08009cb8
 8000cb4:	08009cc0 	.word	0x08009cc0
 8000cb8:	08009cc8 	.word	0x08009cc8
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	210c      	movs	r1, #12
 8000cc0:	f001 fa6e 	bl	80021a0 <_ZN22PressureControlChannelC1EhR14GenericChannelhR28AbstractControlOutputChannelm>
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8000cca:	2204      	movs	r2, #4
 8000ccc:	f887 20ee 	strb.w	r2, [r7, #238]	; 0xee
 8000cd0:	2254      	movs	r2, #84	; 0x54
 8000cd2:	f887 20ef 	strb.w	r2, [r7, #239]	; 0xef
 8000cd6:	f107 02ef 	add.w	r2, r7, #239	; 0xef
 8000cda:	f107 01ee 	add.w	r1, r7, #238	; 0xee
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f000 f993 	bl	800100a <_ZN7SpeakerC1ERK20STRHAL_TIM_TimerId_tRK22STRHAL_TIM_ChannelId_t>
{

	//registerChannel(&servo0);
	registerChannel(&servo1);
 8000ce4:	68fa      	ldr	r2, [r7, #12]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	33e0      	adds	r3, #224	; 0xe0
 8000cea:	4619      	mov	r1, r3
 8000cec:	4610      	mov	r0, r2
 8000cee:	f001 f8fb 	bl	8001ee8 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&servo2);
 8000cf2:	68fa      	ldr	r2, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4610      	mov	r0, r2
 8000cfe:	f001 f8f3 	bl	8001ee8 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>

	registerChannel(&channel0);
 8000d02:	68fa      	ldr	r2, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4610      	mov	r0, r2
 8000d0e:	f001 f8eb 	bl	8001ee8 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	//registerChannel(&channel1);
	//registerChannel(&channel2);
	registerChannel(&channel3);
 8000d12:	68fa      	ldr	r2, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4610      	mov	r0, r2
 8000d1e:	f001 f8e3 	bl	8001ee8 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&channel4);
 8000d22:	68fa      	ldr	r2, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4610      	mov	r0, r2
 8000d2e:	f001 f8db 	bl	8001ee8 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&channel5);
 8000d32:	68fa      	ldr	r2, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4610      	mov	r0, r2
 8000d3e:	f001 f8d3 	bl	8001ee8 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&channel6);
 8000d42:	68fa      	ldr	r2, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4610      	mov	r0, r2
 8000d4e:	f001 f8cb 	bl	8001ee8 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&channel7);
 8000d52:	68fa      	ldr	r2, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4610      	mov	r0, r2
 8000d5e:	f001 f8c3 	bl	8001ee8 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&channel8);
 8000d62:	68fa      	ldr	r2, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4610      	mov	r0, r2
 8000d6e:	f001 f8bb 	bl	8001ee8 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&channel9);
 8000d72:	68fa      	ldr	r2, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4610      	mov	r0, r2
 8000d7e:	f001 f8b3 	bl	8001ee8 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&channel10);
 8000d82:	68fa      	ldr	r2, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f503 734c 	add.w	r3, r3, #816	; 0x330
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4610      	mov	r0, r2
 8000d8e:	f001 f8ab 	bl	8001ee8 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&channel11);
 8000d92:	68fa      	ldr	r2, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4610      	mov	r0, r2
 8000d9e:	f001 f8a3 	bl	8001ee8 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>

	registerModule(&flash);
 8000da2:	68fa      	ldr	r2, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8000daa:	4619      	mov	r1, r3
 8000dac:	4610      	mov	r0, r2
 8000dae:	f001 f8b9 	bl	8001f24 <_ZN14GenericChannel14registerModuleEP14AbstractModule>

}
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	4618      	mov	r0, r3
 8000db6:	37f4      	adds	r7, #244	; 0xf4
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd90      	pop	{r4, r7, pc}

08000dbc <_ZN5IOBv44initEv>:

int IOBv4::init()
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
	if (STRHAL_Init(STRHAL_SYSCLK_SRC_EXT, 8000000) != STRHAL_NOICE)
 8000dc4:	4933      	ldr	r1, [pc, #204]	; (8000e94 <_ZN5IOBv44initEv+0xd8>)
 8000dc6:	2002      	movs	r0, #2
 8000dc8:	f004 ff36 	bl	8005c38 <STRHAL_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	bf14      	ite	ne
 8000dd2:	2301      	movne	r3, #1
 8000dd4:	2300      	moveq	r3, #0
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d002      	beq.n	8000de2 <_ZN5IOBv44initEv+0x26>
		return -1;
 8000ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8000de0:	e053      	b.n	8000e8a <_ZN5IOBv44initEv+0xce>

	// init status LEDs
	STRHAL_GPIO_SingleInit(&led1, STRHAL_GPIO_TYPE_OPP);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	33c8      	adds	r3, #200	; 0xc8
 8000de6:	2100      	movs	r1, #0
 8000de8:	4618      	mov	r0, r3
 8000dea:	f006 fcf7 	bl	80077dc <STRHAL_GPIO_SingleInit>
	STRHAL_GPIO_SingleInit(&led2, STRHAL_GPIO_TYPE_OPP);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	33d0      	adds	r3, #208	; 0xd0
 8000df2:	2100      	movs	r1, #0
 8000df4:	4618      	mov	r0, r3
 8000df6:	f006 fcf1 	bl	80077dc <STRHAL_GPIO_SingleInit>
	STRHAL_GPIO_SingleInit(&led_debug, STRHAL_GPIO_TYPE_OPP);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	33d8      	adds	r3, #216	; 0xd8
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4618      	mov	r0, r3
 8000e02:	f006 fceb 	bl	80077dc <STRHAL_GPIO_SingleInit>




	// init debug uart
	if (STRHAL_UART_Instance_Init(STRHAL_UART_DEBUG) != 0)
 8000e06:	2002      	movs	r0, #2
 8000e08:	f008 faf2 	bl	80093f0 <STRHAL_UART_Instance_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	bf14      	ite	ne
 8000e12:	2301      	movne	r3, #1
 8000e14:	2300      	moveq	r3, #0
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d002      	beq.n	8000e22 <_ZN5IOBv44initEv+0x66>
		return -1;
 8000e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e20:	e033      	b.n	8000e8a <_ZN5IOBv44initEv+0xce>

	if (can.init(receptor, heartbeatCan, COMMode::STANDARD_COM_MODE) != 0)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
 8000e28:	2300      	movs	r3, #0
 8000e2a:	4a1b      	ldr	r2, [pc, #108]	; (8000e98 <_ZN5IOBv44initEv+0xdc>)
 8000e2c:	491b      	ldr	r1, [pc, #108]	; (8000e9c <_ZN5IOBv44initEv+0xe0>)
 8000e2e:	f7ff fa63 	bl	80002f8 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	bf14      	ite	ne
 8000e38:	2301      	movne	r3, #1
 8000e3a:	2300      	moveq	r3, #0
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d002      	beq.n	8000e48 <_ZN5IOBv44initEv+0x8c>
		return -1;
 8000e42:	f04f 33ff 	mov.w	r3, #4294967295
 8000e46:	e020      	b.n	8000e8a <_ZN5IOBv44initEv+0xce>

	if (GenericChannel::init() != 0)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 fd1f 	bl	800188e <_ZN14GenericChannel4initEv>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	bf14      	ite	ne
 8000e56:	2301      	movne	r3, #1
 8000e58:	2300      	moveq	r3, #0
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d002      	beq.n	8000e66 <_ZN5IOBv44initEv+0xaa>
		return -1;
 8000e60:	f04f 33ff 	mov.w	r3, #4294967295
 8000e64:	e011      	b.n	8000e8a <_ZN5IOBv44initEv+0xce>

	speaker.init();
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f000 f8e1 	bl	8001034 <_ZN7Speaker4initEv>
	STRHAL_GPIO_Write(&led_debug, STRHAL_GPIO_VALUE_H);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	33d8      	adds	r3, #216	; 0xd8
 8000e76:	2101      	movs	r1, #1
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f006 fd0b 	bl	8007894 <STRHAL_GPIO_Write>

	STRHAL_UART_Debug_Write_Blocking("Started\n", 8, 50);
 8000e7e:	2232      	movs	r2, #50	; 0x32
 8000e80:	2108      	movs	r1, #8
 8000e82:	4807      	ldr	r0, [pc, #28]	; (8000ea0 <_ZN5IOBv44initEv+0xe4>)
 8000e84:	f008 fbee 	bl	8009664 <STRHAL_UART_Debug_Write_Blocking>


	return 0;
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	007a1200 	.word	0x007a1200
 8000e98:	080020b9 	.word	0x080020b9
 8000e9c:	08001f89 	.word	0x08001f89
 8000ea0:	08009cd0 	.word	0x08009cd0

08000ea4 <_ZN5IOBv44execEv>:

int IOBv4::exec()
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	STRHAL_OPAMP_Run();
 8000eac:	f006 fe86 	bl	8007bbc <STRHAL_OPAMP_Run>
	STRHAL_ADC_Run();
 8000eb0:	f005 fdb2 	bl	8006a18 <STRHAL_ADC_Run>
	STRHAL_QSPI_Run();
 8000eb4:	f006 ff70 	bl	8007d98 <STRHAL_QSPI_Run>

	if (can.exec() != 0)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	3304      	adds	r3, #4
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4610      	mov	r0, r2
 8000ecc:	4798      	blx	r3
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	bf14      	ite	ne
 8000ed4:	2301      	movne	r3, #1
 8000ed6:	2300      	moveq	r3, #0
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d002      	beq.n	8000ee4 <_ZN5IOBv44execEv+0x40>
		return -1;
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee2:	e01b      	b.n	8000f1c <_ZN5IOBv44execEv+0x78>


	speaker.beep(3, 300, 200);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f503 7070 	add.w	r0, r3, #960	; 0x3c0
 8000eea:	23c8      	movs	r3, #200	; 0xc8
 8000eec:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000ef0:	2103      	movs	r1, #3
 8000ef2:	f000 f8db 	bl	80010ac <_ZN7Speaker4beepEhtt>
	STRHAL_UART_Debug_Write_Blocking("Test\n", 5, 50);
 8000ef6:	2232      	movs	r2, #50	; 0x32
 8000ef8:	2105      	movs	r1, #5
 8000efa:	480a      	ldr	r0, [pc, #40]	; (8000f24 <_ZN5IOBv44execEv+0x80>)
 8000efc:	f008 fbb2 	bl	8009664 <STRHAL_UART_Debug_Write_Blocking>

	while (1)
	{
		if (GenericChannel::exec() != 0)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 fd1b 	bl	800193e <_ZN14GenericChannel4execEv>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	bf14      	ite	ne
 8000f0e:	2301      	movne	r3, #1
 8000f10:	2300      	moveq	r3, #0
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d0f3      	beq.n	8000f00 <_ZN5IOBv44execEv+0x5c>
			return -1;
 8000f18:	f04f 33ff 	mov.w	r3, #4294967295
	}

	speaker.beep(6, 100, 100);

	return 0;
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	08009cdc 	.word	0x08009cdc

08000f28 <_ZN5IOBv4D1Ev>:
#include <Can.h>
#include <Speaker.h>

#include <STRHAL.h>

class IOBv4: public GenericChannel
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	4a2c      	ldr	r2, [pc, #176]	; (8000fe4 <_ZN5IOBv4D1Ev+0xbc>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fcaf 	bl	80008a0 <_ZN22PressureControlChannelD1Ev>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fc75 	bl	8000838 <_ZN17DigitalOutChannelD1Ev>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f503 734c 	add.w	r3, r3, #816	; 0x330
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff fc6f 	bl	8000838 <_ZN17DigitalOutChannelD1Ev>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fc69 	bl	8000838 <_ZN17DigitalOutChannelD1Ev>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fc63 	bl	8000838 <_ZN17DigitalOutChannelD1Ev>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff fc5d 	bl	8000838 <_ZN17DigitalOutChannelD1Ev>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff fc57 	bl	8000838 <_ZN17DigitalOutChannelD1Ev>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff fc51 	bl	8000838 <_ZN17DigitalOutChannelD1Ev>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fc4b 	bl	8000838 <_ZN17DigitalOutChannelD1Ev>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fc45 	bl	8000838 <_ZN17DigitalOutChannelD1Ev>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fc3f 	bl	8000838 <_ZN17DigitalOutChannelD1Ev>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fc17 	bl	80007f4 <_ZN12ServoChannelD1Ev>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	33e0      	adds	r3, #224	; 0xe0
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fc12 	bl	80007f4 <_ZN12ServoChannelD1Ev>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fbec 	bl	80007b0 <_ZN14GenericChannelD1Ev>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	08009d58 	.word	0x08009d58

08000fe8 <_ZN5IOBv4D0Ev>:
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f7ff ff99 	bl	8000f28 <_ZN5IOBv4D1Ev>
 8000ff6:	f44f 7172 	mov.w	r1, #968	; 0x3c8
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f008 fce8 	bl	80099d0 <_ZdlPvj>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <_ZN7SpeakerC1ERK20STRHAL_TIM_TimerId_tRK22STRHAL_TIM_ChannelId_t>:
#include "../Inc/Speaker.h"

Speaker::Speaker(const STRHAL_TIM_TimerId_t &pwmTimer, const STRHAL_TIM_ChannelId_t &control) :
 800100a:	b480      	push	{r7}
 800100c:	b085      	sub	sp, #20
 800100e:	af00      	add	r7, sp, #0
 8001010:	60f8      	str	r0, [r7, #12]
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
		pwmTimer(pwmTimer), ctrlChannelId(control)
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	781a      	ldrb	r2, [r3, #0]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	701a      	strb	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	781a      	ldrb	r2, [r3, #0]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	705a      	strb	r2, [r3, #1]
{
}
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	4618      	mov	r0, r3
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <_ZN7Speaker4initEv>:

int Speaker::init()
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	if (STRHAL_TIM_PWM_Init(pwmTimer, PWM_PSC, PWM_RES) < 0)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001044:	2158      	movs	r1, #88	; 0x58
 8001046:	4618      	mov	r0, r3
 8001048:	f007 fbf4 	bl	8008834 <STRHAL_TIM_PWM_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	0fdb      	lsrs	r3, r3, #31
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b00      	cmp	r3, #0
 8001054:	d002      	beq.n	800105c <_ZN7Speaker4initEv+0x28>
		return -1;
 8001056:	f04f 33ff 	mov.w	r3, #4294967295
 800105a:	e023      	b.n	80010a4 <_ZN7Speaker4initEv+0x70>

	if (STRHAL_TIM_PWM_AddChannel(&pwmChannel, ctrlChannelId, STRHAL_TIM_PWM_CHANNELTYPE_SO) < 0)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	1c98      	adds	r0, r3, #2
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	785b      	ldrb	r3, [r3, #1]
 8001064:	2200      	movs	r2, #0
 8001066:	4619      	mov	r1, r3
 8001068:	f007 fc76 	bl	8008958 <STRHAL_TIM_PWM_AddChannel>
 800106c:	4603      	mov	r3, r0
 800106e:	0fdb      	lsrs	r3, r3, #31
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2b00      	cmp	r3, #0
 8001074:	d002      	beq.n	800107c <_ZN7Speaker4initEv+0x48>
		return -1;
 8001076:	f04f 33ff 	mov.w	r3, #4294967295
 800107a:	e013      	b.n	80010a4 <_ZN7Speaker4initEv+0x70>

	if (STRHAL_TIM_PWM_SetDuty(&pwmChannel, 1800) != 1800)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3302      	adds	r3, #2
 8001080:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 8001084:	4618      	mov	r0, r3
 8001086:	f007 fcdd 	bl	8008a44 <STRHAL_TIM_PWM_SetDuty>
 800108a:	4603      	mov	r3, r0
 800108c:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001090:	bf14      	ite	ne
 8001092:	2301      	movne	r3, #1
 8001094:	2300      	moveq	r3, #0
 8001096:	b2db      	uxtb	r3, r3
 8001098:	2b00      	cmp	r3, #0
 800109a:	d002      	beq.n	80010a2 <_ZN7Speaker4initEv+0x6e>
	{
		return -1;
 800109c:	f04f 33ff 	mov.w	r3, #4294967295
 80010a0:	e000      	b.n	80010a4 <_ZN7Speaker4initEv+0x70>
	}

	return 0;
 80010a2:	2300      	movs	r3, #0
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <_ZN7Speaker4beepEhtt>:
{
	STRHAL_TIM_PWM_Enable(&pwmChannel, ena);
}

void Speaker::beep(uint8_t n, uint16_t tot1, uint16_t tot2)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	4608      	mov	r0, r1
 80010b6:	4611      	mov	r1, r2
 80010b8:	461a      	mov	r2, r3
 80010ba:	4603      	mov	r3, r0
 80010bc:	72fb      	strb	r3, [r7, #11]
 80010be:	460b      	mov	r3, r1
 80010c0:	813b      	strh	r3, [r7, #8]
 80010c2:	4613      	mov	r3, r2
 80010c4:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < n; i++)
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
 80010ca:	7afb      	ldrb	r3, [r7, #11]
 80010cc:	697a      	ldr	r2, [r7, #20]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	da17      	bge.n	8001102 <_ZN7Speaker4beepEhtt+0x56>
	{
		STRHAL_TIM_PWM_Enable(&pwmChannel, true);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	3302      	adds	r3, #2
 80010d6:	2101      	movs	r1, #1
 80010d8:	4618      	mov	r0, r3
 80010da:	f007 fcdf 	bl	8008a9c <STRHAL_TIM_PWM_Enable>
		LL_mDelay(tot1);
 80010de:	893b      	ldrh	r3, [r7, #8]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f004 faef 	bl	80056c4 <LL_mDelay>
		STRHAL_TIM_PWM_Enable(&pwmChannel, false);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	3302      	adds	r3, #2
 80010ea:	2100      	movs	r1, #0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f007 fcd5 	bl	8008a9c <STRHAL_TIM_PWM_Enable>
		LL_mDelay(tot2);
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f004 fae5 	bl	80056c4 <LL_mDelay>
	for (int i = 0; i < n; i++)
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	3301      	adds	r3, #1
 80010fe:	617b      	str	r3, [r7, #20]
 8001100:	e7e3      	b.n	80010ca <_ZN7Speaker4beepEhtt+0x1e>
	}
}
 8001102:	bf00      	nop
 8001104:	3718      	adds	r7, #24
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <main>:
#include "RCU.h"
#include "LCB.h"
#include "git_version.h"

int main(void)
{
 800110c:	b590      	push	{r4, r7, lr}
 800110e:	f5ad 7d73 	sub.w	sp, sp, #972	; 0x3cc
 8001112:	af00      	add	r7, sp, #0
	iob.exec();
#elif defined(IOBv4_BOARD)
#ifdef UART_DEBUG
	IOBv4 iob(10,GIT_COMMIT_HASH_VALUE,100); // TODO disregard node ID and read dipswitches in IOB/LCB class
#else
	IOBv4 iob(10,GIT_COMMIT_HASH_VALUE,1); // TODO disregard node ID and read dipswitches in IOB/LCB class
 8001114:	4638      	mov	r0, r7
 8001116:	2301      	movs	r3, #1
 8001118:	4a13      	ldr	r2, [pc, #76]	; (8001168 <main+0x5c>)
 800111a:	210a      	movs	r1, #10
 800111c:	f7ff fbe2 	bl	80008e4 <_ZN5IOBv4C1Emmm>
#endif
	if(iob.init() != 0)
 8001120:	463b      	mov	r3, r7
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff fe4a 	bl	8000dbc <_ZN5IOBv44initEv>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	bf14      	ite	ne
 800112e:	2301      	movne	r3, #1
 8001130:	2300      	moveq	r3, #0
 8001132:	b2db      	uxtb	r3, r3
 8001134:	2b00      	cmp	r3, #0
 8001136:	d006      	beq.n	8001146 <main+0x3a>
			return -1;
 8001138:	f04f 34ff 	mov.w	r4, #4294967295
	IOBv4 iob(10,GIT_COMMIT_HASH_VALUE,1); // TODO disregard node ID and read dipswitches in IOB/LCB class
 800113c:	463b      	mov	r3, r7
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff fef2 	bl	8000f28 <_ZN5IOBv4D1Ev>
 8001144:	e009      	b.n	800115a <main+0x4e>

	STRHAL_UART_Debug_Write_Blocking("IOBv4 STARTED\n", 14, 50);
 8001146:	2232      	movs	r2, #50	; 0x32
 8001148:	210e      	movs	r1, #14
 800114a:	4808      	ldr	r0, [pc, #32]	; (800116c <main+0x60>)
 800114c:	f008 fa8a 	bl	8009664 <STRHAL_UART_Debug_Write_Blocking>
	iob.exec();
 8001150:	463b      	mov	r3, r7
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff fea6 	bl	8000ea4 <_ZN5IOBv44execEv>

	STRHAL_UART_Debug_Write_Blocking("LCB STARTED\n", 12, 50);
	lcb.exec();
#endif

	while (1);
 8001158:	e7fe      	b.n	8001158 <main+0x4c>
}
 800115a:	4623      	mov	r3, r4
 800115c:	4618      	mov	r0, r3
 800115e:	f507 7773 	add.w	r7, r7, #972	; 0x3cc
 8001162:	46bd      	mov	sp, r7
 8001164:	bd90      	pop	{r4, r7, pc}
 8001166:	bf00      	nop
 8001168:	ba4dac57 	.word	0xba4dac57
 800116c:	08009ce4 	.word	0x08009ce4

08001170 <STRHAL_OofHandler>:

void STRHAL_OofHandler(STRHAL_Oof_t oof, char *msg)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	71fb      	strb	r3, [r7, #7]
	do
	{
	} while (0);
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	683a      	ldr	r2, [r7, #0]
 8001196:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <NMI_Handler>:
#include "stm32g4xx_it.h"
#include <STRHAL.h>

void NMI_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
	...

080011b4 <HardFault_Handler>:

void HardFault_Handler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOD, (1 << 1));
 80011b8:	2102      	movs	r1, #2
 80011ba:	4802      	ldr	r0, [pc, #8]	; (80011c4 <HardFault_Handler+0x10>)
 80011bc:	f7ff ffe4 	bl	8001188 <LL_GPIO_ResetOutputPin>
	while (1)
 80011c0:	e7fe      	b.n	80011c0 <HardFault_Handler+0xc>
 80011c2:	bf00      	nop
 80011c4:	48000c00 	.word	0x48000c00

080011c8 <MemManage_Handler>:
	{
	}
}

void MemManage_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
	while (1)
 80011cc:	e7fe      	b.n	80011cc <MemManage_Handler+0x4>

080011ce <BusFault_Handler>:
	{
	}
}

void BusFault_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0
	while (1)
 80011d2:	e7fe      	b.n	80011d2 <BusFault_Handler+0x4>

080011d4 <UsageFault_Handler>:
	{
	}
}

void UsageFault_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
	while (1)
 80011d8:	e7fe      	b.n	80011d8 <UsageFault_Handler+0x4>

080011da <SVC_Handler>:
	{
	}
}

void SVC_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0
}
 80011de:	bf00      	nop
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <DebugMon_Handler>:

void DebugMon_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <PendSV_Handler>:

void PendSV_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0
}
 80011fa:	bf00      	nop
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
	return 1;
 8001208:	2301      	movs	r3, #1
}
 800120a:	4618      	mov	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <_kill>:

int _kill(int pid, int sig)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800121e:	f008 fc05 	bl	8009a2c <__errno>
 8001222:	4603      	mov	r3, r0
 8001224:	2216      	movs	r2, #22
 8001226:	601a      	str	r2, [r3, #0]
	return -1;
 8001228:	f04f 33ff 	mov.w	r3, #4294967295
}
 800122c:	4618      	mov	r0, r3
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <_exit>:

void _exit(int status)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800123c:	f04f 31ff 	mov.w	r1, #4294967295
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff ffe7 	bl	8001214 <_kill>
	while (1)
 8001246:	e7fe      	b.n	8001246 <_exit+0x12>

08001248 <SystemInit>:
 * @param  None
 * @retval None
 */

void SystemInit(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 800124c:	4b08      	ldr	r3, [pc, #32]	; (8001270 <SystemInit+0x28>)
 800124e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001252:	4a07      	ldr	r2, [pc, #28]	; (8001270 <SystemInit+0x28>)
 8001254:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001258:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800125c:	4b04      	ldr	r3, [pc, #16]	; (8001270 <SystemInit+0x28>)
 800125e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001262:	609a      	str	r2, [r3, #8]
#endif
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <_ZN15AbstractChannelC1E12CHANNEL_TYPEhm>:
#include "../Inc/Channels/AbstractChannel.h"

#include <cstring>

AbstractChannel::AbstractChannel(CHANNEL_TYPE type, uint8_t id, uint32_t refreshDivider) :
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	460b      	mov	r3, r1
 8001280:	72fb      	strb	r3, [r7, #11]
 8001282:	4613      	mov	r3, r2
 8001284:	72bb      	strb	r3, [r7, #10]
		refreshDivider(refreshDivider), refreshCounter(0), channelType(type), channelId(id), channelStatus(CHANNEL_STATUS_NOICE)
 8001286:	4a0c      	ldr	r2, [pc, #48]	; (80012b8 <_ZN15AbstractChannelC1E12CHANNEL_TYPEhm+0x44>)
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	7afa      	ldrb	r2, [r7, #11]
 800129c:	731a      	strb	r2, [r3, #12]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	7aba      	ldrb	r2, [r7, #10]
 80012a2:	735a      	strb	r2, [r3, #13]
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2200      	movs	r2, #0
 80012a8:	739a      	strb	r2, [r3, #14]
{

}
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	4618      	mov	r0, r3
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	08009d9c 	.word	0x08009d9c

080012bc <_ZNK15AbstractChannel14getChannelTypeEv>:

CHANNEL_TYPE AbstractChannel::getChannelType() const
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
	return channelType;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	7b1b      	ldrb	r3, [r3, #12]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <_ZNK15AbstractChannel16getChannelStatusEv>:

CHANNEL_STATUS AbstractChannel::getChannelStatus() const
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	return channelStatus;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	7b9b      	ldrb	r3, [r3, #14]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <_ZNK15AbstractChannel12getChannelIdEv>:

uint8_t AbstractChannel::getChannelId() const
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
	return channelId;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	7b5b      	ldrb	r3, [r3, #13]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <_ZNK15AbstractChannel11IsChannelIdEh>:
{
	return type == channelType;
}

bool AbstractChannel::IsChannelId(uint8_t id) const
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	70fb      	strb	r3, [r7, #3]
	return channelId == id;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	7b5b      	ldrb	r3, [r3, #13]
 8001314:	78fa      	ldrb	r2, [r7, #3]
 8001316:	429a      	cmp	r2, r3
 8001318:	bf0c      	ite	eq
 800131a:	2301      	moveq	r3, #1
 800131c:	2300      	movne	r3, #0
 800131e:	b2db      	uxtb	r3, r3
}
 8001320:	4618      	mov	r0, r3
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <_ZN15AbstractChannel11IsRefreshedEv>:

bool AbstractChannel::IsRefreshed()
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	if (refreshDivider == 0)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d101      	bne.n	8001340 <_ZN15AbstractChannel11IsRefreshedEv+0x14>
		return false;
 800133c:	2300      	movs	r3, #0
 800133e:	e010      	b.n	8001362 <_ZN15AbstractChannel11IsRefreshedEv+0x36>
	refreshCounter++;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	1c5a      	adds	r2, r3, #1
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	609a      	str	r2, [r3, #8]
	if (refreshCounter != refreshDivider)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	689a      	ldr	r2, [r3, #8]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	429a      	cmp	r2, r3
 8001354:	d001      	beq.n	800135a <_ZN15AbstractChannel11IsRefreshedEv+0x2e>
		return false;
 8001356:	2300      	movs	r3, #0
 8001358:	e003      	b.n	8001362 <_ZN15AbstractChannel11IsRefreshedEv+0x36>

	refreshCounter = 0;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
	return true;
 8001360:	2301      	movs	r3, #1
}
 8001362:	4618      	mov	r0, r3
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <_ZNK15AbstractChannel14getMeasurementEv>:


uint16_t AbstractChannel::getMeasurement() const
{
 800136e:	b480      	push	{r7}
 8001370:	b083      	sub	sp, #12
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
	return -1;
 8001376:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800137a:	4618      	mov	r0, r3
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
	...

08001388 <_ZN15AbstractChannel14processMessageEhPhRh>:

int AbstractChannel::processMessage(uint8_t commandId, uint8_t *returnData, uint8_t &n)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b088      	sub	sp, #32
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	607a      	str	r2, [r7, #4]
 8001392:	603b      	str	r3, [r7, #0]
 8001394:	460b      	mov	r3, r1
 8001396:	72fb      	strb	r3, [r7, #11]
	SetMsg_t *setMsg;
	setMsg = (SetMsg_t*) returnData;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	61fb      	str	r3, [r7, #28]
	int32_t temp = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
	int status = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61bb      	str	r3, [r7, #24]
	switch (commandId)
 80013a4:	7afb      	ldrb	r3, [r7, #11]
 80013a6:	2b06      	cmp	r3, #6
 80013a8:	d862      	bhi.n	8001470 <_ZN15AbstractChannel14processMessageEhPhRh+0xe8>
 80013aa:	a201      	add	r2, pc, #4	; (adr r2, 80013b0 <_ZN15AbstractChannel14processMessageEhPhRh+0x28>)
 80013ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b0:	080013fb 	.word	0x080013fb
 80013b4:	08001471 	.word	0x08001471
 80013b8:	08001467 	.word	0x08001467
 80013bc:	08001471 	.word	0x08001471
 80013c0:	0800140b 	.word	0x0800140b
 80013c4:	08001471 	.word	0x08001471
 80013c8:	080013cd 	.word	0x080013cd
	{
		case COMMON_REQ_GET_VARIABLE:
			status = getVariable(setMsg->variable_id, temp);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	3320      	adds	r3, #32
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	69fa      	ldr	r2, [r7, #28]
 80013d6:	7811      	ldrb	r1, [r2, #0]
 80013d8:	f107 0214 	add.w	r2, r7, #20
 80013dc:	68f8      	ldr	r0, [r7, #12]
 80013de:	4798      	blx	r3
 80013e0:	61b8      	str	r0, [r7, #24]
			setMsg->value = temp;
 80013e2:	697a      	ldr	r2, [r7, #20]
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f8c3 2001 	str.w	r2, [r3, #1]
			n += sizeof(SetMsg_t);
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	3305      	adds	r3, #5
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	701a      	strb	r2, [r3, #0]
			return status;
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	e03c      	b.n	8001474 <_ZN15AbstractChannel14processMessageEhPhRh+0xec>

		case COMMON_REQ_RESET_SETTINGS:
			return reset();
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	330c      	adds	r3, #12
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	68f8      	ldr	r0, [r7, #12]
 8001404:	4798      	blx	r3
 8001406:	4603      	mov	r3, r0
 8001408:	e034      	b.n	8001474 <_ZN15AbstractChannel14processMessageEhPhRh+0xec>

		case COMMON_REQ_SET_VARIABLE:
			if (setVariable(setMsg->variable_id, setMsg->value) == -1)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	331c      	adds	r3, #28
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	69fa      	ldr	r2, [r7, #28]
 8001414:	7811      	ldrb	r1, [r2, #0]
 8001416:	69fa      	ldr	r2, [r7, #28]
 8001418:	f8d2 2001 	ldr.w	r2, [r2, #1]
 800141c:	68f8      	ldr	r0, [r7, #12]
 800141e:	4798      	blx	r3
 8001420:	4603      	mov	r3, r0
 8001422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001426:	bf0c      	ite	eq
 8001428:	2301      	moveq	r3, #1
 800142a:	2300      	movne	r3, #0
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b00      	cmp	r3, #0
 8001430:	d002      	beq.n	8001438 <_ZN15AbstractChannel14processMessageEhPhRh+0xb0>
				return -1;
 8001432:	f04f 33ff 	mov.w	r3, #4294967295
 8001436:	e01d      	b.n	8001474 <_ZN15AbstractChannel14processMessageEhPhRh+0xec>
			status = getVariable(setMsg->variable_id, temp);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	3320      	adds	r3, #32
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	69fa      	ldr	r2, [r7, #28]
 8001442:	7811      	ldrb	r1, [r2, #0]
 8001444:	f107 0214 	add.w	r2, r7, #20
 8001448:	68f8      	ldr	r0, [r7, #12]
 800144a:	4798      	blx	r3
 800144c:	61b8      	str	r0, [r7, #24]
			setMsg->value = temp;
 800144e:	697a      	ldr	r2, [r7, #20]
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f8c3 2001 	str.w	r2, [r3, #1]
			n += sizeof(SetMsg_t);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	3305      	adds	r3, #5
 800145c:	b2da      	uxtb	r2, r3
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	701a      	strb	r2, [r3, #0]
			return status;
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	e006      	b.n	8001474 <_ZN15AbstractChannel14processMessageEhPhRh+0xec>

		case COMMON_REQ_STATUS:
			return getChannelStatus();
 8001466:	68f8      	ldr	r0, [r7, #12]
 8001468:	f7ff ff34 	bl	80012d4 <_ZNK15AbstractChannel16getChannelStatusEv>
 800146c:	4603      	mov	r3, r0
 800146e:	e001      	b.n	8001474 <_ZN15AbstractChannel14processMessageEhPhRh+0xec>

		default:
			return -1;
 8001470:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8001474:	4618      	mov	r0, r3
 8001476:	3720      	adds	r7, #32
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <_ZN15AbstractChannelD1Ev>:

AbstractChannel::~AbstractChannel()
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	4a04      	ldr	r2, [pc, #16]	; (8001498 <_ZN15AbstractChannelD1Ev+0x1c>)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	601a      	str	r2, [r3, #0]
{
}
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4618      	mov	r0, r3
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	08009d9c 	.word	0x08009d9c

0800149c <_ZN28AbstractControlOutputChannelC1Ev>:
#include "../Inc/Channels/AbstractControlOutputChannel.h"

#include <cstring>

AbstractControlOutputChannel::AbstractControlOutputChannel()
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	4a04      	ldr	r2, [pc, #16]	; (80014b8 <_ZN28AbstractControlOutputChannelC1Ev+0x1c>)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	601a      	str	r2, [r3, #0]
{

}
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4618      	mov	r0, r3
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	08009dc8 	.word	0x08009dc8

080014bc <_ZN28AbstractControlOutputChannelD1Ev>:
AbstractControlOutputChannel::~AbstractControlOutputChannel()
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	4a04      	ldr	r2, [pc, #16]	; (80014d8 <_ZN28AbstractControlOutputChannelD1Ev+0x1c>)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	601a      	str	r2, [r3, #0]
{
}
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4618      	mov	r0, r3
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	08009dc8 	.word	0x08009dc8

080014dc <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>:
#include <Channels/DigitalOutChannel.h>

DigitalOutChannel::DigitalOutChannel(uint8_t id, const STRHAL_ADC_Channel_t &adcChannel, const STRHAL_GPIO_t &cntrlPin, STRHAL_ADC_InType_t adcInType, uint32_t refreshDivider) :
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	607a      	str	r2, [r7, #4]
 80014e6:	603b      	str	r3, [r7, #0]
 80014e8:	460b      	mov	r3, r1
 80014ea:	72fb      	strb	r3, [r7, #11]
		AbstractChannel(CHANNEL_TYPE_DIGITAL_OUT, id, refreshDivider), adcChannel(adcChannel), cntrlPin(cntrlPin), adcInType(adcInType), hasFeedback(true)
 80014ec:	68f8      	ldr	r0, [r7, #12]
 80014ee:	7afa      	ldrb	r2, [r7, #11]
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	2107      	movs	r1, #7
 80014f4:	f7ff febe 	bl	8001274 <_ZN15AbstractChannelC1E12CHANNEL_TYPEhm>
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	3310      	adds	r3, #16
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ffcd 	bl	800149c <_ZN28AbstractControlOutputChannelC1Ev>
 8001502:	4a12      	ldr	r2, [pc, #72]	; (800154c <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm+0x70>)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	4a11      	ldr	r2, [pc, #68]	; (8001550 <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm+0x74>)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	611a      	str	r2, [r3, #16]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	3318      	adds	r3, #24
 8001514:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001518:	e883 0003 	stmia.w	r3, {r0, r1}
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2200      	movs	r2, #0
 8001520:	621a      	str	r2, [r3, #32]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	3324      	adds	r3, #36	; 0x24
 8001528:	e892 0003 	ldmia.w	r2, {r0, r1}
 800152c:	e883 0003 	stmia.w	r3, {r0, r1}
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	7e3a      	ldrb	r2, [r7, #24]
 8001534:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2201      	movs	r2, #1
 800153c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
{
}
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4618      	mov	r0, r3
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	08009de4 	.word	0x08009de4
 8001550:	08009e1c 	.word	0x08009e1c

08001554 <_ZN17DigitalOutChannel4initEv>:
		AbstractChannel(CHANNEL_TYPE_DIGITAL_OUT, id, refreshDivider), cntrlPin(cntrlPin)
{
}

int DigitalOutChannel::init()
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
	STRHAL_GPIO_SingleInit(&cntrlPin, STRHAL_GPIO_TYPE_OPP);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3324      	adds	r3, #36	; 0x24
 8001560:	2100      	movs	r1, #0
 8001562:	4618      	mov	r0, r3
 8001564:	f006 f93a 	bl	80077dc <STRHAL_GPIO_SingleInit>
	if (hasFeedback)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800156e:	2b00      	cmp	r3, #0
 8001570:	d013      	beq.n	800159a <_ZN17DigitalOutChannel4initEv+0x46>
	{
		adcMeasurement = STRHAL_ADC_SubscribeChannel(&adcChannel, adcInType);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f103 0218 	add.w	r2, r3, #24
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800157e:	4619      	mov	r1, r3
 8001580:	4610      	mov	r0, r2
 8001582:	f005 f8bd 	bl	8006700 <STRHAL_ADC_SubscribeChannel>
 8001586:	4602      	mov	r2, r0
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	621a      	str	r2, [r3, #32]

		if (adcMeasurement == nullptr)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d102      	bne.n	800159a <_ZN17DigitalOutChannel4initEv+0x46>
			return -1;
 8001594:	f04f 33ff 	mov.w	r3, #4294967295
 8001598:	e000      	b.n	800159c <_ZN17DigitalOutChannel4initEv+0x48>
	}

	return 0;
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <_ZN17DigitalOutChannel4execEv>:

int DigitalOutChannel::exec()
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
	return 0;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <_ZN17DigitalOutChannel5resetEv>:

int DigitalOutChannel::reset()
{
 80015ba:	b480      	push	{r7}
 80015bc:	b083      	sub	sp, #12
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
	return 0;
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <_ZN17DigitalOutChannel14processMessageEhPhRh>:

int DigitalOutChannel::processMessage(uint8_t commandId, uint8_t *returnData, uint8_t &n)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	607a      	str	r2, [r7, #4]
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	460b      	mov	r3, r1
 80015de:	72fb      	strb	r3, [r7, #11]
	switch (commandId)
	{
		default:
			return AbstractChannel::processMessage(commandId, returnData, n);
 80015e0:	68f8      	ldr	r0, [r7, #12]
 80015e2:	7af9      	ldrb	r1, [r7, #11]
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	f7ff fece 	bl	8001388 <_ZN15AbstractChannel14processMessageEhPhRh>
 80015ec:	4603      	mov	r3, r0
	}
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <_ZN17DigitalOutChannel13getSensorDataEPhRh>:

int DigitalOutChannel::getSensorData(uint8_t *data, uint8_t &n)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b087      	sub	sp, #28
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	60f8      	str	r0, [r7, #12]
 80015fe:	60b9      	str	r1, [r7, #8]
 8001600:	607a      	str	r2, [r7, #4]
	uint16_t *out = (uint16_t*) (data + n);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	461a      	mov	r2, r3
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	4413      	add	r3, r2
 800160c:	617b      	str	r3, [r7, #20]
	*out = (hasFeedback) ? (*adcMeasurement << 4) : 0; // shift to 16bit full scale, if no feedback is present return 0
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001614:	2b00      	cmp	r3, #0
 8001616:	d006      	beq.n	8001626 <_ZN17DigitalOutChannel13getSensorDataEPhRh+0x30>
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	881b      	ldrh	r3, [r3, #0]
 800161e:	b29b      	uxth	r3, r3
 8001620:	011b      	lsls	r3, r3, #4
 8001622:	b29a      	uxth	r2, r3
 8001624:	e000      	b.n	8001628 <_ZN17DigitalOutChannel13getSensorDataEPhRh+0x32>
 8001626:	2200      	movs	r2, #0
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	801a      	strh	r2, [r3, #0]

	n += DIGITAL_OUT_DATA_N_BYTES;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	3302      	adds	r3, #2
 8001632:	b2da      	uxtb	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	701a      	strb	r2, [r3, #0]
	return 0;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	371c      	adds	r7, #28
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
	...

08001648 <_ZN17DigitalOutChannel11setVariableEhl>:

int DigitalOutChannel::setVariable(uint8_t variableId, int32_t data)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	460b      	mov	r3, r1
 8001652:	607a      	str	r2, [r7, #4]
 8001654:	72fb      	strb	r3, [r7, #11]
	switch (variableId)
 8001656:	7afb      	ldrb	r3, [r7, #11]
 8001658:	2b04      	cmp	r3, #4
 800165a:	d836      	bhi.n	80016ca <_ZN17DigitalOutChannel11setVariableEhl+0x82>
 800165c:	a201      	add	r2, pc, #4	; (adr r2, 8001664 <_ZN17DigitalOutChannel11setVariableEhl+0x1c>)
 800165e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001662:	bf00      	nop
 8001664:	08001679 	.word	0x08001679
 8001668:	080016a3 	.word	0x080016a3
 800166c:	080016af 	.word	0x080016af
 8001670:	080016cb 	.word	0x080016cb
 8001674:	080016bb 	.word	0x080016bb
	{
		case DIGITAL_OUT_STATE:
			if (setState(data) != 0)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	3328      	adds	r3, #40	; 0x28
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	4611      	mov	r1, r2
 8001684:	68f8      	ldr	r0, [r7, #12]
 8001686:	4798      	blx	r3
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	bf14      	ite	ne
 800168e:	2301      	movne	r3, #1
 8001690:	2300      	moveq	r3, #0
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2b00      	cmp	r3, #0
 8001696:	d002      	beq.n	800169e <_ZN17DigitalOutChannel11setVariableEhl+0x56>
				return -1;
 8001698:	f04f 33ff 	mov.w	r3, #4294967295
 800169c:	e017      	b.n	80016ce <_ZN17DigitalOutChannel11setVariableEhl+0x86>
			return 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	e015      	b.n	80016ce <_ZN17DigitalOutChannel11setVariableEhl+0x86>
		case DIGITAL_OUT_DUTY_CYCLE:
			dutyCycle = data;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	829a      	strh	r2, [r3, #20]
			return 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	e00f      	b.n	80016ce <_ZN17DigitalOutChannel11setVariableEhl+0x86>
		case DIGITAL_OUT_FREQUENCY:
			frequency = data;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	82da      	strh	r2, [r3, #22]
			return 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	e009      	b.n	80016ce <_ZN17DigitalOutChannel11setVariableEhl+0x86>
		case DIGITAL_OUT_SENSOR_REFRESH_DIVIDER:
			refreshDivider = data;
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	605a      	str	r2, [r3, #4]
			refreshCounter = 0;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
			return 0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	e001      	b.n	80016ce <_ZN17DigitalOutChannel11setVariableEhl+0x86>
		default:
			return -1;
 80016ca:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop

080016d8 <_ZNK17DigitalOutChannel11getVariableEhRl>:

int DigitalOutChannel::getVariable(uint8_t variableId, int32_t &data) const
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	460b      	mov	r3, r1
 80016e2:	607a      	str	r2, [r7, #4]
 80016e4:	72fb      	strb	r3, [r7, #11]
	switch (variableId)
 80016e6:	7afb      	ldrb	r3, [r7, #11]
 80016e8:	2b04      	cmp	r3, #4
 80016ea:	d82e      	bhi.n	800174a <_ZNK17DigitalOutChannel11getVariableEhRl+0x72>
 80016ec:	a201      	add	r2, pc, #4	; (adr r2, 80016f4 <_ZNK17DigitalOutChannel11getVariableEhRl+0x1c>)
 80016ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f2:	bf00      	nop
 80016f4:	08001709 	.word	0x08001709
 80016f8:	08001721 	.word	0x08001721
 80016fc:	0800172f 	.word	0x0800172f
 8001700:	0800174b 	.word	0x0800174b
 8001704:	0800173d 	.word	0x0800173d
	{
		case DIGITAL_OUT_STATE:
			data = getState();
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	3324      	adds	r3, #36	; 0x24
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	68f8      	ldr	r0, [r7, #12]
 8001712:	4798      	blx	r3
 8001714:	4603      	mov	r3, r0
 8001716:	461a      	mov	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	601a      	str	r2, [r3, #0]
			return 0;
 800171c:	2300      	movs	r3, #0
 800171e:	e016      	b.n	800174e <_ZNK17DigitalOutChannel11getVariableEhRl+0x76>
		case DIGITAL_OUT_DUTY_CYCLE:
			data = dutyCycle;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	8a9b      	ldrh	r3, [r3, #20]
 8001724:	461a      	mov	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	601a      	str	r2, [r3, #0]
			return 0;
 800172a:	2300      	movs	r3, #0
 800172c:	e00f      	b.n	800174e <_ZNK17DigitalOutChannel11getVariableEhRl+0x76>
		case DIGITAL_OUT_FREQUENCY:
			data = frequency;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	8adb      	ldrh	r3, [r3, #22]
 8001732:	461a      	mov	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	601a      	str	r2, [r3, #0]
			return 0;
 8001738:	2300      	movs	r3, #0
 800173a:	e008      	b.n	800174e <_ZNK17DigitalOutChannel11getVariableEhRl+0x76>
		case DIGITAL_OUT_SENSOR_REFRESH_DIVIDER:
			data = (int32_t) refreshDivider;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	461a      	mov	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	601a      	str	r2, [r3, #0]
			return 0;
 8001746:	2300      	movs	r3, #0
 8001748:	e001      	b.n	800174e <_ZNK17DigitalOutChannel11getVariableEhRl+0x76>
		default:
			return -1;
 800174a:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800174e:	4618      	mov	r0, r3
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop

08001758 <_ZNK17DigitalOutChannel8getStateEv>:

uint32_t DigitalOutChannel::getState() const
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	return (STRHAL_GPIO_ReadOutput(&cntrlPin) == STRHAL_GPIO_VALUE_L) ? 0UL : 1UL;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3324      	adds	r3, #36	; 0x24
 8001764:	4618      	mov	r0, r3
 8001766:	f006 f8be 	bl	80078e6 <STRHAL_GPIO_ReadOutput>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	bf14      	ite	ne
 8001770:	2301      	movne	r3, #1
 8001772:	2300      	moveq	r3, #0
 8001774:	b2db      	uxtb	r3, r3
}
 8001776:	4618      	mov	r0, r3
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <_ZThn16_NK17DigitalOutChannel8getStateEv>:

		uint16_t getMeasurement() const;

		int processMessage(uint8_t commandI, uint8_t *returnData, uint8_t &n) override;

		uint32_t getState() const;
 800177e:	f1a0 0010 	sub.w	r0, r0, #16
 8001782:	f7ff bfe9 	b.w	8001758 <_ZNK17DigitalOutChannel8getStateEv>

08001786 <_ZN17DigitalOutChannel8setStateEm>:

int DigitalOutChannel::setState(uint32_t state)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b082      	sub	sp, #8
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
 800178e:	6039      	str	r1, [r7, #0]
	if (state == 0)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d106      	bne.n	80017a4 <_ZN17DigitalOutChannel8setStateEm+0x1e>
	{
		STRHAL_GPIO_Write(&cntrlPin, STRHAL_GPIO_VALUE_L);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3324      	adds	r3, #36	; 0x24
 800179a:	2100      	movs	r1, #0
 800179c:	4618      	mov	r0, r3
 800179e:	f006 f879 	bl	8007894 <STRHAL_GPIO_Write>
 80017a2:	e005      	b.n	80017b0 <_ZN17DigitalOutChannel8setStateEm+0x2a>
	}
	else
	{
		STRHAL_GPIO_Write(&cntrlPin, STRHAL_GPIO_VALUE_H);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3324      	adds	r3, #36	; 0x24
 80017a8:	2101      	movs	r1, #1
 80017aa:	4618      	mov	r0, r3
 80017ac:	f006 f872 	bl	8007894 <STRHAL_GPIO_Write>
	}
	return 0;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <_ZThn16_N17DigitalOutChannel8setStateEm>:
		int setState(uint32_t state);
 80017ba:	f1a0 0010 	sub.w	r0, r0, #16
 80017be:	f7ff bfe2 	b.w	8001786 <_ZN17DigitalOutChannel8setStateEm>

080017c2 <_ZN17DigitalOutChannel8isAnalogEv>:


bool DigitalOutChannel::isAnalog()
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
	return false;
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <_ZThn16_N17DigitalOutChannel8isAnalogEv>:
		bool isAnalog();
 80017d8:	f1a0 0010 	sub.w	r0, r0, #16
 80017dc:	f7ff bff1 	b.w	80017c2 <_ZN17DigitalOutChannel8isAnalogEv>

080017e0 <_ZN14GenericChannelC1Emmm>:
#include <git_version.h>

GenericChannel* GenericChannel::gcPtr = nullptr; // necessary for static callbacks
bool GenericChannel::loraActive = false;

GenericChannel::GenericChannel(uint32_t nodeId, uint32_t firmwareVersion, uint32_t refreshDivider) :
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
 80017ec:	603b      	str	r3, [r7, #0]
		AbstractChannel(CHANNEL_TYPE_NODE_GENERIC, GENERIC_CHANNEL_ID, refreshDivider), can(Can::instance(nodeId)), flash(W25Qxx_Flash::instance()), nodeId(nodeId), firmwareVersion(GIT_COMMIT_HASH_VALUE)
 80017ee:	68f8      	ldr	r0, [r7, #12]
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	223f      	movs	r2, #63	; 0x3f
 80017f4:	2101      	movs	r1, #1
 80017f6:	f7ff fd3d 	bl	8001274 <_ZN15AbstractChannelC1E12CHANNEL_TYPEhm>
 80017fa:	4a1b      	ldr	r2, [pc, #108]	; (8001868 <_ZN14GenericChannelC1Emmm+0x88>)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	3310      	adds	r3, #16
 8001804:	2280      	movs	r2, #128	; 0x80
 8001806:	2100      	movs	r1, #0
 8001808:	4618      	mov	r0, r3
 800180a:	f008 f94f 	bl	8009aac <memset>
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	3390      	adds	r3, #144	; 0x90
 8001812:	2220      	movs	r2, #32
 8001814:	2100      	movs	r1, #0
 8001816:	4618      	mov	r0, r3
 8001818:	f008 f948 	bl	8009aac <memset>
 800181c:	68b8      	ldr	r0, [r7, #8]
 800181e:	f7fe fd23 	bl	8000268 <_ZN3Can8instanceEm>
 8001822:	4602      	mov	r2, r0
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800182a:	f001 fc05 	bl	8003038 <_ZN12W25Qxx_Flash8instanceEv>
 800182e:	4602      	mov	r2, r0
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	68ba      	ldr	r2, [r7, #8]
 800183a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	4a0a      	ldr	r2, [pc, #40]	; (800186c <_ZN14GenericChannelC1Emmm+0x8c>)
 8001842:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
{
	gcPtr = this;
 8001856:	4a06      	ldr	r2, [pc, #24]	; (8001870 <_ZN14GenericChannelC1Emmm+0x90>)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	6013      	str	r3, [r2, #0]
}
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	4618      	mov	r0, r3
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	08009e38 	.word	0x08009e38
 800186c:	ba4dac57 	.word	0xba4dac57
 8001870:	20000818 	.word	0x20000818

08001874 <_ZNK14GenericChannel9getNodeIdEv>:

uint32_t GenericChannel::getNodeId() const
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
	return nodeId;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
}
 8001882:	4618      	mov	r0, r3
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <_ZN14GenericChannel4initEv>:

int GenericChannel::init()
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b08a      	sub	sp, #40	; 0x28
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
	for (AbstractModule *module : modules)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3390      	adds	r3, #144	; 0x90
 800189a:	61fb      	str	r3, [r7, #28]
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	3320      	adds	r3, #32
 80018a4:	61bb      	str	r3, [r7, #24]
 80018a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d01a      	beq.n	80018e4 <_ZN14GenericChannel4initEv+0x56>
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	617b      	str	r3, [r7, #20]
	{
		if (module == nullptr)
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00f      	beq.n	80018da <_ZN14GenericChannel4initEv+0x4c>
			continue;
		if (module->init() != 0)
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6978      	ldr	r0, [r7, #20]
 80018c2:	4798      	blx	r3
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	bf14      	ite	ne
 80018ca:	2301      	movne	r3, #1
 80018cc:	2300      	moveq	r3, #0
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d003      	beq.n	80018dc <_ZN14GenericChannel4initEv+0x4e>
			return -1;
 80018d4:	f04f 33ff 	mov.w	r3, #4294967295
 80018d8:	e02d      	b.n	8001936 <_ZN14GenericChannel4initEv+0xa8>
			continue;
 80018da:	bf00      	nop
	for (AbstractModule *module : modules)
 80018dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018de:	3304      	adds	r3, #4
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24
 80018e2:	e7e0      	b.n	80018a6 <_ZN14GenericChannel4initEv+0x18>
	}

	for (AbstractChannel *channel : channels)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3310      	adds	r3, #16
 80018e8:	613b      	str	r3, [r7, #16]
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	623b      	str	r3, [r7, #32]
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	3380      	adds	r3, #128	; 0x80
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	6a3a      	ldr	r2, [r7, #32]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d01b      	beq.n	8001934 <_ZN14GenericChannel4initEv+0xa6>
 80018fc:	6a3b      	ldr	r3, [r7, #32]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	60bb      	str	r3, [r7, #8]
	{
		if (channel == nullptr)
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d010      	beq.n	800192a <_ZN14GenericChannel4initEv+0x9c>
			continue;
		if (channel->init() != 0)
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	3308      	adds	r3, #8
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	68b8      	ldr	r0, [r7, #8]
 8001912:	4798      	blx	r3
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	bf14      	ite	ne
 800191a:	2301      	movne	r3, #1
 800191c:	2300      	moveq	r3, #0
 800191e:	b2db      	uxtb	r3, r3
 8001920:	2b00      	cmp	r3, #0
 8001922:	d003      	beq.n	800192c <_ZN14GenericChannel4initEv+0x9e>
		{
			return -1;
 8001924:	f04f 33ff 	mov.w	r3, #4294967295
 8001928:	e005      	b.n	8001936 <_ZN14GenericChannel4initEv+0xa8>
			continue;
 800192a:	bf00      	nop
	for (AbstractChannel *channel : channels)
 800192c:	6a3b      	ldr	r3, [r7, #32]
 800192e:	3304      	adds	r3, #4
 8001930:	623b      	str	r3, [r7, #32]
 8001932:	e7df      	b.n	80018f4 <_ZN14GenericChannel4initEv+0x66>
		}
	}

	return 0;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3728      	adds	r7, #40	; 0x28
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <_ZN14GenericChannel4execEv>:

int GenericChannel::exec()
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b08a      	sub	sp, #40	; 0x28
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
	for (AbstractModule *module : modules)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	3390      	adds	r3, #144	; 0x90
 800194a:	61fb      	str	r3, [r7, #28]
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	3320      	adds	r3, #32
 8001954:	61bb      	str	r3, [r7, #24]
 8001956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	429a      	cmp	r2, r3
 800195c:	d01b      	beq.n	8001996 <_ZN14GenericChannel4execEv+0x58>
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	617b      	str	r3, [r7, #20]
	{
		if (module == nullptr)
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d010      	beq.n	800198c <_ZN14GenericChannel4execEv+0x4e>
			continue;
		if (module->exec() != 0)
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	3308      	adds	r3, #8
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	6978      	ldr	r0, [r7, #20]
 8001974:	4798      	blx	r3
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	bf14      	ite	ne
 800197c:	2301      	movne	r3, #1
 800197e:	2300      	moveq	r3, #0
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <_ZN14GenericChannel4execEv+0x50>
			return -1;
 8001986:	f04f 33ff 	mov.w	r3, #4294967295
 800198a:	e02d      	b.n	80019e8 <_ZN14GenericChannel4execEv+0xaa>
			continue;
 800198c:	bf00      	nop
	for (AbstractModule *module : modules)
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	3304      	adds	r3, #4
 8001992:	627b      	str	r3, [r7, #36]	; 0x24
 8001994:	e7df      	b.n	8001956 <_ZN14GenericChannel4execEv+0x18>
	}

	for (AbstractChannel *channel : channels)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	3310      	adds	r3, #16
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	623b      	str	r3, [r7, #32]
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	3380      	adds	r3, #128	; 0x80
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	6a3a      	ldr	r2, [r7, #32]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d01b      	beq.n	80019e6 <_ZN14GenericChannel4execEv+0xa8>
 80019ae:	6a3b      	ldr	r3, [r7, #32]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	60bb      	str	r3, [r7, #8]
	{
		if (channel == nullptr)
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d010      	beq.n	80019dc <_ZN14GenericChannel4execEv+0x9e>
			continue;
		if (channel->exec() != 0)
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	3310      	adds	r3, #16
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	68b8      	ldr	r0, [r7, #8]
 80019c4:	4798      	blx	r3
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	bf14      	ite	ne
 80019cc:	2301      	movne	r3, #1
 80019ce:	2300      	moveq	r3, #0
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <_ZN14GenericChannel4execEv+0xa0>
			return -1;
 80019d6:	f04f 33ff 	mov.w	r3, #4294967295
 80019da:	e005      	b.n	80019e8 <_ZN14GenericChannel4execEv+0xaa>
			continue;
 80019dc:	bf00      	nop
	for (AbstractChannel *channel : channels)
 80019de:	6a3b      	ldr	r3, [r7, #32]
 80019e0:	3304      	adds	r3, #4
 80019e2:	623b      	str	r3, [r7, #32]
 80019e4:	e7df      	b.n	80019a6 <_ZN14GenericChannel4execEv+0x68>
	}
	return 0;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3728      	adds	r7, #40	; 0x28
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <_ZN14GenericChannel5resetEv>:

int GenericChannel::reset()
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	(void) flash.reset();
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	3304      	adds	r3, #4
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4610      	mov	r0, r2
 8001a0c:	4798      	blx	r3
	return 0;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <_ZN14GenericChannel14processMessageEhPhRh>:

int GenericChannel::processMessage(uint8_t commandId, uint8_t *returnData, uint8_t &n)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b088      	sub	sp, #32
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	607a      	str	r2, [r7, #4]
 8001a22:	603b      	str	r3, [r7, #0]
 8001a24:	460b      	mov	r3, r1
 8001a26:	72fb      	strb	r3, [r7, #11]
	switch (commandId)
 8001a28:	7afb      	ldrb	r3, [r7, #11]
 8001a2a:	2b12      	cmp	r3, #18
 8001a2c:	d86d      	bhi.n	8001b0a <_ZN14GenericChannel14processMessageEhPhRh+0xf2>
 8001a2e:	a201      	add	r2, pc, #4	; (adr r2, 8001a34 <_ZN14GenericChannel14processMessageEhPhRh+0x1c>)
 8001a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a34:	08001aa3 	.word	0x08001aa3
 8001a38:	08001b0b 	.word	0x08001b0b
 8001a3c:	08001b0b 	.word	0x08001b0b
 8001a40:	08001b0b 	.word	0x08001b0b
 8001a44:	08001b0b 	.word	0x08001b0b
 8001a48:	08001b0b 	.word	0x08001b0b
 8001a4c:	08001b0b 	.word	0x08001b0b
 8001a50:	08001b0b 	.word	0x08001b0b
 8001a54:	08001b0b 	.word	0x08001b0b
 8001a58:	08001b0b 	.word	0x08001b0b
 8001a5c:	08001a8f 	.word	0x08001a8f
 8001a60:	08001b0b 	.word	0x08001b0b
 8001a64:	08001a81 	.word	0x08001a81
 8001a68:	08001b0b 	.word	0x08001b0b
 8001a6c:	08001b0b 	.word	0x08001b0b
 8001a70:	08001b0b 	.word	0x08001b0b
 8001a74:	08001b0b 	.word	0x08001b0b
 8001a78:	08001b0b 	.word	0x08001b0b
 8001a7c:	08001aef 	.word	0x08001aef
	{
		case GENERIC_REQ_NODE_INFO:
			//LL_mDelay(100*this->nodeId);
			return this->getNodeInfo(returnData, n);
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	68f8      	ldr	r0, [r7, #12]
 8001a86:	f000 f9d2 	bl	8001e2e <_ZN14GenericChannel11getNodeInfoEPhRh>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	e045      	b.n	8001b1a <_ZN14GenericChannel14processMessageEhPhRh+0x102>
		case GENERIC_REQ_DATA:
			return this->getSensorData(returnData, n);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	3318      	adds	r3, #24
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	6879      	ldr	r1, [r7, #4]
 8001a9a:	68f8      	ldr	r0, [r7, #12]
 8001a9c:	4798      	blx	r3
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	e03b      	b.n	8001b1a <_ZN14GenericChannel14processMessageEhPhRh+0x102>
		case GENERIC_REQ_RESET_ALL_SETTINGS:
			(void) flash.configReset();
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f001 ffcb 	bl	8003a44 <_ZN12W25Qxx_Flash11configResetEv>
			for (AbstractChannel *channel : channels)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	3310      	adds	r3, #16
 8001ab2:	61bb      	str	r3, [r7, #24]
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	61fb      	str	r3, [r7, #28]
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	3380      	adds	r3, #128	; 0x80
 8001abc:	617b      	str	r3, [r7, #20]
 8001abe:	69fa      	ldr	r2, [r7, #28]
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d011      	beq.n	8001aea <_ZN14GenericChannel14processMessageEhPhRh+0xd2>
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	613b      	str	r3, [r7, #16]
			{
				if (channel == nullptr)
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d006      	beq.n	8001ae0 <_ZN14GenericChannel14processMessageEhPhRh+0xc8>
					continue;

				channel->reset(); // TODO implement good reset for every channel
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	330c      	adds	r3, #12
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6938      	ldr	r0, [r7, #16]
 8001adc:	4798      	blx	r3
 8001ade:	e000      	b.n	8001ae2 <_ZN14GenericChannel14processMessageEhPhRh+0xca>
					continue;
 8001ae0:	bf00      	nop
			for (AbstractChannel *channel : channels)
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	3304      	adds	r3, #4
 8001ae6:	61fb      	str	r3, [r7, #28]
 8001ae8:	e7e9      	b.n	8001abe <_ZN14GenericChannel14processMessageEhPhRh+0xa6>
			}
			return 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	e015      	b.n	8001b1a <_ZN14GenericChannel14processMessageEhPhRh+0x102>
		case GENERIC_REQ_FLASH_CLEAR:
			(void) flash.setState(FlashState::CLEARING);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001af4:	2101      	movs	r1, #1
 8001af6:	4618      	mov	r0, r3
 8001af8:	f001 fc7a 	bl	80033f0 <_ZN12W25Qxx_Flash8setStateE10FlashState>
			return this->getFlashClearInfo(returnData, n);
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	68f8      	ldr	r0, [r7, #12]
 8001b02:	f000 f958 	bl	8001db6 <_ZN14GenericChannel17getFlashClearInfoEPhRh>
 8001b06:	4603      	mov	r3, r0
 8001b08:	e007      	b.n	8001b1a <_ZN14GenericChannel14processMessageEhPhRh+0x102>
		default:
			return AbstractChannel::processMessage(commandId, returnData, n);
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	7af9      	ldrb	r1, [r7, #11]
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	f7ff fc39 	bl	8001388 <_ZN15AbstractChannel14processMessageEhPhRh>
 8001b16:	4603      	mov	r3, r0
 8001b18:	bf00      	nop
	}
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3720      	adds	r7, #32
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop

08001b24 <_ZN14GenericChannel14processMessageEhPhRhh>:

int GenericChannel::processMessage(uint8_t commandId, uint8_t *returnData, uint8_t &n, uint8_t channelId)
{
 8001b24:	b590      	push	{r4, r7, lr}
 8001b26:	b089      	sub	sp, #36	; 0x24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	607a      	str	r2, [r7, #4]
 8001b2e:	603b      	str	r3, [r7, #0]
 8001b30:	460b      	mov	r3, r1
 8001b32:	72fb      	strb	r3, [r7, #11]
	for (AbstractChannel *channel : channels)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	3310      	adds	r3, #16
 8001b38:	61bb      	str	r3, [r7, #24]
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	61fb      	str	r3, [r7, #28]
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	3380      	adds	r3, #128	; 0x80
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	69fa      	ldr	r2, [r7, #28]
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d029      	beq.n	8001ba0 <_ZN14GenericChannel14processMessageEhPhRhh+0x7c>
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	613b      	str	r3, [r7, #16]
	{
		if (channel->IsChannelId(channelId))
 8001b52:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001b56:	4619      	mov	r1, r3
 8001b58:	6938      	ldr	r0, [r7, #16]
 8001b5a:	f7ff fbd3 	bl	8001304 <_ZNK15AbstractChannel11IsChannelIdEh>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d019      	beq.n	8001b98 <_ZN14GenericChannel14processMessageEhPhRhh+0x74>
		{
			if (channel == nullptr)
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d015      	beq.n	8001b96 <_ZN14GenericChannel14processMessageEhPhRhh+0x72>
				continue;

			if (channel->processMessage(commandId, returnData, n) != 0)
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	3314      	adds	r3, #20
 8001b70:	681c      	ldr	r4, [r3, #0]
 8001b72:	7af9      	ldrb	r1, [r7, #11]
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	6938      	ldr	r0, [r7, #16]
 8001b7a:	47a0      	blx	r4
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	bf14      	ite	ne
 8001b82:	2301      	movne	r3, #1
 8001b84:	2300      	moveq	r3, #0
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d002      	beq.n	8001b92 <_ZN14GenericChannel14processMessageEhPhRhh+0x6e>
				return -1;
 8001b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b90:	e008      	b.n	8001ba4 <_ZN14GenericChannel14processMessageEhPhRhh+0x80>
			return 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	e006      	b.n	8001ba4 <_ZN14GenericChannel14processMessageEhPhRhh+0x80>
				continue;
 8001b96:	bf00      	nop
	for (AbstractChannel *channel : channels)
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	3304      	adds	r3, #4
 8001b9c:	61fb      	str	r3, [r7, #28]
 8001b9e:	e7d1      	b.n	8001b44 <_ZN14GenericChannel14processMessageEhPhRhh+0x20>
		}

	}
	return -1;
 8001ba0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3724      	adds	r7, #36	; 0x24
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd90      	pop	{r4, r7, pc}

08001bac <_ZN14GenericChannel11setVariableEhl>:

int GenericChannel::setVariable(uint8_t variableId, int32_t data)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	607a      	str	r2, [r7, #4]
 8001bb8:	72fb      	strb	r3, [r7, #11]
	switch (variableId)
 8001bba:	7afb      	ldrb	r3, [r7, #11]
 8001bbc:	2b08      	cmp	r3, #8
 8001bbe:	d029      	beq.n	8001c14 <_ZN14GenericChannel11setVariableEhl+0x68>
 8001bc0:	2b08      	cmp	r3, #8
 8001bc2:	dc33      	bgt.n	8001c2c <_ZN14GenericChannel11setVariableEhl+0x80>
 8001bc4:	2b05      	cmp	r3, #5
 8001bc6:	d002      	beq.n	8001bce <_ZN14GenericChannel11setVariableEhl+0x22>
 8001bc8:	2b07      	cmp	r3, #7
 8001bca:	d008      	beq.n	8001bde <_ZN14GenericChannel11setVariableEhl+0x32>
 8001bcc:	e02e      	b.n	8001c2c <_ZN14GenericChannel11setVariableEhl+0x80>
	{
		case GENERIC_REFRESH_DIVIDER:
			refreshDivider = data;
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	605a      	str	r2, [r3, #4]
			refreshCounter = 0;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]
			return 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	e028      	b.n	8001c30 <_ZN14GenericChannel11setVariableEhl+0x84>
		case GENERIC_LOGGING_ENABLED:
			loggingEnabled = data;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
			if (loggingEnabled == 0)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d107      	bne.n	8001c02 <_ZN14GenericChannel11setVariableEhl+0x56>
			{
				flash.setState(FlashState::IDLE);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f001 fbf8 	bl	80033f0 <_ZN12W25Qxx_Flash8setStateE10FlashState>
 8001c00:	e006      	b.n	8001c10 <_ZN14GenericChannel11setVariableEhl+0x64>
			}
			else
			{
				flash.setState(FlashState::LOGGING);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001c08:	2103      	movs	r1, #3
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f001 fbf0 	bl	80033f0 <_ZN12W25Qxx_Flash8setStateE10FlashState>
			}
			return 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	e00d      	b.n	8001c30 <_ZN14GenericChannel11setVariableEhl+0x84>
		case GENERIC_LORA_ENABLED:
			if (data == 0)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d103      	bne.n	8001c22 <_ZN14GenericChannel11setVariableEhl+0x76>
			{
				setLoraActive(false);
 8001c1a:	2000      	movs	r0, #0
 8001c1c:	f000 f9a4 	bl	8001f68 <_ZN14GenericChannel13setLoraActiveEb>
 8001c20:	e002      	b.n	8001c28 <_ZN14GenericChannel11setVariableEhl+0x7c>
			}
			else
			{
				setLoraActive(true);
 8001c22:	2001      	movs	r0, #1
 8001c24:	f000 f9a0 	bl	8001f68 <_ZN14GenericChannel13setLoraActiveEb>
			}
			return 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	e001      	b.n	8001c30 <_ZN14GenericChannel11setVariableEhl+0x84>
		default:
			return -1;
 8001c2c:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <_ZNK14GenericChannel11getVariableEhRl>:

int GenericChannel::getVariable(uint8_t variableId, int32_t &data) const
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	460b      	mov	r3, r1
 8001c42:	607a      	str	r2, [r7, #4]
 8001c44:	72fb      	strb	r3, [r7, #11]
	switch (variableId)
 8001c46:	7afb      	ldrb	r3, [r7, #11]
 8001c48:	2b08      	cmp	r3, #8
 8001c4a:	d015      	beq.n	8001c78 <_ZNK14GenericChannel11getVariableEhRl+0x40>
 8001c4c:	2b08      	cmp	r3, #8
 8001c4e:	dc20      	bgt.n	8001c92 <_ZNK14GenericChannel11getVariableEhRl+0x5a>
 8001c50:	2b05      	cmp	r3, #5
 8001c52:	d002      	beq.n	8001c5a <_ZNK14GenericChannel11getVariableEhRl+0x22>
 8001c54:	2b07      	cmp	r3, #7
 8001c56:	d007      	beq.n	8001c68 <_ZNK14GenericChannel11getVariableEhRl+0x30>
 8001c58:	e01b      	b.n	8001c92 <_ZNK14GenericChannel11getVariableEhRl+0x5a>
	{
		case GENERIC_REFRESH_DIVIDER:
			data = (int32_t) refreshDivider;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	601a      	str	r2, [r3, #0]
			return 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	e016      	b.n	8001c96 <_ZNK14GenericChannel11getVariableEhRl+0x5e>
		case GENERIC_LOGGING_ENABLED:
			data = (int32_t) loggingEnabled;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8001c6e:	461a      	mov	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	601a      	str	r2, [r3, #0]
			return 0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	e00e      	b.n	8001c96 <_ZNK14GenericChannel11getVariableEhRl+0x5e>
		case GENERIC_LORA_ENABLED:
			if (loraActive)
 8001c78:	4b0a      	ldr	r3, [pc, #40]	; (8001ca4 <_ZNK14GenericChannel11getVariableEhRl+0x6c>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <_ZNK14GenericChannel11getVariableEhRl+0x50>
				data = 1;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	e002      	b.n	8001c8e <_ZNK14GenericChannel11getVariableEhRl+0x56>
			else
				data = 0;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
			return 0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	e001      	b.n	8001c96 <_ZNK14GenericChannel11getVariableEhRl+0x5e>
		default:
			return -1;
 8001c92:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3714      	adds	r7, #20
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	2000081c 	.word	0x2000081c

08001ca8 <_ZN14GenericChannel13getSensorDataEPhRh>:
	n = sizeof(FlashStatusMsg_t);
	return 0;
}

int GenericChannel::getSensorData(uint8_t *data, uint8_t &n)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08a      	sub	sp, #40	; 0x28
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
	if (!IsRefreshed())
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff fb38 	bl	800132c <_ZN15AbstractChannel11IsRefreshedEv>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	f083 0301 	eor.w	r3, r3, #1
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d002      	beq.n	8001cce <_ZN14GenericChannel13getSensorDataEPhRh+0x26>
		return -1;
 8001cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8001ccc:	e06f      	b.n	8001dae <_ZN14GenericChannel13getSensorDataEPhRh+0x106>

	DataMsg_t *dataMsg = (DataMsg_t*) data;
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	623b      	str	r3, [r7, #32]
	dataMsg->channel_mask = 0;
 8001cd2:	6a3b      	ldr	r3, [r7, #32]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	701a      	strb	r2, [r3, #0]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	705a      	strb	r2, [r3, #1]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	709a      	strb	r2, [r3, #2]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	70da      	strb	r2, [r3, #3]
	for (AbstractChannel *channel : channels)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	3310      	adds	r3, #16
 8001ce8:	61fb      	str	r3, [r7, #28]
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	3380      	adds	r3, #128	; 0x80
 8001cf2:	61bb      	str	r3, [r7, #24]
 8001cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d03a      	beq.n	8001d72 <_ZN14GenericChannel13getSensorDataEPhRh+0xca>
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	617b      	str	r3, [r7, #20]
	{
		if (channel == nullptr || !channel->IsRefreshed())
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d008      	beq.n	8001d1a <_ZN14GenericChannel13getSensorDataEPhRh+0x72>
 8001d08:	6978      	ldr	r0, [r7, #20]
 8001d0a:	f7ff fb0f 	bl	800132c <_ZN15AbstractChannel11IsRefreshedEv>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	f083 0301 	eor.w	r3, r3, #1
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <_ZN14GenericChannel13getSensorDataEPhRh+0x76>
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e000      	b.n	8001d20 <_ZN14GenericChannel13getSensorDataEPhRh+0x78>
 8001d1e:	2300      	movs	r3, #0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d11f      	bne.n	8001d64 <_ZN14GenericChannel13getSensorDataEPhRh+0xbc>
			continue;
		if (channel->getSensorData(&dataMsg->uint8[0], n) == -1)
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	3318      	adds	r3, #24
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6a3a      	ldr	r2, [r7, #32]
 8001d2e:	1d11      	adds	r1, r2, #4
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	6978      	ldr	r0, [r7, #20]
 8001d34:	4798      	blx	r3
 8001d36:	4603      	mov	r3, r0
 8001d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d3c:	bf0c      	ite	eq
 8001d3e:	2301      	moveq	r3, #1
 8001d40:	2300      	movne	r3, #0
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d10f      	bne.n	8001d68 <_ZN14GenericChannel13getSensorDataEPhRh+0xc0>
			continue;
		dataMsg->channel_mask |= 1 << channel->getChannelId();
 8001d48:	6978      	ldr	r0, [r7, #20]
 8001d4a:	f7ff facf 	bl	80012ec <_ZNK15AbstractChannel12getChannelIdEv>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	461a      	mov	r2, r3
 8001d52:	2301      	movs	r3, #1
 8001d54:	fa03 f202 	lsl.w	r2, r3, r2
 8001d58:	6a3b      	ldr	r3, [r7, #32]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	431a      	orrs	r2, r3
 8001d5e:	6a3b      	ldr	r3, [r7, #32]
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	e002      	b.n	8001d6a <_ZN14GenericChannel13getSensorDataEPhRh+0xc2>
			continue;
 8001d64:	bf00      	nop
 8001d66:	e000      	b.n	8001d6a <_ZN14GenericChannel13getSensorDataEPhRh+0xc2>
			continue;
 8001d68:	bf00      	nop
	for (AbstractChannel *channel : channels)
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6c:	3304      	adds	r3, #4
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d70:	e7c0      	b.n	8001cf4 <_ZN14GenericChannel13getSensorDataEPhRh+0x4c>
	}
	n += 1 * sizeof(uint32_t);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	3304      	adds	r3, #4
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	701a      	strb	r2, [r3, #0]

	if (loggingEnabled && !flash.lock)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d011      	beq.n	8001dac <_ZN14GenericChannel13getSensorDataEPhRh+0x104>
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001d8e:	791b      	ldrb	r3, [r3, #4]
 8001d90:	f083 0301 	eor.w	r3, r3, #1
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d008      	beq.n	8001dac <_ZN14GenericChannel13getSensorDataEPhRh+0x104>
		flash.addLog(data, n);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	461a      	mov	r2, r3
 8001da6:	68b9      	ldr	r1, [r7, #8]
 8001da8:	f001 fbb5 	bl	8003516 <_ZN12W25Qxx_Flash6addLogEPhh>
	return 0;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3728      	adds	r7, #40	; 0x28
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <_ZN14GenericChannel17getFlashClearInfoEPhRh>:

int GenericChannel::getFlashClearInfo(uint8_t *data, uint8_t &n)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b086      	sub	sp, #24
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	60f8      	str	r0, [r7, #12]
 8001dbe:	60b9      	str	r1, [r7, #8]
 8001dc0:	607a      	str	r2, [r7, #4]

	FlashStatusMsg_t *info = (FlashStatusMsg_t*) data;
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	617b      	str	r3, [r7, #20]

	FlashState flashState = flash.getState();
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f001 fb1e 	bl	800340e <_ZN12W25Qxx_Flash8getStateEv>
 8001dd2:	6138      	str	r0, [r7, #16]
	if (flashState == FlashState::IDLE || flashState == FlashState::CLEARING)
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d002      	beq.n	8001de0 <_ZN14GenericChannel17getFlashClearInfoEPhRh+0x2a>
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d103      	bne.n	8001de8 <_ZN14GenericChannel17getFlashClearInfoEPhRh+0x32>
	{ //TODO actually check if clearing has initiated
		info->status = INITIATED;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	2200      	movs	r2, #0
 8001de4:	701a      	strb	r2, [r3, #0]
 8001de6:	e009      	b.n	8001dfc <_ZN14GenericChannel17getFlashClearInfoEPhRh+0x46>
	}
	else if (flashState == FlashState::READY)
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d103      	bne.n	8001df6 <_ZN14GenericChannel17getFlashClearInfoEPhRh+0x40>
	{
		info->status = COMPLETED;
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	2201      	movs	r2, #1
 8001df2:	701a      	strb	r2, [r3, #0]
 8001df4:	e002      	b.n	8001dfc <_ZN14GenericChannel17getFlashClearInfoEPhRh+0x46>
	}
	else
	{
		info->status = INITIATED;
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	701a      	strb	r2, [r3, #0]
	}

	n = sizeof(FlashStatusMsg_t);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	701a      	strb	r2, [r3, #0]
	return 0;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <_ZN14GenericChannel22getControlInputChannelEh>:

AbstractChannel* GenericChannel::getControlInputChannel(uint8_t id)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	460b      	mov	r3, r1
 8001e16:	70fb      	strb	r3, [r7, #3]
	return channels[id];
 8001e18:	78fa      	ldrb	r2, [r7, #3]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3204      	adds	r2, #4
 8001e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <_ZN14GenericChannel11getNodeInfoEPhRh>:


int GenericChannel::getNodeInfo(uint8_t *data, uint8_t &n)
{
 8001e2e:	b590      	push	{r4, r7, lr}
 8001e30:	b08d      	sub	sp, #52	; 0x34
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	60f8      	str	r0, [r7, #12]
 8001e36:	60b9      	str	r1, [r7, #8]
 8001e38:	607a      	str	r2, [r7, #4]
	NodeInfoMsg_t *info = (NodeInfoMsg_t*) data;
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	623b      	str	r3, [r7, #32]

	info->firmware_version = firmwareVersion;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001e44:	6a3b      	ldr	r3, [r7, #32]
 8001e46:	601a      	str	r2, [r3, #0]

	info->channel_mask = 0x00000000;
 8001e48:	6a3b      	ldr	r3, [r7, #32]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	711a      	strb	r2, [r3, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	715a      	strb	r2, [r3, #5]
 8001e52:	2200      	movs	r2, #0
 8001e54:	719a      	strb	r2, [r3, #6]
 8001e56:	2200      	movs	r2, #0
 8001e58:	71da      	strb	r2, [r3, #7]
	uint32_t length = 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t i = 0;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	for (AbstractChannel *channel : channels)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	3310      	adds	r3, #16
 8001e68:	61fb      	str	r3, [r7, #28]
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	3380      	adds	r3, #128	; 0x80
 8001e72:	61bb      	str	r3, [r7, #24]
 8001e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d02a      	beq.n	8001ed2 <_ZN14GenericChannel11getNodeInfoEPhRh+0xa4>
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	617b      	str	r3, [r7, #20]
	{
		if (channel == nullptr)
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d01f      	beq.n	8001ec8 <_ZN14GenericChannel11getNodeInfoEPhRh+0x9a>
			continue;

		info->channel_type[i] = channel->getChannelType();
 8001e88:	f897 402b 	ldrb.w	r4, [r7, #43]	; 0x2b
 8001e8c:	6978      	ldr	r0, [r7, #20]
 8001e8e:	f7ff fa15 	bl	80012bc <_ZNK15AbstractChannel14getChannelTypeEv>
 8001e92:	4603      	mov	r3, r0
 8001e94:	461a      	mov	r2, r3
 8001e96:	6a3b      	ldr	r3, [r7, #32]
 8001e98:	4423      	add	r3, r4
 8001e9a:	721a      	strb	r2, [r3, #8]
		info->channel_mask |= 1 << channel->getChannelId();
 8001e9c:	6978      	ldr	r0, [r7, #20]
 8001e9e:	f7ff fa25 	bl	80012ec <_ZNK15AbstractChannel12getChannelIdEv>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	fa03 f202 	lsl.w	r2, r3, r2
 8001eac:	6a3b      	ldr	r3, [r7, #32]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	6a3b      	ldr	r3, [r7, #32]
 8001eb4:	605a      	str	r2, [r3, #4]
		length++;
 8001eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb8:	3301      	adds	r3, #1
 8001eba:	62fb      	str	r3, [r7, #44]	; 0x2c
		i++;
 8001ebc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001ec6:	e000      	b.n	8001eca <_ZN14GenericChannel11getNodeInfoEPhRh+0x9c>
			continue;
 8001ec8:	bf00      	nop
	for (AbstractChannel *channel : channels)
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	3304      	adds	r3, #4
 8001ece:	627b      	str	r3, [r7, #36]	; 0x24
 8001ed0:	e7d0      	b.n	8001e74 <_ZN14GenericChannel11getNodeInfoEPhRh+0x46>
	}
	n = length + 2 * sizeof(uint32_t);
 8001ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	3308      	adds	r3, #8
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	701a      	strb	r2, [r3, #0]
	return 0;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3734      	adds	r7, #52	; 0x34
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd90      	pop	{r4, r7, pc}

08001ee8 <_ZN14GenericChannel15registerChannelEP15AbstractChannel>:

void GenericChannel::registerChannel(AbstractChannel *channel)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
	if (channel->getChannelId() < MAX_CHANNELS)
 8001ef2:	6838      	ldr	r0, [r7, #0]
 8001ef4:	f7ff f9fa 	bl	80012ec <_ZNK15AbstractChannel12getChannelIdEv>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b1f      	cmp	r3, #31
 8001efc:	bf94      	ite	ls
 8001efe:	2301      	movls	r3, #1
 8001f00:	2300      	movhi	r3, #0
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d009      	beq.n	8001f1c <_ZN14GenericChannel15registerChannelEP15AbstractChannel+0x34>
		channels[channel->getChannelId()] = channel;
 8001f08:	6838      	ldr	r0, [r7, #0]
 8001f0a:	f7ff f9ef 	bl	80012ec <_ZNK15AbstractChannel12getChannelIdEv>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	461a      	mov	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	3204      	adds	r2, #4
 8001f16:	6839      	ldr	r1, [r7, #0]
 8001f18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001f1c:	bf00      	nop
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <_ZN14GenericChannel14registerModuleEP14AbstractModule>:
		registerChannel(channels[i]);
	}
}

void GenericChannel::registerModule(AbstractModule *module)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
	if (moduleIndex < MAX_MODULES)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 8001f34:	2b07      	cmp	r3, #7
 8001f36:	d810      	bhi.n	8001f5a <_ZN14GenericChannel14registerModuleEP14AbstractModule+0x36>
	{
		modules[moduleIndex] = module;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 8001f3e:	461a      	mov	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3224      	adds	r2, #36	; 0x24
 8001f44:	6839      	ldr	r1, [r7, #0]
 8001f46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		moduleIndex++;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 8001f50:	3301      	adds	r3, #1
 8001f52:	b2da      	uxtb	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
	}
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
	...

08001f68 <_ZN14GenericChannel13setLoraActiveEb>:
	{
		printLog();
	}
}

void GenericChannel::setLoraActive(bool enable) {
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	71fb      	strb	r3, [r7, #7]
	loraActive = enable;
 8001f72:	4a04      	ldr	r2, [pc, #16]	; (8001f84 <_ZN14GenericChannel13setLoraActiveEb+0x1c>)
 8001f74:	79fb      	ldrb	r3, [r7, #7]
 8001f76:	7013      	strb	r3, [r2, #0]
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	2000081c 	.word	0x2000081c

08001f88 <_ZN14GenericChannel8receptorEmPhm>:

	(void) STRHAL_CAN_Send(STRHAL_FDCAN1, msgId.uint32, msgData.uint8, CAN_MSG_LENGTH(ret_n));
}

void GenericChannel::receptor(uint32_t id, uint8_t *data, uint32_t n)
{
 8001f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f8a:	b09b      	sub	sp, #108	; 0x6c
 8001f8c:	af02      	add	r7, sp, #8
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
	Can_MessageId_t msgId =
 8001f94:	2300      	movs	r3, #0
 8001f96:	65bb      	str	r3, [r7, #88]	; 0x58
	{ 0 };
	Can_MessageData_t msgData =
 8001f98:	f107 0314 	add.w	r3, r7, #20
 8001f9c:	2242      	movs	r2, #66	; 0x42
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f007 fd83 	bl	8009aac <memset>
	{ 0 };

	msgId.uint32 = id;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	65bb      	str	r3, [r7, #88]	; 0x58
	memcpy(msgData.uint8, data, 64); //TODO only copy n bytes
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	461c      	mov	r4, r3
 8001fae:	f107 0614 	add.w	r6, r7, #20
 8001fb2:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 8001fb6:	4635      	mov	r5, r6
 8001fb8:	4623      	mov	r3, r4
 8001fba:	6818      	ldr	r0, [r3, #0]
 8001fbc:	6859      	ldr	r1, [r3, #4]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fc4:	3410      	adds	r4, #16
 8001fc6:	3610      	adds	r6, #16
 8001fc8:	4564      	cmp	r4, ip
 8001fca:	d1f4      	bne.n	8001fb6 <_ZN14GenericChannel8receptorEmPhm+0x2e>
	uint8_t commandId = msgData.bit.cmd_id;
 8001fcc:	7d7b      	ldrb	r3, [r7, #21]
 8001fce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t channelId = msgData.bit.info.channel_id;
 8001fd2:	7d3b      	ldrb	r3, [r7, #20]
 8001fd4:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ret_n = 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	74fb      	strb	r3, [r7, #19]

	if (channelId == GENERIC_CHANNEL_ID)
 8001fe2:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001fe6:	2b3f      	cmp	r3, #63	; 0x3f
 8001fe8:	d118      	bne.n	800201c <_ZN14GenericChannel8receptorEmPhm+0x94>
	{
		if (gcPtr->processMessage(commandId, msgData.bit.data.uint8, ret_n) != 0)
 8001fea:	4b32      	ldr	r3, [pc, #200]	; (80020b4 <_ZN14GenericChannel8receptorEmPhm+0x12c>)
 8001fec:	6818      	ldr	r0, [r3, #0]
 8001fee:	4b31      	ldr	r3, [pc, #196]	; (80020b4 <_ZN14GenericChannel8receptorEmPhm+0x12c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	3314      	adds	r3, #20
 8001ff6:	681c      	ldr	r4, [r3, #0]
 8001ff8:	f107 0513 	add.w	r5, r7, #19
 8001ffc:	f107 0314 	add.w	r3, r7, #20
 8002000:	1c9a      	adds	r2, r3, #2
 8002002:	f897 105f 	ldrb.w	r1, [r7, #95]	; 0x5f
 8002006:	462b      	mov	r3, r5
 8002008:	47a0      	blx	r4
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	bf14      	ite	ne
 8002010:	2301      	movne	r3, #1
 8002012:	2300      	moveq	r3, #0
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d017      	beq.n	800204a <_ZN14GenericChannel8receptorEmPhm+0xc2>
			return;
 800201a:	e047      	b.n	80020ac <_ZN14GenericChannel8receptorEmPhm+0x124>
	}
	else
	{
		if (gcPtr->processMessage(commandId, msgData.bit.data.uint8, ret_n, channelId) != 0)
 800201c:	4b25      	ldr	r3, [pc, #148]	; (80020b4 <_ZN14GenericChannel8receptorEmPhm+0x12c>)
 800201e:	6818      	ldr	r0, [r3, #0]
 8002020:	f107 0413 	add.w	r4, r7, #19
 8002024:	f107 0314 	add.w	r3, r7, #20
 8002028:	1c9a      	adds	r2, r3, #2
 800202a:	f897 105f 	ldrb.w	r1, [r7, #95]	; 0x5f
 800202e:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	4623      	mov	r3, r4
 8002036:	f7ff fd75 	bl	8001b24 <_ZN14GenericChannel14processMessageEhPhRhh>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	bf14      	ite	ne
 8002040:	2301      	movne	r3, #1
 8002042:	2300      	moveq	r3, #0
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d12f      	bne.n	80020aa <_ZN14GenericChannel8receptorEmPhm+0x122>
			return;
	}

	msgId.info.direction = NODE2MASTER_DIRECTION;
 800204a:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800204e:	f043 0301 	orr.w	r3, r3, #1
 8002052:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	msgId.info.node_id = gcPtr->getNodeId();
 8002056:	4b17      	ldr	r3, [pc, #92]	; (80020b4 <_ZN14GenericChannel8receptorEmPhm+0x12c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff fc0a 	bl	8001874 <_ZNK14GenericChannel9getNodeIdEv>
 8002060:	4603      	mov	r3, r0
 8002062:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002066:	b2da      	uxtb	r2, r3
 8002068:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800206c:	f362 0346 	bfi	r3, r2, #1, #6
 8002070:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	msgId.info.special_cmd = STANDARD_SPECIAL_CMD;
 8002074:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002078:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800207c:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	msgId.info.priority = STANDARD_PRIORITY;
 8002080:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8002084:	2202      	movs	r2, #2
 8002086:	f362 0342 	bfi	r3, r2, #1, #2
 800208a:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	msgData.bit.cmd_id = commandId + 1;
 800208e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002092:	3301      	adds	r3, #1
 8002094:	b2db      	uxtb	r3, r3
 8002096:	757b      	strb	r3, [r7, #21]
	memcpy(&msgBuf[2], msgData.uint8, CAN_MSG_LENGTH(ret_n));
	msgBuf[CAN_MSG_LENGTH(ret_n) + 2] = 0x0A;
	STRHAL_UART_Debug_Write_DMA((char *) msgBuf, CAN_MSG_LENGTH(ret_n) + 3);
#endif

	(void) STRHAL_CAN_Send(STRHAL_FDCAN1, msgId.uint32, msgData.uint8, CAN_MSG_LENGTH(ret_n));
 8002098:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800209a:	7cfb      	ldrb	r3, [r7, #19]
 800209c:	3302      	adds	r3, #2
 800209e:	f107 0214 	add.w	r2, r7, #20
 80020a2:	2000      	movs	r0, #0
 80020a4:	f005 f882 	bl	80071ac <STRHAL_CAN_Send>
 80020a8:	e000      	b.n	80020ac <_ZN14GenericChannel8receptorEmPhm+0x124>
			return;
 80020aa:	bf00      	nop
}
 80020ac:	3764      	adds	r7, #100	; 0x64
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20000818 	.word	0x20000818

080020b8 <_ZN14GenericChannel12heartbeatCanEv>:

void GenericChannel::heartbeatCan()
{
 80020b8:	b590      	push	{r4, r7, lr}
 80020ba:	b095      	sub	sp, #84	; 0x54
 80020bc:	af00      	add	r7, sp, #0
	Can_MessageId_t msgId =
 80020be:	2300      	movs	r3, #0
 80020c0:	64fb      	str	r3, [r7, #76]	; 0x4c
	{ 0 };
	msgId.info.special_cmd = STANDARD_SPECIAL_CMD;
 80020c2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80020c6:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80020ca:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	msgId.info.direction = NODE2MASTER_DIRECTION;
 80020ce:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80020d2:	f043 0301 	orr.w	r3, r3, #1
 80020d6:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	msgId.info.node_id = gcPtr->getNodeId();
 80020da:	4b2d      	ldr	r3, [pc, #180]	; (8002190 <_ZN14GenericChannel12heartbeatCanEv+0xd8>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff fbc8 	bl	8001874 <_ZNK14GenericChannel9getNodeIdEv>
 80020e4:	4603      	mov	r3, r0
 80020e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80020f0:	f362 0346 	bfi	r3, r2, #1, #6
 80020f4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	msgId.info.priority = STANDARD_PRIORITY;
 80020f8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80020fc:	2202      	movs	r2, #2
 80020fe:	f362 0342 	bfi	r3, r2, #1, #2
 8002102:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	Can_MessageData_t msgData =
 8002106:	f107 0308 	add.w	r3, r7, #8
 800210a:	2242      	movs	r2, #66	; 0x42
 800210c:	2100      	movs	r1, #0
 800210e:	4618      	mov	r0, r3
 8002110:	f007 fccc 	bl	8009aac <memset>
	{ 0 };
	msgData.bit.cmd_id = GENERIC_RES_DATA;
 8002114:	230b      	movs	r3, #11
 8002116:	727b      	strb	r3, [r7, #9]
	msgData.bit.info.channel_id = GENERIC_CHANNEL_ID;
 8002118:	7a3b      	ldrb	r3, [r7, #8]
 800211a:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 800211e:	723b      	strb	r3, [r7, #8]
	msgData.bit.info.buffer = DIRECT_BUFFER;
 8002120:	7a3b      	ldrb	r3, [r7, #8]
 8002122:	f36f 1387 	bfc	r3, #6, #2
 8002126:	723b      	strb	r3, [r7, #8]

	uint8_t n = 0;
 8002128:	2300      	movs	r3, #0
 800212a:	71fb      	strb	r3, [r7, #7]
	if (gcPtr->getSensorData(&msgData.bit.data.uint8[0], n) != 0)
 800212c:	4b18      	ldr	r3, [pc, #96]	; (8002190 <_ZN14GenericChannel12heartbeatCanEv+0xd8>)
 800212e:	6818      	ldr	r0, [r3, #0]
 8002130:	4b17      	ldr	r3, [pc, #92]	; (8002190 <_ZN14GenericChannel12heartbeatCanEv+0xd8>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	3318      	adds	r3, #24
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	1dfc      	adds	r4, r7, #7
 800213c:	f107 0208 	add.w	r2, r7, #8
 8002140:	1c91      	adds	r1, r2, #2
 8002142:	4622      	mov	r2, r4
 8002144:	4798      	blx	r3
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	bf14      	ite	ne
 800214c:	2301      	movne	r3, #1
 800214e:	2300      	moveq	r3, #0
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d118      	bne.n	8002188 <_ZN14GenericChannel12heartbeatCanEv+0xd0>
	{ // Sensor Data collection failed, or Refresh Divider not yet met
		return;
	}

	if (loraActive)
 8002156:	4b0f      	ldr	r3, [pc, #60]	; (8002194 <_ZN14GenericChannel12heartbeatCanEv+0xdc>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00c      	beq.n	8002178 <_ZN14GenericChannel12heartbeatCanEv+0xc0>
	{
		Radio::msgArray[Radio::RCU_START_ADDR] = 1;
 800215e:	4b0e      	ldr	r3, [pc, #56]	; (8002198 <_ZN14GenericChannel12heartbeatCanEv+0xe0>)
 8002160:	2201      	movs	r2, #1
 8002162:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		memcpy(&Radio::msgArray[Radio::RCU_START_ADDR + 1], msgData.bit.data.uint8, n);
 8002166:	79fb      	ldrb	r3, [r7, #7]
 8002168:	461a      	mov	r2, r3
 800216a:	f107 0308 	add.w	r3, r7, #8
 800216e:	3302      	adds	r3, #2
 8002170:	4619      	mov	r1, r3
 8002172:	480a      	ldr	r0, [pc, #40]	; (800219c <_ZN14GenericChannel12heartbeatCanEv+0xe4>)
 8002174:	f007 fc8c 	bl	8009a90 <memcpy>
	memcpy(&msgBuf[2], msgData.uint8, CAN_MSG_LENGTH(n));
	msgBuf[CAN_MSG_LENGTH(n) + 2] = 0x0A;
	STRHAL_UART_Debug_Write_DMA((char *) msgBuf, CAN_MSG_LENGTH(n) + 3);
#endif

	(void) STRHAL_CAN_Send(STRHAL_FDCAN1, msgId.uint32, msgData.uint8, n);
 8002178:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800217a:	79fb      	ldrb	r3, [r7, #7]
 800217c:	f107 0208 	add.w	r2, r7, #8
 8002180:	2000      	movs	r0, #0
 8002182:	f005 f813 	bl	80071ac <STRHAL_CAN_Send>
 8002186:	e000      	b.n	800218a <_ZN14GenericChannel12heartbeatCanEv+0xd2>
		return;
 8002188:	bf00      	nop
}
 800218a:	3754      	adds	r7, #84	; 0x54
 800218c:	46bd      	mov	sp, r7
 800218e:	bd90      	pop	{r4, r7, pc}
 8002190:	20000818 	.word	0x20000818
 8002194:	2000081c 	.word	0x2000081c
 8002198:	200007b8 	.word	0x200007b8
 800219c:	200007f0 	.word	0x200007f0

080021a0 <_ZN22PressureControlChannelC1EhR14GenericChannelhR28AbstractControlOutputChannelm>:
#include <Channels/PressureControlChannel.h>


PressureControlChannel::PressureControlChannel(uint8_t id, GenericChannel &parent, uint8_t inputChannelId, AbstractControlOutputChannel &solenoidChannel, uint32_t refreshDivider):
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	607a      	str	r2, [r7, #4]
 80021aa:	461a      	mov	r2, r3
 80021ac:	460b      	mov	r3, r1
 80021ae:	72fb      	strb	r3, [r7, #11]
 80021b0:	4613      	mov	r3, r2
 80021b2:	72bb      	strb	r3, [r7, #10]
		AbstractChannel(CHANNEL_TYPE_CONTROL, id, refreshDivider), parent(parent),inputChannelId(inputChannelId), solenoidChannel(solenoidChannel)
 80021b4:	68f8      	ldr	r0, [r7, #12]
 80021b6:	7afa      	ldrb	r2, [r7, #11]
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	210a      	movs	r1, #10
 80021bc:	f7ff f85a 	bl	8001274 <_ZN15AbstractChannelC1E12CHANNEL_TYPEhm>
 80021c0:	4a11      	ldr	r2, [pc, #68]	; (8002208 <_ZN22PressureControlChannelC1EhR14GenericChannelhR28AbstractControlOutputChannelm+0x68>)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	821a      	strh	r2, [r3, #16]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	825a      	strh	r2, [r3, #18]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	829a      	strh	r2, [r3, #20]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	82da      	strh	r2, [r3, #22]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	619a      	str	r2, [r3, #24]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	7aba      	ldrb	r2, [r7, #10]
 80021e8:	771a      	strb	r2, [r3, #28]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	621a      	str	r2, [r3, #32]
 80021f0:	68f9      	ldr	r1, [r7, #12]
 80021f2:	f04f 0200 	mov.w	r2, #0
 80021f6:	f04f 0300 	mov.w	r3, #0
 80021fa:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
{
}
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	4618      	mov	r0, r3
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	08009e64 	.word	0x08009e64

0800220c <_ZN22PressureControlChannel4initEv>:

int PressureControlChannel::init()
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]

	return 0;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <_ZN22PressureControlChannel4execEv>:

int PressureControlChannel::exec()
{
 8002222:	b5b0      	push	{r4, r5, r7, lr}
 8002224:	b086      	sub	sp, #24
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
	uint64_t time = STRHAL_Systick_GetTick();
 800222a:	f006 f86f 	bl	800830c <STRHAL_Systick_GetTick>
 800222e:	e9c7 0104 	strd	r0, r1, [r7, #16]
	if ((time - timeLastSample) < EXEC_SAMPLE_TICKS)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002238:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800223c:	1a84      	subs	r4, r0, r2
 800223e:	eb61 0503 	sbc.w	r5, r1, r3
 8002242:	2c64      	cmp	r4, #100	; 0x64
 8002244:	f175 0300 	sbcs.w	r3, r5, #0
 8002248:	d201      	bcs.n	800224e <_ZN22PressureControlChannel4execEv+0x2c>
		return 0;
 800224a:	2300      	movs	r3, #0
 800224c:	e074      	b.n	8002338 <_ZN22PressureControlChannel4execEv+0x116>

	timeLastSample = time;
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002254:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	uint16_t pressure = parent.getControlInputChannel(inputChannelId)->getMeasurement(); //pressureChannel.getMeasurement();
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	699a      	ldr	r2, [r3, #24]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	7f1b      	ldrb	r3, [r3, #28]
 8002260:	4619      	mov	r1, r3
 8002262:	4610      	mov	r0, r2
 8002264:	f7ff fdd2 	bl	8001e0c <_ZN14GenericChannel22getControlInputChannelEh>
 8002268:	4603      	mov	r3, r0
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff f87f 	bl	800136e <_ZNK15AbstractChannel14getMeasurementEv>
 8002270:	4603      	mov	r3, r0
 8002272:	81fb      	strh	r3, [r7, #14]
	if (enabled == 1)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	8a1b      	ldrh	r3, [r3, #16]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d15c      	bne.n	8002336 <_ZN22PressureControlChannel4execEv+0x114>
	{
		if (pressure > threshold)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	8a9b      	ldrh	r3, [r3, #20]
 8002280:	89fa      	ldrh	r2, [r7, #14]
 8002282:	429a      	cmp	r2, r3
 8002284:	d92d      	bls.n	80022e2 <_ZN22PressureControlChannel4execEv+0xc0>
		{ // pressure too high
			threshold = targetPressure - hysteresis;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	8a5a      	ldrh	r2, [r3, #18]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	8adb      	ldrh	r3, [r3, #22]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	b29a      	uxth	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	829a      	strh	r2, [r3, #20]
			if (solenoidChannel.getState() != 1)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a1a      	ldr	r2, [r3, #32]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	3308      	adds	r3, #8
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4610      	mov	r0, r2
 80022a6:	4798      	blx	r3
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	bf14      	ite	ne
 80022ae:	2301      	movne	r3, #1
 80022b0:	2300      	moveq	r3, #0
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d03e      	beq.n	8002336 <_ZN22PressureControlChannel4execEv+0x114>
			{
				if (solenoidChannel.setState(1) != 0) // if not already open -> open
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a1a      	ldr	r2, [r3, #32]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	330c      	adds	r3, #12
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2101      	movs	r1, #1
 80022c8:	4610      	mov	r0, r2
 80022ca:	4798      	blx	r3
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	bf14      	ite	ne
 80022d2:	2301      	movne	r3, #1
 80022d4:	2300      	moveq	r3, #0
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d02c      	beq.n	8002336 <_ZN22PressureControlChannel4execEv+0x114>
					return -1;
 80022dc:	f04f 33ff 	mov.w	r3, #4294967295
 80022e0:	e02a      	b.n	8002338 <_ZN22PressureControlChannel4execEv+0x116>
			}
		}
		else
		{ // pressure below threshold
			threshold = targetPressure;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	8a5a      	ldrh	r2, [r3, #18]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	829a      	strh	r2, [r3, #20]
			if (solenoidChannel.getState() != 0)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a1a      	ldr	r2, [r3, #32]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	3308      	adds	r3, #8
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4610      	mov	r0, r2
 80022fa:	4798      	blx	r3
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	bf14      	ite	ne
 8002302:	2301      	movne	r3, #1
 8002304:	2300      	moveq	r3, #0
 8002306:	b2db      	uxtb	r3, r3
 8002308:	2b00      	cmp	r3, #0
 800230a:	d014      	beq.n	8002336 <_ZN22PressureControlChannel4execEv+0x114>
			{
				if (solenoidChannel.setState(0) != 0) // if not already closed -> close
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a1a      	ldr	r2, [r3, #32]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	330c      	adds	r3, #12
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2100      	movs	r1, #0
 800231c:	4610      	mov	r0, r2
 800231e:	4798      	blx	r3
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	bf14      	ite	ne
 8002326:	2301      	movne	r3, #1
 8002328:	2300      	moveq	r3, #0
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2b00      	cmp	r3, #0
 800232e:	d002      	beq.n	8002336 <_ZN22PressureControlChannel4execEv+0x114>
					return -1;
 8002330:	f04f 33ff 	mov.w	r3, #4294967295
 8002334:	e000      	b.n	8002338 <_ZN22PressureControlChannel4execEv+0x116>
			}
		}
	}
	return 0;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3718      	adds	r7, #24
 800233c:	46bd      	mov	sp, r7
 800233e:	bdb0      	pop	{r4, r5, r7, pc}

08002340 <_ZN22PressureControlChannel5resetEv>:

int PressureControlChannel::reset()
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
	return 0;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <_ZN22PressureControlChannel14processMessageEhPhRh>:

int PressureControlChannel::processMessage(uint8_t commandId, uint8_t *returnData, uint8_t &n)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b084      	sub	sp, #16
 800235a:	af00      	add	r7, sp, #0
 800235c:	60f8      	str	r0, [r7, #12]
 800235e:	607a      	str	r2, [r7, #4]
 8002360:	603b      	str	r3, [r7, #0]
 8002362:	460b      	mov	r3, r1
 8002364:	72fb      	strb	r3, [r7, #11]
	switch (commandId)
	{
		default:
			return AbstractChannel::processMessage(commandId, returnData, n);
 8002366:	68f8      	ldr	r0, [r7, #12]
 8002368:	7af9      	ldrb	r1, [r7, #11]
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	f7ff f80b 	bl	8001388 <_ZN15AbstractChannel14processMessageEhPhRh>
 8002372:	4603      	mov	r3, r0
	}
}
 8002374:	4618      	mov	r0, r3
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <_ZN22PressureControlChannel13getSensorDataEPhRh>:

int PressureControlChannel::getSensorData(uint8_t *data, uint8_t &n)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
	uint16_t *out = (uint16_t*) (data + n);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	461a      	mov	r2, r3
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	4413      	add	r3, r2
 8002392:	617b      	str	r3, [r7, #20]
	*out = (uint16_t) solenoidChannel.getState();
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6a1a      	ldr	r2, [r3, #32]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	3308      	adds	r3, #8
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4610      	mov	r0, r2
 80023a4:	4798      	blx	r3
 80023a6:	4603      	mov	r3, r0
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	801a      	strh	r2, [r3, #0]

	n += CONTROL_DATA_N_BYTES;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	3302      	adds	r3, #2
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	701a      	strb	r2, [r3, #0]
	return 0;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <_ZN22PressureControlChannel11setVariableEhl>:

int PressureControlChannel::setVariable(uint8_t variableId, int32_t data)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	460b      	mov	r3, r1
 80023ce:	607a      	str	r2, [r7, #4]
 80023d0:	72fb      	strb	r3, [r7, #11]
	switch (variableId)
 80023d2:	7afb      	ldrb	r3, [r7, #11]
 80023d4:	2b06      	cmp	r3, #6
 80023d6:	d879      	bhi.n	80024cc <_ZN22PressureControlChannel11setVariableEhl+0x108>
 80023d8:	a201      	add	r2, pc, #4	; (adr r2, 80023e0 <_ZN22PressureControlChannel11setVariableEhl+0x1c>)
 80023da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023de:	bf00      	nop
 80023e0:	080023fd 	.word	0x080023fd
 80023e4:	0800245b 	.word	0x0800245b
 80023e8:	08002497 	.word	0x08002497
 80023ec:	0800249d 	.word	0x0800249d
 80023f0:	080024cd 	.word	0x080024cd
 80023f4:	080024cd 	.word	0x080024cd
 80023f8:	080024bd 	.word	0x080024bd
	{
		case CONTROL_ENABLED:
			enabled = data;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	b29a      	uxth	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	821a      	strh	r2, [r3, #16]
			if (data == 0 && solenoidChannel.getState() != 0)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10d      	bne.n	8002426 <_ZN22PressureControlChannel11setVariableEhl+0x62>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6a1a      	ldr	r2, [r3, #32]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	3308      	adds	r3, #8
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4610      	mov	r0, r2
 800241a:	4798      	blx	r3
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <_ZN22PressureControlChannel11setVariableEhl+0x62>
 8002422:	2301      	movs	r3, #1
 8002424:	e000      	b.n	8002428 <_ZN22PressureControlChannel11setVariableEhl+0x64>
 8002426:	2300      	movs	r3, #0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d014      	beq.n	8002456 <_ZN22PressureControlChannel11setVariableEhl+0x92>
			{
				if (solenoidChannel.setState(0) != 0) // make sure solenoid is closed after disabling
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6a1a      	ldr	r2, [r3, #32]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	330c      	adds	r3, #12
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2100      	movs	r1, #0
 800243c:	4610      	mov	r0, r2
 800243e:	4798      	blx	r3
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	bf14      	ite	ne
 8002446:	2301      	movne	r3, #1
 8002448:	2300      	moveq	r3, #0
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b00      	cmp	r3, #0
 800244e:	d002      	beq.n	8002456 <_ZN22PressureControlChannel11setVariableEhl+0x92>
					return -1;
 8002450:	f04f 33ff 	mov.w	r3, #4294967295
 8002454:	e03c      	b.n	80024d0 <_ZN22PressureControlChannel11setVariableEhl+0x10c>
			}
			return 0;
 8002456:	2300      	movs	r3, #0
 8002458:	e03a      	b.n	80024d0 <_ZN22PressureControlChannel11setVariableEhl+0x10c>
		case CONTROL_TARGET:
			targetPressure = data * 4095 / UINT16_MAX; // convert from 16 to 12bit scale
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	4613      	mov	r3, r2
 800245e:	031b      	lsls	r3, r3, #12
 8002460:	1a9b      	subs	r3, r3, r2
 8002462:	4a1d      	ldr	r2, [pc, #116]	; (80024d8 <_ZN22PressureControlChannel11setVariableEhl+0x114>)
 8002464:	fb82 1203 	smull	r1, r2, r2, r3
 8002468:	441a      	add	r2, r3
 800246a:	13d2      	asrs	r2, r2, #15
 800246c:	17db      	asrs	r3, r3, #31
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	b29a      	uxth	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	825a      	strh	r2, [r3, #18]
			threshold = data * 4095 / UINT16_MAX;
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	4613      	mov	r3, r2
 800247a:	031b      	lsls	r3, r3, #12
 800247c:	1a9b      	subs	r3, r3, r2
 800247e:	4a16      	ldr	r2, [pc, #88]	; (80024d8 <_ZN22PressureControlChannel11setVariableEhl+0x114>)
 8002480:	fb82 1203 	smull	r1, r2, r2, r3
 8002484:	441a      	add	r2, r3
 8002486:	13d2      	asrs	r2, r2, #15
 8002488:	17db      	asrs	r3, r3, #31
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	b29a      	uxth	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	829a      	strh	r2, [r3, #20]
			return 0;
 8002492:	2300      	movs	r3, #0
 8002494:	e01c      	b.n	80024d0 <_ZN22PressureControlChannel11setVariableEhl+0x10c>
		case CONTROL_THRESHOLD: //cannot set threshold
			return -1;
 8002496:	f04f 33ff 	mov.w	r3, #4294967295
 800249a:	e019      	b.n	80024d0 <_ZN22PressureControlChannel11setVariableEhl+0x10c>
		case CONTROL_HYSTERESIS:
			hysteresis = data * 4095 / UINT16_MAX;
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	4613      	mov	r3, r2
 80024a0:	031b      	lsls	r3, r3, #12
 80024a2:	1a9b      	subs	r3, r3, r2
 80024a4:	4a0c      	ldr	r2, [pc, #48]	; (80024d8 <_ZN22PressureControlChannel11setVariableEhl+0x114>)
 80024a6:	fb82 1203 	smull	r1, r2, r2, r3
 80024aa:	441a      	add	r2, r3
 80024ac:	13d2      	asrs	r2, r2, #15
 80024ae:	17db      	asrs	r3, r3, #31
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	82da      	strh	r2, [r3, #22]
			return 0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	e009      	b.n	80024d0 <_ZN22PressureControlChannel11setVariableEhl+0x10c>
		case CONTROL_REFRESH_DIVIDER:
			refreshDivider = data;
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	605a      	str	r2, [r3, #4]
			refreshCounter = 0;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	609a      	str	r2, [r3, #8]
			return 0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	e001      	b.n	80024d0 <_ZN22PressureControlChannel11setVariableEhl+0x10c>
		default:
			return -1;
 80024cc:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	80008001 	.word	0x80008001

080024dc <_ZNK22PressureControlChannel11getVariableEhRl>:

int PressureControlChannel::getVariable(uint8_t variableId, int32_t &data) const
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	460b      	mov	r3, r1
 80024e6:	607a      	str	r2, [r7, #4]
 80024e8:	72fb      	strb	r3, [r7, #11]
	switch (variableId)
 80024ea:	7afb      	ldrb	r3, [r7, #11]
 80024ec:	2b06      	cmp	r3, #6
 80024ee:	d852      	bhi.n	8002596 <_ZNK22PressureControlChannel11getVariableEhRl+0xba>
 80024f0:	a201      	add	r2, pc, #4	; (adr r2, 80024f8 <_ZNK22PressureControlChannel11getVariableEhRl+0x1c>)
 80024f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f6:	bf00      	nop
 80024f8:	08002515 	.word	0x08002515
 80024fc:	08002523 	.word	0x08002523
 8002500:	08002545 	.word	0x08002545
 8002504:	08002567 	.word	0x08002567
 8002508:	08002597 	.word	0x08002597
 800250c:	08002597 	.word	0x08002597
 8002510:	08002589 	.word	0x08002589
	{
		case CONTROL_ENABLED:
			data = enabled;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8a1b      	ldrh	r3, [r3, #16]
 8002518:	461a      	mov	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	601a      	str	r2, [r3, #0]
			return 0;
 800251e:	2300      	movs	r3, #0
 8002520:	e03b      	b.n	800259a <_ZNK22PressureControlChannel11getVariableEhRl+0xbe>
		case CONTROL_TARGET:
			data = targetPressure * UINT16_MAX / 4095; // convert back to 16bit full scale
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	8a5b      	ldrh	r3, [r3, #18]
 8002526:	461a      	mov	r2, r3
 8002528:	4613      	mov	r3, r2
 800252a:	041b      	lsls	r3, r3, #16
 800252c:	1a9b      	subs	r3, r3, r2
 800252e:	4a1e      	ldr	r2, [pc, #120]	; (80025a8 <_ZNK22PressureControlChannel11getVariableEhRl+0xcc>)
 8002530:	fb82 1203 	smull	r1, r2, r2, r3
 8002534:	441a      	add	r2, r3
 8002536:	12d2      	asrs	r2, r2, #11
 8002538:	17db      	asrs	r3, r3, #31
 800253a:	1ad2      	subs	r2, r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	601a      	str	r2, [r3, #0]
			return 0;
 8002540:	2300      	movs	r3, #0
 8002542:	e02a      	b.n	800259a <_ZNK22PressureControlChannel11getVariableEhRl+0xbe>
		case CONTROL_THRESHOLD:
			data = threshold * UINT16_MAX / 4095;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8a9b      	ldrh	r3, [r3, #20]
 8002548:	461a      	mov	r2, r3
 800254a:	4613      	mov	r3, r2
 800254c:	041b      	lsls	r3, r3, #16
 800254e:	1a9b      	subs	r3, r3, r2
 8002550:	4a15      	ldr	r2, [pc, #84]	; (80025a8 <_ZNK22PressureControlChannel11getVariableEhRl+0xcc>)
 8002552:	fb82 1203 	smull	r1, r2, r2, r3
 8002556:	441a      	add	r2, r3
 8002558:	12d2      	asrs	r2, r2, #11
 800255a:	17db      	asrs	r3, r3, #31
 800255c:	1ad2      	subs	r2, r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	601a      	str	r2, [r3, #0]
			return 0;
 8002562:	2300      	movs	r3, #0
 8002564:	e019      	b.n	800259a <_ZNK22PressureControlChannel11getVariableEhRl+0xbe>
		case CONTROL_HYSTERESIS:
			data = hysteresis * UINT16_MAX / 4095;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8adb      	ldrh	r3, [r3, #22]
 800256a:	461a      	mov	r2, r3
 800256c:	4613      	mov	r3, r2
 800256e:	041b      	lsls	r3, r3, #16
 8002570:	1a9b      	subs	r3, r3, r2
 8002572:	4a0d      	ldr	r2, [pc, #52]	; (80025a8 <_ZNK22PressureControlChannel11getVariableEhRl+0xcc>)
 8002574:	fb82 1203 	smull	r1, r2, r2, r3
 8002578:	441a      	add	r2, r3
 800257a:	12d2      	asrs	r2, r2, #11
 800257c:	17db      	asrs	r3, r3, #31
 800257e:	1ad2      	subs	r2, r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	601a      	str	r2, [r3, #0]
			return 0;
 8002584:	2300      	movs	r3, #0
 8002586:	e008      	b.n	800259a <_ZNK22PressureControlChannel11getVariableEhRl+0xbe>
		case CONTROL_REFRESH_DIVIDER:
			data = (int32_t) refreshDivider;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	461a      	mov	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	601a      	str	r2, [r3, #0]
			return 0;
 8002592:	2300      	movs	r3, #0
 8002594:	e001      	b.n	800259a <_ZNK22PressureControlChannel11getVariableEhRl+0xbe>
		default:
			return -1;
 8002596:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800259a:	4618      	mov	r0, r3
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	80080081 	.word	0x80080081

080025ac <_ZN12ServoChannelC1EhhRK20STRHAL_TIM_TimerId_tRK22STRHAL_TIM_ChannelId_tRK20STRHAL_ADC_Channel_tS8_RK13STRHAL_GPIO_tm>:

constexpr ServoRefPos ServoChannel::com0Ref;
constexpr ServoRefPos ServoChannel::pwm0Ref;
constexpr ServoRefPos ServoChannel::adc0Ref;

ServoChannel::ServoChannel(uint8_t id, uint8_t servoId, const STRHAL_TIM_TimerId_t &pwmTimer, const STRHAL_TIM_ChannelId_t &control, const STRHAL_ADC_Channel_t &feedbackChannel, const STRHAL_ADC_Channel_t &currentChannel, const STRHAL_GPIO_t &led, uint32_t refreshDivider) :
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	607b      	str	r3, [r7, #4]
 80025b6:	460b      	mov	r3, r1
 80025b8:	72fb      	strb	r3, [r7, #11]
 80025ba:	4613      	mov	r3, r2
 80025bc:	72bb      	strb	r3, [r7, #10]
		AbstractChannel(CHANNEL_TYPE_SERVO, id, refreshDivider), servoId(servoId), pwmTimer(pwmTimer), ctrlChannelId(control), feedbackChannel(feedbackChannel), currentChannel(currentChannel), led(led), flash(W25Qxx_Flash::instance()), servoState(ServoState::IDLE), reqCalib(false)
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	7afa      	ldrb	r2, [r7, #11]
 80025c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c4:	2108      	movs	r1, #8
 80025c6:	f7fe fe55 	bl	8001274 <_ZN15AbstractChannelC1E12CHANNEL_TYPEhm>
 80025ca:	4a35      	ldr	r2, [pc, #212]	; (80026a0 <_ZN12ServoChannelC1EhhRK20STRHAL_TIM_TimerId_tRK22STRHAL_TIM_ChannelId_tRK20STRHAL_ADC_Channel_tS8_RK13STRHAL_GPIO_tm+0xf4>)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	7aba      	ldrb	r2, [r7, #10]
 80025d4:	73da      	strb	r2, [r3, #15]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	781a      	ldrb	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	741a      	strb	r2, [r3, #16]
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	781a      	ldrb	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	745a      	strb	r2, [r3, #17]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	615a      	str	r2, [r3, #20]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	619a      	str	r2, [r3, #24]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	69fa      	ldr	r2, [r7, #28]
 80025f6:	331c      	adds	r3, #28
 80025f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025fc:	e883 0003 	stmia.w	r3, {r0, r1}
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6a3a      	ldr	r2, [r7, #32]
 8002604:	3324      	adds	r3, #36	; 0x24
 8002606:	e892 0003 	ldmia.w	r2, {r0, r1}
 800260a:	e883 0003 	stmia.w	r3, {r0, r1}
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002612:	332c      	adds	r3, #44	; 0x2c
 8002614:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002618:	e883 0003 	stmia.w	r3, {r0, r1}
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	869a      	strh	r2, [r3, #52]	; 0x34
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	86da      	strh	r2, [r3, #54]	; 0x36
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	871a      	strh	r2, [r3, #56]	; 0x38
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	875a      	strh	r2, [r3, #58]	; 0x3a
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	879a      	strh	r2, [r3, #60]	; 0x3c
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002640:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	4a17      	ldr	r2, [pc, #92]	; (80026a4 <_ZN12ServoChannelC1EhhRK20STRHAL_TIM_TimerId_tRK22STRHAL_TIM_ChannelId_tRK20STRHAL_ADC_Channel_tS8_RK13STRHAL_GPIO_tm+0xf8>)
 8002646:	6812      	ldr	r2, [r2, #0]
 8002648:	641a      	str	r2, [r3, #64]	; 0x40
 800264a:	f000 fcf5 	bl	8003038 <_ZN12W25Qxx_Flash8instanceEv>
 800264e:	4602      	mov	r2, r0
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	645a      	str	r2, [r3, #68]	; 0x44
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	649a      	str	r2, [r3, #72]	; 0x48
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800267a:	68f9      	ldr	r1, [r7, #12]
 800267c:	f04f 0200 	mov.w	r2, #0
 8002680:	f04f 0300 	mov.w	r3, #0
 8002684:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 8002688:	68f9      	ldr	r1, [r7, #12]
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	f04f 0300 	mov.w	r3, #0
 8002692:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
{
}
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	4618      	mov	r0, r3
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	08009e94 	.word	0x08009e94
 80026a4:	08009e88 	.word	0x08009e88

080026a8 <_ZN12ServoChannel4initEv>:

int ServoChannel::init()
{
 80026a8:	b590      	push	{r4, r7, lr}
 80026aa:	b089      	sub	sp, #36	; 0x24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
	STRHAL_GPIO_SingleInit(&led, STRHAL_GPIO_TYPE_OPP);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	332c      	adds	r3, #44	; 0x2c
 80026b4:	2100      	movs	r1, #0
 80026b6:	4618      	mov	r0, r3
 80026b8:	f005 f890 	bl	80077dc <STRHAL_GPIO_SingleInit>

	if (STRHAL_TIM_PWM_Init(pwmTimer, PWM_PSC, PWM_RES) < 0)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	7c1b      	ldrb	r3, [r3, #16]
 80026c0:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 80026c4:	2158      	movs	r1, #88	; 0x58
 80026c6:	4618      	mov	r0, r3
 80026c8:	f006 f8b4 	bl	8008834 <STRHAL_TIM_PWM_Init>
 80026cc:	4603      	mov	r3, r0
 80026ce:	0fdb      	lsrs	r3, r3, #31
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d002      	beq.n	80026dc <_ZN12ServoChannel4initEv+0x34>
		return -1;
 80026d6:	f04f 33ff 	mov.w	r3, #4294967295
 80026da:	e0a7      	b.n	800282c <_ZN12ServoChannel4initEv+0x184>

	if (STRHAL_TIM_PWM_AddChannel(&pwmChannel, ctrlChannelId, STRHAL_TIM_PWM_CHANNELTYPE_SO) < 0)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f103 0012 	add.w	r0, r3, #18
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	7c5b      	ldrb	r3, [r3, #17]
 80026e6:	2200      	movs	r2, #0
 80026e8:	4619      	mov	r1, r3
 80026ea:	f006 f935 	bl	8008958 <STRHAL_TIM_PWM_AddChannel>
 80026ee:	4603      	mov	r3, r0
 80026f0:	0fdb      	lsrs	r3, r3, #31
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d002      	beq.n	80026fe <_ZN12ServoChannel4initEv+0x56>
		return -1;
 80026f8:	f04f 33ff 	mov.w	r3, #4294967295
 80026fc:	e096      	b.n	800282c <_ZN12ServoChannel4initEv+0x184>


	feedbackMeasurement = STRHAL_ADC_SubscribeChannel(&feedbackChannel, STRHAL_ADC_INTYPE_REGULAR);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	331c      	adds	r3, #28
 8002702:	2100      	movs	r1, #0
 8002704:	4618      	mov	r0, r3
 8002706:	f003 fffb 	bl	8006700 <STRHAL_ADC_SubscribeChannel>
 800270a:	4602      	mov	r2, r0
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	615a      	str	r2, [r3, #20]
	if(currentChannel.ADCx)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	2b00      	cmp	r3, #0
 8002716:	d008      	beq.n	800272a <_ZN12ServoChannel4initEv+0x82>
	currentMeasurement = STRHAL_ADC_SubscribeChannel(&currentChannel, STRHAL_ADC_INTYPE_REGULAR);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3324      	adds	r3, #36	; 0x24
 800271c:	2100      	movs	r1, #0
 800271e:	4618      	mov	r0, r3
 8002720:	f003 ffee 	bl	8006700 <STRHAL_ADC_SubscribeChannel>
 8002724:	4602      	mov	r2, r0
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	619a      	str	r2, [r3, #24]

	// Load and assign config
	if (!flash.readConfig())
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272e:	4618      	mov	r0, r3
 8002730:	f001 f952 	bl	80039d8 <_ZN12W25Qxx_Flash10readConfigEv>
 8002734:	4603      	mov	r3, r0
 8002736:	f083 0301 	eor.w	r3, r3, #1
 800273a:	b2db      	uxtb	r3, r3
 800273c:	2b00      	cmp	r3, #0
 800273e:	d002      	beq.n	8002746 <_ZN12ServoChannel4initEv+0x9e>
		return -1;
 8002740:	f04f 33ff 	mov.w	r3, #4294967295
 8002744:	e072      	b.n	800282c <_ZN12ServoChannel4initEv+0x184>

	// Read config values starting from the servos config register start address
	uint32_t configAddrStart = SERVOCONFIG_OFFSET + servoId * SERVOCONFIG_N_EACH;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	7bdb      	ldrb	r3, [r3, #15]
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	61fb      	str	r3, [r7, #28]
	adcRef.start = flash.readConfigReg(configAddrStart);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002752:	69f9      	ldr	r1, [r7, #28]
 8002754:	4618      	mov	r0, r3
 8002756:	f001 f957 	bl	8003a08 <_ZN12W25Qxx_Flash13readConfigRegEm>
 800275a:	4603      	mov	r3, r0
 800275c:	b29a      	uxth	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	879a      	strh	r2, [r3, #60]	; 0x3c
	adcRef.end = flash.readConfigReg(configAddrStart + 1);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	3301      	adds	r3, #1
 800276a:	4619      	mov	r1, r3
 800276c:	4610      	mov	r0, r2
 800276e:	f001 f94b 	bl	8003a08 <_ZN12W25Qxx_Flash13readConfigRegEm>
 8002772:	4603      	mov	r3, r0
 8002774:	b29a      	uxth	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	87da      	strh	r2, [r3, #62]	; 0x3e
	pwmRef.start = flash.readConfigReg(configAddrStart + 2);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	3302      	adds	r3, #2
 8002782:	4619      	mov	r1, r3
 8002784:	4610      	mov	r0, r2
 8002786:	f001 f93f 	bl	8003a08 <_ZN12W25Qxx_Flash13readConfigRegEm>
 800278a:	4603      	mov	r3, r0
 800278c:	b29a      	uxth	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pwmRef.end = flash.readConfigReg(configAddrStart + 3);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	3303      	adds	r3, #3
 800279c:	4619      	mov	r1, r3
 800279e:	4610      	mov	r0, r2
 80027a0:	f001 f932 	bl	8003a08 <_ZN12W25Qxx_Flash13readConfigRegEm>
 80027a4:	4603      	mov	r3, r0
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	if (pwmRef.start == 0 && pwmRef.end == 0) // flash never written -> init default
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d12e      	bne.n	8002816 <_ZN12ServoChannel4initEv+0x16e>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d129      	bne.n	8002816 <_ZN12ServoChannel4initEv+0x16e>
	{
		uint32_t vals[4] =
 80027c2:	4b1c      	ldr	r3, [pc, #112]	; (8002834 <_ZN12ServoChannel4initEv+0x18c>)
 80027c4:	f107 040c 	add.w	r4, r7, #12
 80027c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		{ (uint32_t) adc0Ref.start, (uint32_t) adc0Ref.end, (uint32_t) pwm0Ref.start, (uint32_t) pwm0Ref.end };
		flash.writeConfigRegsFromAddr(SERVOCONFIG_OFFSET + servoId * SERVOCONFIG_N_EACH, vals, 4);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	7bdb      	ldrb	r3, [r3, #15]
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4619      	mov	r1, r3
 80027da:	f107 020c 	add.w	r2, r7, #12
 80027de:	2304      	movs	r3, #4
 80027e0:	f001 f8b2 	bl	8003948 <_ZN12W25Qxx_Flash23writeConfigRegsFromAddrEmPmt>
		adcRef = adc0Ref;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	879a      	strh	r2, [r3, #60]	; 0x3c
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f640 72ff 	movw	r2, #4095	; 0xfff
 80027f0:	87da      	strh	r2, [r3, #62]	; 0x3e
		pwmRef = pwm0Ref;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a10      	ldr	r2, [pc, #64]	; (8002838 <_ZN12ServoChannel4initEv+0x190>)
 80027f6:	6812      	ldr	r2, [r2, #0]
 80027f8:	641a      	str	r2, [r3, #64]	; 0x40

		if(!flash.writeTempConfig())
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fe:	4618      	mov	r0, r3
 8002800:	f001 f840 	bl	8003884 <_ZN12W25Qxx_Flash15writeTempConfigEv>
 8002804:	4603      	mov	r3, r0
 8002806:	f083 0301 	eor.w	r3, r3, #1
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b00      	cmp	r3, #0
 800280e:	d002      	beq.n	8002816 <_ZN12ServoChannel4initEv+0x16e>
			return -1;;
 8002810:	f04f 33ff 	mov.w	r3, #4294967295
 8002814:	e00a      	b.n	800282c <_ZN12ServoChannel4initEv+0x184>
	}

	if (feedbackMeasurement == nullptr)// || currentMeasurement == nullptr)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d102      	bne.n	8002824 <_ZN12ServoChannel4initEv+0x17c>
		return -1;
 800281e:	f04f 33ff 	mov.w	r3, #4294967295
 8002822:	e003      	b.n	800282c <_ZN12ServoChannel4initEv+0x184>

	servoState = ServoState::READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	649a      	str	r2, [r3, #72]	; 0x48
	return 0;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3724      	adds	r7, #36	; 0x24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd90      	pop	{r4, r7, pc}
 8002834:	08009cf4 	.word	0x08009cf4
 8002838:	08009e88 	.word	0x08009e88

0800283c <_ZN12ServoChannel4execEv>:

int ServoChannel::exec()
{
 800283c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002840:	b08f      	sub	sp, #60	; 0x3c
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
	uint64_t time = STRHAL_Systick_GetTick();
 8002846:	f005 fd61 	bl	800830c <STRHAL_Systick_GetTick>
 800284a:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
	if ((time - timeLastSample) < EXEC_SAMPLE_TICKS)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8002854:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002858:	ebb0 0802 	subs.w	r8, r0, r2
 800285c:	eb61 0903 	sbc.w	r9, r1, r3
 8002860:	f1b8 0f05 	cmp.w	r8, #5
 8002864:	f179 0300 	sbcs.w	r3, r9, #0
 8002868:	d201      	bcs.n	800286e <_ZN12ServoChannel4execEv+0x32>
		return 0;
 800286a:	2300      	movs	r3, #0
 800286c:	e14f      	b.n	8002b0e <_ZN12ServoChannel4execEv+0x2d2>

	timeLastSample = time;
 800286e:	6879      	ldr	r1, [r7, #4]
 8002870:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002874:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

	feedbackPositionLast = feedbackPosition;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	feedbackPosition = tPosToCanonic(*feedbackMeasurement, adcRef);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	881b      	ldrh	r3, [r3, #0]
 8002888:	b29a      	uxth	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	333c      	adds	r3, #60	; 0x3c
 800288e:	4619      	mov	r1, r3
 8002890:	4610      	mov	r0, r2
 8002892:	f000 fac0 	bl	8002e16 <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos>
 8002896:	4603      	mov	r3, r0
 8002898:	461a      	mov	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	86da      	strh	r2, [r3, #54]	; 0x36
	if (step != 0)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d033      	beq.n	8002910 <_ZN12ServoChannel4execEv+0xd4>
	{
		if (finalPosition != targetPosition)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d02a      	beq.n	800290a <_ZN12ServoChannel4execEv+0xce>
		{
			targetPosition += step;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 80028be:	b29b      	uxth	r3, r3
 80028c0:	4413      	add	r3, r2
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	869a      	strh	r2, [r3, #52]	; 0x34
			if (step > 0)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	dd0d      	ble.n	80028ee <_ZN12ServoChannel4execEv+0xb2>
				targetPosition = (targetPosition > finalPosition) ? finalPosition : targetPosition;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80028da:	429a      	cmp	r2, r3
 80028dc:	d902      	bls.n	80028e4 <_ZN12ServoChannel4execEv+0xa8>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80028e2:	e001      	b.n	80028e8 <_ZN12ServoChannel4execEv+0xac>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	8693      	strh	r3, [r2, #52]	; 0x34
 80028ec:	e010      	b.n	8002910 <_ZN12ServoChannel4execEv+0xd4>
			else
				targetPosition = (targetPosition < finalPosition) ? finalPosition : targetPosition;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d202      	bcs.n	8002900 <_ZN12ServoChannel4execEv+0xc4>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80028fe:	e001      	b.n	8002904 <_ZN12ServoChannel4execEv+0xc8>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	8693      	strh	r3, [r2, #52]	; 0x34
 8002908:	e002      	b.n	8002910 <_ZN12ServoChannel4execEv+0xd4>
		}
		else
		{
			step = 0;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	875a      	strh	r2, [r3, #58]	; 0x3a
		}
	}
	if (targetPosition != targetPositionLast)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800291a:	429a      	cmp	r2, r3
 800291c:	d034      	beq.n	8002988 <_ZN12ServoChannel4execEv+0x14c>
	{

		STRHAL_TIM_PWM_SetDuty(&pwmChannel, tPosFromCanonic(targetPosition, pwmRef));
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f103 0612 	add.w	r6, r3, #18
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3340      	adds	r3, #64	; 0x40
 800292c:	4619      	mov	r1, r3
 800292e:	4610      	mov	r0, r2
 8002930:	f000 fad3 	bl	8002eda <_ZN12ServoChannel15tPosFromCanonicEtRK11ServoRefPos>
 8002934:	4603      	mov	r3, r0
 8002936:	4619      	mov	r1, r3
 8002938:	4630      	mov	r0, r6
 800293a:	f006 f883 	bl	8008a44 <STRHAL_TIM_PWM_SetDuty>
		STRHAL_TIM_PWM_Enable(&pwmChannel, true);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	3312      	adds	r3, #18
 8002942:	2101      	movs	r1, #1
 8002944:	4618      	mov	r0, r3
 8002946:	f006 f8a9 	bl	8008a9c <STRHAL_TIM_PWM_Enable>
		STRHAL_GPIO_Write(&led, STRHAL_GPIO_VALUE_H);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	332c      	adds	r3, #44	; 0x2c
 800294e:	2101      	movs	r1, #1
 8002950:	4618      	mov	r0, r3
 8002952:	f004 ff9f 	bl	8007894 <STRHAL_GPIO_Write>
		targetPositionLast = targetPosition;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
		targetHitCount = 0;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		timeLastCommand = time;
 8002968:	6879      	ldr	r1, [r7, #4]
 800296a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800296e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		servoState = ServoState::MOVIN;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2203      	movs	r2, #3
 8002976:	649a      	str	r2, [r3, #72]	; 0x48

		if (reqCalib)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800297e:	2b00      	cmp	r3, #0
 8002980:	d002      	beq.n	8002988 <_ZN12ServoChannel4execEv+0x14c>
		{
			servoState = ServoState::CALIB;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2204      	movs	r2, #4
 8002986:	649a      	str	r2, [r3, #72]	; 0x48
			//reqCalib = false;
		}
	}

	switch (servoState)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800298c:	2b04      	cmp	r3, #4
 800298e:	d049      	beq.n	8002a24 <_ZN12ServoChannel4execEv+0x1e8>
 8002990:	2b04      	cmp	r3, #4
 8002992:	f300 80b5 	bgt.w	8002b00 <_ZN12ServoChannel4execEv+0x2c4>
 8002996:	2b01      	cmp	r3, #1
 8002998:	dc02      	bgt.n	80029a0 <_ZN12ServoChannel4execEv+0x164>
 800299a:	2b00      	cmp	r3, #0
 800299c:	da03      	bge.n	80029a6 <_ZN12ServoChannel4execEv+0x16a>
 800299e:	e0af      	b.n	8002b00 <_ZN12ServoChannel4execEv+0x2c4>
 80029a0:	2b03      	cmp	r3, #3
 80029a2:	d00d      	beq.n	80029c0 <_ZN12ServoChannel4execEv+0x184>
 80029a4:	e0ac      	b.n	8002b00 <_ZN12ServoChannel4execEv+0x2c4>
	{
		case ServoState::IDLE:
		case ServoState::READY:
			STRHAL_TIM_PWM_Enable(&pwmChannel, false);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	3312      	adds	r3, #18
 80029aa:	2100      	movs	r1, #0
 80029ac:	4618      	mov	r0, r3
 80029ae:	f006 f875 	bl	8008a9c <STRHAL_TIM_PWM_Enable>
			STRHAL_GPIO_Write(&led, STRHAL_GPIO_VALUE_L);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	332c      	adds	r3, #44	; 0x2c
 80029b6:	2100      	movs	r1, #0
 80029b8:	4618      	mov	r0, r3
 80029ba:	f004 ff6b 	bl	8007894 <STRHAL_GPIO_Write>
			break;
 80029be:	e0a5      	b.n	8002b0c <_ZN12ServoChannel4execEv+0x2d0>

		case ServoState::MOVIN:
			if (distPos(targetPosition, feedbackPosition) < POS_DEV)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029c8:	4619      	mov	r1, r3
 80029ca:	4610      	mov	r0, r2
 80029cc:	f000 fac8 	bl	8002f60 <_ZN12ServoChannel7distPosEtt>
 80029d0:	4603      	mov	r3, r0
 80029d2:	461a      	mov	r2, r3
 80029d4:	f240 136b 	movw	r3, #363	; 0x16b
 80029d8:	429a      	cmp	r2, r3
 80029da:	bf94      	ite	ls
 80029dc:	2301      	movls	r3, #1
 80029de:	2300      	movhi	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d007      	beq.n	80029f6 <_ZN12ServoChannel4execEv+0x1ba>
			{
				targetHitCount++;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80029ec:	3301      	adds	r3, #1
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
			}

			if (targetHitCount >= TARG_HIT_MIN || time - timeLastCommand > 800)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80029fc:	2b13      	cmp	r3, #19
 80029fe:	d80d      	bhi.n	8002a1c <_ZN12ServoChannel4execEv+0x1e0>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002a06:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002a0a:	1a84      	subs	r4, r0, r2
 8002a0c:	eb61 0503 	sbc.w	r5, r1, r3
 8002a10:	f240 3321 	movw	r3, #801	; 0x321
 8002a14:	429c      	cmp	r4, r3
 8002a16:	f175 0300 	sbcs.w	r3, r5, #0
 8002a1a:	d374      	bcc.n	8002b06 <_ZN12ServoChannel4execEv+0x2ca>
			{
				servoState = ServoState::IDLE;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	649a      	str	r2, [r3, #72]	; 0x48
			}
			break;
 8002a22:	e070      	b.n	8002b06 <_ZN12ServoChannel4execEv+0x2ca>

		case ServoState::CALIB: //TODO make config load/save more efficient
			if (distPos(feedbackPosition, feedbackPositionLast) < POS_DEV)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4610      	mov	r0, r2
 8002a32:	f000 fa95 	bl	8002f60 <_ZN12ServoChannel7distPosEtt>
 8002a36:	4603      	mov	r3, r0
 8002a38:	461a      	mov	r2, r3
 8002a3a:	f240 136b 	movw	r3, #363	; 0x16b
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	bf94      	ite	ls
 8002a42:	2301      	movls	r3, #1
 8002a44:	2300      	movhi	r3, #0
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d008      	beq.n	8002a5e <_ZN12ServoChannel4execEv+0x222>
			{
				targetHitCount++;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a52:	3301      	adds	r3, #1
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8002a5c:	e003      	b.n	8002a66 <_ZN12ServoChannel4execEv+0x22a>
			}
			else
			{
				targetHitCount = 0;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
			}

			if (targetHitCount >= CALIB_HIT_MIN)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a6c:	2bfe      	cmp	r3, #254	; 0xfe
 8002a6e:	d94c      	bls.n	8002b0a <_ZN12ServoChannel4execEv+0x2ce>
			{
				uint32_t configAddrStart = SERVOCONFIG_OFFSET + servoId * SERVOCONFIG_N_EACH;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	7bdb      	ldrb	r3, [r3, #15]
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	62fb      	str	r3, [r7, #44]	; 0x2c

				if (targetPosition == 0)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d11b      	bne.n	8002ab8 <_ZN12ServoChannel4execEv+0x27c>
				{
					adcRef.start = *feedbackMeasurement;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	881b      	ldrh	r3, [r3, #0]
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	879a      	strh	r2, [r3, #60]	; 0x3c
					Config regs[2] =
					{ static_cast<Config>(configAddrStart), static_cast<Config>(configAddrStart + 2) };
 8002a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a92:	3302      	adds	r3, #2
 8002a94:	62bb      	str	r3, [r7, #40]	; 0x28
					uint32_t vals[2] =
					{ (uint32_t) adcRef.start, (uint32_t) pwmRef.start };
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002a9a:	61fb      	str	r3, [r7, #28]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002aa2:	623b      	str	r3, [r7, #32]
					flash.writeConfigRegs(regs, vals, 2);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8002aa8:	f107 021c 	add.w	r2, r7, #28
 8002aac:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	f000 feff 	bl	80038b4 <_ZN12W25Qxx_Flash15writeConfigRegsEP6ConfigPmt>
 8002ab6:	e01b      	b.n	8002af0 <_ZN12ServoChannel4execEv+0x2b4>
				}
				else
				{
					adcRef.end = *feedbackMeasurement;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	695b      	ldr	r3, [r3, #20]
 8002abc:	881b      	ldrh	r3, [r3, #0]
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	87da      	strh	r2, [r3, #62]	; 0x3e
					Config regs[2] =
					{ static_cast<Config>(configAddrStart + 1), static_cast<Config>(configAddrStart + 3) };
 8002ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	617b      	str	r3, [r7, #20]
 8002aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002acc:	3303      	adds	r3, #3
 8002ace:	61bb      	str	r3, [r7, #24]
					uint32_t vals[2] =
					{ (uint32_t) adcRef.end, (uint32_t) pwmRef.end };
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ad4:	60fb      	str	r3, [r7, #12]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8002adc:	613b      	str	r3, [r7, #16]
					flash.writeConfigRegs(regs, vals, 2);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8002ae2:	f107 020c 	add.w	r2, r7, #12
 8002ae6:	f107 0114 	add.w	r1, r7, #20
 8002aea:	2302      	movs	r3, #2
 8002aec:	f000 fee2 	bl	80038b4 <_ZN12W25Qxx_Flash15writeConfigRegsEP6ConfigPmt>
				}
				servoState = ServoState::IDLE;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	649a      	str	r2, [r3, #72]	; 0x48
				reqCalib = false;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			}
			break;
 8002afe:	e004      	b.n	8002b0a <_ZN12ServoChannel4execEv+0x2ce>
		default:
			return -1;
 8002b00:	f04f 33ff 	mov.w	r3, #4294967295
 8002b04:	e003      	b.n	8002b0e <_ZN12ServoChannel4execEv+0x2d2>
			break;
 8002b06:	bf00      	nop
 8002b08:	e000      	b.n	8002b0c <_ZN12ServoChannel4execEv+0x2d0>
			break;
 8002b0a:	bf00      	nop
	}
	return 0;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	373c      	adds	r7, #60	; 0x3c
 8002b12:	46bd      	mov	sp, r7
 8002b14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002b18 <_ZN12ServoChannel5resetEv>:

int ServoChannel::reset()
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
	return 0;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
	...

08002b30 <_ZN12ServoChannel14processMessageEhPhRh>:

int ServoChannel::processMessage(uint8_t cmd_id, uint8_t *ret_data, uint8_t &ret_n)
{
 8002b30:	b590      	push	{r4, r7, lr}
 8002b32:	b089      	sub	sp, #36	; 0x24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	607a      	str	r2, [r7, #4]
 8002b3a:	603b      	str	r3, [r7, #0]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	72fb      	strb	r3, [r7, #11]
	switch (cmd_id)
 8002b40:	7afb      	ldrb	r3, [r7, #11]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d11d      	bne.n	8002b82 <_ZN12ServoChannel14processMessageEhPhRh+0x52>
	{
		case SERVO_REQ_RESET_SETTINGS:
		{
			uint32_t vals[4] =
 8002b46:	4b15      	ldr	r3, [pc, #84]	; (8002b9c <_ZN12ServoChannel14processMessageEhPhRh+0x6c>)
 8002b48:	f107 0410 	add.w	r4, r7, #16
 8002b4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{ (uint32_t) adc0Ref.start, (uint32_t) adc0Ref.end, (uint32_t) pwm0Ref.start, (uint32_t) pwm0Ref.end };
			flash.writeConfigRegsFromAddr(SERVOCONFIG_OFFSET + servoId * SERVOCONFIG_N_EACH, vals, 4);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	7bdb      	ldrb	r3, [r3, #15]
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	f107 0210 	add.w	r2, r7, #16
 8002b62:	2304      	movs	r3, #4
 8002b64:	f000 fef0 	bl	8003948 <_ZN12W25Qxx_Flash23writeConfigRegsFromAddrEmPmt>
			adcRef = adc0Ref;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	879a      	strh	r2, [r3, #60]	; 0x3c
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002b74:	87da      	strh	r2, [r3, #62]	; 0x3e
			pwmRef = pwm0Ref;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	4a09      	ldr	r2, [pc, #36]	; (8002ba0 <_ZN12ServoChannel14processMessageEhPhRh+0x70>)
 8002b7a:	6812      	ldr	r2, [r2, #0]
 8002b7c:	641a      	str	r2, [r3, #64]	; 0x40
			return 0;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	e007      	b.n	8002b92 <_ZN12ServoChannel14processMessageEhPhRh+0x62>
		}
		default:
			return AbstractChannel::processMessage(cmd_id, ret_data, ret_n);
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	7af9      	ldrb	r1, [r7, #11]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	f7fe fbfd 	bl	8001388 <_ZN15AbstractChannel14processMessageEhPhRh>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	bf00      	nop
	}
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3724      	adds	r7, #36	; 0x24
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd90      	pop	{r4, r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	08009cf4 	.word	0x08009cf4
 8002ba0:	08009e88 	.word	0x08009e88

08002ba4 <_ZN12ServoChannel13getSensorDataEPhRh>:



int ServoChannel::getSensorData(uint8_t *data, uint8_t &n)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
	uint32_t *out = (uint32_t*) (data + n);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	4413      	add	r3, r2
 8002bba:	617b      	str	r3, [r7, #20]
	*out = (uint32_t) getPos();
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 f917 	bl	8002df0 <_ZNK12ServoChannel6getPosEv>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	601a      	str	r2, [r3, #0]

	n += SERVO_DATA_N_BYTES;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	3304      	adds	r3, #4
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	701a      	strb	r2, [r3, #0]
	return 0;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <_ZN12ServoChannel11setVariableEhl>:
{
	return true;
}

int ServoChannel::setVariable(uint8_t variable_id, int32_t data)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	460b      	mov	r3, r1
 8002bea:	607a      	str	r2, [r7, #4]
 8002bec:	72fb      	strb	r3, [r7, #11]
	uint16_t pos_data;
	switch (variable_id)
 8002bee:	7afb      	ldrb	r3, [r7, #11]
 8002bf0:	2b18      	cmp	r3, #24
 8002bf2:	d874      	bhi.n	8002cde <_ZN12ServoChannel11setVariableEhl+0xfe>
 8002bf4:	a201      	add	r2, pc, #4	; (adr r2, 8002bfc <_ZN12ServoChannel11setVariableEhl+0x1c>)
 8002bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bfa:	bf00      	nop
 8002bfc:	08002cc3 	.word	0x08002cc3
 8002c00:	08002c61 	.word	0x08002c61
 8002c04:	08002cdf 	.word	0x08002cdf
 8002c08:	08002cdf 	.word	0x08002cdf
 8002c0c:	08002cdf 	.word	0x08002cdf
 8002c10:	08002cdf 	.word	0x08002cdf
 8002c14:	08002cdf 	.word	0x08002cdf
 8002c18:	08002cdf 	.word	0x08002cdf
 8002c1c:	08002cdf 	.word	0x08002cdf
 8002c20:	08002cdf 	.word	0x08002cdf
 8002c24:	08002c6d 	.word	0x08002c6d
 8002c28:	08002c97 	.word	0x08002c97
 8002c2c:	08002cdf 	.word	0x08002cdf
 8002c30:	08002ccf 	.word	0x08002ccf
 8002c34:	08002cdf 	.word	0x08002cdf
 8002c38:	08002cdf 	.word	0x08002cdf
 8002c3c:	08002cdf 	.word	0x08002cdf
 8002c40:	08002cdf 	.word	0x08002cdf
 8002c44:	08002cdf 	.word	0x08002cdf
 8002c48:	08002cdf 	.word	0x08002cdf
 8002c4c:	08002cdf 	.word	0x08002cdf
 8002c50:	08002cdf 	.word	0x08002cdf
 8002c54:	08002cdf 	.word	0x08002cdf
 8002c58:	08002cdf 	.word	0x08002cdf
 8002c5c:	08002cc9 	.word	0x08002cc9
	{
		case SERVO_TARGET_POSITION:
			targetPosition = (uint16_t) (data & 0xFFFF);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	869a      	strh	r2, [r3, #52]	; 0x34
			return 0;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	e03a      	b.n	8002ce2 <_ZN12ServoChannel11setVariableEhl+0x102>

		case SERVO_POSITION_STARTPOINT:
			pos_data = (uint16_t) (data & 0xFFFF);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	82fb      	strh	r3, [r7, #22]
			pwmRef.start = tPosFromCanonic(pos_data, pwm0Ref);
 8002c70:	8afb      	ldrh	r3, [r7, #22]
 8002c72:	491e      	ldr	r1, [pc, #120]	; (8002cec <_ZN12ServoChannel11setVariableEhl+0x10c>)
 8002c74:	4618      	mov	r0, r3
 8002c76:	f000 f930 	bl	8002eda <_ZN12ServoChannel15tPosFromCanonicEtRK11ServoRefPos>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			targetPosition = 0;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	869a      	strh	r2, [r3, #52]	; 0x34
			reqCalib = true;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

			return 0;
 8002c92:	2300      	movs	r3, #0
 8002c94:	e025      	b.n	8002ce2 <_ZN12ServoChannel11setVariableEhl+0x102>

		case SERVO_POSITION_ENDPOINT:
			pos_data = (uint16_t) (data & 0xFFFF);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	82fb      	strh	r3, [r7, #22]
			pwmRef.end = tPosFromCanonic(pos_data, pwm0Ref);
 8002c9a:	8afb      	ldrh	r3, [r7, #22]
 8002c9c:	4913      	ldr	r1, [pc, #76]	; (8002cec <_ZN12ServoChannel11setVariableEhl+0x10c>)
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 f91b 	bl	8002eda <_ZN12ServoChannel15tPosFromCanonicEtRK11ServoRefPos>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			targetPosition = UINT16_MAX;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cb4:	869a      	strh	r2, [r3, #52]	; 0x34
			reqCalib = true;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

			return 0;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	e00f      	b.n	8002ce2 <_ZN12ServoChannel11setVariableEhl+0x102>

		case SERVO_POSITION:
			return -2;
 8002cc2:	f06f 0301 	mvn.w	r3, #1
 8002cc6:	e00c      	b.n	8002ce2 <_ZN12ServoChannel11setVariableEhl+0x102>

		case SERVO_POSITION_RAW:
			return -2;
 8002cc8:	f06f 0301 	mvn.w	r3, #1
 8002ccc:	e009      	b.n	8002ce2 <_ZN12ServoChannel11setVariableEhl+0x102>

		case SERVO_SENSOR_REFRESH_DIVIDER:
			refreshDivider = data;
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	605a      	str	r2, [r3, #4]
			refreshCounter = 0;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	609a      	str	r2, [r3, #8]
			return 0;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	e001      	b.n	8002ce2 <_ZN12ServoChannel11setVariableEhl+0x102>

		default:
			return -1;
 8002cde:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3718      	adds	r7, #24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	08009e88 	.word	0x08009e88

08002cf0 <_ZNK12ServoChannel11getVariableEhRl>:

int ServoChannel::getVariable(uint8_t variable_id, int32_t &data) const
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	607a      	str	r2, [r7, #4]
 8002cfc:	72fb      	strb	r3, [r7, #11]
	switch (variable_id)
 8002cfe:	7afb      	ldrb	r3, [r7, #11]
 8002d00:	2b18      	cmp	r3, #24
 8002d02:	d86d      	bhi.n	8002de0 <_ZNK12ServoChannel11getVariableEhRl+0xf0>
 8002d04:	a201      	add	r2, pc, #4	; (adr r2, 8002d0c <_ZNK12ServoChannel11getVariableEhRl+0x1c>)
 8002d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d0a:	bf00      	nop
 8002d0c:	08002d71 	.word	0x08002d71
 8002d10:	08002d91 	.word	0x08002d91
 8002d14:	08002de1 	.word	0x08002de1
 8002d18:	08002de1 	.word	0x08002de1
 8002d1c:	08002de1 	.word	0x08002de1
 8002d20:	08002de1 	.word	0x08002de1
 8002d24:	08002de1 	.word	0x08002de1
 8002d28:	08002de1 	.word	0x08002de1
 8002d2c:	08002de1 	.word	0x08002de1
 8002d30:	08002de1 	.word	0x08002de1
 8002d34:	08002d9f 	.word	0x08002d9f
 8002d38:	08002db9 	.word	0x08002db9
 8002d3c:	08002de1 	.word	0x08002de1
 8002d40:	08002dd3 	.word	0x08002dd3
 8002d44:	08002de1 	.word	0x08002de1
 8002d48:	08002de1 	.word	0x08002de1
 8002d4c:	08002de1 	.word	0x08002de1
 8002d50:	08002de1 	.word	0x08002de1
 8002d54:	08002de1 	.word	0x08002de1
 8002d58:	08002de1 	.word	0x08002de1
 8002d5c:	08002de1 	.word	0x08002de1
 8002d60:	08002de1 	.word	0x08002de1
 8002d64:	08002de1 	.word	0x08002de1
 8002d68:	08002de1 	.word	0x08002de1
 8002d6c:	08002d7f 	.word	0x08002d7f
	{
		case SERVO_POSITION:
			data = feedbackPosition;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d74:	461a      	mov	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	601a      	str	r2, [r3, #0]
			return 0;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	e032      	b.n	8002de4 <_ZNK12ServoChannel11getVariableEhRl+0xf4>

		case SERVO_POSITION_RAW:
			data = *feedbackMeasurement << 4;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	011a      	lsls	r2, r3, #4
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	601a      	str	r2, [r3, #0]
			return 0;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	e029      	b.n	8002de4 <_ZNK12ServoChannel11getVariableEhRl+0xf4>

		case SERVO_TARGET_POSITION:
			data = targetPosition;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002d94:	461a      	mov	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	601a      	str	r2, [r3, #0]
			return 0;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	e022      	b.n	8002de4 <_ZNK12ServoChannel11getVariableEhRl+0xf4>

		case SERVO_POSITION_STARTPOINT:
			data = tPosToCanonic(pwmRef.start, pwm0Ref);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002da4:	4911      	ldr	r1, [pc, #68]	; (8002dec <_ZNK12ServoChannel11getVariableEhRl+0xfc>)
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 f835 	bl	8002e16 <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos>
 8002dac:	4603      	mov	r3, r0
 8002dae:	461a      	mov	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	601a      	str	r2, [r3, #0]
			return 0;
 8002db4:	2300      	movs	r3, #0
 8002db6:	e015      	b.n	8002de4 <_ZNK12ServoChannel11getVariableEhRl+0xf4>

		case SERVO_POSITION_ENDPOINT:
			data = tPosToCanonic(pwmRef.end, pwm0Ref);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8002dbe:	490b      	ldr	r1, [pc, #44]	; (8002dec <_ZNK12ServoChannel11getVariableEhRl+0xfc>)
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f000 f828 	bl	8002e16 <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	461a      	mov	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	601a      	str	r2, [r3, #0]
			return 0;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	e008      	b.n	8002de4 <_ZNK12ServoChannel11getVariableEhRl+0xf4>

		case SERVO_SENSOR_REFRESH_DIVIDER:
			data = (int32_t) refreshDivider;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	601a      	str	r2, [r3, #0]
			return 0;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	e001      	b.n	8002de4 <_ZNK12ServoChannel11getVariableEhRl+0xf4>

		default:
			return -1;
 8002de0:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	08009e88 	.word	0x08009e88

08002df0 <_ZNK12ServoChannel6getPosEv>:
{
	return targetPosition;
}

uint16_t ServoChannel::getPos() const
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
	return tPosToCanonic(*feedbackMeasurement, adcRef);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	881b      	ldrh	r3, [r3, #0]
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	333c      	adds	r3, #60	; 0x3c
 8002e04:	4619      	mov	r1, r3
 8002e06:	4610      	mov	r0, r2
 8002e08:	f000 f805 	bl	8002e16 <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos>
 8002e0c:	4603      	mov	r3, r0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos>:
{
	return *currentMeasurement;
}

uint16_t ServoChannel::tPosToCanonic(uint16_t pos, const ServoRefPos &frame)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	6039      	str	r1, [r7, #0]
 8002e20:	80fb      	strh	r3, [r7, #6]
	if (frame.end == frame.start)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	885a      	ldrh	r2, [r3, #2]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	881b      	ldrh	r3, [r3, #0]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d102      	bne.n	8002e34 <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos+0x1e>
	{
		return UINT16_MAX;
 8002e2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e32:	e04c      	b.n	8002ece <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos+0xb8>
	}
	else if (frame.end < frame.start)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	885a      	ldrh	r2, [r3, #2]
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	881b      	ldrh	r3, [r3, #0]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d224      	bcs.n	8002e8a <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos+0x74>
	{ // reversed servo
		// check if out of bounds
		if (pos <= frame.end)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	885b      	ldrh	r3, [r3, #2]
 8002e44:	88fa      	ldrh	r2, [r7, #6]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d802      	bhi.n	8002e50 <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos+0x3a>
		{
			return UINT16_MAX;
 8002e4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e4e:	e03e      	b.n	8002ece <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos+0xb8>
		}
		else if (pos >= frame.start)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	881b      	ldrh	r3, [r3, #0]
 8002e54:	88fa      	ldrh	r2, [r7, #6]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d301      	bcc.n	8002e5e <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos+0x48>
		{
			return 0;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	e037      	b.n	8002ece <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos+0xb8>
		}
		return UINT16_MAX - ((pos - frame.end) * (UINT16_MAX / (frame.start - frame.end)));
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	885b      	ldrh	r3, [r3, #2]
 8002e62:	88fa      	ldrh	r2, [r7, #6]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	885b      	ldrh	r3, [r3, #2]
 8002e72:	1acb      	subs	r3, r1, r3
 8002e74:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002e78:	fb91 f3f3 	sdiv	r3, r1, r3
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	fb12 f303 	smulbb	r3, r2, r3
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	43db      	mvns	r3, r3
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	e021      	b.n	8002ece <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos+0xb8>
	}

	// check if out of bounds
	if (pos <= frame.start)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	881b      	ldrh	r3, [r3, #0]
 8002e8e:	88fa      	ldrh	r2, [r7, #6]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d801      	bhi.n	8002e98 <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos+0x82>
	{
		return 0;
 8002e94:	2300      	movs	r3, #0
 8002e96:	e01a      	b.n	8002ece <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos+0xb8>
	}
	else if (pos >= frame.end)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	885b      	ldrh	r3, [r3, #2]
 8002e9c:	88fa      	ldrh	r2, [r7, #6]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d302      	bcc.n	8002ea8 <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos+0x92>
	{
		return UINT16_MAX;
 8002ea2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ea6:	e012      	b.n	8002ece <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos+0xb8>
	}

	return (pos - frame.start) * (UINT16_MAX / (frame.end - frame.start));
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	881b      	ldrh	r3, [r3, #0]
 8002eac:	88fa      	ldrh	r2, [r7, #6]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	885b      	ldrh	r3, [r3, #2]
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	881b      	ldrh	r3, [r3, #0]
 8002ebc:	1acb      	subs	r3, r1, r3
 8002ebe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002ec2:	fb91 f3f3 	sdiv	r3, r1, r3
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	fb12 f303 	smulbb	r3, r2, r3
 8002ecc:	b29b      	uxth	r3, r3
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <_ZN12ServoChannel15tPosFromCanonicEtRK11ServoRefPos>:

uint16_t ServoChannel::tPosFromCanonic(uint16_t pos, const ServoRefPos &frame)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b085      	sub	sp, #20
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	6039      	str	r1, [r7, #0]
 8002ee4:	80fb      	strh	r3, [r7, #6]
	if (frame.end == frame.start)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	885a      	ldrh	r2, [r3, #2]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	881b      	ldrh	r3, [r3, #0]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d102      	bne.n	8002ef8 <_ZN12ServoChannel15tPosFromCanonicEtRK11ServoRefPos+0x1e>
	{
		return frame.end;
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	885b      	ldrh	r3, [r3, #2]
 8002ef6:	e02d      	b.n	8002f54 <_ZN12ServoChannel15tPosFromCanonicEtRK11ServoRefPos+0x7a>
	}
	else if (frame.end < frame.start)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	885a      	ldrh	r2, [r3, #2]
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	881b      	ldrh	r3, [r3, #0]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d215      	bcs.n	8002f30 <_ZN12ServoChannel15tPosFromCanonicEtRK11ServoRefPos+0x56>
	{ // reversed servo
		uint16_t reversedPosition = UINT16_MAX - pos;
 8002f04:	88fb      	ldrh	r3, [r7, #6]
 8002f06:	43db      	mvns	r3, r3
 8002f08:	81fb      	strh	r3, [r7, #14]
		return (reversedPosition / (UINT16_MAX / (frame.start - frame.end))) + frame.end;
 8002f0a:	89fa      	ldrh	r2, [r7, #14]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	881b      	ldrh	r3, [r3, #0]
 8002f10:	4619      	mov	r1, r3
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	885b      	ldrh	r3, [r3, #2]
 8002f16:	1acb      	subs	r3, r1, r3
 8002f18:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002f1c:	fb91 f3f3 	sdiv	r3, r1, r3
 8002f20:	fb92 f3f3 	sdiv	r3, r2, r3
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	885b      	ldrh	r3, [r3, #2]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	e011      	b.n	8002f54 <_ZN12ServoChannel15tPosFromCanonicEtRK11ServoRefPos+0x7a>
	}

	return (pos / (UINT16_MAX / (frame.end - frame.start))) + frame.start;
 8002f30:	88fa      	ldrh	r2, [r7, #6]
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	885b      	ldrh	r3, [r3, #2]
 8002f36:	4619      	mov	r1, r3
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	881b      	ldrh	r3, [r3, #0]
 8002f3c:	1acb      	subs	r3, r1, r3
 8002f3e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002f42:	fb91 f3f3 	sdiv	r3, r1, r3
 8002f46:	fb92 f3f3 	sdiv	r3, r2, r3
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	881b      	ldrh	r3, [r3, #0]
 8002f50:	4413      	add	r3, r2
 8002f52:	b29b      	uxth	r3, r3
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3714      	adds	r7, #20
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <_ZN12ServoChannel7distPosEtt>:

uint16_t ServoChannel::distPos(uint16_t pos1, uint16_t pos2)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	460a      	mov	r2, r1
 8002f6a:	80fb      	strh	r3, [r7, #6]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	80bb      	strh	r3, [r7, #4]
	return pos1 < pos2 ? pos2 - pos1 : pos1 - pos2;
 8002f70:	88fa      	ldrh	r2, [r7, #6]
 8002f72:	88bb      	ldrh	r3, [r7, #4]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d204      	bcs.n	8002f82 <_ZN12ServoChannel7distPosEtt+0x22>
 8002f78:	88ba      	ldrh	r2, [r7, #4]
 8002f7a:	88fb      	ldrh	r3, [r7, #6]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	e003      	b.n	8002f8a <_ZN12ServoChannel7distPosEtt+0x2a>
 8002f82:	88fa      	ldrh	r2, [r7, #6]
 8002f84:	88bb      	ldrh	r3, [r7, #4]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	b29b      	uxth	r3, r3
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
	...

08002f98 <_ZN14AbstractModuleC1Ev>:
#ifndef ABSTRACTMODULE_H
#define ABSTRACTMODULE_H

class AbstractModule
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	4a04      	ldr	r2, [pc, #16]	; (8002fb4 <_ZN14AbstractModuleC1Ev+0x1c>)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	601a      	str	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	08009ec0 	.word	0x08009ec0

08002fb8 <_ZN12W25Qxx_FlashC1Ev>:
#include <STRHAL.h>
#include <channels/generic_channel_def.h>

#include <cstring>

W25Qxx_Flash::W25Qxx_Flash() :
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
		state(FlashState::IDLE), pageCount(0), sectorCount(0), can(Can::instance())
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7ff ffe8 	bl	8002f98 <_ZN14AbstractModuleC1Ev>
 8002fc8:	4a1a      	ldr	r2, [pc, #104]	; (8003034 <_ZN12W25Qxx_FlashC1Ev+0x7c>)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	711a      	strb	r2, [r3, #4]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	609a      	str	r2, [r3, #8]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	60da      	str	r2, [r3, #12]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	611a      	str	r2, [r3, #16]
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	f04f 0200 	mov.w	r2, #0
 8002fec:	f04f 0300 	mov.w	r3, #0
 8002ff0:	e9c1 2346 	strd	r2, r3, [r1, #280]	; 0x118
 8002ff4:	6879      	ldr	r1, [r7, #4]
 8002ff6:	f04f 0200 	mov.w	r2, #0
 8002ffa:	f04f 0300 	mov.w	r3, #0
 8002ffe:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
 800301a:	2000      	movs	r0, #0
 800301c:	f7fd f924 	bl	8000268 <_ZN3Can8instanceEm>
 8003020:	4602      	mov	r2, r0
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
{
}
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4618      	mov	r0, r3
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	08009ed4 	.word	0x08009ed4

08003038 <_ZN12W25Qxx_Flash8instanceEv>:

W25Qxx_Flash& W25Qxx_Flash::instance()
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
	static W25Qxx_Flash instance;
 800303c:	4b10      	ldr	r3, [pc, #64]	; (8003080 <_ZN12W25Qxx_Flash8instanceEv+0x48>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	f3bf 8f5b 	dmb	ish
 8003044:	b2db      	uxtb	r3, r3
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	bf0c      	ite	eq
 800304e:	2301      	moveq	r3, #1
 8003050:	2300      	movne	r3, #0
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b00      	cmp	r3, #0
 8003056:	d010      	beq.n	800307a <_ZN12W25Qxx_Flash8instanceEv+0x42>
 8003058:	4809      	ldr	r0, [pc, #36]	; (8003080 <_ZN12W25Qxx_Flash8instanceEv+0x48>)
 800305a:	f006 fcbb 	bl	80099d4 <__cxa_guard_acquire>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	bf14      	ite	ne
 8003064:	2301      	movne	r3, #1
 8003066:	2300      	moveq	r3, #0
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d005      	beq.n	800307a <_ZN12W25Qxx_Flash8instanceEv+0x42>
 800306e:	4805      	ldr	r0, [pc, #20]	; (8003084 <_ZN12W25Qxx_Flash8instanceEv+0x4c>)
 8003070:	f7ff ffa2 	bl	8002fb8 <_ZN12W25Qxx_FlashC1Ev>
 8003074:	4802      	ldr	r0, [pc, #8]	; (8003080 <_ZN12W25Qxx_Flash8instanceEv+0x48>)
 8003076:	f006 fcb9 	bl	80099ec <__cxa_guard_release>

	return instance;
 800307a:	4b02      	ldr	r3, [pc, #8]	; (8003084 <_ZN12W25Qxx_Flash8instanceEv+0x4c>)
}
 800307c:	4618      	mov	r0, r3
 800307e:	bd80      	pop	{r7, pc}
 8003080:	20000a58 	.word	0x20000a58
 8003084:	20000820 	.word	0x20000820

08003088 <_ZN12W25Qxx_Flash4initEv>:

int W25Qxx_Flash::init()
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
	memset(loggingBuffer, 0, 256);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8003096:	f44f 7280 	mov.w	r2, #256	; 0x100
 800309a:	2100      	movs	r1, #0
 800309c:	4618      	mov	r0, r3
 800309e:	f006 fd05 	bl	8009aac <memset>

	STRHAL_QSPI_Config_t qspi_conf;
	qspi_conf.clk_level = 0x0;
 80030a2:	7bbb      	ldrb	r3, [r7, #14]
 80030a4:	f36f 0300 	bfc	r3, #0, #1
 80030a8:	73bb      	strb	r3, [r7, #14]
	qspi_conf.flash_size = SIZE_2N;
 80030aa:	7b7b      	ldrb	r3, [r7, #13]
 80030ac:	f043 031f 	orr.w	r3, r3, #31
 80030b0:	737b      	strb	r3, [r7, #13]
	qspi_conf.ncs_high_time = 0x7;
 80030b2:	7b7b      	ldrb	r3, [r7, #13]
 80030b4:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80030b8:	737b      	strb	r3, [r7, #13]
	qspi_conf.psc = 19;
 80030ba:	7b3b      	ldrb	r3, [r7, #12]
 80030bc:	2213      	movs	r2, #19
 80030be:	f362 0304 	bfi	r3, r2, #0, #5
 80030c2:	733b      	strb	r3, [r7, #12]

	if (STRHAL_QSPI_Flash_Init(&qspi_conf) < 0)
 80030c4:	f107 030c 	add.w	r3, r7, #12
 80030c8:	4618      	mov	r0, r3
 80030ca:	f004 fdf3 	bl	8007cb4 <STRHAL_QSPI_Flash_Init>
 80030ce:	4603      	mov	r3, r0
 80030d0:	0fdb      	lsrs	r3, r3, #31
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d002      	beq.n	80030de <_ZN12W25Qxx_Flash4initEv+0x56>
		return -1;
 80030d8:	f04f 33ff 	mov.w	r3, #4294967295
 80030dc:	e029      	b.n	8003132 <_ZN12W25Qxx_Flash4initEv+0xaa>

	STRHAL_QSPI_Run();
 80030de:	f004 fe5b 	bl	8007d98 <STRHAL_QSPI_Run>

	if (!enter4ByteAddrMode())
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 fad8 	bl	8003698 <_ZN12W25Qxx_Flash18enter4ByteAddrModeEv>
 80030e8:	4603      	mov	r3, r0
 80030ea:	f083 0301 	eor.w	r3, r3, #1
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d002      	beq.n	80030fa <_ZN12W25Qxx_Flash4initEv+0x72>
	{
		return -1;
 80030f4:	f04f 33ff 	mov.w	r3, #4294967295
 80030f8:	e01b      	b.n	8003132 <_ZN12W25Qxx_Flash4initEv+0xaa>
	}

	if (!writeEnable())
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 fa5f 	bl	80035be <_ZN12W25Qxx_Flash11writeEnableEv>
 8003100:	4603      	mov	r3, r0
 8003102:	f083 0301 	eor.w	r3, r3, #1
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b00      	cmp	r3, #0
 800310a:	d002      	beq.n	8003112 <_ZN12W25Qxx_Flash4initEv+0x8a>
	{
		return -1;
 800310c:	f04f 33ff 	mov.w	r3, #4294967295
 8003110:	e00f      	b.n	8003132 <_ZN12W25Qxx_Flash4initEv+0xaa>
	}

	if (!disableWPS())
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 fa7f 	bl	8003616 <_ZN12W25Qxx_Flash10disableWPSEv>
 8003118:	4603      	mov	r3, r0
 800311a:	f083 0301 	eor.w	r3, r3, #1
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b00      	cmp	r3, #0
 8003122:	d002      	beq.n	800312a <_ZN12W25Qxx_Flash4initEv+0xa2>
	{
		return -1;
 8003124:	f04f 33ff 	mov.w	r3, #4294967295
 8003128:	e003      	b.n	8003132 <_ZN12W25Qxx_Flash4initEv+0xaa>
	}

	LL_mDelay(10);
 800312a:	200a      	movs	r0, #10
 800312c:	f002 faca 	bl	80056c4 <LL_mDelay>

	return 0;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <_ZN12W25Qxx_Flash4execEv>:

int W25Qxx_Flash::exec()
{
 800313a:	b5b0      	push	{r4, r5, r7, lr}
 800313c:	b086      	sub	sp, #24
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
	uint64_t time = STRHAL_Systick_GetTick();
 8003142:	f005 f8e3 	bl	800830c <STRHAL_Systick_GetTick>
 8003146:	e9c7 0102 	strd	r0, r1, [r7, #8]
	if ((time - timeLastSample) < EXEC_SAMPLE_TICKS)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	; 0x118
 8003150:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003154:	1a84      	subs	r4, r0, r2
 8003156:	eb61 0503 	sbc.w	r5, r1, r3
 800315a:	2c0a      	cmp	r4, #10
 800315c:	f175 0300 	sbcs.w	r3, r5, #0
 8003160:	d201      	bcs.n	8003166 <_ZN12W25Qxx_Flash4execEv+0x2c>
		return 0;
 8003162:	2300      	movs	r3, #0
 8003164:	e039      	b.n	80031da <_ZN12W25Qxx_Flash4execEv+0xa0>

	timeLastSample = time;
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800316c:	e9c1 2346 	strd	r2, r3, [r1, #280]	; 0x118

	// Current State Logic - executes state logic, also returns new state if transition conditions are met
	internalNextState = currentStateLogic(time);
 8003170:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 f849 	bl	800320c <_ZN12W25Qxx_Flash17currentStateLogicEy>
 800317a:	4602      	mov	r2, r0
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	FlashState nextState = state;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	617b      	str	r3, [r7, #20]

	if (externalNextState != state)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	429a      	cmp	r2, r3
 8003194:	d004      	beq.n	80031a0 <_ZN12W25Qxx_Flash4execEv+0x66>
	{ // Prioritize external event - there has to be some kind of priority, because internal could be different to external -> external means CAN -> either Sequence or Abort
		nextState = externalNextState;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800319c:	617b      	str	r3, [r7, #20]
 800319e:	e010      	b.n	80031c2 <_ZN12W25Qxx_Flash4execEv+0x88>
	}
	else if (internalNextState != state)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d009      	beq.n	80031c2 <_ZN12W25Qxx_Flash4execEv+0x88>
	{
		externalNextState = internalNextState; // Incase an internal state change happens, the external state, which is from some previous change would block it, so it is updated here
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
		nextState = internalNextState;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80031c0:	617b      	str	r3, [r7, #20]
	}

	// Next State Logic
	if (nextState != state)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d005      	beq.n	80031d8 <_ZN12W25Qxx_Flash4execEv+0x9e>
	{
		nextStateLogic(nextState, time);
 80031cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031d0:	6979      	ldr	r1, [r7, #20]
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f86c 	bl	80032b0 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey>
	}

	return 0;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3718      	adds	r7, #24
 80031de:	46bd      	mov	sp, r7
 80031e0:	bdb0      	pop	{r4, r5, r7, pc}

080031e2 <_ZN12W25Qxx_Flash5resetEv>:

int W25Qxx_Flash::reset()
{
 80031e2:	b480      	push	{r7}
 80031e4:	b083      	sub	sp, #12
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
	state = FlashState::IDLE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	609a      	str	r2, [r3, #8]
	pageCount = 0;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	60da      	str	r2, [r3, #12]
	sectorCount = 0;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	611a      	str	r2, [r3, #16]
	return 0;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
	...

0800320c <_ZN12W25Qxx_Flash17currentStateLogicEy>:

FlashState W25Qxx_Flash::currentStateLogic(uint64_t time)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	e9c7 2300 	strd	r2, r3, [r7]
	switch (state)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	2b04      	cmp	r3, #4
 800321e:	d839      	bhi.n	8003294 <_ZN12W25Qxx_Flash17currentStateLogicEy+0x88>
 8003220:	a201      	add	r2, pc, #4	; (adr r2, 8003228 <_ZN12W25Qxx_Flash17currentStateLogicEy+0x1c>)
 8003222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003226:	bf00      	nop
 8003228:	08003295 	.word	0x08003295
 800322c:	0800323d 	.word	0x0800323d
 8003230:	08003295 	.word	0x08003295
 8003234:	08003263 	.word	0x08003263
 8003238:	08003295 	.word	0x08003295
		case FlashState::IDLE:
			break;
		case FlashState::CLEARING:
		{
			uint8_t sreg1;
			if (!readSREG1(sreg1))
 800323c:	f107 0317 	add.w	r3, r7, #23
 8003240:	4619      	mov	r1, r3
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 f996 	bl	8003574 <_ZNK12W25Qxx_Flash9readSREG1ERh>
 8003248:	4603      	mov	r3, r0
 800324a:	f083 0301 	eor.w	r3, r3, #1
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b00      	cmp	r3, #0
 8003252:	d121      	bne.n	8003298 <_ZN12W25Qxx_Flash17currentStateLogicEy+0x8c>
				break;
			if (!(sreg1 & 0x01))
 8003254:	7dfb      	ldrb	r3, [r7, #23]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d11e      	bne.n	800329c <_ZN12W25Qxx_Flash17currentStateLogicEy+0x90>
				return FlashState::READY;
 800325e:	2302      	movs	r3, #2
 8003260:	e021      	b.n	80032a6 <_ZN12W25Qxx_Flash17currentStateLogicEy+0x9a>
			break;
		}
		case FlashState::READY:
			break;
		case FlashState::LOGGING:
			if (loggingIndex + 64 >= 256)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 8003268:	2bbf      	cmp	r3, #191	; 0xbf
 800326a:	d919      	bls.n	80032a0 <_ZN12W25Qxx_Flash17currentStateLogicEy+0x94>
			{
				lock = true;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2201      	movs	r2, #1
 8003270:	711a      	strb	r2, [r3, #4]
				writeNextPage(loggingBuffer, 256);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8003278:	f44f 7280 	mov.w	r2, #256	; 0x100
 800327c:	4619      	mov	r1, r3
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 fa30 	bl	80036e4 <_ZN12W25Qxx_Flash13writeNextPageEPKhm>
				loggingIndex = 0;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
				lock = false;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	711a      	strb	r2, [r3, #4]
			}
			break;
 8003292:	e005      	b.n	80032a0 <_ZN12W25Qxx_Flash17currentStateLogicEy+0x94>
		case FlashState::FULL:
			break;
		default:
			break;
 8003294:	bf00      	nop
 8003296:	e004      	b.n	80032a2 <_ZN12W25Qxx_Flash17currentStateLogicEy+0x96>
				break;
 8003298:	bf00      	nop
 800329a:	e002      	b.n	80032a2 <_ZN12W25Qxx_Flash17currentStateLogicEy+0x96>
			break;
 800329c:	bf00      	nop
 800329e:	e000      	b.n	80032a2 <_ZN12W25Qxx_Flash17currentStateLogicEy+0x96>
			break;
 80032a0:	bf00      	nop
	}
	return state;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	689b      	ldr	r3, [r3, #8]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3718      	adds	r7, #24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop

080032b0 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey>:

void W25Qxx_Flash::nextStateLogic(FlashState nextState, uint64_t time)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	e9c7 2300 	strd	r2, r3, [r7]
	timeLastTransition = time;
 80032be:	68f9      	ldr	r1, [r7, #12]
 80032c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032c4:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
	switch (nextState)
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	d86f      	bhi.n	80033ae <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0xfe>
 80032ce:	a201      	add	r2, pc, #4	; (adr r2, 80032d4 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x24>)
 80032d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d4:	080032e9 	.word	0x080032e9
 80032d8:	080032ff 	.word	0x080032ff
 80032dc:	0800334b 	.word	0x0800334b
 80032e0:	08003385 	.word	0x08003385
 80032e4:	0800339b 	.word	0x0800339b
	{
		case FlashState::IDLE:
			if (state != FlashState::LOGGING)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	2b03      	cmp	r3, #3
 80032ee:	d167      	bne.n	80033c0 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x110>
			{
				return;
			}
			pageCount = 0;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	60da      	str	r2, [r3, #12]
			sectorCount = 0;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	611a      	str	r2, [r3, #16]
			break;
 80032fc:	e05c      	b.n	80033b8 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x108>
		case FlashState::CLEARING:
			if (state != FlashState::IDLE)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d15e      	bne.n	80033c4 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x114>
			{
				return;
			}
			STRHAL_UART_Write_Blocking(STRHAL_UART_DEBUG, "CLEARING!\n", 10, 100);
 8003306:	2364      	movs	r3, #100	; 0x64
 8003308:	220a      	movs	r2, #10
 800330a:	4936      	ldr	r1, [pc, #216]	; (80033e4 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x134>)
 800330c:	2002      	movs	r0, #2
 800330e:	f006 f9bb 	bl	8009688 <STRHAL_UART_Write_Blocking>
			if (!sendClearInitiated())
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f000 f887 	bl	8003426 <_ZN12W25Qxx_Flash18sendClearInitiatedEv>
 8003318:	4603      	mov	r3, r0
 800331a:	f083 0301 	eor.w	r3, r3, #1
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	d151      	bne.n	80033c8 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x118>
				return;
			if (!readConfig())
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f000 fb57 	bl	80039d8 <_ZN12W25Qxx_Flash10readConfigEv>
 800332a:	4603      	mov	r3, r0
 800332c:	f083 0301 	eor.w	r3, r3, #1
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d14a      	bne.n	80033cc <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x11c>
				return;

			if (!chipErase())
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f000 fc00 	bl	8003b3c <_ZN12W25Qxx_Flash9chipEraseEv>
 800333c:	4603      	mov	r3, r0
 800333e:	f083 0301 	eor.w	r3, r3, #1
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b00      	cmp	r3, #0
 8003346:	d034      	beq.n	80033b2 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x102>
				return;
 8003348:	e049      	b.n	80033de <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>
			break;
		case FlashState::READY:
			STRHAL_UART_Write_Blocking(STRHAL_UART_DEBUG, "READY!\n", 7, 100);
 800334a:	2364      	movs	r3, #100	; 0x64
 800334c:	2207      	movs	r2, #7
 800334e:	4926      	ldr	r1, [pc, #152]	; (80033e8 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x138>)
 8003350:	2002      	movs	r0, #2
 8003352:	f006 f999 	bl	8009688 <STRHAL_UART_Write_Blocking>
			if (state != FlashState::CLEARING)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d138      	bne.n	80033d0 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x120>
			{
				return;
			}
			if (!writeTempConfig())
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f000 fa90 	bl	8003884 <_ZN12W25Qxx_Flash15writeTempConfigEv>
 8003364:	4603      	mov	r3, r0
 8003366:	f083 0301 	eor.w	r3, r3, #1
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	d131      	bne.n	80033d4 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x124>
				return;
			if (!sendClearDone())
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f000 f880 	bl	8003476 <_ZN12W25Qxx_Flash13sendClearDoneEv>
 8003376:	4603      	mov	r3, r0
 8003378:	f083 0301 	eor.w	r3, r3, #1
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d019      	beq.n	80033b6 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x106>
				return;
 8003382:	e02c      	b.n	80033de <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>

			break;
		case FlashState::LOGGING:
			if (state != FlashState::READY)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	2b02      	cmp	r3, #2
 800338a:	d125      	bne.n	80033d8 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x128>
			{
				return;
			}
			STRHAL_UART_Write_Blocking(STRHAL_UART_DEBUG, "LOGGING!\n", 9, 100);
 800338c:	2364      	movs	r3, #100	; 0x64
 800338e:	2209      	movs	r2, #9
 8003390:	4916      	ldr	r1, [pc, #88]	; (80033ec <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x13c>)
 8003392:	2002      	movs	r0, #2
 8003394:	f006 f978 	bl	8009688 <STRHAL_UART_Write_Blocking>
			break;
 8003398:	e00e      	b.n	80033b8 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x108>
		case FlashState::FULL:
			if (!sendFull())
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f000 f893 	bl	80034c6 <_ZN12W25Qxx_Flash8sendFullEv>
 80033a0:	4603      	mov	r3, r0
 80033a2:	f083 0301 	eor.w	r3, r3, #1
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d117      	bne.n	80033dc <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12c>
				return;
			break;
 80033ac:	e004      	b.n	80033b8 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x108>
		default:
			break;
 80033ae:	bf00      	nop
 80033b0:	e002      	b.n	80033b8 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x108>
			break;
 80033b2:	bf00      	nop
 80033b4:	e000      	b.n	80033b8 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x108>
			break;
 80033b6:	bf00      	nop
	}
	state = nextState;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	609a      	str	r2, [r3, #8]
	return;
 80033be:	e00e      	b.n	80033de <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>
				return;
 80033c0:	bf00      	nop
 80033c2:	e00c      	b.n	80033de <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>
				return;
 80033c4:	bf00      	nop
 80033c6:	e00a      	b.n	80033de <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>
				return;
 80033c8:	bf00      	nop
 80033ca:	e008      	b.n	80033de <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>
				return;
 80033cc:	bf00      	nop
 80033ce:	e006      	b.n	80033de <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>
				return;
 80033d0:	bf00      	nop
 80033d2:	e004      	b.n	80033de <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>
				return;
 80033d4:	bf00      	nop
 80033d6:	e002      	b.n	80033de <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>
				return;
 80033d8:	bf00      	nop
 80033da:	e000      	b.n	80033de <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>
				return;
 80033dc:	bf00      	nop
}
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	08009d04 	.word	0x08009d04
 80033e8:	08009d10 	.word	0x08009d10
 80033ec:	08009d18 	.word	0x08009d18

080033f0 <_ZN12W25Qxx_Flash8setStateE10FlashState>:

void W25Qxx_Flash::setState(FlashState nextState)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
	externalNextState = nextState;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <_ZN12W25Qxx_Flash8getStateEv>:

FlashState W25Qxx_Flash::getState()
{
 800340e:	b480      	push	{r7}
 8003410:	b083      	sub	sp, #12
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
	return state;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689b      	ldr	r3, [r3, #8]
}
 800341a:	4618      	mov	r0, r3
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <_ZN12W25Qxx_Flash18sendClearInitiatedEv>:

bool W25Qxx_Flash::sendClearInitiated()
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b094      	sub	sp, #80	; 0x50
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
	Can_MessageData_t msgData =
 800342e:	f107 030c 	add.w	r3, r7, #12
 8003432:	2242      	movs	r2, #66	; 0x42
 8003434:	2100      	movs	r1, #0
 8003436:	4618      	mov	r0, r3
 8003438:	f006 fb38 	bl	8009aac <memset>
	{ 0 };
	msgData.bit.cmd_id = GENERIC_RES_FLASH_STATUS;
 800343c:	2313      	movs	r3, #19
 800343e:	737b      	strb	r3, [r7, #13]
	msgData.bit.info.channel_id = GENERIC_CHANNEL_ID;
 8003440:	7b3b      	ldrb	r3, [r7, #12]
 8003442:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8003446:	733b      	strb	r3, [r7, #12]
	msgData.bit.info.buffer = DIRECT_BUFFER;
 8003448:	7b3b      	ldrb	r3, [r7, #12]
 800344a:	f36f 1387 	bfc	r3, #6, #2
 800344e:	733b      	strb	r3, [r7, #12]
	msgData.bit.data.uint8[0] = INITIATED;
 8003450:	2300      	movs	r3, #0
 8003452:	73bb      	strb	r3, [r7, #14]

	return (can.send(0, (uint8_t*) &msgData, 1 + sizeof(uint32_t)) == 0) ? true : false;
 8003454:	f107 030c 	add.w	r3, r7, #12
 8003458:	2205      	movs	r2, #5
 800345a:	4619      	mov	r1, r3
 800345c:	2000      	movs	r0, #0
 800345e:	f7fd f8f9 	bl	8000654 <_ZN3Can4sendEmPhh>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	bf0c      	ite	eq
 8003468:	2301      	moveq	r3, #1
 800346a:	2300      	movne	r3, #0
 800346c:	b2db      	uxtb	r3, r3
}
 800346e:	4618      	mov	r0, r3
 8003470:	3750      	adds	r7, #80	; 0x50
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <_ZN12W25Qxx_Flash13sendClearDoneEv>:

bool W25Qxx_Flash::sendClearDone()
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b094      	sub	sp, #80	; 0x50
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
	Can_MessageData_t msgData =
 800347e:	f107 030c 	add.w	r3, r7, #12
 8003482:	2242      	movs	r2, #66	; 0x42
 8003484:	2100      	movs	r1, #0
 8003486:	4618      	mov	r0, r3
 8003488:	f006 fb10 	bl	8009aac <memset>
	{ 0 };
	msgData.bit.cmd_id = GENERIC_RES_FLASH_STATUS;
 800348c:	2313      	movs	r3, #19
 800348e:	737b      	strb	r3, [r7, #13]
	msgData.bit.info.channel_id = GENERIC_CHANNEL_ID;
 8003490:	7b3b      	ldrb	r3, [r7, #12]
 8003492:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8003496:	733b      	strb	r3, [r7, #12]
	msgData.bit.info.buffer = DIRECT_BUFFER;
 8003498:	7b3b      	ldrb	r3, [r7, #12]
 800349a:	f36f 1387 	bfc	r3, #6, #2
 800349e:	733b      	strb	r3, [r7, #12]
	msgData.bit.data.uint8[0] = COMPLETED;
 80034a0:	2301      	movs	r3, #1
 80034a2:	73bb      	strb	r3, [r7, #14]

	return (can.send(0, (uint8_t*) &msgData, 1 + sizeof(uint32_t)) == 0) ? true : false;
 80034a4:	f107 030c 	add.w	r3, r7, #12
 80034a8:	2205      	movs	r2, #5
 80034aa:	4619      	mov	r1, r3
 80034ac:	2000      	movs	r0, #0
 80034ae:	f7fd f8d1 	bl	8000654 <_ZN3Can4sendEmPhh>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	bf0c      	ite	eq
 80034b8:	2301      	moveq	r3, #1
 80034ba:	2300      	movne	r3, #0
 80034bc:	b2db      	uxtb	r3, r3
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3750      	adds	r7, #80	; 0x50
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <_ZN12W25Qxx_Flash8sendFullEv>:

bool W25Qxx_Flash::sendFull()
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b094      	sub	sp, #80	; 0x50
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
	Can_MessageData_t msgData =
 80034ce:	f107 030c 	add.w	r3, r7, #12
 80034d2:	2242      	movs	r2, #66	; 0x42
 80034d4:	2100      	movs	r1, #0
 80034d6:	4618      	mov	r0, r3
 80034d8:	f006 fae8 	bl	8009aac <memset>
	{ 0 };
	msgData.bit.cmd_id = GENERIC_RES_FLASH_STATUS;
 80034dc:	2313      	movs	r3, #19
 80034de:	737b      	strb	r3, [r7, #13]
	msgData.bit.info.channel_id = GENERIC_CHANNEL_ID;
 80034e0:	7b3b      	ldrb	r3, [r7, #12]
 80034e2:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 80034e6:	733b      	strb	r3, [r7, #12]
	msgData.bit.info.buffer = DIRECT_BUFFER;
 80034e8:	7b3b      	ldrb	r3, [r7, #12]
 80034ea:	f36f 1387 	bfc	r3, #6, #2
 80034ee:	733b      	strb	r3, [r7, #12]
	msgData.bit.data.uint8[0] = FULL;
 80034f0:	2302      	movs	r3, #2
 80034f2:	73bb      	strb	r3, [r7, #14]

	return (can.send(0, (uint8_t*) &msgData, 1 + sizeof(uint32_t)) == 0) ? true : false;
 80034f4:	f107 030c 	add.w	r3, r7, #12
 80034f8:	2205      	movs	r2, #5
 80034fa:	4619      	mov	r1, r3
 80034fc:	2000      	movs	r0, #0
 80034fe:	f7fd f8a9 	bl	8000654 <_ZN3Can4sendEmPhh>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	bf0c      	ite	eq
 8003508:	2301      	moveq	r3, #1
 800350a:	2300      	movne	r3, #0
 800350c:	b2db      	uxtb	r3, r3
}
 800350e:	4618      	mov	r0, r3
 8003510:	3750      	adds	r7, #80	; 0x50
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <_ZN12W25Qxx_Flash6addLogEPhh>:

void W25Qxx_Flash::addLog(uint8_t *data, uint8_t n)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b084      	sub	sp, #16
 800351a:	af00      	add	r7, sp, #0
 800351c:	60f8      	str	r0, [r7, #12]
 800351e:	60b9      	str	r1, [r7, #8]
 8003520:	4613      	mov	r3, r2
 8003522:	71fb      	strb	r3, [r7, #7]
	if (state != FlashState::LOGGING)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	2b03      	cmp	r3, #3
 800352a:	d11d      	bne.n	8003568 <_ZN12W25Qxx_Flash6addLogEPhh+0x52>
		return;
	if (loggingIndex + n >= 256)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 8003532:	461a      	mov	r2, r3
 8003534:	79fb      	ldrb	r3, [r7, #7]
 8003536:	4413      	add	r3, r2
 8003538:	2bff      	cmp	r3, #255	; 0xff
 800353a:	dc17      	bgt.n	800356c <_ZN12W25Qxx_Flash6addLogEPhh+0x56>
		return;
	memcpy(&loggingBuffer[loggingIndex], data, n);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 8003542:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	4413      	add	r3, r2
 800354a:	79fa      	ldrb	r2, [r7, #7]
 800354c:	68b9      	ldr	r1, [r7, #8]
 800354e:	4618      	mov	r0, r3
 8003550:	f006 fa9e 	bl	8009a90 <memcpy>
	loggingIndex += n;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f893 2230 	ldrb.w	r2, [r3, #560]	; 0x230
 800355a:	79fb      	ldrb	r3, [r7, #7]
 800355c:	4413      	add	r3, r2
 800355e:	b2da      	uxtb	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
 8003566:	e002      	b.n	800356e <_ZN12W25Qxx_Flash6addLogEPhh+0x58>
		return;
 8003568:	bf00      	nop
 800356a:	e000      	b.n	800356e <_ZN12W25Qxx_Flash6addLogEPhh+0x58>
		return;
 800356c:	bf00      	nop
}
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <_ZNK12W25Qxx_Flash9readSREG1ERh>:

bool W25Qxx_Flash::readSREG1(uint8_t &sreg1) const
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b088      	sub	sp, #32
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
	STRHAL_QSPI_Command_t cmd;
	cmd.instruction_size = 1;
 800357e:	2301      	movs	r3, #1
 8003580:	737b      	strb	r3, [r7, #13]
	cmd.addr_size = 0;
 8003582:	2300      	movs	r3, #0
 8003584:	753b      	strb	r3, [r7, #20]
	cmd.alt_size = 0;
 8003586:	2300      	movs	r3, #0
 8003588:	757b      	strb	r3, [r7, #21]
	cmd.dummy_size = 0;
 800358a:	2300      	movs	r3, #0
 800358c:	773b      	strb	r3, [r7, #28]

	cmd.instruction = 0x05;
 800358e:	2305      	movs	r3, #5
 8003590:	733b      	strb	r3, [r7, #12]
	if (STRHAL_QSPI_Indirect_Read(&cmd, &sreg1, 1, 100) != 1)
 8003592:	f107 000c 	add.w	r0, r7, #12
 8003596:	2364      	movs	r3, #100	; 0x64
 8003598:	2201      	movs	r2, #1
 800359a:	6839      	ldr	r1, [r7, #0]
 800359c:	f004 fcc6 	bl	8007f2c <STRHAL_QSPI_Indirect_Read>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	bf14      	ite	ne
 80035a6:	2301      	movne	r3, #1
 80035a8:	2300      	moveq	r3, #0
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <_ZNK12W25Qxx_Flash9readSREG1ERh+0x40>
		return false;
 80035b0:	2300      	movs	r3, #0
 80035b2:	e000      	b.n	80035b6 <_ZNK12W25Qxx_Flash9readSREG1ERh+0x42>

	return true;
 80035b4:	2301      	movs	r3, #1
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3720      	adds	r7, #32
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <_ZN12W25Qxx_Flash11writeEnableEv>:
{
	return readSREG1(sreg1) && readSREG2(sreg2) && readSREG3(sreg3);
}

bool W25Qxx_Flash::writeEnable()
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b088      	sub	sp, #32
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
	STRHAL_QSPI_Command_t cmd;
	cmd.instruction = 0x06;
 80035c6:	2306      	movs	r3, #6
 80035c8:	733b      	strb	r3, [r7, #12]
	cmd.instruction_size = 1;
 80035ca:	2301      	movs	r3, #1
 80035cc:	737b      	strb	r3, [r7, #13]
	cmd.addr_size = 0;
 80035ce:	2300      	movs	r3, #0
 80035d0:	753b      	strb	r3, [r7, #20]
	cmd.alt_size = 0;
 80035d2:	2300      	movs	r3, #0
 80035d4:	757b      	strb	r3, [r7, #21]
	cmd.dummy_size = 0;
 80035d6:	2300      	movs	r3, #0
 80035d8:	773b      	strb	r3, [r7, #28]

	if (waitForSREGFlag(0x01, false, 100) < 0)
 80035da:	2364      	movs	r3, #100	; 0x64
 80035dc:	2200      	movs	r2, #0
 80035de:	2101      	movs	r1, #1
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 fae9 	bl	8003bb8 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt>
 80035e6:	4603      	mov	r3, r0
 80035e8:	0fdb      	lsrs	r3, r3, #31
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <_ZN12W25Qxx_Flash11writeEnableEv+0x36>
		return false;
 80035f0:	2300      	movs	r3, #0
 80035f2:	e00c      	b.n	800360e <_ZN12W25Qxx_Flash11writeEnableEv+0x50>

	return STRHAL_QSPI_Indirect_Write(&cmd, nullptr, 0, 100) == 0;
 80035f4:	f107 000c 	add.w	r0, r7, #12
 80035f8:	2364      	movs	r3, #100	; 0x64
 80035fa:	2200      	movs	r2, #0
 80035fc:	2100      	movs	r1, #0
 80035fe:	f004 fbdb 	bl	8007db8 <STRHAL_QSPI_Indirect_Write>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	bf0c      	ite	eq
 8003608:	2301      	moveq	r3, #1
 800360a:	2300      	movne	r3, #0
 800360c:	b2db      	uxtb	r3, r3
}
 800360e:	4618      	mov	r0, r3
 8003610:	3720      	adds	r7, #32
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <_ZN12W25Qxx_Flash10disableWPSEv>:

	return true;
}

bool W25Qxx_Flash::disableWPS()
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b088      	sub	sp, #32
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
	STRHAL_QSPI_Command_t cmd;
	cmd.instruction = 0x11;
 800361e:	2311      	movs	r3, #17
 8003620:	733b      	strb	r3, [r7, #12]
	//cmd.instruction = 0x98;
	cmd.instruction_size = 1;
 8003622:	2301      	movs	r3, #1
 8003624:	737b      	strb	r3, [r7, #13]
	cmd.addr = 0;
 8003626:	2300      	movs	r3, #0
 8003628:	613b      	str	r3, [r7, #16]
	cmd.addr_size = 0;
 800362a:	2300      	movs	r3, #0
 800362c:	753b      	strb	r3, [r7, #20]
	cmd.alt_size = 0;
 800362e:	2300      	movs	r3, #0
 8003630:	757b      	strb	r3, [r7, #21]
	cmd.dummy_size = 0;
 8003632:	2300      	movs	r3, #0
 8003634:	773b      	strb	r3, [r7, #28]

	uint8_t value = 0xFB;
 8003636:	23fb      	movs	r3, #251	; 0xfb
 8003638:	72fb      	strb	r3, [r7, #11]

	if (waitForSREGFlag(0x01, false, 10) < 0)
 800363a:	230a      	movs	r3, #10
 800363c:	2200      	movs	r2, #0
 800363e:	2101      	movs	r1, #1
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 fab9 	bl	8003bb8 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt>
 8003646:	4603      	mov	r3, r0
 8003648:	0fdb      	lsrs	r3, r3, #31
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <_ZN12W25Qxx_Flash10disableWPSEv+0x3e>
		return false;
 8003650:	2300      	movs	r3, #0
 8003652:	e01d      	b.n	8003690 <_ZN12W25Qxx_Flash10disableWPSEv+0x7a>

	if (!writeEnable())
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f7ff ffb2 	bl	80035be <_ZN12W25Qxx_Flash11writeEnableEv>
 800365a:	4603      	mov	r3, r0
 800365c:	f083 0301 	eor.w	r3, r3, #1
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <_ZN12W25Qxx_Flash10disableWPSEv+0x54>
		return false;
 8003666:	2300      	movs	r3, #0
 8003668:	e012      	b.n	8003690 <_ZN12W25Qxx_Flash10disableWPSEv+0x7a>

	if (STRHAL_QSPI_Indirect_Write(&cmd, &value, 1, 100) != 1)
 800366a:	f107 010b 	add.w	r1, r7, #11
 800366e:	f107 000c 	add.w	r0, r7, #12
 8003672:	2364      	movs	r3, #100	; 0x64
 8003674:	2201      	movs	r2, #1
 8003676:	f004 fb9f 	bl	8007db8 <STRHAL_QSPI_Indirect_Write>
 800367a:	4603      	mov	r3, r0
 800367c:	2b01      	cmp	r3, #1
 800367e:	bf14      	ite	ne
 8003680:	2301      	movne	r3, #1
 8003682:	2300      	moveq	r3, #0
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <_ZN12W25Qxx_Flash10disableWPSEv+0x78>
		return false;
 800368a:	2300      	movs	r3, #0
 800368c:	e000      	b.n	8003690 <_ZN12W25Qxx_Flash10disableWPSEv+0x7a>

	return true;
 800368e:	2301      	movs	r3, #1
}
 8003690:	4618      	mov	r0, r3
 8003692:	3720      	adds	r7, #32
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <_ZN12W25Qxx_Flash18enter4ByteAddrModeEv>:

bool W25Qxx_Flash::enter4ByteAddrMode()
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b088      	sub	sp, #32
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
	STRHAL_QSPI_Command_t cmd;
	cmd.instruction = 0xB7;
 80036a0:	23b7      	movs	r3, #183	; 0xb7
 80036a2:	733b      	strb	r3, [r7, #12]
	cmd.instruction_size = 1;
 80036a4:	2301      	movs	r3, #1
 80036a6:	737b      	strb	r3, [r7, #13]
	cmd.addr_size = 0;
 80036a8:	2300      	movs	r3, #0
 80036aa:	753b      	strb	r3, [r7, #20]
	cmd.addr = 0x000000;
 80036ac:	2300      	movs	r3, #0
 80036ae:	613b      	str	r3, [r7, #16]
	cmd.alt_size = 0;
 80036b0:	2300      	movs	r3, #0
 80036b2:	757b      	strb	r3, [r7, #21]
	cmd.dummy_size = 0;
 80036b4:	2300      	movs	r3, #0
 80036b6:	773b      	strb	r3, [r7, #28]

	if (STRHAL_QSPI_Indirect_Write(&cmd, nullptr, 0, 100) != 0)
 80036b8:	f107 000c 	add.w	r0, r7, #12
 80036bc:	2364      	movs	r3, #100	; 0x64
 80036be:	2200      	movs	r2, #0
 80036c0:	2100      	movs	r1, #0
 80036c2:	f004 fb79 	bl	8007db8 <STRHAL_QSPI_Indirect_Write>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	bf14      	ite	ne
 80036cc:	2301      	movne	r3, #1
 80036ce:	2300      	moveq	r3, #0
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <_ZN12W25Qxx_Flash18enter4ByteAddrModeEv+0x42>
		return false;
 80036d6:	2300      	movs	r3, #0
 80036d8:	e000      	b.n	80036dc <_ZN12W25Qxx_Flash18enter4ByteAddrModeEv+0x44>

	return true;
 80036da:	2301      	movs	r3, #1
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3720      	adds	r7, #32
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <_ZN12W25Qxx_Flash13writeNextPageEPKhm>:

	return true;
}

uint32_t W25Qxx_Flash::writeNextPage(const uint8_t *data, uint32_t n)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
	if (sectorCount == 8192 - 1)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d101      	bne.n	8003700 <_ZN12W25Qxx_Flash13writeNextPageEPKhm+0x1c>
	{
		return 0;
 80036fc:	2300      	movs	r3, #0
 80036fe:	e020      	b.n	8003742 <_ZN12W25Qxx_Flash13writeNextPageEPKhm+0x5e>
	 return 0;
	 if(!sectorErase(sectorCount))
	 return 0;
	 }*/

	uint32_t numWritten = write((pageCount << 8) | (sectorCount << 12), data, n);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	021a      	lsls	r2, r3, #8
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	031b      	lsls	r3, r3, #12
 800370c:	ea42 0103 	orr.w	r1, r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f000 f818 	bl	800374a <_ZN12W25Qxx_Flash5writeEmPKhm>
 800371a:	6178      	str	r0, [r7, #20]
	(void) numWritten;
	/*if(numWritten == n)
	 return 0;*/

	if (pageCount == 15)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	2b0f      	cmp	r3, #15
 8003722:	d108      	bne.n	8003736 <_ZN12W25Qxx_Flash13writeNextPageEPKhm+0x52>
	{
		pageCount = 0;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	60da      	str	r2, [r3, #12]
		sectorCount++;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	1c5a      	adds	r2, r3, #1
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	611a      	str	r2, [r3, #16]
 8003734:	e004      	b.n	8003740 <_ZN12W25Qxx_Flash13writeNextPageEPKhm+0x5c>
	}
	else
	{
		pageCount++;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	60da      	str	r2, [r3, #12]
	}

	return n;
 8003740:	687b      	ldr	r3, [r7, #4]
}
 8003742:	4618      	mov	r0, r3
 8003744:	3718      	adds	r7, #24
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <_ZN12W25Qxx_Flash5writeEmPKhm>:

uint32_t W25Qxx_Flash::write(uint32_t address, const uint8_t *data, uint32_t n)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b08a      	sub	sp, #40	; 0x28
 800374e:	af00      	add	r7, sp, #0
 8003750:	60f8      	str	r0, [r7, #12]
 8003752:	60b9      	str	r1, [r7, #8]
 8003754:	607a      	str	r2, [r7, #4]
 8003756:	603b      	str	r3, [r7, #0]
	STRHAL_QSPI_Command_t cmd;
	cmd.instruction = 0x12;
 8003758:	2312      	movs	r3, #18
 800375a:	753b      	strb	r3, [r7, #20]
	cmd.instruction_size = 1;
 800375c:	2301      	movs	r3, #1
 800375e:	757b      	strb	r3, [r7, #21]
	cmd.addr = address;
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	61bb      	str	r3, [r7, #24]
	cmd.addr_size = 4;
 8003764:	2304      	movs	r3, #4
 8003766:	773b      	strb	r3, [r7, #28]
	cmd.alt_size = 0;
 8003768:	2300      	movs	r3, #0
 800376a:	777b      	strb	r3, [r7, #29]
	cmd.dummy_size = 0;
 800376c:	2300      	movs	r3, #0
 800376e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	if (waitForSREGFlag(0x01, false, 100) < 0)
 8003772:	2364      	movs	r3, #100	; 0x64
 8003774:	2200      	movs	r2, #0
 8003776:	2101      	movs	r1, #1
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 fa1d 	bl	8003bb8 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt>
 800377e:	4603      	mov	r3, r0
 8003780:	0fdb      	lsrs	r3, r3, #31
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b00      	cmp	r3, #0
 8003786:	d001      	beq.n	800378c <_ZN12W25Qxx_Flash5writeEmPKhm+0x42>
		return 0;
 8003788:	2300      	movs	r3, #0
 800378a:	e024      	b.n	80037d6 <_ZN12W25Qxx_Flash5writeEmPKhm+0x8c>

	if (!writeEnable())
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f7ff ff16 	bl	80035be <_ZN12W25Qxx_Flash11writeEnableEv>
 8003792:	4603      	mov	r3, r0
 8003794:	f083 0301 	eor.w	r3, r3, #1
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <_ZN12W25Qxx_Flash5writeEmPKhm+0x58>
		return 0;
 800379e:	2300      	movs	r3, #0
 80037a0:	e019      	b.n	80037d6 <_ZN12W25Qxx_Flash5writeEmPKhm+0x8c>

	if (n > PAGE_SIZE)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037a8:	d902      	bls.n	80037b0 <_ZN12W25Qxx_Flash5writeEmPKhm+0x66>
		n = PAGE_SIZE;
 80037aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037ae:	603b      	str	r3, [r7, #0]

	if (STRHAL_QSPI_Indirect_Write(&cmd, data, n, 100) != n)
 80037b0:	f107 0014 	add.w	r0, r7, #20
 80037b4:	2364      	movs	r3, #100	; 0x64
 80037b6:	683a      	ldr	r2, [r7, #0]
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	f004 fafd 	bl	8007db8 <STRHAL_QSPI_Indirect_Write>
 80037be:	4602      	mov	r2, r0
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	4293      	cmp	r3, r2
 80037c4:	bf14      	ite	ne
 80037c6:	2301      	movne	r3, #1
 80037c8:	2300      	moveq	r3, #0
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <_ZN12W25Qxx_Flash5writeEmPKhm+0x8a>
		return 0;
 80037d0:	2300      	movs	r3, #0
 80037d2:	e000      	b.n	80037d6 <_ZN12W25Qxx_Flash5writeEmPKhm+0x8c>

	return n;
 80037d4:	683b      	ldr	r3, [r7, #0]
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3728      	adds	r7, #40	; 0x28
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
	...

080037e0 <_ZN12W25Qxx_Flash4readEmPhm>:

uint32_t W25Qxx_Flash::read(uint32_t address, uint8_t *data, uint32_t n)
{
 80037e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037e4:	b08a      	sub	sp, #40	; 0x28
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	60f8      	str	r0, [r7, #12]
 80037ea:	60b9      	str	r1, [r7, #8]
 80037ec:	607a      	str	r2, [r7, #4]
 80037ee:	603b      	str	r3, [r7, #0]
	STRHAL_QSPI_Command_t cmd;
	cmd.instruction = 0x13;
 80037f0:	2313      	movs	r3, #19
 80037f2:	753b      	strb	r3, [r7, #20]
	cmd.instruction_size = 1;
 80037f4:	2301      	movs	r3, #1
 80037f6:	757b      	strb	r3, [r7, #21]
	cmd.addr = address;
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	61bb      	str	r3, [r7, #24]
	cmd.addr_size = 4;
 80037fc:	2304      	movs	r3, #4
 80037fe:	773b      	strb	r3, [r7, #28]
	cmd.alt_size = 0;
 8003800:	2300      	movs	r3, #0
 8003802:	777b      	strb	r3, [r7, #29]
	cmd.dummy_size = 0;
 8003804:	2300      	movs	r3, #0
 8003806:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	if ((uint64_t) address + n > (uint64_t) (1 << SIZE_2N))
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	2200      	movs	r2, #0
 800380e:	469a      	mov	sl, r3
 8003810:	4693      	mov	fp, r2
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	2200      	movs	r2, #0
 8003816:	4698      	mov	r8, r3
 8003818:	4691      	mov	r9, r2
 800381a:	eb1a 0408 	adds.w	r4, sl, r8
 800381e:	eb4b 0509 	adc.w	r5, fp, r9
 8003822:	4b17      	ldr	r3, [pc, #92]	; (8003880 <_ZN12W25Qxx_Flash4readEmPhm+0xa0>)
 8003824:	429c      	cmp	r4, r3
 8003826:	f175 33ff 	sbcs.w	r3, r5, #4294967295
 800382a:	d302      	bcc.n	8003832 <_ZN12W25Qxx_Flash4readEmPhm+0x52>
		n = 0xFFFFFFFF - address;
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	43db      	mvns	r3, r3
 8003830:	603b      	str	r3, [r7, #0]

	if (waitForSREGFlag(0x01, false, 100) < 0)
 8003832:	2364      	movs	r3, #100	; 0x64
 8003834:	2200      	movs	r2, #0
 8003836:	2101      	movs	r1, #1
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 f9bd 	bl	8003bb8 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt>
 800383e:	4603      	mov	r3, r0
 8003840:	0fdb      	lsrs	r3, r3, #31
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <_ZN12W25Qxx_Flash4readEmPhm+0x6c>
		return 0;
 8003848:	2300      	movs	r3, #0
 800384a:	e013      	b.n	8003874 <_ZN12W25Qxx_Flash4readEmPhm+0x94>

	if (STRHAL_QSPI_Indirect_Read(&cmd, data, n, 1000) != n)
 800384c:	f107 0014 	add.w	r0, r7, #20
 8003850:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	6879      	ldr	r1, [r7, #4]
 8003858:	f004 fb68 	bl	8007f2c <STRHAL_QSPI_Indirect_Read>
 800385c:	4602      	mov	r2, r0
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	4293      	cmp	r3, r2
 8003862:	bf14      	ite	ne
 8003864:	2301      	movne	r3, #1
 8003866:	2300      	moveq	r3, #0
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <_ZN12W25Qxx_Flash4readEmPhm+0x92>
		return 0;
 800386e:	2300      	movs	r3, #0
 8003870:	e000      	b.n	8003874 <_ZN12W25Qxx_Flash4readEmPhm+0x94>

	return n;
 8003872:	683b      	ldr	r3, [r7, #0]
}
 8003874:	4618      	mov	r0, r3
 8003876:	3728      	adds	r7, #40	; 0x28
 8003878:	46bd      	mov	sp, r7
 800387a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800387e:	bf00      	nop
 8003880:	80000001 	.word	0x80000001

08003884 <_ZN12W25Qxx_Flash15writeTempConfigEv>:

	return write(CONFIG_BASE, config.bytes, sizeof(config.bytes)) == sizeof(config.bytes);
}

bool W25Qxx_Flash::writeTempConfig()
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
	return write(CONFIG_BASE, config.bytes, sizeof(config.bytes)) == sizeof(config.bytes);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f103 0214 	add.w	r2, r3, #20
 8003892:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003896:	2100      	movs	r1, #0
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7ff ff56 	bl	800374a <_ZN12W25Qxx_Flash5writeEmPKhm>
 800389e:	4603      	mov	r3, r0
 80038a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038a4:	bf0c      	ite	eq
 80038a6:	2301      	moveq	r3, #1
 80038a8:	2300      	movne	r3, #0
 80038aa:	b2db      	uxtb	r3, r3
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3708      	adds	r7, #8
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <_ZN12W25Qxx_Flash15writeConfigRegsEP6ConfigPmt>:
{
	return writeConfigRegs(&reg, &val, 1);
}

bool W25Qxx_Flash::writeConfigRegs(Config *reg, uint32_t *val, uint16_t n)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
 80038c0:	807b      	strh	r3, [r7, #2]
	if (!readConfig())
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	f000 f888 	bl	80039d8 <_ZN12W25Qxx_Flash10readConfigEv>
 80038c8:	4603      	mov	r3, r0
 80038ca:	f083 0301 	eor.w	r3, r3, #1
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <_ZN12W25Qxx_Flash15writeConfigRegsEP6ConfigPmt+0x24>
		return false;
 80038d4:	2300      	movs	r3, #0
 80038d6:	e033      	b.n	8003940 <_ZN12W25Qxx_Flash15writeConfigRegsEP6ConfigPmt+0x8c>

	for (int i = 0; i < n; i++)
 80038d8:	2300      	movs	r3, #0
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	887b      	ldrh	r3, [r7, #2]
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	da12      	bge.n	800390a <_ZN12W25Qxx_Flash15writeConfigRegsEP6ConfigPmt+0x56>
	{
		config.reg[static_cast<int>(reg[i])] = val[i];
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	441a      	add	r2, r3
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	68b9      	ldr	r1, [r7, #8]
 80038f2:	440b      	add	r3, r1
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	6812      	ldr	r2, [r2, #0]
 80038f8:	68f9      	ldr	r1, [r7, #12]
 80038fa:	3304      	adds	r3, #4
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	440b      	add	r3, r1
 8003900:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < n; i++)
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	3301      	adds	r3, #1
 8003906:	617b      	str	r3, [r7, #20]
 8003908:	e7e8      	b.n	80038dc <_ZN12W25Qxx_Flash15writeConfigRegsEP6ConfigPmt+0x28>
	}

	if (!configErase())
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f000 f88d 	bl	8003a2a <_ZN12W25Qxx_Flash11configEraseEv>
 8003910:	4603      	mov	r3, r0
 8003912:	f083 0301 	eor.w	r3, r3, #1
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <_ZN12W25Qxx_Flash15writeConfigRegsEP6ConfigPmt+0x6c>
	{
		return false;
 800391c:	2300      	movs	r3, #0
 800391e:	e00f      	b.n	8003940 <_ZN12W25Qxx_Flash15writeConfigRegsEP6ConfigPmt+0x8c>
	}

	return write(CONFIG_BASE, config.bytes, sizeof(config.bytes)) == sizeof(config.bytes);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f103 0214 	add.w	r2, r3, #20
 8003926:	f44f 7380 	mov.w	r3, #256	; 0x100
 800392a:	2100      	movs	r1, #0
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f7ff ff0c 	bl	800374a <_ZN12W25Qxx_Flash5writeEmPKhm>
 8003932:	4603      	mov	r3, r0
 8003934:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003938:	bf0c      	ite	eq
 800393a:	2301      	moveq	r3, #1
 800393c:	2300      	movne	r3, #0
 800393e:	b2db      	uxtb	r3, r3

}
 8003940:	4618      	mov	r0, r3
 8003942:	3718      	adds	r7, #24
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <_ZN12W25Qxx_Flash23writeConfigRegsFromAddrEmPmt>:

bool W25Qxx_Flash::writeConfigRegsFromAddr(uint32_t startAddress, uint32_t *val, uint16_t n)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
 8003954:	807b      	strh	r3, [r7, #2]
	if (!readConfig())
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f000 f83e 	bl	80039d8 <_ZN12W25Qxx_Flash10readConfigEv>
 800395c:	4603      	mov	r3, r0
 800395e:	f083 0301 	eor.w	r3, r3, #1
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <_ZN12W25Qxx_Flash23writeConfigRegsFromAddrEmPmt+0x24>
		return false;
 8003968:	2300      	movs	r3, #0
 800396a:	e031      	b.n	80039d0 <_ZN12W25Qxx_Flash23writeConfigRegsFromAddrEmPmt+0x88>

	for (int i = 0; i < n; i++)
 800396c:	2300      	movs	r3, #0
 800396e:	617b      	str	r3, [r7, #20]
 8003970:	887b      	ldrh	r3, [r7, #2]
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	429a      	cmp	r2, r3
 8003976:	da10      	bge.n	800399a <_ZN12W25Qxx_Flash23writeConfigRegsFromAddrEmPmt+0x52>
	{
		config.reg[startAddress + i] = val[i];  //TODO maybe a bug
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	441a      	add	r2, r3
 8003980:	6979      	ldr	r1, [r7, #20]
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	440b      	add	r3, r1
 8003986:	6812      	ldr	r2, [r2, #0]
 8003988:	68f9      	ldr	r1, [r7, #12]
 800398a:	3304      	adds	r3, #4
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	440b      	add	r3, r1
 8003990:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < n; i++)
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	3301      	adds	r3, #1
 8003996:	617b      	str	r3, [r7, #20]
 8003998:	e7ea      	b.n	8003970 <_ZN12W25Qxx_Flash23writeConfigRegsFromAddrEmPmt+0x28>
	}

	if (!configErase())
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f000 f845 	bl	8003a2a <_ZN12W25Qxx_Flash11configEraseEv>
 80039a0:	4603      	mov	r3, r0
 80039a2:	f083 0301 	eor.w	r3, r3, #1
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <_ZN12W25Qxx_Flash23writeConfigRegsFromAddrEmPmt+0x68>
	{
		return false;
 80039ac:	2300      	movs	r3, #0
 80039ae:	e00f      	b.n	80039d0 <_ZN12W25Qxx_Flash23writeConfigRegsFromAddrEmPmt+0x88>
	}

	return write(CONFIG_BASE, config.bytes, sizeof(config.bytes)) == sizeof(config.bytes);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f103 0214 	add.w	r2, r3, #20
 80039b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039ba:	2100      	movs	r1, #0
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f7ff fec4 	bl	800374a <_ZN12W25Qxx_Flash5writeEmPKhm>
 80039c2:	4603      	mov	r3, r0
 80039c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039c8:	bf0c      	ite	eq
 80039ca:	2301      	moveq	r3, #1
 80039cc:	2300      	movne	r3, #0
 80039ce:	b2db      	uxtb	r3, r3
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3718      	adds	r7, #24
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <_ZN12W25Qxx_Flash10readConfigEv>:

bool W25Qxx_Flash::readConfig()
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
	return read(CONFIG_BASE, config.bytes, sizeof(config.bytes)) == sizeof(config.bytes);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f103 0214 	add.w	r2, r3, #20
 80039e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039ea:	2100      	movs	r1, #0
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f7ff fef7 	bl	80037e0 <_ZN12W25Qxx_Flash4readEmPhm>
 80039f2:	4603      	mov	r3, r0
 80039f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039f8:	bf0c      	ite	eq
 80039fa:	2301      	moveq	r3, #1
 80039fc:	2300      	movne	r3, #0
 80039fe:	b2db      	uxtb	r3, r3
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3708      	adds	r7, #8
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <_ZN12W25Qxx_Flash13readConfigRegEm>:
	return config.reg[static_cast<int>(reg)];
}

// Update Config by calling readConfig() prior to this!
uint32_t W25Qxx_Flash::readConfigReg(uint32_t regAddr)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
	return config.reg[regAddr];
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	3304      	adds	r3, #4
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4413      	add	r3, r2
 8003a1c:	685b      	ldr	r3, [r3, #4]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <_ZN12W25Qxx_Flash11configEraseEv>:

// Erase config, i.e. sets all config registers to 0xFFFF
bool W25Qxx_Flash::configErase()
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b082      	sub	sp, #8
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
	return sectorErase(CONFIG_BASE >> 12);
 8003a32:	2100      	movs	r1, #0
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 f834 	bl	8003aa2 <_ZN12W25Qxx_Flash11sectorEraseEm>
 8003a3a:	4603      	mov	r3, r0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <_ZN12W25Qxx_Flash11configResetEv>:

// Resets config, i.e. sets all config registers to 0x000
bool W25Qxx_Flash::configReset()
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < PAGE_SIZE / 4; i++)
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	60fb      	str	r3, [r7, #12]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2b3f      	cmp	r3, #63	; 0x3f
 8003a54:	dc0a      	bgt.n	8003a6c <_ZN12W25Qxx_Flash11configResetEv+0x28>
	{
		config.reg[i] = 0;
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	3304      	adds	r3, #4
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4413      	add	r3, r2
 8003a60:	2200      	movs	r2, #0
 8003a62:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < PAGE_SIZE / 4; i++)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	3301      	adds	r3, #1
 8003a68:	60fb      	str	r3, [r7, #12]
 8003a6a:	e7f1      	b.n	8003a50 <_ZN12W25Qxx_Flash11configResetEv+0xc>
	}
	return sectorErase(CONFIG_BASE >> 12) && write(CONFIG_BASE, config.bytes, sizeof(config.bytes)) == sizeof(config.bytes);
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f817 	bl	8003aa2 <_ZN12W25Qxx_Flash11sectorEraseEm>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00e      	beq.n	8003a98 <_ZN12W25Qxx_Flash11configResetEv+0x54>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f103 0214 	add.w	r2, r3, #20
 8003a80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a84:	2100      	movs	r1, #0
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7ff fe5f 	bl	800374a <_ZN12W25Qxx_Flash5writeEmPKhm>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a92:	d101      	bne.n	8003a98 <_ZN12W25Qxx_Flash11configResetEv+0x54>
 8003a94:	2301      	movs	r3, #1
 8003a96:	e000      	b.n	8003a9a <_ZN12W25Qxx_Flash11configResetEv+0x56>
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <_ZN12W25Qxx_Flash11sectorEraseEm>:

bool W25Qxx_Flash::sectorErase(uint32_t sector)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b088      	sub	sp, #32
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
 8003aaa:	6039      	str	r1, [r7, #0]
	STRHAL_QSPI_Command_t cmd;
	cmd.instruction = 0x21;
 8003aac:	2321      	movs	r3, #33	; 0x21
 8003aae:	733b      	strb	r3, [r7, #12]
	cmd.instruction_size = 1;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	737b      	strb	r3, [r7, #13]
	cmd.addr_size = 4;
 8003ab4:	2304      	movs	r3, #4
 8003ab6:	753b      	strb	r3, [r7, #20]
	cmd.addr = sector << 12;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	031b      	lsls	r3, r3, #12
 8003abc:	613b      	str	r3, [r7, #16]
	cmd.alt_size = 0;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	757b      	strb	r3, [r7, #21]
	cmd.dummy_size = 0;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	773b      	strb	r3, [r7, #28]

	if (waitForSREGFlag(0x01, false, 100) < 0)
 8003ac6:	2364      	movs	r3, #100	; 0x64
 8003ac8:	2200      	movs	r2, #0
 8003aca:	2101      	movs	r1, #1
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 f873 	bl	8003bb8 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	0fdb      	lsrs	r3, r3, #31
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <_ZN12W25Qxx_Flash11sectorEraseEm+0x3e>
		return false;
 8003adc:	2300      	movs	r3, #0
 8003ade:	e029      	b.n	8003b34 <_ZN12W25Qxx_Flash11sectorEraseEm+0x92>

	if (!writeEnable())
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f7ff fd6c 	bl	80035be <_ZN12W25Qxx_Flash11writeEnableEv>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	f083 0301 	eor.w	r3, r3, #1
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <_ZN12W25Qxx_Flash11sectorEraseEm+0x54>
		return false;
 8003af2:	2300      	movs	r3, #0
 8003af4:	e01e      	b.n	8003b34 <_ZN12W25Qxx_Flash11sectorEraseEm+0x92>

	if (STRHAL_QSPI_Indirect_Write(&cmd, nullptr, 0, 100) != 0)
 8003af6:	f107 000c 	add.w	r0, r7, #12
 8003afa:	2364      	movs	r3, #100	; 0x64
 8003afc:	2200      	movs	r2, #0
 8003afe:	2100      	movs	r1, #0
 8003b00:	f004 f95a 	bl	8007db8 <STRHAL_QSPI_Indirect_Write>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	bf14      	ite	ne
 8003b0a:	2301      	movne	r3, #1
 8003b0c:	2300      	moveq	r3, #0
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <_ZN12W25Qxx_Flash11sectorEraseEm+0x76>
		return false;
 8003b14:	2300      	movs	r3, #0
 8003b16:	e00d      	b.n	8003b34 <_ZN12W25Qxx_Flash11sectorEraseEm+0x92>

	if (waitForSREGFlag(0x01, false, 100) < 0)
 8003b18:	2364      	movs	r3, #100	; 0x64
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f84a 	bl	8003bb8 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt>
 8003b24:	4603      	mov	r3, r0
 8003b26:	0fdb      	lsrs	r3, r3, #31
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <_ZN12W25Qxx_Flash11sectorEraseEm+0x90>
		return false;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	e000      	b.n	8003b34 <_ZN12W25Qxx_Flash11sectorEraseEm+0x92>

	return true;
 8003b32:	2301      	movs	r3, #1
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3720      	adds	r7, #32
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <_ZN12W25Qxx_Flash9chipEraseEv>:

bool W25Qxx_Flash::chipErase()
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b088      	sub	sp, #32
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
	STRHAL_QSPI_Command_t cmd;
	cmd.instruction = 0xC7;
 8003b44:	23c7      	movs	r3, #199	; 0xc7
 8003b46:	733b      	strb	r3, [r7, #12]
	cmd.instruction_size = 1;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	737b      	strb	r3, [r7, #13]
	cmd.addr_size = 0;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	753b      	strb	r3, [r7, #20]
	cmd.addr = 0;
 8003b50:	2300      	movs	r3, #0
 8003b52:	613b      	str	r3, [r7, #16]
	cmd.alt_size = 0;
 8003b54:	2300      	movs	r3, #0
 8003b56:	757b      	strb	r3, [r7, #21]
	cmd.dummy_size = 0;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	773b      	strb	r3, [r7, #28]

	if (waitForSREGFlag(0x01, false, 100) < 0)
 8003b5c:	2364      	movs	r3, #100	; 0x64
 8003b5e:	2200      	movs	r2, #0
 8003b60:	2101      	movs	r1, #1
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 f828 	bl	8003bb8 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	0fdb      	lsrs	r3, r3, #31
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <_ZN12W25Qxx_Flash9chipEraseEv+0x3a>
		return false;
 8003b72:	2300      	movs	r3, #0
 8003b74:	e01c      	b.n	8003bb0 <_ZN12W25Qxx_Flash9chipEraseEv+0x74>

	if (!writeEnable())
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7ff fd21 	bl	80035be <_ZN12W25Qxx_Flash11writeEnableEv>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	f083 0301 	eor.w	r3, r3, #1
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <_ZN12W25Qxx_Flash9chipEraseEv+0x50>
		return false;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	e011      	b.n	8003bb0 <_ZN12W25Qxx_Flash9chipEraseEv+0x74>

	if (STRHAL_QSPI_Indirect_Write(&cmd, nullptr, 0, 100) != 0)
 8003b8c:	f107 000c 	add.w	r0, r7, #12
 8003b90:	2364      	movs	r3, #100	; 0x64
 8003b92:	2200      	movs	r2, #0
 8003b94:	2100      	movs	r1, #0
 8003b96:	f004 f90f 	bl	8007db8 <STRHAL_QSPI_Indirect_Write>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	bf14      	ite	ne
 8003ba0:	2301      	movne	r3, #1
 8003ba2:	2300      	moveq	r3, #0
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <_ZN12W25Qxx_Flash9chipEraseEv+0x72>
		return false;
 8003baa:	2300      	movs	r3, #0
 8003bac:	e000      	b.n	8003bb0 <_ZN12W25Qxx_Flash9chipEraseEv+0x74>

	//if(waitForSREGFlag(0x01, false, 100) < 0)
	//return false;

	return true;
 8003bae:	2301      	movs	r3, #1
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3720      	adds	r7, #32
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt>:

int W25Qxx_Flash::waitForSREGFlag(uint8_t flag, bool state, uint16_t tot)
{
 8003bb8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003bbc:	b086      	sub	sp, #24
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
 8003bc2:	4608      	mov	r0, r1
 8003bc4:	4611      	mov	r1, r2
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	4603      	mov	r3, r0
 8003bca:	70fb      	strb	r3, [r7, #3]
 8003bcc:	460b      	mov	r3, r1
 8003bce:	70bb      	strb	r3, [r7, #2]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	803b      	strh	r3, [r7, #0]
	uint64_t start = STRHAL_Systick_GetTick();
 8003bd4:	f004 fb9a 	bl	800830c <STRHAL_Systick_GetTick>
 8003bd8:	e9c7 0104 	strd	r0, r1, [r7, #16]
	uint8_t sreg1;

	if (state)
 8003bdc:	78bb      	ldrb	r3, [r7, #2]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d02a      	beq.n	8003c38 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0x80>
	{
		do
		{
			if (!readSREG1(sreg1))
 8003be2:	f107 030f 	add.w	r3, r7, #15
 8003be6:	4619      	mov	r1, r3
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f7ff fcc3 	bl	8003574 <_ZNK12W25Qxx_Flash9readSREG1ERh>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	f083 0301 	eor.w	r3, r3, #1
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d002      	beq.n	8003c00 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0x48>
				return -1;
 8003bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8003bfe:	e045      	b.n	8003c8c <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0xd4>

			if (STRHAL_Systick_GetTick() - start > 100)
 8003c00:	f004 fb84 	bl	800830c <STRHAL_Systick_GetTick>
 8003c04:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003c08:	ebb0 0802 	subs.w	r8, r0, r2
 8003c0c:	eb61 0903 	sbc.w	r9, r1, r3
 8003c10:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003c14:	f179 0300 	sbcs.w	r3, r9, #0
 8003c18:	bf2c      	ite	cs
 8003c1a:	2301      	movcs	r3, #1
 8003c1c:	2300      	movcc	r3, #0
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d002      	beq.n	8003c2a <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0x72>
				return -1;
 8003c24:	f04f 33ff 	mov.w	r3, #4294967295
 8003c28:	e030      	b.n	8003c8c <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0xd4>
		} while (!(sreg1 & flag));
 8003c2a:	7bfa      	ldrb	r2, [r7, #15]
 8003c2c:	78fb      	ldrb	r3, [r7, #3]
 8003c2e:	4013      	ands	r3, r2
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d129      	bne.n	8003c8a <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0xd2>
		do
 8003c36:	e7d4      	b.n	8003be2 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0x2a>
	}
	else
	{
		do
		{
			if (!readSREG1(sreg1))
 8003c38:	f107 030f 	add.w	r3, r7, #15
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7ff fc98 	bl	8003574 <_ZNK12W25Qxx_Flash9readSREG1ERh>
 8003c44:	4603      	mov	r3, r0
 8003c46:	f083 0301 	eor.w	r3, r3, #1
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d002      	beq.n	8003c56 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0x9e>
				return -1;
 8003c50:	f04f 33ff 	mov.w	r3, #4294967295
 8003c54:	e01a      	b.n	8003c8c <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0xd4>

			if (STRHAL_Systick_GetTick() - start > 100)
 8003c56:	f004 fb59 	bl	800830c <STRHAL_Systick_GetTick>
 8003c5a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003c5e:	1a84      	subs	r4, r0, r2
 8003c60:	eb61 0503 	sbc.w	r5, r1, r3
 8003c64:	2c65      	cmp	r4, #101	; 0x65
 8003c66:	f175 0300 	sbcs.w	r3, r5, #0
 8003c6a:	bf2c      	ite	cs
 8003c6c:	2301      	movcs	r3, #1
 8003c6e:	2300      	movcc	r3, #0
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d002      	beq.n	8003c7c <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0xc4>
				return -1;
 8003c76:	f04f 33ff 	mov.w	r3, #4294967295
 8003c7a:	e007      	b.n	8003c8c <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0xd4>
		} while (sreg1 & flag);
 8003c7c:	7bfa      	ldrb	r2, [r7, #15]
 8003c7e:	78fb      	ldrb	r3, [r7, #3]
 8003c80:	4013      	ands	r3, r2
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d000      	beq.n	8003c8a <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0xd2>
		do
 8003c88:	e7d6      	b.n	8003c38 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0x80>
	}

	return 0;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3718      	adds	r7, #24
 8003c90:	46bd      	mov	sp, r7
 8003c92:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08003c98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003c98:	480d      	ldr	r0, [pc, #52]	; (8003cd0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003c9a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c9c:	480d      	ldr	r0, [pc, #52]	; (8003cd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003c9e:	490e      	ldr	r1, [pc, #56]	; (8003cd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ca0:	4a0e      	ldr	r2, [pc, #56]	; (8003cdc <LoopForever+0xe>)
  movs r3, #0
 8003ca2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003ca4:	e002      	b.n	8003cac <LoopCopyDataInit>

08003ca6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ca6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ca8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003caa:	3304      	adds	r3, #4

08003cac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003cac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003cae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003cb0:	d3f9      	bcc.n	8003ca6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cb2:	4a0b      	ldr	r2, [pc, #44]	; (8003ce0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003cb4:	4c0b      	ldr	r4, [pc, #44]	; (8003ce4 <LoopForever+0x16>)
  movs r3, #0
 8003cb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003cb8:	e001      	b.n	8003cbe <LoopFillZerobss>

08003cba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003cba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003cbc:	3204      	adds	r2, #4

08003cbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003cbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003cc0:	d3fb      	bcc.n	8003cba <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003cc2:	f7fd fac1 	bl	8001248 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003cc6:	f005 feb7 	bl	8009a38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003cca:	f7fd fa1f 	bl	800110c <main>

08003cce <LoopForever>:

LoopForever:
    b LoopForever
 8003cce:	e7fe      	b.n	8003cce <LoopForever>
  ldr   r0, =_estack
 8003cd0:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8003cd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003cd8:	20000784 	.word	0x20000784
  ldr r2, =_sidata
 8003cdc:	0800af54 	.word	0x0800af54
  ldr r2, =_sbss
 8003ce0:	20000788 	.word	0x20000788
  ldr r4, =_ebss
 8003ce4:	20000b6c 	.word	0x20000b6c

08003ce8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003ce8:	e7fe      	b.n	8003ce8 <ADC1_2_IRQHandler>

08003cea <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b083      	sub	sp, #12
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
 8003cf2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf8:	f023 020f 	bic.w	r2, r3, #15
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f003 0301 	and.w	r3, r3, #1
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d101      	bne.n	8003d28 <LL_ADC_IsEnabled+0x18>
 8003d24:	2301      	movs	r3, #1
 8003d26:	e000      	b.n	8003d2a <LL_ADC_IsEnabled+0x1a>
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
	...

08003d38 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8003d38:	b590      	push	{r4, r7, lr}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003d42:	2300      	movs	r3, #0
 8003d44:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a27      	ldr	r2, [pc, #156]	; (8003de8 <LL_ADC_CommonInit+0xb0>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d10f      	bne.n	8003d6e <LL_ADC_CommonInit+0x36>
 8003d4e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003d52:	f7ff ffdd 	bl	8003d10 <LL_ADC_IsEnabled>
 8003d56:	4604      	mov	r4, r0
 8003d58:	4824      	ldr	r0, [pc, #144]	; (8003dec <LL_ADC_CommonInit+0xb4>)
 8003d5a:	f7ff ffd9 	bl	8003d10 <LL_ADC_IsEnabled>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	4323      	orrs	r3, r4
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	bf0c      	ite	eq
 8003d66:	2301      	moveq	r3, #1
 8003d68:	2300      	movne	r3, #0
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	e012      	b.n	8003d94 <LL_ADC_CommonInit+0x5c>
 8003d6e:	4820      	ldr	r0, [pc, #128]	; (8003df0 <LL_ADC_CommonInit+0xb8>)
 8003d70:	f7ff ffce 	bl	8003d10 <LL_ADC_IsEnabled>
 8003d74:	4604      	mov	r4, r0
 8003d76:	481f      	ldr	r0, [pc, #124]	; (8003df4 <LL_ADC_CommonInit+0xbc>)
 8003d78:	f7ff ffca 	bl	8003d10 <LL_ADC_IsEnabled>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	431c      	orrs	r4, r3
 8003d80:	481d      	ldr	r0, [pc, #116]	; (8003df8 <LL_ADC_CommonInit+0xc0>)
 8003d82:	f7ff ffc5 	bl	8003d10 <LL_ADC_IsEnabled>
 8003d86:	4603      	mov	r3, r0
 8003d88:	4323      	orrs	r3, r4
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	bf0c      	ite	eq
 8003d8e:	2301      	moveq	r3, #1
 8003d90:	2300      	movne	r3, #0
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d020      	beq.n	8003dda <LL_ADC_CommonInit+0xa2>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d012      	beq.n	8003dc6 <LL_ADC_CommonInit+0x8e>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	4b15      	ldr	r3, [pc, #84]	; (8003dfc <LL_ADC_CommonInit+0xc4>)
 8003da6:	4013      	ands	r3, r2
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	6811      	ldr	r1, [r2, #0]
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	6852      	ldr	r2, [r2, #4]
 8003db0:	4311      	orrs	r1, r2
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	6892      	ldr	r2, [r2, #8]
 8003db6:	4311      	orrs	r1, r2
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	68d2      	ldr	r2, [r2, #12]
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	609a      	str	r2, [r3, #8]
 8003dc4:	e00b      	b.n	8003dde <LL_ADC_CommonInit+0xa6>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689a      	ldr	r2, [r3, #8]
 8003dca:	4b0c      	ldr	r3, [pc, #48]	; (8003dfc <LL_ADC_CommonInit+0xc4>)
 8003dcc:	4013      	ands	r3, r2
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	6812      	ldr	r2, [r2, #0]
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	609a      	str	r2, [r3, #8]
 8003dd8:	e001      	b.n	8003dde <LL_ADC_CommonInit+0xa6>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3714      	adds	r7, #20
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd90      	pop	{r4, r7, pc}
 8003de8:	50000300 	.word	0x50000300
 8003dec:	50000100 	.word	0x50000100
 8003df0:	50000400 	.word	0x50000400
 8003df4:	50000500 	.word	0x50000500
 8003df8:	50000600 	.word	0x50000600
 8003dfc:	ffc030e0 	.word	0xffc030e0

08003e00 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7ff ff7e 	bl	8003d10 <LL_ADC_IsEnabled>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d111      	bne.n	8003e3e <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003e22:	f023 0318 	bic.w	r3, r3, #24
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	6811      	ldr	r1, [r2, #0]
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	6852      	ldr	r2, [r2, #4]
 8003e2e:	4311      	orrs	r1, r2
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	6892      	ldr	r2, [r2, #8]
 8003e34:	430a      	orrs	r2, r1
 8003e36:	431a      	orrs	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	60da      	str	r2, [r3, #12]
 8003e3c:	e001      	b.n	8003e42 <LL_ADC_Init+0x42>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003e56:	2300      	movs	r3, #0
 8003e58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7ff ff58 	bl	8003d10 <LL_ADC_IsEnabled>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d132      	bne.n	8003ecc <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d015      	beq.n	8003e9a <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68da      	ldr	r2, [r3, #12]
 8003e72:	4b1a      	ldr	r3, [pc, #104]	; (8003edc <LL_ADC_REG_Init+0x90>)
 8003e74:	4013      	ands	r3, r2
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	6811      	ldr	r1, [r2, #0]
 8003e7a:	683a      	ldr	r2, [r7, #0]
 8003e7c:	6892      	ldr	r2, [r2, #8]
 8003e7e:	4311      	orrs	r1, r2
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	68d2      	ldr	r2, [r2, #12]
 8003e84:	4311      	orrs	r1, r2
 8003e86:	683a      	ldr	r2, [r7, #0]
 8003e88:	6912      	ldr	r2, [r2, #16]
 8003e8a:	4311      	orrs	r1, r2
 8003e8c:	683a      	ldr	r2, [r7, #0]
 8003e8e:	6952      	ldr	r2, [r2, #20]
 8003e90:	430a      	orrs	r2, r1
 8003e92:	431a      	orrs	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	60da      	str	r2, [r3, #12]
 8003e98:	e011      	b.n	8003ebe <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68da      	ldr	r2, [r3, #12]
 8003e9e:	4b0f      	ldr	r3, [pc, #60]	; (8003edc <LL_ADC_REG_Init+0x90>)
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	6811      	ldr	r1, [r2, #0]
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	68d2      	ldr	r2, [r2, #12]
 8003eaa:	4311      	orrs	r1, r2
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	6912      	ldr	r2, [r2, #16]
 8003eb0:	4311      	orrs	r1, r2
 8003eb2:	683a      	ldr	r2, [r7, #0]
 8003eb4:	6952      	ldr	r2, [r2, #20]
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f7ff ff10 	bl	8003cea <LL_ADC_REG_SetSequencerLength>
 8003eca:	e001      	b.n	8003ed0 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8003ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	fff0c01c 	.word	0xfff0c01c

08003ee0 <LL_DMA_ConfigTransfer>:
  *         @arg @ref LL_DMA_MDATAALIGN_BYTE or @ref LL_DMA_MDATAALIGN_HALFWORD or @ref LL_DMA_MDATAALIGN_WORD
  *         @arg @ref LL_DMA_PRIORITY_LOW or @ref LL_DMA_PRIORITY_MEDIUM or @ref LL_DMA_PRIORITY_HIGH or @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigTransfer(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Configuration)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b087      	sub	sp, #28
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8003ef0:	4a0e      	ldr	r2, [pc, #56]	; (8003f2c <LL_DMA_ConfigTransfer+0x4c>)
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	461a      	mov	r2, r3
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	4413      	add	r3, r2
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f08:	4908      	ldr	r1, [pc, #32]	; (8003f2c <LL_DMA_ConfigTransfer+0x4c>)
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	440a      	add	r2, r1
 8003f0e:	7812      	ldrb	r2, [r2, #0]
 8003f10:	4611      	mov	r1, r2
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	440a      	add	r2, r1
 8003f16:	4611      	mov	r1, r2
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM | DMA_CCR_CIRC | DMA_CCR_PINC | DMA_CCR_MINC | DMA_CCR_PSIZE | DMA_CCR_MSIZE | DMA_CCR_PL,
             Configuration);
}
 8003f1e:	bf00      	nop
 8003f20:	371c      	adds	r7, #28
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	08009ee0 	.word	0x08009ee0

08003f30 <LL_DMA_SetDataLength>:
  *         (*) Not on all G4 devices
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b087      	sub	sp, #28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 8003f40:	4a0d      	ldr	r2, [pc, #52]	; (8003f78 <LL_DMA_SetDataLength+0x48>)
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	4413      	add	r3, r2
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	461a      	mov	r2, r3
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	0c1b      	lsrs	r3, r3, #16
 8003f52:	041b      	lsls	r3, r3, #16
 8003f54:	4908      	ldr	r1, [pc, #32]	; (8003f78 <LL_DMA_SetDataLength+0x48>)
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	440a      	add	r2, r1
 8003f5a:	7812      	ldrb	r2, [r2, #0]
 8003f5c:	4611      	mov	r1, r2
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	440a      	add	r2, r1
 8003f62:	4611      	mov	r1, r2
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 8003f6a:	bf00      	nop
 8003f6c:	371c      	adds	r7, #28
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	08009ee0 	.word	0x08009ee0

08003f7c <LL_DMA_SetMemoryAddress>:
  *         (*) Not on all G4 devices
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b087      	sub	sp, #28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 8003f8c:	4a07      	ldr	r2, [pc, #28]	; (8003fac <LL_DMA_SetMemoryAddress+0x30>)
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	4413      	add	r3, r2
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	461a      	mov	r2, r3
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	4413      	add	r3, r2
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	60d3      	str	r3, [r2, #12]
}
 8003fa0:	bf00      	nop
 8003fa2:	371c      	adds	r7, #28
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	08009ee0 	.word	0x08009ee0

08003fb0 <LL_DMA_SetPeriphAddress>:
  *         (*) Not on all G4 devices
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b087      	sub	sp, #28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 8003fc0:	4a07      	ldr	r2, [pc, #28]	; (8003fe0 <LL_DMA_SetPeriphAddress+0x30>)
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	461a      	mov	r2, r3
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	4413      	add	r3, r2
 8003fce:	461a      	mov	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6093      	str	r3, [r2, #8]
}
 8003fd4:	bf00      	nop
 8003fd6:	371c      	adds	r7, #28
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr
 8003fe0:	08009ee0 	.word	0x08009ee0

08003fe4 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD1_TX
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b087      	sub	sp, #28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	0a9b      	lsrs	r3, r3, #10
 8003ff4:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8003ff8:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	4413      	add	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800400c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	4413      	add	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004022:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	430a      	orrs	r2, r1
 800402a:	601a      	str	r2, [r3, #0]
}
 800402c:	bf00      	nop
 800402e:	371c      	adds	r7, #28
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <LL_DMA_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
   * - MemoryOrM2MDstIncMode:  DMA_CCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_CCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_CCR_MSIZE[1:0] bits
   * - Priority:               DMA_CCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689a      	ldr	r2, [r3, #8]
                        DMA_InitStruct->Mode                   | \
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68db      	ldr	r3, [r3, #12]
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800404c:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
                        DMA_InitStruct->Mode                   | \
 8004052:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	695b      	ldr	r3, [r3, #20]
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 8004058:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	699b      	ldr	r3, [r3, #24]
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 800405e:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstDataSize | \
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	69db      	ldr	r3, [r3, #28]
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 8004064:	431a      	orrs	r2, r3
                        DMA_InitStruct->Priority);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800406a:	4313      	orrs	r3, r2
 800406c:	461a      	mov	r2, r3
 800406e:	68b9      	ldr	r1, [r7, #8]
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f7ff ff35 	bl	8003ee0 <LL_DMA_ConfigTransfer>

  /*-------------------------- DMAx CMAR Configuration -------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress: DMA_CMAR_MA[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Channel, DMA_InitStruct->MemoryOrM2MDstAddress);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	461a      	mov	r2, r3
 800407c:	68b9      	ldr	r1, [r7, #8]
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f7ff ff7c 	bl	8003f7c <LL_DMA_SetMemoryAddress>

  /*-------------------------- DMAx CPAR Configuration -------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress: DMA_CPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Channel, DMA_InitStruct->PeriphOrM2MSrcAddress);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	461a      	mov	r2, r3
 800408a:	68b9      	ldr	r1, [r7, #8]
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f7ff ff8f 	bl	8003fb0 <LL_DMA_SetPeriphAddress>

  /*--------------------------- DMAx CNDTR Configuration -----------------------
   * Configure the peripheral base address with parameter :
   * - NbData: DMA_CNDTR_NDT[15:0] bits
   */
  LL_DMA_SetDataLength(DMAx, Channel, DMA_InitStruct->NbData);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	461a      	mov	r2, r3
 8004098:	68b9      	ldr	r1, [r7, #8]
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f7ff ff48 	bl	8003f30 <LL_DMA_SetDataLength>

  /*--------------------------- DMAMUXx CCR Configuration ----------------------
   * Configure the DMA request for DMA Channels on DMAMUX Channel x with parameter :
   * - PeriphRequest: DMA_CxCR[7:0] bits
   */
  LL_DMA_SetPeriphRequest(DMAx, Channel, DMA_InitStruct->PeriphRequest);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	461a      	mov	r2, r3
 80040a6:	68b9      	ldr	r1, [r7, #8]
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f7ff ff9b 	bl	8003fe4 <LL_DMA_SetPeriphRequest>

  return (uint32_t)SUCCESS;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3710      	adds	r7, #16
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <LL_GPIO_SetPinMode>:
{
 80040b8:	b480      	push	{r7}
 80040ba:	b08b      	sub	sp, #44	; 0x2c
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	fa93 f3a3 	rbit	r3, r3
 80040d2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 80040de:	2320      	movs	r3, #32
 80040e0:	e003      	b.n	80040ea <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	fab3 f383 	clz	r3, r3
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	2103      	movs	r1, #3
 80040ee:	fa01 f303 	lsl.w	r3, r1, r3
 80040f2:	43db      	mvns	r3, r3
 80040f4:	401a      	ands	r2, r3
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040fa:	6a3b      	ldr	r3, [r7, #32]
 80040fc:	fa93 f3a3 	rbit	r3, r3
 8004100:	61fb      	str	r3, [r7, #28]
  return result;
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004108:	2b00      	cmp	r3, #0
 800410a:	d101      	bne.n	8004110 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800410c:	2320      	movs	r3, #32
 800410e:	e003      	b.n	8004118 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8004110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004112:	fab3 f383 	clz	r3, r3
 8004116:	b2db      	uxtb	r3, r3
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	6879      	ldr	r1, [r7, #4]
 800411c:	fa01 f303 	lsl.w	r3, r1, r3
 8004120:	431a      	orrs	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	601a      	str	r2, [r3, #0]
}
 8004126:	bf00      	nop
 8004128:	372c      	adds	r7, #44	; 0x2c
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <LL_GPIO_SetPinOutputType>:
{
 8004132:	b480      	push	{r7}
 8004134:	b085      	sub	sp, #20
 8004136:	af00      	add	r7, sp, #0
 8004138:	60f8      	str	r0, [r7, #12]
 800413a:	60b9      	str	r1, [r7, #8]
 800413c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	685a      	ldr	r2, [r3, #4]
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	43db      	mvns	r3, r3
 8004146:	401a      	ands	r2, r3
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	6879      	ldr	r1, [r7, #4]
 800414c:	fb01 f303 	mul.w	r3, r1, r3
 8004150:	431a      	orrs	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	605a      	str	r2, [r3, #4]
}
 8004156:	bf00      	nop
 8004158:	3714      	adds	r7, #20
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <LL_GPIO_SetPinSpeed>:
{
 8004162:	b480      	push	{r7}
 8004164:	b08b      	sub	sp, #44	; 0x2c
 8004166:	af00      	add	r7, sp, #0
 8004168:	60f8      	str	r0, [r7, #12]
 800416a:	60b9      	str	r1, [r7, #8]
 800416c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	689a      	ldr	r2, [r3, #8]
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	fa93 f3a3 	rbit	r3, r3
 800417c:	613b      	str	r3, [r7, #16]
  return result;
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d101      	bne.n	800418c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8004188:	2320      	movs	r3, #32
 800418a:	e003      	b.n	8004194 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	fab3 f383 	clz	r3, r3
 8004192:	b2db      	uxtb	r3, r3
 8004194:	005b      	lsls	r3, r3, #1
 8004196:	2103      	movs	r1, #3
 8004198:	fa01 f303 	lsl.w	r3, r1, r3
 800419c:	43db      	mvns	r3, r3
 800419e:	401a      	ands	r2, r3
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a4:	6a3b      	ldr	r3, [r7, #32]
 80041a6:	fa93 f3a3 	rbit	r3, r3
 80041aa:	61fb      	str	r3, [r7, #28]
  return result;
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80041b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80041b6:	2320      	movs	r3, #32
 80041b8:	e003      	b.n	80041c2 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80041ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041bc:	fab3 f383 	clz	r3, r3
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	005b      	lsls	r3, r3, #1
 80041c4:	6879      	ldr	r1, [r7, #4]
 80041c6:	fa01 f303 	lsl.w	r3, r1, r3
 80041ca:	431a      	orrs	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	609a      	str	r2, [r3, #8]
}
 80041d0:	bf00      	nop
 80041d2:	372c      	adds	r7, #44	; 0x2c
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <LL_GPIO_SetPinPull>:
{
 80041dc:	b480      	push	{r7}
 80041de:	b08b      	sub	sp, #44	; 0x2c
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	68da      	ldr	r2, [r3, #12]
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	fa93 f3a3 	rbit	r3, r3
 80041f6:	613b      	str	r3, [r7, #16]
  return result;
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8004202:	2320      	movs	r3, #32
 8004204:	e003      	b.n	800420e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	fab3 f383 	clz	r3, r3
 800420c:	b2db      	uxtb	r3, r3
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	2103      	movs	r1, #3
 8004212:	fa01 f303 	lsl.w	r3, r1, r3
 8004216:	43db      	mvns	r3, r3
 8004218:	401a      	ands	r2, r3
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800421e:	6a3b      	ldr	r3, [r7, #32]
 8004220:	fa93 f3a3 	rbit	r3, r3
 8004224:	61fb      	str	r3, [r7, #28]
  return result;
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800422a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8004230:	2320      	movs	r3, #32
 8004232:	e003      	b.n	800423c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8004234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004236:	fab3 f383 	clz	r3, r3
 800423a:	b2db      	uxtb	r3, r3
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	6879      	ldr	r1, [r7, #4]
 8004240:	fa01 f303 	lsl.w	r3, r1, r3
 8004244:	431a      	orrs	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	60da      	str	r2, [r3, #12]
}
 800424a:	bf00      	nop
 800424c:	372c      	adds	r7, #44	; 0x2c
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <LL_GPIO_SetAFPin_0_7>:
{
 8004256:	b480      	push	{r7}
 8004258:	b08b      	sub	sp, #44	; 0x2c
 800425a:	af00      	add	r7, sp, #0
 800425c:	60f8      	str	r0, [r7, #12]
 800425e:	60b9      	str	r1, [r7, #8]
 8004260:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6a1a      	ldr	r2, [r3, #32]
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	fa93 f3a3 	rbit	r3, r3
 8004270:	613b      	str	r3, [r7, #16]
  return result;
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d101      	bne.n	8004280 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800427c:	2320      	movs	r3, #32
 800427e:	e003      	b.n	8004288 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	fab3 f383 	clz	r3, r3
 8004286:	b2db      	uxtb	r3, r3
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	210f      	movs	r1, #15
 800428c:	fa01 f303 	lsl.w	r3, r1, r3
 8004290:	43db      	mvns	r3, r3
 8004292:	401a      	ands	r2, r3
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004298:	6a3b      	ldr	r3, [r7, #32]
 800429a:	fa93 f3a3 	rbit	r3, r3
 800429e:	61fb      	str	r3, [r7, #28]
  return result;
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80042a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80042aa:	2320      	movs	r3, #32
 80042ac:	e003      	b.n	80042b6 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	fab3 f383 	clz	r3, r3
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	6879      	ldr	r1, [r7, #4]
 80042ba:	fa01 f303 	lsl.w	r3, r1, r3
 80042be:	431a      	orrs	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	621a      	str	r2, [r3, #32]
}
 80042c4:	bf00      	nop
 80042c6:	372c      	adds	r7, #44	; 0x2c
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <LL_GPIO_SetAFPin_8_15>:
{
 80042d0:	b480      	push	{r7}
 80042d2:	b08b      	sub	sp, #44	; 0x2c
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	0a1b      	lsrs	r3, r3, #8
 80042e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	fa93 f3a3 	rbit	r3, r3
 80042ec:	613b      	str	r3, [r7, #16]
  return result;
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d101      	bne.n	80042fc <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80042f8:	2320      	movs	r3, #32
 80042fa:	e003      	b.n	8004304 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	fab3 f383 	clz	r3, r3
 8004302:	b2db      	uxtb	r3, r3
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	210f      	movs	r1, #15
 8004308:	fa01 f303 	lsl.w	r3, r1, r3
 800430c:	43db      	mvns	r3, r3
 800430e:	401a      	ands	r2, r3
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	0a1b      	lsrs	r3, r3, #8
 8004314:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004316:	6a3b      	ldr	r3, [r7, #32]
 8004318:	fa93 f3a3 	rbit	r3, r3
 800431c:	61fb      	str	r3, [r7, #28]
  return result;
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8004328:	2320      	movs	r3, #32
 800432a:	e003      	b.n	8004334 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432e:	fab3 f383 	clz	r3, r3
 8004332:	b2db      	uxtb	r3, r3
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	6879      	ldr	r1, [r7, #4]
 8004338:	fa01 f303 	lsl.w	r3, r1, r3
 800433c:	431a      	orrs	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004342:	bf00      	nop
 8004344:	372c      	adds	r7, #44	; 0x2c
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr

0800434e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b088      	sub	sp, #32
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
 8004356:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	fa93 f3a3 	rbit	r3, r3
 8004364:	60fb      	str	r3, [r7, #12]
  return result;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d101      	bne.n	8004374 <LL_GPIO_Init+0x26>
    return 32U;
 8004370:	2320      	movs	r3, #32
 8004372:	e003      	b.n	800437c <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	fab3 f383 	clz	r3, r3
 800437a:	b2db      	uxtb	r3, r3
 800437c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800437e:	e048      	b.n	8004412 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	2101      	movs	r1, #1
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	fa01 f303 	lsl.w	r3, r1, r3
 800438c:	4013      	ands	r3, r2
 800438e:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d03a      	beq.n	800440c <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d003      	beq.n	80043a6 <LL_GPIO_Init+0x58>
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d10e      	bne.n	80043c4 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	461a      	mov	r2, r3
 80043ac:	69b9      	ldr	r1, [r7, #24]
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7ff fed7 	bl	8004162 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	6819      	ldr	r1, [r3, #0]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	461a      	mov	r2, r3
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f7ff feb7 	bl	8004132 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	461a      	mov	r2, r3
 80043ca:	69b9      	ldr	r1, [r7, #24]
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f7ff ff05 	bl	80041dc <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d111      	bne.n	80043fe <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	2bff      	cmp	r3, #255	; 0xff
 80043de:	d807      	bhi.n	80043f0 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	695b      	ldr	r3, [r3, #20]
 80043e4:	461a      	mov	r2, r3
 80043e6:	69b9      	ldr	r1, [r7, #24]
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f7ff ff34 	bl	8004256 <LL_GPIO_SetAFPin_0_7>
 80043ee:	e006      	b.n	80043fe <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	461a      	mov	r2, r3
 80043f6:	69b9      	ldr	r1, [r7, #24]
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f7ff ff69 	bl	80042d0 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	461a      	mov	r2, r3
 8004404:	69b9      	ldr	r1, [r7, #24]
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7ff fe56 	bl	80040b8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	3301      	adds	r3, #1
 8004410:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	fa22 f303 	lsr.w	r3, r2, r3
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1af      	bne.n	8004380 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3720      	adds	r7, #32
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
	...

0800442c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004430:	4b07      	ldr	r3, [pc, #28]	; (8004450 <LL_RCC_HSI_IsReady+0x24>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800443c:	d101      	bne.n	8004442 <LL_RCC_HSI_IsReady+0x16>
 800443e:	2301      	movs	r3, #1
 8004440:	e000      	b.n	8004444 <LL_RCC_HSI_IsReady+0x18>
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	40021000 	.word	0x40021000

08004454 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004458:	4b07      	ldr	r3, [pc, #28]	; (8004478 <LL_RCC_LSE_IsReady+0x24>)
 800445a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b02      	cmp	r3, #2
 8004464:	d101      	bne.n	800446a <LL_RCC_LSE_IsReady+0x16>
 8004466:	2301      	movs	r3, #1
 8004468:	e000      	b.n	800446c <LL_RCC_LSE_IsReady+0x18>
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	40021000 	.word	0x40021000

0800447c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004480:	4b04      	ldr	r3, [pc, #16]	; (8004494 <LL_RCC_GetSysClkSource+0x18>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f003 030c 	and.w	r3, r3, #12
}
 8004488:	4618      	mov	r0, r3
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	40021000 	.word	0x40021000

08004498 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800449c:	4b04      	ldr	r3, [pc, #16]	; (80044b0 <LL_RCC_GetAHBPrescaler+0x18>)
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	40021000 	.word	0x40021000

080044b4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80044b4:	b480      	push	{r7}
 80044b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80044b8:	4b04      	ldr	r3, [pc, #16]	; (80044cc <LL_RCC_GetAPB1Prescaler+0x18>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	40021000 	.word	0x40021000

080044d0 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80044d0:	b480      	push	{r7}
 80044d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80044d4:	4b04      	ldr	r3, [pc, #16]	; (80044e8 <LL_RCC_GetAPB2Prescaler+0x18>)
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80044dc:	4618      	mov	r0, r3
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	40021000 	.word	0x40021000

080044ec <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80044f4:	4b06      	ldr	r3, [pc, #24]	; (8004510 <LL_RCC_GetUSARTClockSource+0x24>)
 80044f6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	401a      	ands	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	041b      	lsls	r3, r3, #16
 8004502:	4313      	orrs	r3, r2
}
 8004504:	4618      	mov	r0, r3
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr
 8004510:	40021000 	.word	0x40021000

08004514 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 800451c:	4b06      	ldr	r3, [pc, #24]	; (8004538 <LL_RCC_GetUARTClockSource+0x24>)
 800451e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	401a      	ands	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	041b      	lsls	r3, r3, #16
 800452a:	4313      	orrs	r3, r2
}
 800452c:	4618      	mov	r0, r3
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	40021000 	.word	0x40021000

0800453c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004540:	4b04      	ldr	r3, [pc, #16]	; (8004554 <LL_RCC_PLL_GetMainSource+0x18>)
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f003 0303 	and.w	r3, r3, #3
}
 8004548:	4618      	mov	r0, r3
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	40021000 	.word	0x40021000

08004558 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between Min_Data = 8 and Max_Data = 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004558:	b480      	push	{r7}
 800455a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800455c:	4b04      	ldr	r3, [pc, #16]	; (8004570 <LL_RCC_PLL_GetN+0x18>)
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	0a1b      	lsrs	r3, r3, #8
 8004562:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004566:	4618      	mov	r0, r3
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	40021000 	.word	0x40021000

08004574 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004574:	b480      	push	{r7}
 8004576:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004578:	4b04      	ldr	r3, [pc, #16]	; (800458c <LL_RCC_PLL_GetR+0x18>)
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8004580:	4618      	mov	r0, r3
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	40021000 	.word	0x40021000

08004590 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_14
  *         @arg @ref LL_RCC_PLLM_DIV_15
  *         @arg @ref LL_RCC_PLLM_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004590:	b480      	push	{r7}
 8004592:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004594:	4b04      	ldr	r3, [pc, #16]	; (80045a8 <LL_RCC_PLL_GetDivider+0x18>)
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800459c:	4618      	mov	r0, r3
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	40021000 	.word	0x40021000

080045ac <LL_RCC_GetUSARTClockFreq>:
  *
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80045b4:	2300      	movs	r3, #0
 80045b6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b03      	cmp	r3, #3
 80045bc:	d132      	bne.n	8004624 <LL_RCC_GetUSARTClockFreq+0x78>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f7ff ff94 	bl	80044ec <LL_RCC_GetUSARTClockSource>
 80045c4:	4603      	mov	r3, r0
 80045c6:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 80045ca:	d016      	beq.n	80045fa <LL_RCC_GetUSARTClockFreq+0x4e>
 80045cc:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 80045d0:	d81c      	bhi.n	800460c <LL_RCC_GetUSARTClockFreq+0x60>
 80045d2:	4a52      	ldr	r2, [pc, #328]	; (800471c <LL_RCC_GetUSARTClockFreq+0x170>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d003      	beq.n	80045e0 <LL_RCC_GetUSARTClockFreq+0x34>
 80045d8:	4a51      	ldr	r2, [pc, #324]	; (8004720 <LL_RCC_GetUSARTClockFreq+0x174>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d004      	beq.n	80045e8 <LL_RCC_GetUSARTClockFreq+0x3c>
 80045de:	e015      	b.n	800460c <LL_RCC_GetUSARTClockFreq+0x60>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80045e0:	f000 f934 	bl	800484c <RCC_GetSystemClockFreq>
 80045e4:	60f8      	str	r0, [r7, #12]
        break;
 80045e6:	e094      	b.n	8004712 <LL_RCC_GetUSARTClockFreq+0x166>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80045e8:	f7ff ff20 	bl	800442c <LL_RCC_HSI_IsReady>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f000 8082 	beq.w	80046f8 <LL_RCC_GetUSARTClockFreq+0x14c>
        {
          usart_frequency = HSI_VALUE;
 80045f4:	4b4b      	ldr	r3, [pc, #300]	; (8004724 <LL_RCC_GetUSARTClockFreq+0x178>)
 80045f6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80045f8:	e07e      	b.n	80046f8 <LL_RCC_GetUSARTClockFreq+0x14c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80045fa:	f7ff ff2b 	bl	8004454 <LL_RCC_LSE_IsReady>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d07b      	beq.n	80046fc <LL_RCC_GetUSARTClockFreq+0x150>
        {
          usart_frequency = LSE_VALUE;
 8004604:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004608:	60fb      	str	r3, [r7, #12]
        }
        break;
 800460a:	e077      	b.n	80046fc <LL_RCC_GetUSARTClockFreq+0x150>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800460c:	f000 f91e 	bl	800484c <RCC_GetSystemClockFreq>
 8004610:	4603      	mov	r3, r0
 8004612:	4618      	mov	r0, r3
 8004614:	f000 f940 	bl	8004898 <RCC_GetHCLKClockFreq>
 8004618:	4603      	mov	r3, r0
 800461a:	4618      	mov	r0, r3
 800461c:	f000 f96a 	bl	80048f4 <RCC_GetPCLK2ClockFreq>
 8004620:	60f8      	str	r0, [r7, #12]
        break;
 8004622:	e076      	b.n	8004712 <LL_RCC_GetUSARTClockFreq+0x166>
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b0c      	cmp	r3, #12
 8004628:	d131      	bne.n	800468e <LL_RCC_GetUSARTClockFreq+0xe2>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7ff ff5e 	bl	80044ec <LL_RCC_GetUSARTClockSource>
 8004630:	4603      	mov	r3, r0
 8004632:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 8004636:	d015      	beq.n	8004664 <LL_RCC_GetUSARTClockFreq+0xb8>
 8004638:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 800463c:	d81b      	bhi.n	8004676 <LL_RCC_GetUSARTClockFreq+0xca>
 800463e:	4a3a      	ldr	r2, [pc, #232]	; (8004728 <LL_RCC_GetUSARTClockFreq+0x17c>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d003      	beq.n	800464c <LL_RCC_GetUSARTClockFreq+0xa0>
 8004644:	4a39      	ldr	r2, [pc, #228]	; (800472c <LL_RCC_GetUSARTClockFreq+0x180>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d004      	beq.n	8004654 <LL_RCC_GetUSARTClockFreq+0xa8>
 800464a:	e014      	b.n	8004676 <LL_RCC_GetUSARTClockFreq+0xca>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800464c:	f000 f8fe 	bl	800484c <RCC_GetSystemClockFreq>
 8004650:	60f8      	str	r0, [r7, #12]
        break;
 8004652:	e05e      	b.n	8004712 <LL_RCC_GetUSARTClockFreq+0x166>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8004654:	f7ff feea 	bl	800442c <LL_RCC_HSI_IsReady>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d050      	beq.n	8004700 <LL_RCC_GetUSARTClockFreq+0x154>
        {
          usart_frequency = HSI_VALUE;
 800465e:	4b31      	ldr	r3, [pc, #196]	; (8004724 <LL_RCC_GetUSARTClockFreq+0x178>)
 8004660:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004662:	e04d      	b.n	8004700 <LL_RCC_GetUSARTClockFreq+0x154>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8004664:	f7ff fef6 	bl	8004454 <LL_RCC_LSE_IsReady>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d04a      	beq.n	8004704 <LL_RCC_GetUSARTClockFreq+0x158>
        {
          usart_frequency = LSE_VALUE;
 800466e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004672:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004674:	e046      	b.n	8004704 <LL_RCC_GetUSARTClockFreq+0x158>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004676:	f000 f8e9 	bl	800484c <RCC_GetSystemClockFreq>
 800467a:	4603      	mov	r3, r0
 800467c:	4618      	mov	r0, r3
 800467e:	f000 f90b 	bl	8004898 <RCC_GetHCLKClockFreq>
 8004682:	4603      	mov	r3, r0
 8004684:	4618      	mov	r0, r3
 8004686:	f000 f91f 	bl	80048c8 <RCC_GetPCLK1ClockFreq>
 800468a:	60f8      	str	r0, [r7, #12]
        break;
 800468c:	e041      	b.n	8004712 <LL_RCC_GetUSARTClockFreq+0x166>
    }
  }
  else
  {
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b30      	cmp	r3, #48	; 0x30
 8004692:	d139      	bne.n	8004708 <LL_RCC_GetUSARTClockFreq+0x15c>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f7ff ff29 	bl	80044ec <LL_RCC_GetUSARTClockSource>
 800469a:	4603      	mov	r3, r0
 800469c:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80046a0:	d015      	beq.n	80046ce <LL_RCC_GetUSARTClockFreq+0x122>
 80046a2:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80046a6:	d81b      	bhi.n	80046e0 <LL_RCC_GetUSARTClockFreq+0x134>
 80046a8:	4a21      	ldr	r2, [pc, #132]	; (8004730 <LL_RCC_GetUSARTClockFreq+0x184>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d003      	beq.n	80046b6 <LL_RCC_GetUSARTClockFreq+0x10a>
 80046ae:	4a21      	ldr	r2, [pc, #132]	; (8004734 <LL_RCC_GetUSARTClockFreq+0x188>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d004      	beq.n	80046be <LL_RCC_GetUSARTClockFreq+0x112>
 80046b4:	e014      	b.n	80046e0 <LL_RCC_GetUSARTClockFreq+0x134>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 80046b6:	f000 f8c9 	bl	800484c <RCC_GetSystemClockFreq>
 80046ba:	60f8      	str	r0, [r7, #12]
          break;
 80046bc:	e029      	b.n	8004712 <LL_RCC_GetUSARTClockFreq+0x166>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 80046be:	f7ff feb5 	bl	800442c <LL_RCC_HSI_IsReady>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d021      	beq.n	800470c <LL_RCC_GetUSARTClockFreq+0x160>
          {
            usart_frequency = HSI_VALUE;
 80046c8:	4b16      	ldr	r3, [pc, #88]	; (8004724 <LL_RCC_GetUSARTClockFreq+0x178>)
 80046ca:	60fb      	str	r3, [r7, #12]
          }
          break;
 80046cc:	e01e      	b.n	800470c <LL_RCC_GetUSARTClockFreq+0x160>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 80046ce:	f7ff fec1 	bl	8004454 <LL_RCC_LSE_IsReady>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d01b      	beq.n	8004710 <LL_RCC_GetUSARTClockFreq+0x164>
          {
            usart_frequency = LSE_VALUE;
 80046d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046dc:	60fb      	str	r3, [r7, #12]
          }
          break;
 80046de:	e017      	b.n	8004710 <LL_RCC_GetUSARTClockFreq+0x164>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
        default:
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80046e0:	f000 f8b4 	bl	800484c <RCC_GetSystemClockFreq>
 80046e4:	4603      	mov	r3, r0
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 f8d6 	bl	8004898 <RCC_GetHCLKClockFreq>
 80046ec:	4603      	mov	r3, r0
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 f8ea 	bl	80048c8 <RCC_GetPCLK1ClockFreq>
 80046f4:	60f8      	str	r0, [r7, #12]
          break;
 80046f6:	e00c      	b.n	8004712 <LL_RCC_GetUSARTClockFreq+0x166>
        break;
 80046f8:	bf00      	nop
 80046fa:	e00a      	b.n	8004712 <LL_RCC_GetUSARTClockFreq+0x166>
        break;
 80046fc:	bf00      	nop
 80046fe:	e008      	b.n	8004712 <LL_RCC_GetUSARTClockFreq+0x166>
        break;
 8004700:	bf00      	nop
 8004702:	e006      	b.n	8004712 <LL_RCC_GetUSARTClockFreq+0x166>
        break;
 8004704:	bf00      	nop
 8004706:	e004      	b.n	8004712 <LL_RCC_GetUSARTClockFreq+0x166>
      }
    }
 8004708:	bf00      	nop
 800470a:	e002      	b.n	8004712 <LL_RCC_GetUSARTClockFreq+0x166>
          break;
 800470c:	bf00      	nop
 800470e:	e000      	b.n	8004712 <LL_RCC_GetUSARTClockFreq+0x166>
          break;
 8004710:	bf00      	nop
  }
  return usart_frequency;
 8004712:	68fb      	ldr	r3, [r7, #12]
}
 8004714:	4618      	mov	r0, r3
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	00030001 	.word	0x00030001
 8004720:	00030002 	.word	0x00030002
 8004724:	00f42400 	.word	0x00f42400
 8004728:	000c0004 	.word	0x000c0004
 800472c:	000c0008 	.word	0x000c0008
 8004730:	00300010 	.word	0x00300010
 8004734:	00300020 	.word	0x00300020

08004738 <LL_RCC_GetUARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004740:	2300      	movs	r3, #0
 8004742:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2bc0      	cmp	r3, #192	; 0xc0
 8004748:	d131      	bne.n	80047ae <LL_RCC_GetUARTClockFreq+0x76>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7ff fee2 	bl	8004514 <LL_RCC_GetUARTClockSource>
 8004750:	4603      	mov	r3, r0
 8004752:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8004756:	d015      	beq.n	8004784 <LL_RCC_GetUARTClockFreq+0x4c>
 8004758:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 800475c:	d81b      	bhi.n	8004796 <LL_RCC_GetUARTClockFreq+0x5e>
 800475e:	4a36      	ldr	r2, [pc, #216]	; (8004838 <LL_RCC_GetUARTClockFreq+0x100>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d003      	beq.n	800476c <LL_RCC_GetUARTClockFreq+0x34>
 8004764:	4a35      	ldr	r2, [pc, #212]	; (800483c <LL_RCC_GetUARTClockFreq+0x104>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d004      	beq.n	8004774 <LL_RCC_GetUARTClockFreq+0x3c>
 800476a:	e014      	b.n	8004796 <LL_RCC_GetUARTClockFreq+0x5e>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800476c:	f000 f86e 	bl	800484c <RCC_GetSystemClockFreq>
 8004770:	60f8      	str	r0, [r7, #12]
        break;
 8004772:	e021      	b.n	80047b8 <LL_RCC_GetUARTClockFreq+0x80>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8004774:	f7ff fe5a 	bl	800442c <LL_RCC_HSI_IsReady>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d019      	beq.n	80047b2 <LL_RCC_GetUARTClockFreq+0x7a>
        {
          uart_frequency = HSI_VALUE;
 800477e:	4b30      	ldr	r3, [pc, #192]	; (8004840 <LL_RCC_GetUARTClockFreq+0x108>)
 8004780:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004782:	e016      	b.n	80047b2 <LL_RCC_GetUARTClockFreq+0x7a>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8004784:	f7ff fe66 	bl	8004454 <LL_RCC_LSE_IsReady>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d013      	beq.n	80047b6 <LL_RCC_GetUARTClockFreq+0x7e>
        {
          uart_frequency = LSE_VALUE;
 800478e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004792:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004794:	e00f      	b.n	80047b6 <LL_RCC_GetUARTClockFreq+0x7e>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004796:	f000 f859 	bl	800484c <RCC_GetSystemClockFreq>
 800479a:	4603      	mov	r3, r0
 800479c:	4618      	mov	r0, r3
 800479e:	f000 f87b 	bl	8004898 <RCC_GetHCLKClockFreq>
 80047a2:	4603      	mov	r3, r0
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 f88f 	bl	80048c8 <RCC_GetPCLK1ClockFreq>
 80047aa:	60f8      	str	r0, [r7, #12]
        break;
 80047ac:	e004      	b.n	80047b8 <LL_RCC_GetUARTClockFreq+0x80>
    }
  }
 80047ae:	bf00      	nop
 80047b0:	e002      	b.n	80047b8 <LL_RCC_GetUARTClockFreq+0x80>
        break;
 80047b2:	bf00      	nop
 80047b4:	e000      	b.n	80047b8 <LL_RCC_GetUARTClockFreq+0x80>
        break;
 80047b6:	bf00      	nop

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047be:	d131      	bne.n	8004824 <LL_RCC_GetUARTClockFreq+0xec>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f7ff fea7 	bl	8004514 <LL_RCC_GetUARTClockSource>
 80047c6:	4603      	mov	r3, r0
 80047c8:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 80047cc:	d015      	beq.n	80047fa <LL_RCC_GetUARTClockFreq+0xc2>
 80047ce:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 80047d2:	d81b      	bhi.n	800480c <LL_RCC_GetUARTClockFreq+0xd4>
 80047d4:	4a1b      	ldr	r2, [pc, #108]	; (8004844 <LL_RCC_GetUARTClockFreq+0x10c>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d003      	beq.n	80047e2 <LL_RCC_GetUARTClockFreq+0xaa>
 80047da:	4a1b      	ldr	r2, [pc, #108]	; (8004848 <LL_RCC_GetUARTClockFreq+0x110>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d004      	beq.n	80047ea <LL_RCC_GetUARTClockFreq+0xb2>
 80047e0:	e014      	b.n	800480c <LL_RCC_GetUARTClockFreq+0xd4>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 80047e2:	f000 f833 	bl	800484c <RCC_GetSystemClockFreq>
 80047e6:	60f8      	str	r0, [r7, #12]
        break;
 80047e8:	e021      	b.n	800482e <LL_RCC_GetUARTClockFreq+0xf6>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80047ea:	f7ff fe1f 	bl	800442c <LL_RCC_HSI_IsReady>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d019      	beq.n	8004828 <LL_RCC_GetUARTClockFreq+0xf0>
        {
          uart_frequency = HSI_VALUE;
 80047f4:	4b12      	ldr	r3, [pc, #72]	; (8004840 <LL_RCC_GetUARTClockFreq+0x108>)
 80047f6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80047f8:	e016      	b.n	8004828 <LL_RCC_GetUARTClockFreq+0xf0>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80047fa:	f7ff fe2b 	bl	8004454 <LL_RCC_LSE_IsReady>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d013      	beq.n	800482c <LL_RCC_GetUARTClockFreq+0xf4>
        {
          uart_frequency = LSE_VALUE;
 8004804:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004808:	60fb      	str	r3, [r7, #12]
        }
        break;
 800480a:	e00f      	b.n	800482c <LL_RCC_GetUARTClockFreq+0xf4>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800480c:	f000 f81e 	bl	800484c <RCC_GetSystemClockFreq>
 8004810:	4603      	mov	r3, r0
 8004812:	4618      	mov	r0, r3
 8004814:	f000 f840 	bl	8004898 <RCC_GetHCLKClockFreq>
 8004818:	4603      	mov	r3, r0
 800481a:	4618      	mov	r0, r3
 800481c:	f000 f854 	bl	80048c8 <RCC_GetPCLK1ClockFreq>
 8004820:	60f8      	str	r0, [r7, #12]
        break;
 8004822:	e004      	b.n	800482e <LL_RCC_GetUARTClockFreq+0xf6>
    }
  }
 8004824:	bf00      	nop
 8004826:	e002      	b.n	800482e <LL_RCC_GetUARTClockFreq+0xf6>
        break;
 8004828:	bf00      	nop
 800482a:	e000      	b.n	800482e <LL_RCC_GetUARTClockFreq+0xf6>
        break;
 800482c:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 800482e:	68fb      	ldr	r3, [r7, #12]
}
 8004830:	4618      	mov	r0, r3
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	00c00040 	.word	0x00c00040
 800483c:	00c00080 	.word	0x00c00080
 8004840:	00f42400 	.word	0x00f42400
 8004844:	03000100 	.word	0x03000100
 8004848:	03000200 	.word	0x03000200

0800484c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8004852:	f7ff fe13 	bl	800447c <LL_RCC_GetSysClkSource>
 8004856:	4603      	mov	r3, r0
 8004858:	2b0c      	cmp	r3, #12
 800485a:	d00c      	beq.n	8004876 <RCC_GetSystemClockFreq+0x2a>
 800485c:	2b0c      	cmp	r3, #12
 800485e:	d80e      	bhi.n	800487e <RCC_GetSystemClockFreq+0x32>
 8004860:	2b04      	cmp	r3, #4
 8004862:	d002      	beq.n	800486a <RCC_GetSystemClockFreq+0x1e>
 8004864:	2b08      	cmp	r3, #8
 8004866:	d003      	beq.n	8004870 <RCC_GetSystemClockFreq+0x24>
 8004868:	e009      	b.n	800487e <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800486a:	4b09      	ldr	r3, [pc, #36]	; (8004890 <RCC_GetSystemClockFreq+0x44>)
 800486c:	607b      	str	r3, [r7, #4]
      break;
 800486e:	e009      	b.n	8004884 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8004870:	4b08      	ldr	r3, [pc, #32]	; (8004894 <RCC_GetSystemClockFreq+0x48>)
 8004872:	607b      	str	r3, [r7, #4]
      break;
 8004874:	e006      	b.n	8004884 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8004876:	f000 f853 	bl	8004920 <RCC_PLL_GetFreqDomain_SYS>
 800487a:	6078      	str	r0, [r7, #4]
      break;
 800487c:	e002      	b.n	8004884 <RCC_GetSystemClockFreq+0x38>

    default:
      frequency = HSI_VALUE;
 800487e:	4b04      	ldr	r3, [pc, #16]	; (8004890 <RCC_GetSystemClockFreq+0x44>)
 8004880:	607b      	str	r3, [r7, #4]
      break;
 8004882:	bf00      	nop
  }

  return frequency;
 8004884:	687b      	ldr	r3, [r7, #4]
}
 8004886:	4618      	mov	r0, r3
 8004888:	3708      	adds	r7, #8
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	00f42400 	.word	0x00f42400
 8004894:	007a1200 	.word	0x007a1200

08004898 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80048a0:	f7ff fdfa 	bl	8004498 <LL_RCC_GetAHBPrescaler>
 80048a4:	4603      	mov	r3, r0
 80048a6:	091b      	lsrs	r3, r3, #4
 80048a8:	f003 030f 	and.w	r3, r3, #15
 80048ac:	4a05      	ldr	r2, [pc, #20]	; (80048c4 <RCC_GetHCLKClockFreq+0x2c>)
 80048ae:	5cd3      	ldrb	r3, [r2, r3]
 80048b0:	f003 031f 	and.w	r3, r3, #31
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	08009d7c 	.word	0x08009d7c

080048c8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80048d0:	f7ff fdf0 	bl	80044b4 <LL_RCC_GetAPB1Prescaler>
 80048d4:	4603      	mov	r3, r0
 80048d6:	0a1b      	lsrs	r3, r3, #8
 80048d8:	4a05      	ldr	r2, [pc, #20]	; (80048f0 <RCC_GetPCLK1ClockFreq+0x28>)
 80048da:	5cd3      	ldrb	r3, [r2, r3]
 80048dc:	f003 031f 	and.w	r3, r3, #31
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3708      	adds	r7, #8
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	08009d8c 	.word	0x08009d8c

080048f4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80048fc:	f7ff fde8 	bl	80044d0 <LL_RCC_GetAPB2Prescaler>
 8004900:	4603      	mov	r3, r0
 8004902:	0adb      	lsrs	r3, r3, #11
 8004904:	4a05      	ldr	r2, [pc, #20]	; (800491c <RCC_GetPCLK2ClockFreq+0x28>)
 8004906:	5cd3      	ldrb	r3, [r2, r3]
 8004908:	f003 031f 	and.w	r3, r3, #31
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004912:	4618      	mov	r0, r3
 8004914:	3708      	adds	r7, #8
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	08009d8c 	.word	0x08009d8c

08004920 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8004920:	b590      	push	{r4, r7, lr}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004926:	f7ff fe09 	bl	800453c <LL_RCC_PLL_GetMainSource>
 800492a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	2b02      	cmp	r3, #2
 8004930:	d003      	beq.n	800493a <RCC_PLL_GetFreqDomain_SYS+0x1a>
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	2b03      	cmp	r3, #3
 8004936:	d003      	beq.n	8004940 <RCC_PLL_GetFreqDomain_SYS+0x20>
 8004938:	e005      	b.n	8004946 <RCC_PLL_GetFreqDomain_SYS+0x26>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800493a:	4b11      	ldr	r3, [pc, #68]	; (8004980 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 800493c:	607b      	str	r3, [r7, #4]
      break;
 800493e:	e005      	b.n	800494c <RCC_PLL_GetFreqDomain_SYS+0x2c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8004940:	4b10      	ldr	r3, [pc, #64]	; (8004984 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8004942:	607b      	str	r3, [r7, #4]
      break;
 8004944:	e002      	b.n	800494c <RCC_PLL_GetFreqDomain_SYS+0x2c>

    default:
      pllinputfreq = HSI_VALUE;
 8004946:	4b0e      	ldr	r3, [pc, #56]	; (8004980 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8004948:	607b      	str	r3, [r7, #4]
      break;
 800494a:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800494c:	f7ff fe04 	bl	8004558 <LL_RCC_PLL_GetN>
 8004950:	4602      	mov	r2, r0
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	fb03 f402 	mul.w	r4, r3, r2
 8004958:	f7ff fe1a 	bl	8004590 <LL_RCC_PLL_GetDivider>
 800495c:	4603      	mov	r3, r0
 800495e:	091b      	lsrs	r3, r3, #4
 8004960:	3301      	adds	r3, #1
 8004962:	fbb4 f4f3 	udiv	r4, r4, r3
 8004966:	f7ff fe05 	bl	8004574 <LL_RCC_PLL_GetR>
 800496a:	4603      	mov	r3, r0
 800496c:	0e5b      	lsrs	r3, r3, #25
 800496e:	3301      	adds	r3, #1
 8004970:	005b      	lsls	r3, r3, #1
 8004972:	fbb4 f3f3 	udiv	r3, r4, r3
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8004976:	4618      	mov	r0, r3
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	bd90      	pop	{r4, r7, pc}
 800497e:	bf00      	nop
 8004980:	00f42400 	.word	0x00f42400
 8004984:	007a1200 	.word	0x007a1200

08004988 <LL_APB1_GRP1_ForceReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_ForceReset(uint32_t Periphs)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8004990:	4b05      	ldr	r3, [pc, #20]	; (80049a8 <LL_APB1_GRP1_ForceReset+0x20>)
 8004992:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004994:	4904      	ldr	r1, [pc, #16]	; (80049a8 <LL_APB1_GRP1_ForceReset+0x20>)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4313      	orrs	r3, r2
 800499a:	638b      	str	r3, [r1, #56]	; 0x38
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr
 80049a8:	40021000 	.word	0x40021000

080049ac <LL_APB1_GRP1_ReleaseReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_ReleaseReset(uint32_t Periphs)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 80049b4:	4b06      	ldr	r3, [pc, #24]	; (80049d0 <LL_APB1_GRP1_ReleaseReset+0x24>)
 80049b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	43db      	mvns	r3, r3
 80049bc:	4904      	ldr	r1, [pc, #16]	; (80049d0 <LL_APB1_GRP1_ReleaseReset+0x24>)
 80049be:	4013      	ands	r3, r2
 80049c0:	638b      	str	r3, [r1, #56]	; 0x38
}
 80049c2:	bf00      	nop
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	40021000 	.word	0x40021000

080049d4 <LL_APB2_GRP1_ForceReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 80049dc:	4b05      	ldr	r3, [pc, #20]	; (80049f4 <LL_APB2_GRP1_ForceReset+0x20>)
 80049de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049e0:	4904      	ldr	r1, [pc, #16]	; (80049f4 <LL_APB2_GRP1_ForceReset+0x20>)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	640b      	str	r3, [r1, #64]	; 0x40
}
 80049e8:	bf00      	nop
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr
 80049f4:	40021000 	.word	0x40021000

080049f8 <LL_APB2_GRP1_ReleaseReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8004a00:	4b06      	ldr	r3, [pc, #24]	; (8004a1c <LL_APB2_GRP1_ReleaseReset+0x24>)
 8004a02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	43db      	mvns	r3, r3
 8004a08:	4904      	ldr	r1, [pc, #16]	; (8004a1c <LL_APB2_GRP1_ReleaseReset+0x24>)
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	640b      	str	r3, [r1, #64]	; 0x40
}
 8004a0e:	bf00      	nop
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	40021000 	.word	0x40021000

08004a20 <LL_SPI_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: SPI registers are de-initialized
  *          - ERROR: SPI registers are not de-initialized
  */
ErrorStatus LL_SPI_DeInit(SPI_TypeDef *SPIx)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  ErrorStatus status = ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(SPIx));

#if defined(SPI1)
  if (SPIx == SPI1)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a1e      	ldr	r2, [pc, #120]	; (8004aa8 <LL_SPI_DeInit+0x88>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d109      	bne.n	8004a48 <LL_SPI_DeInit+0x28>
  {
    /* Force reset of SPI clock */
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_SPI1);
 8004a34:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004a38:	f7ff ffcc 	bl	80049d4 <LL_APB2_GRP1_ForceReset>

    /* Release reset of SPI clock */
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_SPI1);
 8004a3c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004a40:	f7ff ffda 	bl	80049f8 <LL_APB2_GRP1_ReleaseReset>

    status = SUCCESS;
 8004a44:	2300      	movs	r3, #0
 8004a46:	73fb      	strb	r3, [r7, #15]
  }
#endif /* SPI1 */
#if defined(SPI2)
  if (SPIx == SPI2)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a18      	ldr	r2, [pc, #96]	; (8004aac <LL_SPI_DeInit+0x8c>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d109      	bne.n	8004a64 <LL_SPI_DeInit+0x44>
  {
    /* Force reset of SPI clock */
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_SPI2);
 8004a50:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004a54:	f7ff ff98 	bl	8004988 <LL_APB1_GRP1_ForceReset>

    /* Release reset of SPI clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_SPI2);
 8004a58:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004a5c:	f7ff ffa6 	bl	80049ac <LL_APB1_GRP1_ReleaseReset>

    status = SUCCESS;
 8004a60:	2300      	movs	r3, #0
 8004a62:	73fb      	strb	r3, [r7, #15]
  }
#endif /* SPI2 */
#if defined(SPI3)
  if (SPIx == SPI3)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a12      	ldr	r2, [pc, #72]	; (8004ab0 <LL_SPI_DeInit+0x90>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d109      	bne.n	8004a80 <LL_SPI_DeInit+0x60>
  {
    /* Force reset of SPI clock */
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_SPI3);
 8004a6c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004a70:	f7ff ff8a 	bl	8004988 <LL_APB1_GRP1_ForceReset>

    /* Release reset of SPI clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_SPI3);
 8004a74:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004a78:	f7ff ff98 	bl	80049ac <LL_APB1_GRP1_ReleaseReset>

    status = SUCCESS;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* SPI3 */
#if defined(SPI4)
  if (SPIx == SPI4)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a0c      	ldr	r2, [pc, #48]	; (8004ab4 <LL_SPI_DeInit+0x94>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d109      	bne.n	8004a9c <LL_SPI_DeInit+0x7c>
  {
    /* Force reset of SPI clock */
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_SPI4);
 8004a88:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004a8c:	f7ff ffa2 	bl	80049d4 <LL_APB2_GRP1_ForceReset>

    /* Release reset of SPI clock */
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_SPI4);
 8004a90:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004a94:	f7ff ffb0 	bl	80049f8 <LL_APB2_GRP1_ReleaseReset>

    status = SUCCESS;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* SPI4 */

  return status;
 8004a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	40013000 	.word	0x40013000
 8004aac:	40003800 	.word	0x40003800
 8004ab0:	40003c00 	.word	0x40003c00
 8004ab4:	40013c00 	.word	0x40013c00

08004ab8 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	683a      	ldr	r2, [r7, #0]
 8004ae2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255 or 65535 for advanced timer.
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	683a      	ldr	r2, [r7, #0]
 8004b52:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	683a      	ldr	r2, [r7, #0]
 8004b6e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004b70:	bf00      	nop
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <LL_TIM_OC_SetCompareCH5>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	683a      	ldr	r2, [r7, #0]
 8004b8e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <LL_TIM_OC_SetCompareCH6>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	683a      	ldr	r2, [r7, #0]
 8004baa:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8004bac:	bf00      	nop
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	f043 0201 	orr.w	r2, r3, #1
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	615a      	str	r2, [r3, #20]
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a43      	ldr	r2, [pc, #268]	; (8004cf8 <LL_TIM_Init+0x120>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d017      	beq.n	8004c20 <LL_TIM_Init+0x48>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bf6:	d013      	beq.n	8004c20 <LL_TIM_Init+0x48>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a40      	ldr	r2, [pc, #256]	; (8004cfc <LL_TIM_Init+0x124>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d00f      	beq.n	8004c20 <LL_TIM_Init+0x48>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a3f      	ldr	r2, [pc, #252]	; (8004d00 <LL_TIM_Init+0x128>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d00b      	beq.n	8004c20 <LL_TIM_Init+0x48>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a3e      	ldr	r2, [pc, #248]	; (8004d04 <LL_TIM_Init+0x12c>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d007      	beq.n	8004c20 <LL_TIM_Init+0x48>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a3d      	ldr	r2, [pc, #244]	; (8004d08 <LL_TIM_Init+0x130>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d003      	beq.n	8004c20 <LL_TIM_Init+0x48>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a3c      	ldr	r2, [pc, #240]	; (8004d0c <LL_TIM_Init+0x134>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d106      	bne.n	8004c2e <LL_TIM_Init+0x56>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a31      	ldr	r2, [pc, #196]	; (8004cf8 <LL_TIM_Init+0x120>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d023      	beq.n	8004c7e <LL_TIM_Init+0xa6>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c3c:	d01f      	beq.n	8004c7e <LL_TIM_Init+0xa6>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a2e      	ldr	r2, [pc, #184]	; (8004cfc <LL_TIM_Init+0x124>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d01b      	beq.n	8004c7e <LL_TIM_Init+0xa6>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a2d      	ldr	r2, [pc, #180]	; (8004d00 <LL_TIM_Init+0x128>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d017      	beq.n	8004c7e <LL_TIM_Init+0xa6>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a2c      	ldr	r2, [pc, #176]	; (8004d04 <LL_TIM_Init+0x12c>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d013      	beq.n	8004c7e <LL_TIM_Init+0xa6>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a2b      	ldr	r2, [pc, #172]	; (8004d08 <LL_TIM_Init+0x130>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d00f      	beq.n	8004c7e <LL_TIM_Init+0xa6>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a2b      	ldr	r2, [pc, #172]	; (8004d10 <LL_TIM_Init+0x138>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d00b      	beq.n	8004c7e <LL_TIM_Init+0xa6>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a2a      	ldr	r2, [pc, #168]	; (8004d14 <LL_TIM_Init+0x13c>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d007      	beq.n	8004c7e <LL_TIM_Init+0xa6>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a29      	ldr	r2, [pc, #164]	; (8004d18 <LL_TIM_Init+0x140>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d003      	beq.n	8004c7e <LL_TIM_Init+0xa6>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a24      	ldr	r2, [pc, #144]	; (8004d0c <LL_TIM_Init+0x134>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d106      	bne.n	8004c8c <LL_TIM_Init+0xb4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	4619      	mov	r1, r3
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f7ff ff1b 	bl	8004ad4 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	881b      	ldrh	r3, [r3, #0]
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f7ff ff07 	bl	8004ab8 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a12      	ldr	r2, [pc, #72]	; (8004cf8 <LL_TIM_Init+0x120>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d013      	beq.n	8004cda <LL_TIM_Init+0x102>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a14      	ldr	r2, [pc, #80]	; (8004d08 <LL_TIM_Init+0x130>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d00f      	beq.n	8004cda <LL_TIM_Init+0x102>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a14      	ldr	r2, [pc, #80]	; (8004d10 <LL_TIM_Init+0x138>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d00b      	beq.n	8004cda <LL_TIM_Init+0x102>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a13      	ldr	r2, [pc, #76]	; (8004d14 <LL_TIM_Init+0x13c>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d007      	beq.n	8004cda <LL_TIM_Init+0x102>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a12      	ldr	r2, [pc, #72]	; (8004d18 <LL_TIM_Init+0x140>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d003      	beq.n	8004cda <LL_TIM_Init+0x102>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a0d      	ldr	r2, [pc, #52]	; (8004d0c <LL_TIM_Init+0x134>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d105      	bne.n	8004ce6 <LL_TIM_Init+0x10e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	4619      	mov	r1, r3
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f7ff ff05 	bl	8004af0 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f7ff ff66 	bl	8004bb8 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	40012c00 	.word	0x40012c00
 8004cfc:	40000400 	.word	0x40000400
 8004d00:	40000800 	.word	0x40000800
 8004d04:	40000c00 	.word	0x40000c00
 8004d08:	40013400 	.word	0x40013400
 8004d0c:	40015000 	.word	0x40015000
 8004d10:	40014000 	.word	0x40014000
 8004d14:	40014400 	.word	0x40014400
 8004d18:	40014800 	.word	0x40014800

08004d1c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b086      	sub	sp, #24
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d32:	d045      	beq.n	8004dc0 <LL_TIM_OC_Init+0xa4>
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d3a:	d848      	bhi.n	8004dce <LL_TIM_OC_Init+0xb2>
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d42:	d036      	beq.n	8004db2 <LL_TIM_OC_Init+0x96>
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d4a:	d840      	bhi.n	8004dce <LL_TIM_OC_Init+0xb2>
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d52:	d027      	beq.n	8004da4 <LL_TIM_OC_Init+0x88>
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d5a:	d838      	bhi.n	8004dce <LL_TIM_OC_Init+0xb2>
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d62:	d018      	beq.n	8004d96 <LL_TIM_OC_Init+0x7a>
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d6a:	d830      	bhi.n	8004dce <LL_TIM_OC_Init+0xb2>
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d003      	beq.n	8004d7a <LL_TIM_OC_Init+0x5e>
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	2b10      	cmp	r3, #16
 8004d76:	d007      	beq.n	8004d88 <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8004d78:	e029      	b.n	8004dce <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8004d7a:	6879      	ldr	r1, [r7, #4]
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f000 f82d 	bl	8004ddc <OC1Config>
 8004d82:	4603      	mov	r3, r0
 8004d84:	75fb      	strb	r3, [r7, #23]
      break;
 8004d86:	e023      	b.n	8004dd0 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8004d88:	6879      	ldr	r1, [r7, #4]
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f000 f8ac 	bl	8004ee8 <OC2Config>
 8004d90:	4603      	mov	r3, r0
 8004d92:	75fb      	strb	r3, [r7, #23]
      break;
 8004d94:	e01c      	b.n	8004dd0 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8004d96:	6879      	ldr	r1, [r7, #4]
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f000 f92f 	bl	8004ffc <OC3Config>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	75fb      	strb	r3, [r7, #23]
      break;
 8004da2:	e015      	b.n	8004dd0 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8004da4:	6879      	ldr	r1, [r7, #4]
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f000 f9b2 	bl	8005110 <OC4Config>
 8004dac:	4603      	mov	r3, r0
 8004dae:	75fb      	strb	r3, [r7, #23]
      break;
 8004db0:	e00e      	b.n	8004dd0 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8004db2:	6879      	ldr	r1, [r7, #4]
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f000 fa35 	bl	8005224 <OC5Config>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	75fb      	strb	r3, [r7, #23]
      break;
 8004dbe:	e007      	b.n	8004dd0 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8004dc0:	6879      	ldr	r1, [r7, #4]
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f000 fa98 	bl	80052f8 <OC6Config>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	75fb      	strb	r3, [r7, #23]
      break;
 8004dcc:	e000      	b.n	8004dd0 <LL_TIM_OC_Init+0xb4>
      break;
 8004dce:	bf00      	nop
  }

  return result;
 8004dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3718      	adds	r7, #24
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
	...

08004ddc <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b086      	sub	sp, #24
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	f023 0201 	bic.w	r2, r3, #1
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f023 0303 	bic.w	r3, r3, #3
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e16:	683a      	ldr	r2, [r7, #0]
 8004e18:	6812      	ldr	r2, [r2, #0]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	f023 0202 	bic.w	r2, r3, #2
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	f023 0201 	bic.w	r2, r3, #1
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a24      	ldr	r2, [pc, #144]	; (8004ed0 <OC1Config+0xf4>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d013      	beq.n	8004e6a <OC1Config+0x8e>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a23      	ldr	r2, [pc, #140]	; (8004ed4 <OC1Config+0xf8>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d00f      	beq.n	8004e6a <OC1Config+0x8e>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a22      	ldr	r2, [pc, #136]	; (8004ed8 <OC1Config+0xfc>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d00b      	beq.n	8004e6a <OC1Config+0x8e>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a21      	ldr	r2, [pc, #132]	; (8004edc <OC1Config+0x100>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d007      	beq.n	8004e6a <OC1Config+0x8e>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a20      	ldr	r2, [pc, #128]	; (8004ee0 <OC1Config+0x104>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d003      	beq.n	8004e6a <OC1Config+0x8e>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a1f      	ldr	r2, [pc, #124]	; (8004ee4 <OC1Config+0x108>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d11e      	bne.n	8004ea8 <OC1Config+0xcc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	f023 0208 	bic.w	r2, r3, #8
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	695b      	ldr	r3, [r3, #20]
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	4313      	orrs	r3, r2
 8004e78:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f023 0204 	bic.w	r2, r3, #4
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4313      	orrs	r3, r2
 8004e88:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	69db      	ldr	r3, [r3, #28]
 8004ea2:	005b      	lsls	r3, r3, #1
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	4619      	mov	r1, r3
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7ff fe26 	bl	8004b0c <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3718      	adds	r7, #24
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	40012c00 	.word	0x40012c00
 8004ed4:	40013400 	.word	0x40013400
 8004ed8:	40014000 	.word	0x40014000
 8004edc:	40014400 	.word	0x40014400
 8004ee0:	40014800 	.word	0x40014800
 8004ee4:	40015000 	.word	0x40015000

08004ee8 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b086      	sub	sp, #24
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	f023 0210 	bic.w	r2, r3, #16
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f22:	683a      	ldr	r2, [r7, #0]
 8004f24:	6812      	ldr	r2, [r2, #0]
 8004f26:	0212      	lsls	r2, r2, #8
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	f023 0220 	bic.w	r2, r3, #32
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	011b      	lsls	r3, r3, #4
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	f023 0210 	bic.w	r2, r3, #16
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	011b      	lsls	r3, r3, #4
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a25      	ldr	r2, [pc, #148]	; (8004fe4 <OC2Config+0xfc>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d013      	beq.n	8004f7c <OC2Config+0x94>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a24      	ldr	r2, [pc, #144]	; (8004fe8 <OC2Config+0x100>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d00f      	beq.n	8004f7c <OC2Config+0x94>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a23      	ldr	r2, [pc, #140]	; (8004fec <OC2Config+0x104>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d00b      	beq.n	8004f7c <OC2Config+0x94>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a22      	ldr	r2, [pc, #136]	; (8004ff0 <OC2Config+0x108>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d007      	beq.n	8004f7c <OC2Config+0x94>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a21      	ldr	r2, [pc, #132]	; (8004ff4 <OC2Config+0x10c>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d003      	beq.n	8004f7c <OC2Config+0x94>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a20      	ldr	r2, [pc, #128]	; (8004ff8 <OC2Config+0x110>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d11f      	bne.n	8004fbc <OC2Config+0xd4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	019b      	lsls	r3, r3, #6
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	019b      	lsls	r3, r3, #6
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	00db      	lsls	r3, r3, #3
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	693a      	ldr	r2, [r7, #16]
 8004fc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	4619      	mov	r1, r3
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f7ff fdaa 	bl	8004b28 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3718      	adds	r7, #24
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	40012c00 	.word	0x40012c00
 8004fe8:	40013400 	.word	0x40013400
 8004fec:	40014000 	.word	0x40014000
 8004ff0:	40014400 	.word	0x40014400
 8004ff4:	40014800 	.word	0x40014800
 8004ff8:	40015000 	.word	0x40015000

08004ffc <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	69db      	ldr	r3, [r3, #28]
 8005022:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f023 0303 	bic.w	r3, r3, #3
 800502a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005036:	683a      	ldr	r2, [r7, #0]
 8005038:	6812      	ldr	r2, [r2, #0]
 800503a:	4313      	orrs	r3, r2
 800503c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	021b      	lsls	r3, r3, #8
 800504a:	4313      	orrs	r3, r2
 800504c:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	021b      	lsls	r3, r3, #8
 800505a:	4313      	orrs	r3, r2
 800505c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a25      	ldr	r2, [pc, #148]	; (80050f8 <OC3Config+0xfc>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d013      	beq.n	800508e <OC3Config+0x92>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a24      	ldr	r2, [pc, #144]	; (80050fc <OC3Config+0x100>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d00f      	beq.n	800508e <OC3Config+0x92>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a23      	ldr	r2, [pc, #140]	; (8005100 <OC3Config+0x104>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d00b      	beq.n	800508e <OC3Config+0x92>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a22      	ldr	r2, [pc, #136]	; (8005104 <OC3Config+0x108>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d007      	beq.n	800508e <OC3Config+0x92>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a21      	ldr	r2, [pc, #132]	; (8005108 <OC3Config+0x10c>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d003      	beq.n	800508e <OC3Config+0x92>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a20      	ldr	r2, [pc, #128]	; (800510c <OC3Config+0x110>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d11f      	bne.n	80050ce <OC3Config+0xd2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	695b      	ldr	r3, [r3, #20]
 8005098:	029b      	lsls	r3, r3, #10
 800509a:	4313      	orrs	r3, r2
 800509c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	029b      	lsls	r3, r3, #10
 80050aa:	4313      	orrs	r3, r2
 80050ac:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	011b      	lsls	r3, r3, #4
 80050ba:	4313      	orrs	r3, r2
 80050bc:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	69db      	ldr	r3, [r3, #28]
 80050c8:	015b      	lsls	r3, r3, #5
 80050ca:	4313      	orrs	r3, r2
 80050cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	4619      	mov	r1, r3
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f7ff fd2f 	bl	8004b44 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	697a      	ldr	r2, [r7, #20]
 80050ea:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3718      	adds	r7, #24
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	40012c00 	.word	0x40012c00
 80050fc:	40013400 	.word	0x40013400
 8005100:	40014000 	.word	0x40014000
 8005104:	40014400 	.word	0x40014400
 8005108:	40014800 	.word	0x40014800
 800510c:	40015000 	.word	0x40015000

08005110 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	69db      	ldr	r3, [r3, #28]
 8005136:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800513e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005146:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	6812      	ldr	r2, [r2, #0]
 800514e:	0212      	lsls	r2, r2, #8
 8005150:	4313      	orrs	r3, r2
 8005152:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	031b      	lsls	r3, r3, #12
 8005160:	4313      	orrs	r3, r2
 8005162:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	031b      	lsls	r3, r3, #12
 8005170:	4313      	orrs	r3, r2
 8005172:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a25      	ldr	r2, [pc, #148]	; (800520c <OC4Config+0xfc>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d013      	beq.n	80051a4 <OC4Config+0x94>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a24      	ldr	r2, [pc, #144]	; (8005210 <OC4Config+0x100>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d00f      	beq.n	80051a4 <OC4Config+0x94>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a23      	ldr	r2, [pc, #140]	; (8005214 <OC4Config+0x104>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d00b      	beq.n	80051a4 <OC4Config+0x94>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a22      	ldr	r2, [pc, #136]	; (8005218 <OC4Config+0x108>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d007      	beq.n	80051a4 <OC4Config+0x94>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a21      	ldr	r2, [pc, #132]	; (800521c <OC4Config+0x10c>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d003      	beq.n	80051a4 <OC4Config+0x94>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a20      	ldr	r2, [pc, #128]	; (8005220 <OC4Config+0x110>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d11f      	bne.n	80051e4 <OC4Config+0xd4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC4NP, TIM_OCInitStruct->OCNPolarity << 14U);
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	039b      	lsls	r3, r3, #14
 80051b0:	4313      	orrs	r3, r2
 80051b2:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC4NE, TIM_OCInitStruct->OCNState << 14U);
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	039b      	lsls	r3, r3, #14
 80051c0:	4313      	orrs	r3, r2
 80051c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	019b      	lsls	r3, r3, #6
 80051d0:	4313      	orrs	r3, r2
 80051d2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4N, TIM_OCInitStruct->OCNIdleState << 7U);
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	69db      	ldr	r3, [r3, #28]
 80051de:	01db      	lsls	r3, r3, #7
 80051e0:	4313      	orrs	r3, r2
 80051e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	4619      	mov	r1, r3
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f7ff fcb2 	bl	8004b60 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3718      	adds	r7, #24
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	40012c00 	.word	0x40012c00
 8005210:	40013400 	.word	0x40013400
 8005214:	40014000 	.word	0x40014000
 8005218:	40014400 	.word	0x40014400
 800521c:	40014800 	.word	0x40014800
 8005220:	40015000 	.word	0x40015000

08005224 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a1b      	ldr	r3, [r3, #32]
 800523e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005244:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800524c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005250:	683a      	ldr	r2, [r7, #0]
 8005252:	6812      	ldr	r2, [r2, #0]
 8005254:	4313      	orrs	r3, r2
 8005256:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	041b      	lsls	r3, r3, #16
 8005264:	4313      	orrs	r3, r2
 8005266:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	041b      	lsls	r3, r3, #16
 8005274:	4313      	orrs	r3, r2
 8005276:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a19      	ldr	r2, [pc, #100]	; (80052e0 <OC5Config+0xbc>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d013      	beq.n	80052a8 <OC5Config+0x84>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a18      	ldr	r2, [pc, #96]	; (80052e4 <OC5Config+0xc0>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d00f      	beq.n	80052a8 <OC5Config+0x84>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a17      	ldr	r2, [pc, #92]	; (80052e8 <OC5Config+0xc4>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d00b      	beq.n	80052a8 <OC5Config+0x84>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a16      	ldr	r2, [pc, #88]	; (80052ec <OC5Config+0xc8>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d007      	beq.n	80052a8 <OC5Config+0x84>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a15      	ldr	r2, [pc, #84]	; (80052f0 <OC5Config+0xcc>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d003      	beq.n	80052a8 <OC5Config+0x84>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a14      	ldr	r2, [pc, #80]	; (80052f4 <OC5Config+0xd0>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d109      	bne.n	80052bc <OC5Config+0x98>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	021b      	lsls	r3, r3, #8
 80052b6:	431a      	orrs	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	4619      	mov	r1, r3
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f7ff fc57 	bl	8004b7c <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	40012c00 	.word	0x40012c00
 80052e4:	40013400 	.word	0x40013400
 80052e8:	40014000 	.word	0x40014000
 80052ec:	40014400 	.word	0x40014400
 80052f0:	40014800 	.word	0x40014800
 80052f4:	40015000 	.word	0x40015000

080052f8 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005318:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005320:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005324:	683a      	ldr	r2, [r7, #0]
 8005326:	6812      	ldr	r2, [r2, #0]
 8005328:	0212      	lsls	r2, r2, #8
 800532a:	4313      	orrs	r3, r2
 800532c:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	051b      	lsls	r3, r3, #20
 800533a:	4313      	orrs	r3, r2
 800533c:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	051b      	lsls	r3, r3, #20
 800534a:	4313      	orrs	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a18      	ldr	r2, [pc, #96]	; (80053b4 <OC6Config+0xbc>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d013      	beq.n	800537e <OC6Config+0x86>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a17      	ldr	r2, [pc, #92]	; (80053b8 <OC6Config+0xc0>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d00f      	beq.n	800537e <OC6Config+0x86>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a16      	ldr	r2, [pc, #88]	; (80053bc <OC6Config+0xc4>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d00b      	beq.n	800537e <OC6Config+0x86>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a15      	ldr	r2, [pc, #84]	; (80053c0 <OC6Config+0xc8>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d007      	beq.n	800537e <OC6Config+0x86>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a14      	ldr	r2, [pc, #80]	; (80053c4 <OC6Config+0xcc>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d003      	beq.n	800537e <OC6Config+0x86>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a13      	ldr	r2, [pc, #76]	; (80053c8 <OC6Config+0xd0>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d109      	bne.n	8005392 <OC6Config+0x9a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	699b      	ldr	r3, [r3, #24]
 800538a:	029b      	lsls	r3, r3, #10
 800538c:	431a      	orrs	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	4619      	mov	r1, r3
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7ff fbfc 	bl	8004b9c <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	40012c00 	.word	0x40012c00
 80053b8:	40013400 	.word	0x40013400
 80053bc:	40014000 	.word	0x40014000
 80053c0:	40014400 	.word	0x40014400
 80053c4:	40014800 	.word	0x40014800
 80053c8:	40015000 	.word	0x40015000

080053cc <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0301 	and.w	r3, r3, #1
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d101      	bne.n	80053e4 <LL_USART_IsEnabled+0x18>
 80053e0:	2301      	movs	r3, #1
 80053e2:	e000      	b.n	80053e6 <LL_USART_IsEnabled+0x1a>
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	370c      	adds	r7, #12
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr

080053f2 <LL_USART_SetPrescaler>:
  *         @arg @ref LL_USART_PRESCALER_DIV128
  *         @arg @ref LL_USART_PRESCALER_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetPrescaler(USART_TypeDef *USARTx, uint32_t PrescalerValue)
{
 80053f2:	b480      	push	{r7}
 80053f4:	b083      	sub	sp, #12
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
 80053fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005400:	f023 030f 	bic.w	r3, r3, #15
 8005404:	683a      	ldr	r2, [r7, #0]
 8005406:	b292      	uxth	r2, r2
 8005408:	431a      	orrs	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800540e:	bf00      	nop
 8005410:	370c      	adds	r7, #12
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr

0800541a <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 800541a:	b480      	push	{r7}
 800541c:	b083      	sub	sp, #12
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
 8005422:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	431a      	orrs	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	605a      	str	r2, [r3, #4]
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	431a      	orrs	r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	609a      	str	r2, [r3, #8]
}
 800545a:	bf00      	nop
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
	...

08005468 <LL_USART_SetBaudRate>:
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t PrescalerValue,
                                          uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 8005468:	b480      	push	{r7}
 800546a:	b087      	sub	sp, #28
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
 8005474:	603b      	str	r3, [r7, #0]
  uint32_t usartdiv;
  uint32_t brrtemp;

  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2b0b      	cmp	r3, #11
 800547a:	d83c      	bhi.n	80054f6 <LL_USART_SetBaudRate+0x8e>
  {
    /* Do not overstep the size of USART_PRESCALER_TAB */
  }
  else if (BaudRate == 0U)
 800547c:	6a3b      	ldr	r3, [r7, #32]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d039      	beq.n	80054f6 <LL_USART_SetBaudRate+0x8e>
  {
    /* Can Not divide per 0 */
  }
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005488:	d122      	bne.n	80054d0 <LL_USART_SetBaudRate+0x68>
  {
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	b2db      	uxtb	r3, r3
 800548e:	461a      	mov	r2, r3
 8005490:	4b1c      	ldr	r3, [pc, #112]	; (8005504 <LL_USART_SetBaudRate+0x9c>)
 8005492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005496:	68ba      	ldr	r2, [r7, #8]
 8005498:	fbb2 f3f3 	udiv	r3, r2, r3
 800549c:	005a      	lsls	r2, r3, #1
 800549e:	6a3b      	ldr	r3, [r7, #32]
 80054a0:	085b      	lsrs	r3, r3, #1
 80054a2:	441a      	add	r2, r3
 80054a4:	6a3b      	ldr	r3, [r7, #32]
 80054a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80054b4:	4013      	ands	r3, r2
 80054b6:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	085b      	lsrs	r3, r3, #1
 80054bc:	b29b      	uxth	r3, r3
 80054be:	f003 0307 	and.w	r3, r3, #7
 80054c2:	693a      	ldr	r2, [r7, #16]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
  }
}
 80054ce:	e012      	b.n	80054f6 <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	461a      	mov	r2, r3
 80054d6:	4b0b      	ldr	r3, [pc, #44]	; (8005504 <LL_USART_SetBaudRate+0x9c>)
 80054d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	fbb2 f2f3 	udiv	r2, r2, r3
 80054e2:	6a3b      	ldr	r3, [r7, #32]
 80054e4:	085b      	lsrs	r3, r3, #1
 80054e6:	441a      	add	r2, r3
 80054e8:	6a3b      	ldr	r3, [r7, #32]
 80054ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	461a      	mov	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	60da      	str	r2, [r3, #12]
}
 80054f6:	bf00      	nop
 80054f8:	371c      	adds	r7, #28
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	08009ee8 	.word	0x08009ee8

08005508 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af02      	add	r7, sp, #8
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8005516:	2300      	movs	r3, #0
 8005518:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f7ff ff56 	bl	80053cc <LL_USART_IsEnabled>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d165      	bne.n	80055f2 <LL_USART_Init+0xea>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	4b34      	ldr	r3, [pc, #208]	; (80055fc <LL_USART_Init+0xf4>)
 800552c:	4013      	ands	r3, r2
 800552e:	683a      	ldr	r2, [r7, #0]
 8005530:	6891      	ldr	r1, [r2, #8]
 8005532:	683a      	ldr	r2, [r7, #0]
 8005534:	6912      	ldr	r2, [r2, #16]
 8005536:	4311      	orrs	r1, r2
 8005538:	683a      	ldr	r2, [r7, #0]
 800553a:	6952      	ldr	r2, [r2, #20]
 800553c:	4311      	orrs	r1, r2
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	69d2      	ldr	r2, [r2, #28]
 8005542:	430a      	orrs	r2, r1
 8005544:	431a      	orrs	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	4619      	mov	r1, r3
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f7ff ff62 	bl	800541a <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	4619      	mov	r1, r3
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f7ff ff6f 	bl	8005440 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a26      	ldr	r2, [pc, #152]	; (8005600 <LL_USART_Init+0xf8>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d104      	bne.n	8005574 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800556a:	2003      	movs	r0, #3
 800556c:	f7ff f81e 	bl	80045ac <LL_RCC_GetUSARTClockFreq>
 8005570:	60b8      	str	r0, [r7, #8]
 8005572:	e023      	b.n	80055bc <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a23      	ldr	r2, [pc, #140]	; (8005604 <LL_USART_Init+0xfc>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d104      	bne.n	8005586 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800557c:	200c      	movs	r0, #12
 800557e:	f7ff f815 	bl	80045ac <LL_RCC_GetUSARTClockFreq>
 8005582:	60b8      	str	r0, [r7, #8]
 8005584:	e01a      	b.n	80055bc <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART3)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a1f      	ldr	r2, [pc, #124]	; (8005608 <LL_USART_Init+0x100>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d104      	bne.n	8005598 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 800558e:	2030      	movs	r0, #48	; 0x30
 8005590:	f7ff f80c 	bl	80045ac <LL_RCC_GetUSARTClockFreq>
 8005594:	60b8      	str	r0, [r7, #8]
 8005596:	e011      	b.n	80055bc <LL_USART_Init+0xb4>
    }
#if defined(UART4)
    else if (USARTx == UART4)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a1c      	ldr	r2, [pc, #112]	; (800560c <LL_USART_Init+0x104>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d104      	bne.n	80055aa <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 80055a0:	20c0      	movs	r0, #192	; 0xc0
 80055a2:	f7ff f8c9 	bl	8004738 <LL_RCC_GetUARTClockFreq>
 80055a6:	60b8      	str	r0, [r7, #8]
 80055a8:	e008      	b.n	80055bc <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a18      	ldr	r2, [pc, #96]	; (8005610 <LL_USART_Init+0x108>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d104      	bne.n	80055bc <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 80055b2:	f44f 7040 	mov.w	r0, #768	; 0x300
 80055b6:	f7ff f8bf 	bl	8004738 <LL_RCC_GetUARTClockFreq>
 80055ba:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d011      	beq.n	80055e6 <LL_USART_Init+0xde>
        && (USART_InitStruct->BaudRate != 0U))
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00d      	beq.n	80055e6 <LL_USART_Init+0xde>
    {
      status = SUCCESS;
 80055ca:	2300      	movs	r3, #0
 80055cc:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	69d9      	ldr	r1, [r3, #28]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	9300      	str	r3, [sp, #0]
 80055dc:	460b      	mov	r3, r1
 80055de:	68b9      	ldr	r1, [r7, #8]
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f7ff ff41 	bl	8005468 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4619      	mov	r1, r3
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f7ff ff00 	bl	80053f2 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80055f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3710      	adds	r7, #16
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	efff69f3 	.word	0xefff69f3
 8005600:	40013800 	.word	0x40013800
 8005604:	40004400 	.word	0x40004400
 8005608:	40004800 	.word	0x40004800
 800560c:	40004c00 	.word	0x40004c00
 8005610:	40005000 	.word	0x40005000

08005614 <LL_PWR_GetRegulVoltageScaling>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
 8005614:	b480      	push	{r7}
 8005616:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_VOS));
 8005618:	4b04      	ldr	r3, [pc, #16]	; (800562c <LL_PWR_GetRegulVoltageScaling+0x18>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005620:	4618      	mov	r0, r3
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	40007000 	.word	0x40007000

08005630 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8005638:	4b06      	ldr	r3, [pc, #24]	; (8005654 <LL_FLASH_SetLatency+0x24>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f023 020f 	bic.w	r2, r3, #15
 8005640:	4904      	ldr	r1, [pc, #16]	; (8005654 <LL_FLASH_SetLatency+0x24>)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4313      	orrs	r3, r2
 8005646:	600b      	str	r3, [r1, #0]
}
 8005648:	bf00      	nop
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr
 8005654:	40022000 	.word	0x40022000

08005658 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8005658:	b480      	push	{r7}
 800565a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800565c:	4b04      	ldr	r3, [pc, #16]	; (8005670 <LL_FLASH_GetLatency+0x18>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 030f 	and.w	r3, r3, #15
}
 8005664:	4618      	mov	r0, r3
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	40022000 	.word	0x40022000

08005674 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	fbb2 f3f3 	udiv	r3, r2, r3
 8005686:	4a07      	ldr	r2, [pc, #28]	; (80056a4 <LL_InitTick+0x30>)
 8005688:	3b01      	subs	r3, #1
 800568a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800568c:	4b05      	ldr	r3, [pc, #20]	; (80056a4 <LL_InitTick+0x30>)
 800568e:	2200      	movs	r2, #0
 8005690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005692:	4b04      	ldr	r3, [pc, #16]	; (80056a4 <LL_InitTick+0x30>)
 8005694:	2205      	movs	r2, #5
 8005696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	e000e010 	.word	0xe000e010

080056a8 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80056b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f7ff ffdd 	bl	8005674 <LL_InitTick>
}
 80056ba:	bf00      	nop
 80056bc:	3708      	adds	r7, #8
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
	...

080056c4 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80056cc:	4b10      	ldr	r3, [pc, #64]	; (8005710 <LL_mDelay+0x4c>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay; /* MISRAC2012-Rule-17.8 */
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80056d2:	68bb      	ldr	r3, [r7, #8]
  tmpDelay = Delay;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	60fb      	str	r3, [r7, #12]
  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056de:	d00c      	beq.n	80056fa <LL_mDelay+0x36>
  {
    tmpDelay++;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	3301      	adds	r3, #1
 80056e4:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 80056e6:	e008      	b.n	80056fa <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80056e8:	4b09      	ldr	r3, [pc, #36]	; (8005710 <LL_mDelay+0x4c>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d002      	beq.n	80056fa <LL_mDelay+0x36>
    {
      tmpDelay--;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	3b01      	subs	r3, #1
 80056f8:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1f3      	bne.n	80056e8 <LL_mDelay+0x24>
    }
  }
}
 8005700:	bf00      	nop
 8005702:	bf00      	nop
 8005704:	3714      	adds	r7, #20
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	e000e010 	.word	0xe000e010

08005714 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800571c:	4a04      	ldr	r2, [pc, #16]	; (8005730 <LL_SetSystemCoreClock+0x1c>)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6013      	str	r3, [r2, #0]
}
 8005722:	bf00      	nop
 8005724:	370c      	adds	r7, #12
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	20000000 	.word	0x20000000

08005734 <LL_SetFlashLatency>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Latency has been modified
  *          - ERROR: Latency cannot be modified
  */
ErrorStatus LL_SetFlashLatency(uint32_t HCLKFrequency)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b086      	sub	sp, #24
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  uint32_t timeout;
  uint32_t getlatency;
  ErrorStatus status = SUCCESS;
 800573c:	2300      	movs	r3, #0
 800573e:	74fb      	strb	r3, [r7, #19]

  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8005740:	2300      	movs	r3, #0
 8005742:	60fb      	str	r3, [r7, #12]

  /* Frequency cannot be equal to 0 or greater than max clock */
  if((HCLKFrequency == 0U) || (HCLKFrequency > UTILS_SCALE1_LATENCY9_FREQ))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d003      	beq.n	8005752 <LL_SetFlashLatency+0x1e>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a38      	ldr	r2, [pc, #224]	; (8005830 <LL_SetFlashLatency+0xfc>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d902      	bls.n	8005758 <LL_SetFlashLatency+0x24>
  {
    status = ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	74fb      	strb	r3, [r7, #19]
 8005756:	e065      	b.n	8005824 <LL_SetFlashLatency+0xf0>
  }
  else
  {
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 8005758:	f7ff ff5c 	bl	8005614 <LL_PWR_GetRegulVoltageScaling>
 800575c:	4603      	mov	r3, r0
 800575e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005762:	d137      	bne.n	80057d4 <LL_SetFlashLatency+0xa0>
    {
      if(HCLKFrequency > UTILS_SCALE1_LATENCY8_FREQ)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a33      	ldr	r2, [pc, #204]	; (8005834 <LL_SetFlashLatency+0x100>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d902      	bls.n	8005772 <LL_SetFlashLatency+0x3e>
      {
        /* 160 < HCLK <= 170 => 8WS (9 CPU cycles) */
        latency = LL_FLASH_LATENCY_8;
 800576c:	2308      	movs	r3, #8
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	e03d      	b.n	80057ee <LL_SetFlashLatency+0xba>
      }
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY7_FREQ)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a30      	ldr	r2, [pc, #192]	; (8005838 <LL_SetFlashLatency+0x104>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d902      	bls.n	8005780 <LL_SetFlashLatency+0x4c>
      {
        /* 140 < HCLK <= 160 => 7WS (8 CPU cycles) */
        latency = LL_FLASH_LATENCY_7;
 800577a:	2307      	movs	r3, #7
 800577c:	60fb      	str	r3, [r7, #12]
 800577e:	e036      	b.n	80057ee <LL_SetFlashLatency+0xba>
      }
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY6_FREQ)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a2e      	ldr	r2, [pc, #184]	; (800583c <LL_SetFlashLatency+0x108>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d902      	bls.n	800578e <LL_SetFlashLatency+0x5a>
      {
        /* 120 < HCLK <= 140 => 6WS (7 CPU cycles) */
        latency = LL_FLASH_LATENCY_6;
 8005788:	2306      	movs	r3, #6
 800578a:	60fb      	str	r3, [r7, #12]
 800578c:	e02f      	b.n	80057ee <LL_SetFlashLatency+0xba>
      }
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY5_FREQ)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a2b      	ldr	r2, [pc, #172]	; (8005840 <LL_SetFlashLatency+0x10c>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d902      	bls.n	800579c <LL_SetFlashLatency+0x68>
      {
        /* 100 < HCLK <= 120 => 5WS (6 CPU cycles) */
        latency = LL_FLASH_LATENCY_5;
 8005796:	2305      	movs	r3, #5
 8005798:	60fb      	str	r3, [r7, #12]
 800579a:	e028      	b.n	80057ee <LL_SetFlashLatency+0xba>
      }
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY4_FREQ)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a29      	ldr	r2, [pc, #164]	; (8005844 <LL_SetFlashLatency+0x110>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d902      	bls.n	80057aa <LL_SetFlashLatency+0x76>
      {
        /* 80 < HCLK <= 100 => 4WS (5 CPU cycles) */
        latency = LL_FLASH_LATENCY_4;
 80057a4:	2304      	movs	r3, #4
 80057a6:	60fb      	str	r3, [r7, #12]
 80057a8:	e021      	b.n	80057ee <LL_SetFlashLatency+0xba>
      }
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY3_FREQ)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a26      	ldr	r2, [pc, #152]	; (8005848 <LL_SetFlashLatency+0x114>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d902      	bls.n	80057b8 <LL_SetFlashLatency+0x84>
      {
        /* 60 < HCLK <= 80 => 3WS (4 CPU cycles) */
        latency = LL_FLASH_LATENCY_3;
 80057b2:	2303      	movs	r3, #3
 80057b4:	60fb      	str	r3, [r7, #12]
 80057b6:	e01a      	b.n	80057ee <LL_SetFlashLatency+0xba>
      }
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY2_FREQ)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a24      	ldr	r2, [pc, #144]	; (800584c <LL_SetFlashLatency+0x118>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d902      	bls.n	80057c6 <LL_SetFlashLatency+0x92>
      {
        /* 40 < HCLK <= 60 => 2WS (3 CPU cycles) */
        latency = LL_FLASH_LATENCY_2;
 80057c0:	2302      	movs	r3, #2
 80057c2:	60fb      	str	r3, [r7, #12]
 80057c4:	e013      	b.n	80057ee <LL_SetFlashLatency+0xba>
      }
      else
      {
        if(HCLKFrequency > UTILS_SCALE1_LATENCY1_FREQ)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a21      	ldr	r2, [pc, #132]	; (8005850 <LL_SetFlashLatency+0x11c>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d90f      	bls.n	80057ee <LL_SetFlashLatency+0xba>
        {
          /* 20 < HCLK <= 40 => 1WS (2 CPU cycles) */
          latency = LL_FLASH_LATENCY_1;
 80057ce:	2301      	movs	r3, #1
 80057d0:	60fb      	str	r3, [r7, #12]
 80057d2:	e00c      	b.n	80057ee <LL_SetFlashLatency+0xba>
        /* else HCLKFrequency <= 10MHz default LL_FLASH_LATENCY_0 0WS */
      }
    }
    else /* SCALE2 */
    {
      if(HCLKFrequency > UTILS_SCALE2_LATENCY2_FREQ)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a1f      	ldr	r2, [pc, #124]	; (8005854 <LL_SetFlashLatency+0x120>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d902      	bls.n	80057e2 <LL_SetFlashLatency+0xae>
      {
        /* 16 < HCLK <= 26 => 2WS (3 CPU cycles) */
        latency = LL_FLASH_LATENCY_2;
 80057dc:	2302      	movs	r3, #2
 80057de:	60fb      	str	r3, [r7, #12]
 80057e0:	e005      	b.n	80057ee <LL_SetFlashLatency+0xba>
      }
      else
      {
        if(HCLKFrequency > UTILS_SCALE2_LATENCY1_FREQ)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a1c      	ldr	r2, [pc, #112]	; (8005858 <LL_SetFlashLatency+0x124>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d901      	bls.n	80057ee <LL_SetFlashLatency+0xba>
        {
          /* 8 < HCLK <= 16 => 1WS (2 CPU cycles) */
          latency = LL_FLASH_LATENCY_1;
 80057ea:	2301      	movs	r3, #1
 80057ec:	60fb      	str	r3, [r7, #12]
        }
        /* else HCLKFrequency <= 8MHz default LL_FLASH_LATENCY_0 0WS */
      }
    }

    if (status != ERROR)
 80057ee:	7cfb      	ldrb	r3, [r7, #19]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d017      	beq.n	8005824 <LL_SetFlashLatency+0xf0>
    {
      LL_FLASH_SetLatency(latency);
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	f7ff ff1b 	bl	8005630 <LL_FLASH_SetLatency>

      /* Check that the new number of wait states is taken into account to access the Flash
         memory by reading the FLASH_ACR register */
      timeout = 2U;
 80057fa:	2302      	movs	r3, #2
 80057fc:	617b      	str	r3, [r7, #20]
      do
      {
        /* Wait for Flash latency to be updated */
        getlatency = LL_FLASH_GetLatency();
 80057fe:	f7ff ff2b 	bl	8005658 <LL_FLASH_GetLatency>
 8005802:	60b8      	str	r0, [r7, #8]
        timeout--;
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	3b01      	subs	r3, #1
 8005808:	617b      	str	r3, [r7, #20]
      } while ((getlatency != latency) && (timeout > 0U));
 800580a:	68ba      	ldr	r2, [r7, #8]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	429a      	cmp	r2, r3
 8005810:	d002      	beq.n	8005818 <LL_SetFlashLatency+0xe4>
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1f2      	bne.n	80057fe <LL_SetFlashLatency+0xca>

      if(getlatency != latency)
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	429a      	cmp	r2, r3
 800581e:	d001      	beq.n	8005824 <LL_SetFlashLatency+0xf0>
      {
        status = ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	74fb      	strb	r3, [r7, #19]
      }
    }
  }

  return status;
 8005824:	7cfb      	ldrb	r3, [r7, #19]
}
 8005826:	4618      	mov	r0, r3
 8005828:	3718      	adds	r7, #24
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	0a21fe80 	.word	0x0a21fe80
 8005834:	09896800 	.word	0x09896800
 8005838:	08583b00 	.word	0x08583b00
 800583c:	07270e00 	.word	0x07270e00
 8005840:	05f5e100 	.word	0x05f5e100
 8005844:	04c4b400 	.word	0x04c4b400
 8005848:	03938700 	.word	0x03938700
 800584c:	02625a00 	.word	0x02625a00
 8005850:	01312d00 	.word	0x01312d00
 8005854:	00f42400 	.word	0x00f42400
 8005858:	007a1200 	.word	0x007a1200

0800585c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f003 0307 	and.w	r3, r3, #7
 800586a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800586c:	4b0c      	ldr	r3, [pc, #48]	; (80058a0 <__NVIC_SetPriorityGrouping+0x44>)
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005878:	4013      	ands	r3, r2
 800587a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005884:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800588c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800588e:	4a04      	ldr	r2, [pc, #16]	; (80058a0 <__NVIC_SetPriorityGrouping+0x44>)
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	60d3      	str	r3, [r2, #12]
}
 8005894:	bf00      	nop
 8005896:	3714      	adds	r7, #20
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr
 80058a0:	e000ed00 	.word	0xe000ed00

080058a4 <LL_RCC_HSE_EnableBypass>:
{
 80058a4:	b480      	push	{r7}
 80058a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 80058a8:	4b05      	ldr	r3, [pc, #20]	; (80058c0 <LL_RCC_HSE_EnableBypass+0x1c>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a04      	ldr	r2, [pc, #16]	; (80058c0 <LL_RCC_HSE_EnableBypass+0x1c>)
 80058ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058b2:	6013      	str	r3, [r2, #0]
}
 80058b4:	bf00      	nop
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	40021000 	.word	0x40021000

080058c4 <LL_RCC_HSE_Enable>:
{
 80058c4:	b480      	push	{r7}
 80058c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80058c8:	4b05      	ldr	r3, [pc, #20]	; (80058e0 <LL_RCC_HSE_Enable+0x1c>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a04      	ldr	r2, [pc, #16]	; (80058e0 <LL_RCC_HSE_Enable+0x1c>)
 80058ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058d2:	6013      	str	r3, [r2, #0]
}
 80058d4:	bf00      	nop
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	40021000 	.word	0x40021000

080058e4 <LL_RCC_HSE_Disable>:
{
 80058e4:	b480      	push	{r7}
 80058e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80058e8:	4b05      	ldr	r3, [pc, #20]	; (8005900 <LL_RCC_HSE_Disable+0x1c>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a04      	ldr	r2, [pc, #16]	; (8005900 <LL_RCC_HSE_Disable+0x1c>)
 80058ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058f2:	6013      	str	r3, [r2, #0]
}
 80058f4:	bf00      	nop
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	40021000 	.word	0x40021000

08005904 <LL_RCC_HSE_IsReady>:
{
 8005904:	b480      	push	{r7}
 8005906:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005908:	4b07      	ldr	r3, [pc, #28]	; (8005928 <LL_RCC_HSE_IsReady+0x24>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005910:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005914:	d101      	bne.n	800591a <LL_RCC_HSE_IsReady+0x16>
 8005916:	2301      	movs	r3, #1
 8005918:	e000      	b.n	800591c <LL_RCC_HSE_IsReady+0x18>
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	40021000 	.word	0x40021000

0800592c <LL_RCC_HSI_Enable>:
{
 800592c:	b480      	push	{r7}
 800592e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005930:	4b05      	ldr	r3, [pc, #20]	; (8005948 <LL_RCC_HSI_Enable+0x1c>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a04      	ldr	r2, [pc, #16]	; (8005948 <LL_RCC_HSI_Enable+0x1c>)
 8005936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800593a:	6013      	str	r3, [r2, #0]
}
 800593c:	bf00      	nop
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	40021000 	.word	0x40021000

0800594c <LL_RCC_HSI_IsReady>:
{
 800594c:	b480      	push	{r7}
 800594e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005950:	4b07      	ldr	r3, [pc, #28]	; (8005970 <LL_RCC_HSI_IsReady+0x24>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800595c:	d101      	bne.n	8005962 <LL_RCC_HSI_IsReady+0x16>
 800595e:	2301      	movs	r3, #1
 8005960:	e000      	b.n	8005964 <LL_RCC_HSI_IsReady+0x18>
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	40021000 	.word	0x40021000

08005974 <LL_RCC_HSI_SetCalibTrimming>:
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800597c:	4b07      	ldr	r3, [pc, #28]	; (800599c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	061b      	lsls	r3, r3, #24
 8005988:	4904      	ldr	r1, [pc, #16]	; (800599c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800598a:	4313      	orrs	r3, r2
 800598c:	604b      	str	r3, [r1, #4]
}
 800598e:	bf00      	nop
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	40021000 	.word	0x40021000

080059a0 <LL_RCC_SetSysClkSource>:
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80059a8:	4b06      	ldr	r3, [pc, #24]	; (80059c4 <LL_RCC_SetSysClkSource+0x24>)
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f023 0203 	bic.w	r2, r3, #3
 80059b0:	4904      	ldr	r1, [pc, #16]	; (80059c4 <LL_RCC_SetSysClkSource+0x24>)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	608b      	str	r3, [r1, #8]
}
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr
 80059c4:	40021000 	.word	0x40021000

080059c8 <LL_RCC_GetSysClkSource>:
{
 80059c8:	b480      	push	{r7}
 80059ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80059cc:	4b04      	ldr	r3, [pc, #16]	; (80059e0 <LL_RCC_GetSysClkSource+0x18>)
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f003 030c 	and.w	r3, r3, #12
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	40021000 	.word	0x40021000

080059e4 <LL_RCC_SetAHBPrescaler>:
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80059ec:	4b06      	ldr	r3, [pc, #24]	; (8005a08 <LL_RCC_SetAHBPrescaler+0x24>)
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059f4:	4904      	ldr	r1, [pc, #16]	; (8005a08 <LL_RCC_SetAHBPrescaler+0x24>)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	608b      	str	r3, [r1, #8]
}
 80059fc:	bf00      	nop
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr
 8005a08:	40021000 	.word	0x40021000

08005a0c <LL_RCC_SetAPB1Prescaler>:
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005a14:	4b06      	ldr	r3, [pc, #24]	; (8005a30 <LL_RCC_SetAPB1Prescaler+0x24>)
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a1c:	4904      	ldr	r1, [pc, #16]	; (8005a30 <LL_RCC_SetAPB1Prescaler+0x24>)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	608b      	str	r3, [r1, #8]
}
 8005a24:	bf00      	nop
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr
 8005a30:	40021000 	.word	0x40021000

08005a34 <LL_RCC_SetAPB2Prescaler>:
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005a3c:	4b06      	ldr	r3, [pc, #24]	; (8005a58 <LL_RCC_SetAPB2Prescaler+0x24>)
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a44:	4904      	ldr	r1, [pc, #16]	; (8005a58 <LL_RCC_SetAPB2Prescaler+0x24>)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	608b      	str	r3, [r1, #8]
}
 8005a4c:	bf00      	nop
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	40021000 	.word	0x40021000

08005a5c <LL_RCC_PLL_Enable>:
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005a60:	4b05      	ldr	r3, [pc, #20]	; (8005a78 <LL_RCC_PLL_Enable+0x1c>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a04      	ldr	r2, [pc, #16]	; (8005a78 <LL_RCC_PLL_Enable+0x1c>)
 8005a66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a6a:	6013      	str	r3, [r2, #0]
}
 8005a6c:	bf00      	nop
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	40021000 	.word	0x40021000

08005a7c <LL_RCC_PLL_Disable>:
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005a80:	4b05      	ldr	r3, [pc, #20]	; (8005a98 <LL_RCC_PLL_Disable+0x1c>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a04      	ldr	r2, [pc, #16]	; (8005a98 <LL_RCC_PLL_Disable+0x1c>)
 8005a86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a8a:	6013      	str	r3, [r2, #0]
}
 8005a8c:	bf00      	nop
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	40021000 	.word	0x40021000

08005a9c <LL_RCC_PLL_IsReady>:
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005aa0:	4b07      	ldr	r3, [pc, #28]	; (8005ac0 <LL_RCC_PLL_IsReady+0x24>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aa8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005aac:	d101      	bne.n	8005ab2 <LL_RCC_PLL_IsReady+0x16>
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e000      	b.n	8005ab4 <LL_RCC_PLL_IsReady+0x18>
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	40021000 	.word	0x40021000

08005ac4 <LL_RCC_PLL_ConfigDomain_SYS>:
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	607a      	str	r2, [r7, #4]
 8005ad0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8005ad2:	4b0a      	ldr	r3, [pc, #40]	; (8005afc <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8005ad4:	68da      	ldr	r2, [r3, #12]
 8005ad6:	4b0a      	ldr	r3, [pc, #40]	; (8005b00 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8005ad8:	4013      	ands	r3, r2
 8005ada:	68f9      	ldr	r1, [r7, #12]
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	4311      	orrs	r1, r2
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	0212      	lsls	r2, r2, #8
 8005ae4:	4311      	orrs	r1, r2
 8005ae6:	683a      	ldr	r2, [r7, #0]
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	4904      	ldr	r1, [pc, #16]	; (8005afc <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8005aec:	4313      	orrs	r3, r2
 8005aee:	60cb      	str	r3, [r1, #12]
}
 8005af0:	bf00      	nop
 8005af2:	3714      	adds	r7, #20
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	40021000 	.word	0x40021000
 8005b00:	f9ff800c 	.word	0xf9ff800c

08005b04 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8005b04:	b480      	push	{r7}
 8005b06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8005b08:	4b05      	ldr	r3, [pc, #20]	; (8005b20 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	4a04      	ldr	r2, [pc, #16]	; (8005b20 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8005b0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b12:	60d3      	str	r3, [r2, #12]
}
 8005b14:	bf00      	nop
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	40021000 	.word	0x40021000

08005b24 <LL_APB1_GRP1_EnableClock>:
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8005b2c:	4b08      	ldr	r3, [pc, #32]	; (8005b50 <LL_APB1_GRP1_EnableClock+0x2c>)
 8005b2e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005b30:	4907      	ldr	r1, [pc, #28]	; (8005b50 <LL_APB1_GRP1_EnableClock+0x2c>)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8005b38:	4b05      	ldr	r3, [pc, #20]	; (8005b50 <LL_APB1_GRP1_EnableClock+0x2c>)
 8005b3a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4013      	ands	r3, r2
 8005b40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005b42:	68fb      	ldr	r3, [r7, #12]
}
 8005b44:	bf00      	nop
 8005b46:	3714      	adds	r7, #20
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr
 8005b50:	40021000 	.word	0x40021000

08005b54 <LL_APB2_GRP1_EnableClock>:
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8005b5c:	4b08      	ldr	r3, [pc, #32]	; (8005b80 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005b5e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005b60:	4907      	ldr	r1, [pc, #28]	; (8005b80 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005b68:	4b05      	ldr	r3, [pc, #20]	; (8005b80 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005b6a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4013      	ands	r3, r2
 8005b70:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005b72:	68fb      	ldr	r3, [r7, #12]
}
 8005b74:	bf00      	nop
 8005b76:	3714      	adds	r7, #20
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr
 8005b80:	40021000 	.word	0x40021000

08005b84 <LL_PWR_SetRegulVoltageScaling>:
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005b8c:	4b06      	ldr	r3, [pc, #24]	; (8005ba8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005b94:	4904      	ldr	r1, [pc, #16]	; (8005ba8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	600b      	str	r3, [r1, #0]
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr
 8005ba8:	40007000 	.word	0x40007000

08005bac <LL_PWR_EnableRange1BoostMode>:
  * @brief  Enable main regulator voltage range 1 boost mode
  * @rmtoll CR5          R1MODE        LL_PWR_EnableRange1BoostMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableRange1BoostMode(void)
{
 8005bac:	b480      	push	{r7}
 8005bae:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005bb0:	4b06      	ldr	r3, [pc, #24]	; (8005bcc <LL_PWR_EnableRange1BoostMode+0x20>)
 8005bb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bb6:	4a05      	ldr	r2, [pc, #20]	; (8005bcc <LL_PWR_EnableRange1BoostMode+0x20>)
 8005bb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bbc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8005bc0:	bf00      	nop
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	40007000 	.word	0x40007000

08005bd0 <LL_PWR_DisableRange1BoostMode>:
  * @brief  Disable main regulator voltage range 1 boost mode
  * @rmtoll CR5          R1MODE        LL_PWR_DisableRange1BoostMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableRange1BoostMode(void)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005bd4:	4b06      	ldr	r3, [pc, #24]	; (8005bf0 <LL_PWR_DisableRange1BoostMode+0x20>)
 8005bd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bda:	4a05      	ldr	r2, [pc, #20]	; (8005bf0 <LL_PWR_DisableRange1BoostMode+0x20>)
 8005bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005be0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8005be4:	bf00      	nop
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	40007000 	.word	0x40007000

08005bf4 <LL_FLASH_SetLatency>:
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8005bfc:	4b06      	ldr	r3, [pc, #24]	; (8005c18 <LL_FLASH_SetLatency+0x24>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f023 020f 	bic.w	r2, r3, #15
 8005c04:	4904      	ldr	r1, [pc, #16]	; (8005c18 <LL_FLASH_SetLatency+0x24>)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	600b      	str	r3, [r1, #0]
}
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr
 8005c18:	40022000 	.word	0x40022000

08005c1c <LL_FLASH_GetLatency>:
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8005c20:	4b04      	ldr	r3, [pc, #16]	; (8005c34 <LL_FLASH_GetLatency+0x18>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 030f 	and.w	r3, r3, #15
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	40022000 	.word	0x40022000

08005c38 <STRHAL_Init>:

static inline STRHAL_SysClk_Src_t _SysClk_Init(STRHAL_SysClk_Src_t src, uint32_t freq);
static inline STRHAL_SysClk_Src_t _SysClk_Backup();

STRHAL_Oof_t STRHAL_Init(STRHAL_SysClk_Src_t src, uint32_t freq)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	4603      	mov	r3, r0
 8005c40:	6039      	str	r1, [r7, #0]
 8005c42:	71fb      	strb	r3, [r7, #7]
	if (_INITIALIZED)
 8005c44:	4b21      	ldr	r3, [pc, #132]	; (8005ccc <STRHAL_Init+0x94>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d002      	beq.n	8005c52 <STRHAL_Init+0x1a>
		return _status;
 8005c4c:	4b20      	ldr	r3, [pc, #128]	; (8005cd0 <STRHAL_Init+0x98>)
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	e037      	b.n	8005cc2 <STRHAL_Init+0x8a>

	_status = STRHAL_NOICE;
 8005c52:	4b1f      	ldr	r3, [pc, #124]	; (8005cd0 <STRHAL_Init+0x98>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	701a      	strb	r2, [r3, #0]

	NVIC_SetPriorityGrouping(0x03);
 8005c58:	2003      	movs	r0, #3
 8005c5a:	f7ff fdff 	bl	800585c <__NVIC_SetPriorityGrouping>
	if (_SysClk_Init(src, freq) != src)
 8005c5e:	79fb      	ldrb	r3, [r7, #7]
 8005c60:	6839      	ldr	r1, [r7, #0]
 8005c62:	4618      	mov	r0, r3
 8005c64:	f000 f836 	bl	8005cd4 <_SysClk_Init>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	79fb      	ldrb	r3, [r7, #7]
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d006      	beq.n	8005c80 <STRHAL_Init+0x48>
		_status |= STRHAL_OOF_SYSCLK;
 8005c72:	4b17      	ldr	r3, [pc, #92]	; (8005cd0 <STRHAL_Init+0x98>)
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	f043 0301 	orr.w	r3, r3, #1
 8005c7a:	b2da      	uxtb	r2, r3
 8005c7c:	4b14      	ldr	r3, [pc, #80]	; (8005cd0 <STRHAL_Init+0x98>)
 8005c7e:	701a      	strb	r2, [r3, #0]

	STRHAL_Clock_Init();
 8005c80:	f001 fd4e 	bl	8007720 <STRHAL_Clock_Init>
	STRHAL_SysTick_Init();
 8005c84:	f002 fb32 	bl	80082ec <STRHAL_SysTick_Init>
	STRHAL_GPIO_Init();
 8005c88:	f001 fd92 	bl	80077b0 <STRHAL_GPIO_Init>
	STRHAL_OPAMP_Init();
 8005c8c:	f001 ff40 	bl	8007b10 <STRHAL_OPAMP_Init>
	STRHAL_UART_Init();
 8005c90:	f003 fb7e 	bl	8009390 <STRHAL_UART_Init>
	STRHAL_ADC_Init();
 8005c94:	f000 fc84 	bl	80065a0 <STRHAL_ADC_Init>
	STRHAL_TIM_Init();
 8005c98:	f002 fd7f 	bl	800879a <STRHAL_TIM_Init>
	STRHAL_SPI_Init();
 8005c9c:	f002 fad0 	bl	8008240 <STRHAL_SPI_Init>
	_status |= STRHAL_CAN_Init();
 8005ca0:	f001 fa78 	bl	8007194 <STRHAL_CAN_Init>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	4b09      	ldr	r3, [pc, #36]	; (8005cd0 <STRHAL_Init+0x98>)
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	b2da      	uxtb	r2, r3
 8005cb0:	4b07      	ldr	r3, [pc, #28]	; (8005cd0 <STRHAL_Init+0x98>)
 8005cb2:	701a      	strb	r2, [r3, #0]
	STRHAL_QSPI_Init();
 8005cb4:	f001 fff6 	bl	8007ca4 <STRHAL_QSPI_Init>

	_INITIALIZED = 1;
 8005cb8:	4b04      	ldr	r3, [pc, #16]	; (8005ccc <STRHAL_Init+0x94>)
 8005cba:	2201      	movs	r2, #1
 8005cbc:	601a      	str	r2, [r3, #0]

	return _status;
 8005cbe:	4b04      	ldr	r3, [pc, #16]	; (8005cd0 <STRHAL_Init+0x98>)
 8005cc0:	781b      	ldrb	r3, [r3, #0]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3708      	adds	r7, #8
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	20000a60 	.word	0x20000a60
 8005cd0:	20000a64 	.word	0x20000a64

08005cd4 <_SysClk_Init>:

inline STRHAL_SysClk_Src_t _SysClk_Init(STRHAL_SysClk_Src_t src, uint32_t freq)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	4603      	mov	r3, r0
 8005cdc:	6039      	str	r1, [r7, #0]
 8005cde:	71fb      	strb	r3, [r7, #7]
	uint32_t tot;
	if (src == STRHAL_SYSCLK_SRC_INT)
 8005ce0:	79fb      	ldrb	r3, [r7, #7]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d164      	bne.n	8005db0 <_SysClk_Init+0xdc>
	{
		if (LL_SetFlashLatency(STRHAL_SYSCLK_FREQ) != SUCCESS)
 8005ce6:	487c      	ldr	r0, [pc, #496]	; (8005ed8 <_SysClk_Init+0x204>)
 8005ce8:	f7ff fd24 	bl	8005734 <LL_SetFlashLatency>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d003      	beq.n	8005cfa <_SysClk_Init+0x26>
			return _SysClk_Backup();
 8005cf2:	f000 f8f9 	bl	8005ee8 <_SysClk_Backup>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	e0ea      	b.n	8005ed0 <_SysClk_Init+0x1fc>

		LL_PWR_EnableRange1BoostMode();
 8005cfa:	f7ff ff57 	bl	8005bac <LL_PWR_EnableRange1BoostMode>

		LL_RCC_PLL_Disable();
 8005cfe:	f7ff febd 	bl	8005a7c <LL_RCC_PLL_Disable>
		LL_RCC_HSI_Enable();
 8005d02:	f7ff fe13 	bl	800592c <LL_RCC_HSI_Enable>

		for (tot = 0; LL_RCC_PLL_IsReady() && !LL_RCC_HSI_IsReady(); ++tot)
 8005d06:	2300      	movs	r3, #0
 8005d08:	60fb      	str	r3, [r7, #12]
 8005d0a:	e00a      	b.n	8005d22 <_SysClk_Init+0x4e>
		{
			if (tot > STRHAL_SYSCLK_START_TOT)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	4a73      	ldr	r2, [pc, #460]	; (8005edc <_SysClk_Init+0x208>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d903      	bls.n	8005d1c <_SysClk_Init+0x48>
				return _SysClk_Backup();
 8005d14:	f000 f8e8 	bl	8005ee8 <_SysClk_Backup>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	e0d9      	b.n	8005ed0 <_SysClk_Init+0x1fc>
		for (tot = 0; LL_RCC_PLL_IsReady() && !LL_RCC_HSI_IsReady(); ++tot)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	3301      	adds	r3, #1
 8005d20:	60fb      	str	r3, [r7, #12]
 8005d22:	f7ff febb 	bl	8005a9c <LL_RCC_PLL_IsReady>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d004      	beq.n	8005d36 <_SysClk_Init+0x62>
 8005d2c:	f7ff fe0e 	bl	800594c <LL_RCC_HSI_IsReady>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d0ea      	beq.n	8005d0c <_SysClk_Init+0x38>
		}

		LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI,
 8005d36:	2300      	movs	r3, #0
 8005d38:	2228      	movs	r2, #40	; 0x28
 8005d3a:	2110      	movs	r1, #16
 8005d3c:	2002      	movs	r0, #2
 8005d3e:	f7ff fec1 	bl	8005ac4 <LL_RCC_PLL_ConfigDomain_SYS>
		STRHAL_SYSCLK_INT_PLL_M, 4 * STRHAL_SYSCLK_FREQ / HSI_VALUE,
		STRHAL_SYSCLK_INT_PLL_R);

		LL_RCC_PLL_EnableDomain_SYS();
 8005d42:	f7ff fedf 	bl	8005b04 <LL_RCC_PLL_EnableDomain_SYS>
		LL_RCC_PLL_Enable();
 8005d46:	f7ff fe89 	bl	8005a5c <LL_RCC_PLL_Enable>

		for (tot = 0; !LL_RCC_PLL_IsReady(); ++tot)
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	60fb      	str	r3, [r7, #12]
 8005d4e:	e00a      	b.n	8005d66 <_SysClk_Init+0x92>
		{
			if (tot > STRHAL_SYSCLK_START_TOT)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	4a62      	ldr	r2, [pc, #392]	; (8005edc <_SysClk_Init+0x208>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d903      	bls.n	8005d60 <_SysClk_Init+0x8c>
				return _SysClk_Backup();
 8005d58:	f000 f8c6 	bl	8005ee8 <_SysClk_Backup>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	e0b7      	b.n	8005ed0 <_SysClk_Init+0x1fc>
		for (tot = 0; !LL_RCC_PLL_IsReady(); ++tot)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	3301      	adds	r3, #1
 8005d64:	60fb      	str	r3, [r7, #12]
 8005d66:	f7ff fe99 	bl	8005a9c <LL_RCC_PLL_IsReady>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d0ef      	beq.n	8005d50 <_SysClk_Init+0x7c>
		}
		LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8005d70:	2003      	movs	r0, #3
 8005d72:	f7ff fe15 	bl	80059a0 <LL_RCC_SetSysClkSource>

		for (tot = 0; LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL; ++tot)
 8005d76:	2300      	movs	r3, #0
 8005d78:	60fb      	str	r3, [r7, #12]
 8005d7a:	e00a      	b.n	8005d92 <_SysClk_Init+0xbe>
		{
			if (tot > STRHAL_SYSCLK_START_TOT)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	4a57      	ldr	r2, [pc, #348]	; (8005edc <_SysClk_Init+0x208>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d903      	bls.n	8005d8c <_SysClk_Init+0xb8>
				return _SysClk_Backup();
 8005d84:	f000 f8b0 	bl	8005ee8 <_SysClk_Backup>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	e0a1      	b.n	8005ed0 <_SysClk_Init+0x1fc>
		for (tot = 0; LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL; ++tot)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	3301      	adds	r3, #1
 8005d90:	60fb      	str	r3, [r7, #12]
 8005d92:	f7ff fe19 	bl	80059c8 <LL_RCC_GetSysClkSource>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b0c      	cmp	r3, #12
 8005d9a:	d1ef      	bne.n	8005d7c <_SysClk_Init+0xa8>
		}

		LL_Init1msTick(STRHAL_SYSCLK_FREQ);
 8005d9c:	484e      	ldr	r0, [pc, #312]	; (8005ed8 <_SysClk_Init+0x204>)
 8005d9e:	f7ff fc83 	bl	80056a8 <LL_Init1msTick>
		LL_SetSystemCoreClock(STRHAL_SYSCLK_FREQ);
 8005da2:	484d      	ldr	r0, [pc, #308]	; (8005ed8 <_SysClk_Init+0x204>)
 8005da4:	f7ff fcb6 	bl	8005714 <LL_SetSystemCoreClock>
		_SysClk_Src = STRHAL_SYSCLK_SRC_INT;
 8005da8:	4b4d      	ldr	r3, [pc, #308]	; (8005ee0 <_SysClk_Init+0x20c>)
 8005daa:	2201      	movs	r2, #1
 8005dac:	701a      	strb	r2, [r3, #0]
 8005dae:	e084      	b.n	8005eba <_SysClk_Init+0x1e6>
	}
	else if (src == STRHAL_SYSCLK_SRC_EXT)
 8005db0:	79fb      	ldrb	r3, [r7, #7]
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	f040 8081 	bne.w	8005eba <_SysClk_Init+0x1e6>
	{
		if (LL_SetFlashLatency(STRHAL_SYSCLK_FREQ) != SUCCESS)
 8005db8:	4847      	ldr	r0, [pc, #284]	; (8005ed8 <_SysClk_Init+0x204>)
 8005dba:	f7ff fcbb 	bl	8005734 <LL_SetFlashLatency>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d003      	beq.n	8005dcc <_SysClk_Init+0xf8>
			return _SysClk_Backup();
 8005dc4:	f000 f890 	bl	8005ee8 <_SysClk_Backup>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	e081      	b.n	8005ed0 <_SysClk_Init+0x1fc>

		LL_RCC_PLL_Disable();
 8005dcc:	f7ff fe56 	bl	8005a7c <LL_RCC_PLL_Disable>
		if (LL_RCC_HSE_IsReady())
 8005dd0:	f7ff fd98 	bl	8005904 <LL_RCC_HSE_IsReady>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d014      	beq.n	8005e04 <_SysClk_Init+0x130>
		{
			LL_RCC_HSE_Disable();
 8005dda:	f7ff fd83 	bl	80058e4 <LL_RCC_HSE_Disable>

			for (tot = 0; LL_RCC_HSE_IsReady(); ++tot)
 8005dde:	2300      	movs	r3, #0
 8005de0:	60fb      	str	r3, [r7, #12]
 8005de2:	e00a      	b.n	8005dfa <_SysClk_Init+0x126>
			{
				if (tot > STRHAL_SYSCLK_START_TOT)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	4a3d      	ldr	r2, [pc, #244]	; (8005edc <_SysClk_Init+0x208>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d903      	bls.n	8005df4 <_SysClk_Init+0x120>
					return _SysClk_Backup();
 8005dec:	f000 f87c 	bl	8005ee8 <_SysClk_Backup>
 8005df0:	4603      	mov	r3, r0
 8005df2:	e06d      	b.n	8005ed0 <_SysClk_Init+0x1fc>
			for (tot = 0; LL_RCC_HSE_IsReady(); ++tot)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	3301      	adds	r3, #1
 8005df8:	60fb      	str	r3, [r7, #12]
 8005dfa:	f7ff fd83 	bl	8005904 <LL_RCC_HSE_IsReady>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d1ef      	bne.n	8005de4 <_SysClk_Init+0x110>
			}
		}

		LL_RCC_HSE_EnableBypass();
 8005e04:	f7ff fd4e 	bl	80058a4 <LL_RCC_HSE_EnableBypass>
		LL_RCC_HSE_Enable();
 8005e08:	f7ff fd5c 	bl	80058c4 <LL_RCC_HSE_Enable>

		for (tot = 0; LL_RCC_PLL_IsReady() && !LL_RCC_HSE_IsReady(); ++tot)
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	60fb      	str	r3, [r7, #12]
 8005e10:	e00a      	b.n	8005e28 <_SysClk_Init+0x154>
		{
			if (tot > STRHAL_SYSCLK_START_TOT)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	4a31      	ldr	r2, [pc, #196]	; (8005edc <_SysClk_Init+0x208>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d903      	bls.n	8005e22 <_SysClk_Init+0x14e>
				return _SysClk_Backup();
 8005e1a:	f000 f865 	bl	8005ee8 <_SysClk_Backup>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	e056      	b.n	8005ed0 <_SysClk_Init+0x1fc>
		for (tot = 0; LL_RCC_PLL_IsReady() && !LL_RCC_HSE_IsReady(); ++tot)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	3301      	adds	r3, #1
 8005e26:	60fb      	str	r3, [r7, #12]
 8005e28:	f7ff fe38 	bl	8005a9c <LL_RCC_PLL_IsReady>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d004      	beq.n	8005e3c <_SysClk_Init+0x168>
 8005e32:	f7ff fd67 	bl	8005904 <LL_RCC_HSE_IsReady>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d0ea      	beq.n	8005e12 <_SysClk_Init+0x13e>
		}

		LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE,
 8005e3c:	4a29      	ldr	r2, [pc, #164]	; (8005ee4 <_SysClk_Init+0x210>)
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e44:	2300      	movs	r3, #0
 8005e46:	2100      	movs	r1, #0
 8005e48:	2003      	movs	r0, #3
 8005e4a:	f7ff fe3b 	bl	8005ac4 <LL_RCC_PLL_ConfigDomain_SYS>
		STRHAL_SYSCLK_EXT_PLL_M, 2 * STRHAL_SYSCLK_FREQ / freq,
		STRHAL_SYSCLK_EXT_PLL_R);

		LL_RCC_PLL_EnableDomain_SYS();
 8005e4e:	f7ff fe59 	bl	8005b04 <LL_RCC_PLL_EnableDomain_SYS>
		LL_RCC_PLL_Enable();
 8005e52:	f7ff fe03 	bl	8005a5c <LL_RCC_PLL_Enable>

		for (tot = 0; !LL_RCC_PLL_IsReady(); ++tot)
 8005e56:	2300      	movs	r3, #0
 8005e58:	60fb      	str	r3, [r7, #12]
 8005e5a:	e00a      	b.n	8005e72 <_SysClk_Init+0x19e>
		{
			if (tot > STRHAL_SYSCLK_START_TOT)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	4a1f      	ldr	r2, [pc, #124]	; (8005edc <_SysClk_Init+0x208>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d903      	bls.n	8005e6c <_SysClk_Init+0x198>
				return _SysClk_Backup();
 8005e64:	f000 f840 	bl	8005ee8 <_SysClk_Backup>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	e031      	b.n	8005ed0 <_SysClk_Init+0x1fc>
		for (tot = 0; !LL_RCC_PLL_IsReady(); ++tot)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	60fb      	str	r3, [r7, #12]
 8005e72:	f7ff fe13 	bl	8005a9c <LL_RCC_PLL_IsReady>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d0ef      	beq.n	8005e5c <_SysClk_Init+0x188>
		}
		LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8005e7c:	2003      	movs	r0, #3
 8005e7e:	f7ff fd8f 	bl	80059a0 <LL_RCC_SetSysClkSource>

		for (tot = 0; LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL; ++tot)
 8005e82:	2300      	movs	r3, #0
 8005e84:	60fb      	str	r3, [r7, #12]
 8005e86:	e00a      	b.n	8005e9e <_SysClk_Init+0x1ca>
		{
			if (tot > STRHAL_SYSCLK_START_TOT)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	4a14      	ldr	r2, [pc, #80]	; (8005edc <_SysClk_Init+0x208>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d903      	bls.n	8005e98 <_SysClk_Init+0x1c4>
				return _SysClk_Backup();
 8005e90:	f000 f82a 	bl	8005ee8 <_SysClk_Backup>
 8005e94:	4603      	mov	r3, r0
 8005e96:	e01b      	b.n	8005ed0 <_SysClk_Init+0x1fc>
		for (tot = 0; LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL; ++tot)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	60fb      	str	r3, [r7, #12]
 8005e9e:	f7ff fd93 	bl	80059c8 <LL_RCC_GetSysClkSource>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b0c      	cmp	r3, #12
 8005ea6:	d1ef      	bne.n	8005e88 <_SysClk_Init+0x1b4>
		}

		LL_Init1msTick(STRHAL_SYSCLK_FREQ);
 8005ea8:	480b      	ldr	r0, [pc, #44]	; (8005ed8 <_SysClk_Init+0x204>)
 8005eaa:	f7ff fbfd 	bl	80056a8 <LL_Init1msTick>
		LL_SetSystemCoreClock(STRHAL_SYSCLK_FREQ);
 8005eae:	480a      	ldr	r0, [pc, #40]	; (8005ed8 <_SysClk_Init+0x204>)
 8005eb0:	f7ff fc30 	bl	8005714 <LL_SetSystemCoreClock>
		_SysClk_Src = STRHAL_SYSCLK_SRC_EXT;
 8005eb4:	4b0a      	ldr	r3, [pc, #40]	; (8005ee0 <_SysClk_Init+0x20c>)
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	701a      	strb	r2, [r3, #0]
	}

	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8005eba:	2000      	movs	r0, #0
 8005ebc:	f7ff fd92 	bl	80059e4 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8005ec0:	2000      	movs	r0, #0
 8005ec2:	f7ff fda3 	bl	8005a0c <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8005ec6:	2000      	movs	r0, #0
 8005ec8:	f7ff fdb4 	bl	8005a34 <LL_RCC_SetAPB2Prescaler>
	return _SysClk_Src;
 8005ecc:	4b04      	ldr	r3, [pc, #16]	; (8005ee0 <_SysClk_Init+0x20c>)
 8005ece:	781b      	ldrb	r3, [r3, #0]
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3710      	adds	r7, #16
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	09896800 	.word	0x09896800
 8005edc:	00f42400 	.word	0x00f42400
 8005ee0:	20000a5c 	.word	0x20000a5c
 8005ee4:	1312d000 	.word	0x1312d000

08005ee8 <_SysClk_Backup>:

inline STRHAL_SysClk_Src_t _SysClk_Backup()
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	af00      	add	r7, sp, #0
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8005eec:	2001      	movs	r0, #1
 8005eee:	f7ff fe31 	bl	8005b54 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8005ef2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8005ef6:	f7ff fe15 	bl	8005b24 <LL_APB1_GRP1_EnableClock>

	LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8005efa:	2000      	movs	r0, #0
 8005efc:	f7ff fe7a 	bl	8005bf4 <LL_FLASH_SetLatency>
	while (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0);
 8005f00:	bf00      	nop
 8005f02:	f7ff fe8b 	bl	8005c1c <LL_FLASH_GetLatency>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1fa      	bne.n	8005f02 <_SysClk_Backup+0x1a>

	LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8005f0c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005f10:	f7ff fe38 	bl	8005b84 <LL_PWR_SetRegulVoltageScaling>
	LL_PWR_DisableRange1BoostMode();
 8005f14:	f7ff fe5c 	bl	8005bd0 <LL_PWR_DisableRange1BoostMode>

	LL_RCC_HSI_Enable();
 8005f18:	f7ff fd08 	bl	800592c <LL_RCC_HSI_Enable>
	while (!LL_RCC_HSI_IsReady());
 8005f1c:	bf00      	nop
 8005f1e:	f7ff fd15 	bl	800594c <LL_RCC_HSI_IsReady>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d0fa      	beq.n	8005f1e <_SysClk_Backup+0x36>

	LL_RCC_HSI_SetCalibTrimming(64);
 8005f28:	2040      	movs	r0, #64	; 0x40
 8005f2a:	f7ff fd23 	bl	8005974 <LL_RCC_HSI_SetCalibTrimming>

	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8005f2e:	2001      	movs	r0, #1
 8005f30:	f7ff fd36 	bl	80059a0 <LL_RCC_SetSysClkSource>
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 8005f34:	bf00      	nop
 8005f36:	f7ff fd47 	bl	80059c8 <LL_RCC_GetSysClkSource>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b04      	cmp	r3, #4
 8005f3e:	d1fa      	bne.n	8005f36 <_SysClk_Backup+0x4e>

	/* Set AHB prescaler*/
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8005f40:	2000      	movs	r0, #0
 8005f42:	f7ff fd4f 	bl	80059e4 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8005f46:	2000      	movs	r0, #0
 8005f48:	f7ff fd60 	bl	8005a0c <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8005f4c:	2000      	movs	r0, #0
 8005f4e:	f7ff fd71 	bl	8005a34 <LL_RCC_SetAPB2Prescaler>

	LL_Init1msTick(HSI_VALUE);
 8005f52:	4806      	ldr	r0, [pc, #24]	; (8005f6c <_SysClk_Backup+0x84>)
 8005f54:	f7ff fba8 	bl	80056a8 <LL_Init1msTick>
	LL_SetSystemCoreClock(HSI_VALUE);
 8005f58:	4804      	ldr	r0, [pc, #16]	; (8005f6c <_SysClk_Backup+0x84>)
 8005f5a:	f7ff fbdb 	bl	8005714 <LL_SetSystemCoreClock>

	_SysClk_Src = STRHAL_SYSCLK_SRC_BKP;
 8005f5e:	4b04      	ldr	r3, [pc, #16]	; (8005f70 <_SysClk_Backup+0x88>)
 8005f60:	2200      	movs	r2, #0
 8005f62:	701a      	strb	r2, [r3, #0]

	return _SysClk_Src;
 8005f64:	4b02      	ldr	r3, [pc, #8]	; (8005f70 <_SysClk_Backup+0x88>)
 8005f66:	781b      	ldrb	r3, [r3, #0]
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	00f42400 	.word	0x00f42400
 8005f70:	20000a5c 	.word	0x20000a5c

08005f74 <LL_ADC_DMA_GetRegAddr>:
{
 8005f74:	b480      	push	{r7}
 8005f76:	b085      	sub	sp, #20
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  if (Register == LL_ADC_DMA_REG_REGULAR_DATA)
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d103      	bne.n	8005f8c <LL_ADC_DMA_GetRegAddr+0x18>
    data_reg_addr = (uint32_t) &(ADCx->DR);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	3340      	adds	r3, #64	; 0x40
 8005f88:	60fb      	str	r3, [r7, #12]
 8005f8a:	e00c      	b.n	8005fa6 <LL_ADC_DMA_GetRegAddr+0x32>
    data_reg_addr = (uint32_t) &((__LL_ADC_COMMON_INSTANCE(ADCx))->CDR);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f92:	d003      	beq.n	8005f9c <LL_ADC_DMA_GetRegAddr+0x28>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a07      	ldr	r2, [pc, #28]	; (8005fb4 <LL_ADC_DMA_GetRegAddr+0x40>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d101      	bne.n	8005fa0 <LL_ADC_DMA_GetRegAddr+0x2c>
 8005f9c:	4b06      	ldr	r3, [pc, #24]	; (8005fb8 <LL_ADC_DMA_GetRegAddr+0x44>)
 8005f9e:	e000      	b.n	8005fa2 <LL_ADC_DMA_GetRegAddr+0x2e>
 8005fa0:	4b06      	ldr	r3, [pc, #24]	; (8005fbc <LL_ADC_DMA_GetRegAddr+0x48>)
 8005fa2:	330c      	adds	r3, #12
 8005fa4:	60fb      	str	r3, [r7, #12]
  return data_reg_addr;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3714      	adds	r7, #20
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr
 8005fb4:	50000100 	.word	0x50000100
 8005fb8:	50000300 	.word	0x50000300
 8005fbc:	50000700 	.word	0x50000700

08005fc0 <LL_ADC_SetGainCompensation>:
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005fd0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005fd4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005fd8:	683a      	ldr	r2, [r7, #0]
 8005fda:	431a      	orrs	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_CFGR2_GCOMP_Pos);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fea:	683a      	ldr	r2, [r7, #0]
 8005fec:	2a00      	cmp	r2, #0
 8005fee:	d002      	beq.n	8005ff6 <LL_ADC_SetGainCompensation+0x36>
 8005ff0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005ff4:	e000      	b.n	8005ff8 <LL_ADC_SetGainCompensation+0x38>
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	431a      	orrs	r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	611a      	str	r2, [r3, #16]
}
 8005ffe:	bf00      	nop
 8006000:	370c      	adds	r7, #12
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr

0800600a <LL_ADC_REG_SetSequencerLength>:
{
 800600a:	b480      	push	{r7}
 800600c:	b083      	sub	sp, #12
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
 8006012:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006018:	f023 020f 	bic.w	r2, r3, #15
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	431a      	orrs	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <LL_ADC_REG_SetSequencerRanks>:
{
 8006030:	b480      	push	{r7}
 8006032:	b087      	sub	sp, #28
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	3330      	adds	r3, #48	; 0x30
 8006040:	461a      	mov	r2, r3
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	0a1b      	lsrs	r3, r3, #8
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	f003 030c 	and.w	r3, r3, #12
 800604c:	4413      	add	r3, r2
 800604e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	f003 031f 	and.w	r3, r3, #31
 800605a:	211f      	movs	r1, #31
 800605c:	fa01 f303 	lsl.w	r3, r1, r3
 8006060:	43db      	mvns	r3, r3
 8006062:	401a      	ands	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	0e9b      	lsrs	r3, r3, #26
 8006068:	f003 011f 	and.w	r1, r3, #31
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	f003 031f 	and.w	r3, r3, #31
 8006072:	fa01 f303 	lsl.w	r3, r1, r3
 8006076:	431a      	orrs	r2, r3
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	601a      	str	r2, [r3, #0]
}
 800607c:	bf00      	nop
 800607e:	371c      	adds	r7, #28
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <LL_ADC_SetChannelSamplingTime>:
{
 8006088:	b480      	push	{r7}
 800608a:	b087      	sub	sp, #28
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	3314      	adds	r3, #20
 8006098:	461a      	mov	r2, r3
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	0e5b      	lsrs	r3, r3, #25
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	f003 0304 	and.w	r3, r3, #4
 80060a4:	4413      	add	r3, r2
 80060a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	0d1b      	lsrs	r3, r3, #20
 80060b0:	f003 031f 	and.w	r3, r3, #31
 80060b4:	2107      	movs	r1, #7
 80060b6:	fa01 f303 	lsl.w	r3, r1, r3
 80060ba:	43db      	mvns	r3, r3
 80060bc:	401a      	ands	r2, r3
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	0d1b      	lsrs	r3, r3, #20
 80060c2:	f003 031f 	and.w	r3, r3, #31
 80060c6:	6879      	ldr	r1, [r7, #4]
 80060c8:	fa01 f303 	lsl.w	r3, r1, r3
 80060cc:	431a      	orrs	r2, r3
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	601a      	str	r2, [r3, #0]
}
 80060d2:	bf00      	nop
 80060d4:	371c      	adds	r7, #28
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
	...

080060e0 <LL_ADC_SetChannelSingleDiff>:
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a0f      	ldr	r2, [pc, #60]	; (800612c <LL_ADC_SetChannelSingleDiff+0x4c>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d10a      	bne.n	800610a <LL_ADC_SetChannelSingleDiff+0x2a>
    SET_BIT(ADCx->DIFSEL,
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006100:	431a      	orrs	r2, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8006108:	e00a      	b.n	8006120 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006116:	43db      	mvns	r3, r3
 8006118:	401a      	ands	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8006120:	bf00      	nop
 8006122:	3714      	adds	r7, #20
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr
 800612c:	407f0000 	.word	0x407f0000

08006130 <LL_ADC_SetOverSamplingScope>:
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006142:	f023 0303 	bic.w	r3, r3, #3
 8006146:	683a      	ldr	r2, [r7, #0]
 8006148:	431a      	orrs	r2, r3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	611a      	str	r2, [r3, #16]
}
 800614e:	bf00      	nop
 8006150:	370c      	adds	r7, #12
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr

0800615a <LL_ADC_DisableDeepPowerDown>:
{
 800615a:	b480      	push	{r7}
 800615c:	b083      	sub	sp, #12
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800616a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	6093      	str	r3, [r2, #8]
}
 8006172:	bf00      	nop
 8006174:	370c      	adds	r7, #12
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <LL_ADC_EnableInternalRegulator>:
{
 800617e:	b480      	push	{r7}
 8006180:	b083      	sub	sp, #12
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800618e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006192:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	609a      	str	r2, [r3, #8]
}
 800619a:	bf00      	nop
 800619c:	370c      	adds	r7, #12
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr

080061a6 <LL_ADC_Enable>:
{
 80061a6:	b480      	push	{r7}
 80061a8:	b083      	sub	sp, #12
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061b6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80061ba:	f043 0201 	orr.w	r2, r3, #1
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	609a      	str	r2, [r3, #8]
}
 80061c2:	bf00      	nop
 80061c4:	370c      	adds	r7, #12
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr

080061ce <LL_ADC_StartCalibration>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t SingleDiff)
{
 80061ce:	b480      	push	{r7}
 80061d0:	b083      	sub	sp, #12
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
 80061d6:	6039      	str	r1, [r7, #0]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80061e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80061e4:	683a      	ldr	r2, [r7, #0]
 80061e6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80061ea:	4313      	orrs	r3, r2
 80061ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	609a      	str	r2, [r3, #8]
             ADC_CR_ADCALDIF | ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL | (SingleDiff & ADC_SINGLEDIFF_CALIB_START_MASK));
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006210:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006214:	d101      	bne.n	800621a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8006216:	2301      	movs	r3, #1
 8006218:	e000      	b.n	800621c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006238:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800623c:	f043 0204 	orr.w	r2, r3, #4
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006244:	bf00      	nop
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <LL_ADC_IsActiveFlag_ADRDY>:
  * @rmtoll ISR      ADRDY          LL_ADC_IsActiveFlag_ADRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0301 	and.w	r3, r3, #1
 8006260:	2b01      	cmp	r3, #1
 8006262:	d101      	bne.n	8006268 <LL_ADC_IsActiveFlag_ADRDY+0x18>
 8006264:	2301      	movs	r3, #1
 8006266:	e000      	b.n	800626a <LL_ADC_IsActiveFlag_ADRDY+0x1a>
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	370c      	adds	r7, #12
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
	...

08006278 <LL_AHB1_GRP1_EnableClock>:
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8006280:	4b08      	ldr	r3, [pc, #32]	; (80062a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8006282:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006284:	4907      	ldr	r1, [pc, #28]	; (80062a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4313      	orrs	r3, r2
 800628a:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800628c:	4b05      	ldr	r3, [pc, #20]	; (80062a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800628e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4013      	ands	r3, r2
 8006294:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006296:	68fb      	ldr	r3, [r7, #12]
}
 8006298:	bf00      	nop
 800629a:	3714      	adds	r7, #20
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr
 80062a4:	40021000 	.word	0x40021000

080062a8 <LL_AHB2_GRP1_EnableClock>:
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80062b0:	4b08      	ldr	r3, [pc, #32]	; (80062d4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80062b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062b4:	4907      	ldr	r1, [pc, #28]	; (80062d4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80062bc:	4b05      	ldr	r3, [pc, #20]	; (80062d4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80062be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4013      	ands	r3, r2
 80062c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80062c6:	68fb      	ldr	r3, [r7, #12]
}
 80062c8:	bf00      	nop
 80062ca:	3714      	adds	r7, #20
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr
 80062d4:	40021000 	.word	0x40021000

080062d8 <LL_DMA_EnableChannel>:
{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 80062e6:	4a0c      	ldr	r2, [pc, #48]	; (8006318 <LL_DMA_EnableChannel+0x40>)
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	4413      	add	r3, r2
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	461a      	mov	r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	4413      	add	r3, r2
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4908      	ldr	r1, [pc, #32]	; (8006318 <LL_DMA_EnableChannel+0x40>)
 80062f8:	683a      	ldr	r2, [r7, #0]
 80062fa:	440a      	add	r2, r1
 80062fc:	7812      	ldrb	r2, [r2, #0]
 80062fe:	4611      	mov	r1, r2
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	440a      	add	r2, r1
 8006304:	f043 0301 	orr.w	r3, r3, #1
 8006308:	6013      	str	r3, [r2, #0]
}
 800630a:	bf00      	nop
 800630c:	3714      	adds	r7, #20
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	08009f18 	.word	0x08009f18

0800631c <LL_DMA_IsEnabledChannel>:
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	60fb      	str	r3, [r7, #12]
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 800632a:	4a0a      	ldr	r2, [pc, #40]	; (8006354 <LL_DMA_IsEnabledChannel+0x38>)
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	4413      	add	r3, r2
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	461a      	mov	r2, r3
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	4413      	add	r3, r2
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 0301 	and.w	r3, r3, #1
                    DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 800633e:	2b01      	cmp	r3, #1
 8006340:	d101      	bne.n	8006346 <LL_DMA_IsEnabledChannel+0x2a>
 8006342:	2301      	movs	r3, #1
 8006344:	e000      	b.n	8006348 <LL_DMA_IsEnabledChannel+0x2c>
 8006346:	2300      	movs	r3, #0
}
 8006348:	4618      	mov	r0, r3
 800634a:	3714      	adds	r7, #20
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr
 8006354:	08009f18 	.word	0x08009f18

08006358 <LL_DMA_SetDataLength>:
{
 8006358:	b480      	push	{r7}
 800635a:	b087      	sub	sp, #28
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 8006368:	4a0d      	ldr	r2, [pc, #52]	; (80063a0 <LL_DMA_SetDataLength+0x48>)
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	4413      	add	r3, r2
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	461a      	mov	r2, r3
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	4413      	add	r3, r2
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	0c1b      	lsrs	r3, r3, #16
 800637a:	041b      	lsls	r3, r3, #16
 800637c:	4908      	ldr	r1, [pc, #32]	; (80063a0 <LL_DMA_SetDataLength+0x48>)
 800637e:	68ba      	ldr	r2, [r7, #8]
 8006380:	440a      	add	r2, r1
 8006382:	7812      	ldrb	r2, [r2, #0]
 8006384:	4611      	mov	r1, r2
 8006386:	697a      	ldr	r2, [r7, #20]
 8006388:	440a      	add	r2, r1
 800638a:	4611      	mov	r1, r2
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	4313      	orrs	r3, r2
 8006390:	604b      	str	r3, [r1, #4]
}
 8006392:	bf00      	nop
 8006394:	371c      	adds	r7, #28
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	08009f18 	.word	0x08009f18

080063a4 <LL_RCC_SetADCClockSource>:
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, 3U << ((ADCxSource & 0x001F0000U) >> 16U), ((ADCxSource & 0x000000FFU) << ((ADCxSource & 0x001F0000U) >> 16U)));
 80063ac:	4b0e      	ldr	r3, [pc, #56]	; (80063e8 <LL_RCC_SetADCClockSource+0x44>)
 80063ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	0c1b      	lsrs	r3, r3, #16
 80063b6:	f003 031f 	and.w	r3, r3, #31
 80063ba:	2103      	movs	r1, #3
 80063bc:	fa01 f303 	lsl.w	r3, r1, r3
 80063c0:	43db      	mvns	r3, r3
 80063c2:	401a      	ands	r2, r3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	b2d9      	uxtb	r1, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	0c1b      	lsrs	r3, r3, #16
 80063cc:	f003 031f 	and.w	r3, r3, #31
 80063d0:	fa01 f303 	lsl.w	r3, r1, r3
 80063d4:	4904      	ldr	r1, [pc, #16]	; (80063e8 <LL_RCC_SetADCClockSource+0x44>)
 80063d6:	4313      	orrs	r3, r2
 80063d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80063dc:	bf00      	nop
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr
 80063e8:	40021000 	.word	0x40021000

080063ec <STRHAL_ADC_RegInit>:
} adc1_buf, adc2_buf, adc3_buf, adc4_buf, adc5_buf;

static volatile uint64_t STRHAL_ADC_ChannelState[2] = { 0, 0 };

static void STRHAL_ADC_RegInit(ADC_TypeDef *ADCx)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b08c      	sub	sp, #48	; 0x30
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
	LL_ADC_InitTypeDef ADC_InitStruct =
 80063f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063f8:	2200      	movs	r2, #0
 80063fa:	601a      	str	r2, [r3, #0]
 80063fc:	605a      	str	r2, [r3, #4]
 80063fe:	609a      	str	r2, [r3, #8]
	{ 0 };
	LL_ADC_REG_InitTypeDef ADC_REG_InitStruct =
 8006400:	f107 030c 	add.w	r3, r7, #12
 8006404:	2200      	movs	r2, #0
 8006406:	601a      	str	r2, [r3, #0]
 8006408:	605a      	str	r2, [r3, #4]
 800640a:	609a      	str	r2, [r3, #8]
 800640c:	60da      	str	r2, [r3, #12]
 800640e:	611a      	str	r2, [r3, #16]
 8006410:	615a      	str	r2, [r3, #20]
	{ 0 };
	ADC_InitStruct.Resolution = STRHAL_ADC_RESOLUTION;
 8006412:	2300      	movs	r3, #0
 8006414:	627b      	str	r3, [r7, #36]	; 0x24
	ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8006416:	2300      	movs	r3, #0
 8006418:	62bb      	str	r3, [r7, #40]	; 0x28
	ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 800641a:	2300      	movs	r3, #0
 800641c:	62fb      	str	r3, [r7, #44]	; 0x2c
	LL_ADC_Init(ADCx, &ADC_InitStruct);
 800641e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006422:	4619      	mov	r1, r3
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f7fd fceb 	bl	8003e00 <LL_ADC_Init>
	ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 800642a:	2300      	movs	r3, #0
 800642c:	60fb      	str	r3, [r7, #12]
	ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 800642e:	2300      	movs	r3, #0
 8006430:	613b      	str	r3, [r7, #16]
	ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8006432:	2300      	movs	r3, #0
 8006434:	617b      	str	r3, [r7, #20]
	ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8006436:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800643a:	61bb      	str	r3, [r7, #24]
	//ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
	ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 800643c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006440:	623b      	str	r3, [r7, #32]
	ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8006442:	2303      	movs	r3, #3
 8006444:	61fb      	str	r3, [r7, #28]
	LL_ADC_REG_Init(ADCx, &ADC_REG_InitStruct);
 8006446:	f107 030c 	add.w	r3, r7, #12
 800644a:	4619      	mov	r1, r3
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f7fd fcfd 	bl	8003e4c <LL_ADC_REG_Init>
	LL_ADC_SetGainCompensation(ADCx, 0);
 8006452:	2100      	movs	r1, #0
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f7ff fdb3 	bl	8005fc0 <LL_ADC_SetGainCompensation>
	LL_ADC_SetOverSamplingScope(ADCx, LL_ADC_OVS_DISABLE);
 800645a:	2100      	movs	r1, #0
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f7ff fe67 	bl	8006130 <LL_ADC_SetOverSamplingScope>
	LL_ADC_DisableDeepPowerDown(ADCx);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f7ff fe79 	bl	800615a <LL_ADC_DisableDeepPowerDown>
}
 8006468:	bf00      	nop
 800646a:	3730      	adds	r7, #48	; 0x30
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <STRHAL_ADC_DmaInit>:

static void STRHAL_ADC_DmaInit(DMA_TypeDef *DMAx, uint32_t dmaChannel, uint32_t dest, uint32_t src, uint32_t periph)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b090      	sub	sp, #64	; 0x40
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	607a      	str	r2, [r7, #4]
 800647c:	603b      	str	r3, [r7, #0]
	LL_DMA_InitTypeDef DMA_InitStruct =
 800647e:	f107 0314 	add.w	r3, r7, #20
 8006482:	222c      	movs	r2, #44	; 0x2c
 8006484:	2100      	movs	r1, #0
 8006486:	4618      	mov	r0, r3
 8006488:	f003 fb10 	bl	8009aac <memset>
	{ 0 };

	DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 800648c:	2300      	movs	r3, #0
 800648e:	61fb      	str	r3, [r7, #28]
	DMA_InitStruct.MemoryOrM2MDstAddress = dest;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	61bb      	str	r3, [r7, #24]
	DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_HALFWORD;
 8006494:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006498:	633b      	str	r3, [r7, #48]	; 0x30
	DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 800649a:	2380      	movs	r3, #128	; 0x80
 800649c:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStruct.Mode = LL_DMA_MODE_CIRCULAR;
 800649e:	2320      	movs	r3, #32
 80064a0:	623b      	str	r3, [r7, #32]
	DMA_InitStruct.NbData = 0;
 80064a2:	2300      	movs	r3, #0
 80064a4:	637b      	str	r3, [r7, #52]	; 0x34
	DMA_InitStruct.PeriphOrM2MSrcAddress = src;
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	617b      	str	r3, [r7, #20]
	DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_HALFWORD;
 80064aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80064ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 80064b0:	2300      	movs	r3, #0
 80064b2:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStruct.PeriphRequest = periph;
 80064b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064b6:	63bb      	str	r3, [r7, #56]	; 0x38
	DMA_InitStruct.Priority = STRHAL_ADC_DMA_PRIORITY;
 80064b8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80064bc:	63fb      	str	r3, [r7, #60]	; 0x3c

	LL_DMA_Init(DMAx, dmaChannel, &DMA_InitStruct);
 80064be:	f107 0314 	add.w	r3, r7, #20
 80064c2:	461a      	mov	r2, r3
 80064c4:	68b9      	ldr	r1, [r7, #8]
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	f7fd fdb6 	bl	8004038 <LL_DMA_Init>
}
 80064cc:	bf00      	nop
 80064ce:	3740      	adds	r7, #64	; 0x40
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <STRHAL_ADC_Calibrate>:

static void STRHAL_ADC_Calibrate()
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	af00      	add	r7, sp, #0
	LL_ADC_EnableInternalRegulator(ADC1);
 80064d8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80064dc:	f7ff fe4f 	bl	800617e <LL_ADC_EnableInternalRegulator>
	LL_mDelay(100);
 80064e0:	2064      	movs	r0, #100	; 0x64
 80064e2:	f7ff f8ef 	bl	80056c4 <LL_mDelay>
	LL_ADC_StartCalibration(ADC1, STRHAL_ADC_SINGLEDIFF);
 80064e6:	217f      	movs	r1, #127	; 0x7f
 80064e8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80064ec:	f7ff fe6f 	bl	80061ce <LL_ADC_StartCalibration>
	while (LL_ADC_IsCalibrationOnGoing(ADC1));
 80064f0:	bf00      	nop
 80064f2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80064f6:	f7ff fe83 	bl	8006200 <LL_ADC_IsCalibrationOnGoing>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d1f8      	bne.n	80064f2 <STRHAL_ADC_Calibrate+0x1e>

	LL_ADC_EnableInternalRegulator(ADC2);
 8006500:	4823      	ldr	r0, [pc, #140]	; (8006590 <STRHAL_ADC_Calibrate+0xbc>)
 8006502:	f7ff fe3c 	bl	800617e <LL_ADC_EnableInternalRegulator>
	LL_mDelay(100);
 8006506:	2064      	movs	r0, #100	; 0x64
 8006508:	f7ff f8dc 	bl	80056c4 <LL_mDelay>
	LL_ADC_StartCalibration(ADC2, STRHAL_ADC_SINGLEDIFF);
 800650c:	217f      	movs	r1, #127	; 0x7f
 800650e:	4820      	ldr	r0, [pc, #128]	; (8006590 <STRHAL_ADC_Calibrate+0xbc>)
 8006510:	f7ff fe5d 	bl	80061ce <LL_ADC_StartCalibration>
	while (LL_ADC_IsCalibrationOnGoing(ADC2));
 8006514:	bf00      	nop
 8006516:	481e      	ldr	r0, [pc, #120]	; (8006590 <STRHAL_ADC_Calibrate+0xbc>)
 8006518:	f7ff fe72 	bl	8006200 <LL_ADC_IsCalibrationOnGoing>
 800651c:	4603      	mov	r3, r0
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1f9      	bne.n	8006516 <STRHAL_ADC_Calibrate+0x42>

	LL_ADC_EnableInternalRegulator(ADC3);
 8006522:	481c      	ldr	r0, [pc, #112]	; (8006594 <STRHAL_ADC_Calibrate+0xc0>)
 8006524:	f7ff fe2b 	bl	800617e <LL_ADC_EnableInternalRegulator>
	LL_mDelay(100);
 8006528:	2064      	movs	r0, #100	; 0x64
 800652a:	f7ff f8cb 	bl	80056c4 <LL_mDelay>
	LL_ADC_StartCalibration(ADC3, STRHAL_ADC_SINGLEDIFF);
 800652e:	217f      	movs	r1, #127	; 0x7f
 8006530:	4818      	ldr	r0, [pc, #96]	; (8006594 <STRHAL_ADC_Calibrate+0xc0>)
 8006532:	f7ff fe4c 	bl	80061ce <LL_ADC_StartCalibration>
	while (LL_ADC_IsCalibrationOnGoing(ADC3));
 8006536:	bf00      	nop
 8006538:	4816      	ldr	r0, [pc, #88]	; (8006594 <STRHAL_ADC_Calibrate+0xc0>)
 800653a:	f7ff fe61 	bl	8006200 <LL_ADC_IsCalibrationOnGoing>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d1f9      	bne.n	8006538 <STRHAL_ADC_Calibrate+0x64>

	LL_ADC_EnableInternalRegulator(ADC4);
 8006544:	4814      	ldr	r0, [pc, #80]	; (8006598 <STRHAL_ADC_Calibrate+0xc4>)
 8006546:	f7ff fe1a 	bl	800617e <LL_ADC_EnableInternalRegulator>
	LL_mDelay(100);
 800654a:	2064      	movs	r0, #100	; 0x64
 800654c:	f7ff f8ba 	bl	80056c4 <LL_mDelay>
	LL_ADC_StartCalibration(ADC4, STRHAL_ADC_SINGLEDIFF);
 8006550:	217f      	movs	r1, #127	; 0x7f
 8006552:	4811      	ldr	r0, [pc, #68]	; (8006598 <STRHAL_ADC_Calibrate+0xc4>)
 8006554:	f7ff fe3b 	bl	80061ce <LL_ADC_StartCalibration>
	while (LL_ADC_IsCalibrationOnGoing(ADC4));
 8006558:	bf00      	nop
 800655a:	480f      	ldr	r0, [pc, #60]	; (8006598 <STRHAL_ADC_Calibrate+0xc4>)
 800655c:	f7ff fe50 	bl	8006200 <LL_ADC_IsCalibrationOnGoing>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1f9      	bne.n	800655a <STRHAL_ADC_Calibrate+0x86>

	LL_ADC_EnableInternalRegulator(ADC5);
 8006566:	480d      	ldr	r0, [pc, #52]	; (800659c <STRHAL_ADC_Calibrate+0xc8>)
 8006568:	f7ff fe09 	bl	800617e <LL_ADC_EnableInternalRegulator>
	LL_mDelay(100);
 800656c:	2064      	movs	r0, #100	; 0x64
 800656e:	f7ff f8a9 	bl	80056c4 <LL_mDelay>
	LL_ADC_StartCalibration(ADC5, STRHAL_ADC_SINGLEDIFF);
 8006572:	217f      	movs	r1, #127	; 0x7f
 8006574:	4809      	ldr	r0, [pc, #36]	; (800659c <STRHAL_ADC_Calibrate+0xc8>)
 8006576:	f7ff fe2a 	bl	80061ce <LL_ADC_StartCalibration>
	while (LL_ADC_IsCalibrationOnGoing(ADC5));
 800657a:	bf00      	nop
 800657c:	4807      	ldr	r0, [pc, #28]	; (800659c <STRHAL_ADC_Calibrate+0xc8>)
 800657e:	f7ff fe3f 	bl	8006200 <LL_ADC_IsCalibrationOnGoing>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d1f9      	bne.n	800657c <STRHAL_ADC_Calibrate+0xa8>
}
 8006588:	bf00      	nop
 800658a:	bf00      	nop
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	50000100 	.word	0x50000100
 8006594:	50000400 	.word	0x50000400
 8006598:	50000500 	.word	0x50000500
 800659c:	50000600 	.word	0x50000600

080065a0 <STRHAL_ADC_Init>:

void STRHAL_ADC_Init()
{
 80065a0:	b590      	push	{r4, r7, lr}
 80065a2:	b087      	sub	sp, #28
 80065a4:	af02      	add	r7, sp, #8
	{
		LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
	}
	else if (STRHAL_ADC_DMA == DMA2)
	{
		LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 80065a6:	2002      	movs	r0, #2
 80065a8:	f7ff fe66 	bl	8006278 <LL_AHB1_GRP1_EnableClock>
	}

	LL_RCC_SetADCClockSource(LL_RCC_ADC12_CLKSOURCE_SYSCLK);
 80065ac:	4846      	ldr	r0, [pc, #280]	; (80066c8 <STRHAL_ADC_Init+0x128>)
 80065ae:	f7ff fef9 	bl	80063a4 <LL_RCC_SetADCClockSource>
	LL_RCC_SetADCClockSource(LL_RCC_ADC345_CLKSOURCE_SYSCLK);
 80065b2:	4846      	ldr	r0, [pc, #280]	; (80066cc <STRHAL_ADC_Init+0x12c>)
 80065b4:	f7ff fef6 	bl	80063a4 <LL_RCC_SetADCClockSource>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMAMUX1);
 80065b8:	2004      	movs	r0, #4
 80065ba:	f7ff fe5d 	bl	8006278 <LL_AHB1_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC12);
 80065be:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80065c2:	f7ff fe71 	bl	80062a8 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC345);
 80065c6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80065ca:	f7ff fe6d 	bl	80062a8 <LL_AHB2_GRP1_EnableClock>

	//Init DMA for ADC123
	STRHAL_ADC_DmaInit(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL, (uint32_t) adc1_buf.data, LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA), LL_DMAMUX_REQ_ADC1);
 80065ce:	4c40      	ldr	r4, [pc, #256]	; (80066d0 <STRHAL_ADC_Init+0x130>)
 80065d0:	2100      	movs	r1, #0
 80065d2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80065d6:	f7ff fccd 	bl	8005f74 <LL_ADC_DMA_GetRegAddr>
 80065da:	4603      	mov	r3, r0
 80065dc:	2205      	movs	r2, #5
 80065de:	9200      	str	r2, [sp, #0]
 80065e0:	4622      	mov	r2, r4
 80065e2:	2100      	movs	r1, #0
 80065e4:	483b      	ldr	r0, [pc, #236]	; (80066d4 <STRHAL_ADC_Init+0x134>)
 80065e6:	f7ff ff43 	bl	8006470 <STRHAL_ADC_DmaInit>
	STRHAL_ADC_DmaInit(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 1, (uint32_t) adc2_buf.data, LL_ADC_DMA_GetRegAddr(ADC2, LL_ADC_DMA_REG_REGULAR_DATA), LL_DMAMUX_REQ_ADC2);
 80065ea:	4c3b      	ldr	r4, [pc, #236]	; (80066d8 <STRHAL_ADC_Init+0x138>)
 80065ec:	2100      	movs	r1, #0
 80065ee:	483b      	ldr	r0, [pc, #236]	; (80066dc <STRHAL_ADC_Init+0x13c>)
 80065f0:	f7ff fcc0 	bl	8005f74 <LL_ADC_DMA_GetRegAddr>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2224      	movs	r2, #36	; 0x24
 80065f8:	9200      	str	r2, [sp, #0]
 80065fa:	4622      	mov	r2, r4
 80065fc:	2101      	movs	r1, #1
 80065fe:	4835      	ldr	r0, [pc, #212]	; (80066d4 <STRHAL_ADC_Init+0x134>)
 8006600:	f7ff ff36 	bl	8006470 <STRHAL_ADC_DmaInit>
	STRHAL_ADC_DmaInit(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 2, (uint32_t) adc3_buf.data, LL_ADC_DMA_GetRegAddr(ADC3, LL_ADC_DMA_REG_REGULAR_DATA), LL_DMAMUX_REQ_ADC3);
 8006604:	4c36      	ldr	r4, [pc, #216]	; (80066e0 <STRHAL_ADC_Init+0x140>)
 8006606:	2100      	movs	r1, #0
 8006608:	4836      	ldr	r0, [pc, #216]	; (80066e4 <STRHAL_ADC_Init+0x144>)
 800660a:	f7ff fcb3 	bl	8005f74 <LL_ADC_DMA_GetRegAddr>
 800660e:	4603      	mov	r3, r0
 8006610:	2225      	movs	r2, #37	; 0x25
 8006612:	9200      	str	r2, [sp, #0]
 8006614:	4622      	mov	r2, r4
 8006616:	2102      	movs	r1, #2
 8006618:	482e      	ldr	r0, [pc, #184]	; (80066d4 <STRHAL_ADC_Init+0x134>)
 800661a:	f7ff ff29 	bl	8006470 <STRHAL_ADC_DmaInit>
	STRHAL_ADC_DmaInit(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 3, (uint32_t) adc4_buf.data, LL_ADC_DMA_GetRegAddr(ADC4, LL_ADC_DMA_REG_REGULAR_DATA), LL_DMAMUX_REQ_ADC4);
 800661e:	4c32      	ldr	r4, [pc, #200]	; (80066e8 <STRHAL_ADC_Init+0x148>)
 8006620:	2100      	movs	r1, #0
 8006622:	4832      	ldr	r0, [pc, #200]	; (80066ec <STRHAL_ADC_Init+0x14c>)
 8006624:	f7ff fca6 	bl	8005f74 <LL_ADC_DMA_GetRegAddr>
 8006628:	4603      	mov	r3, r0
 800662a:	2226      	movs	r2, #38	; 0x26
 800662c:	9200      	str	r2, [sp, #0]
 800662e:	4622      	mov	r2, r4
 8006630:	2103      	movs	r1, #3
 8006632:	4828      	ldr	r0, [pc, #160]	; (80066d4 <STRHAL_ADC_Init+0x134>)
 8006634:	f7ff ff1c 	bl	8006470 <STRHAL_ADC_DmaInit>
	STRHAL_ADC_DmaInit(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 4, (uint32_t) adc5_buf.data, LL_ADC_DMA_GetRegAddr(ADC5, LL_ADC_DMA_REG_REGULAR_DATA), LL_DMAMUX_REQ_ADC5);
 8006638:	4c2d      	ldr	r4, [pc, #180]	; (80066f0 <STRHAL_ADC_Init+0x150>)
 800663a:	2100      	movs	r1, #0
 800663c:	482d      	ldr	r0, [pc, #180]	; (80066f4 <STRHAL_ADC_Init+0x154>)
 800663e:	f7ff fc99 	bl	8005f74 <LL_ADC_DMA_GetRegAddr>
 8006642:	4603      	mov	r3, r0
 8006644:	2227      	movs	r2, #39	; 0x27
 8006646:	9200      	str	r2, [sp, #0]
 8006648:	4622      	mov	r2, r4
 800664a:	2104      	movs	r1, #4
 800664c:	4821      	ldr	r0, [pc, #132]	; (80066d4 <STRHAL_ADC_Init+0x134>)
 800664e:	f7ff ff0f 	bl	8006470 <STRHAL_ADC_DmaInit>

	LL_ADC_CommonInitTypeDef ADC_CommonInitStruct =
 8006652:	463b      	mov	r3, r7
 8006654:	2200      	movs	r2, #0
 8006656:	601a      	str	r2, [r3, #0]
 8006658:	605a      	str	r2, [r3, #4]
 800665a:	609a      	str	r2, [r3, #8]
 800665c:	60da      	str	r2, [r3, #12]
	{ 0 };

	ADC_CommonInitStruct.CommonClock = STRHAL_ADC_COMMONCLOCK;
 800665e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8006662:	603b      	str	r3, [r7, #0]
	ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8006664:	2300      	movs	r3, #0
 8006666:	607b      	str	r3, [r7, #4]
	LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8006668:	463b      	mov	r3, r7
 800666a:	4619      	mov	r1, r3
 800666c:	4822      	ldr	r0, [pc, #136]	; (80066f8 <STRHAL_ADC_Init+0x158>)
 800666e:	f7fd fb63 	bl	8003d38 <LL_ADC_CommonInit>
	LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC2), &ADC_CommonInitStruct);
 8006672:	463b      	mov	r3, r7
 8006674:	4619      	mov	r1, r3
 8006676:	4820      	ldr	r0, [pc, #128]	; (80066f8 <STRHAL_ADC_Init+0x158>)
 8006678:	f7fd fb5e 	bl	8003d38 <LL_ADC_CommonInit>
	LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC3), &ADC_CommonInitStruct);
 800667c:	463b      	mov	r3, r7
 800667e:	4619      	mov	r1, r3
 8006680:	481e      	ldr	r0, [pc, #120]	; (80066fc <STRHAL_ADC_Init+0x15c>)
 8006682:	f7fd fb59 	bl	8003d38 <LL_ADC_CommonInit>
	LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC4), &ADC_CommonInitStruct);
 8006686:	463b      	mov	r3, r7
 8006688:	4619      	mov	r1, r3
 800668a:	481c      	ldr	r0, [pc, #112]	; (80066fc <STRHAL_ADC_Init+0x15c>)
 800668c:	f7fd fb54 	bl	8003d38 <LL_ADC_CommonInit>
	LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC5), &ADC_CommonInitStruct);
 8006690:	463b      	mov	r3, r7
 8006692:	4619      	mov	r1, r3
 8006694:	4819      	ldr	r0, [pc, #100]	; (80066fc <STRHAL_ADC_Init+0x15c>)
 8006696:	f7fd fb4f 	bl	8003d38 <LL_ADC_CommonInit>

	STRHAL_ADC_RegInit(ADC1);
 800669a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800669e:	f7ff fea5 	bl	80063ec <STRHAL_ADC_RegInit>
	STRHAL_ADC_RegInit(ADC2);
 80066a2:	480e      	ldr	r0, [pc, #56]	; (80066dc <STRHAL_ADC_Init+0x13c>)
 80066a4:	f7ff fea2 	bl	80063ec <STRHAL_ADC_RegInit>
	STRHAL_ADC_RegInit(ADC3);
 80066a8:	480e      	ldr	r0, [pc, #56]	; (80066e4 <STRHAL_ADC_Init+0x144>)
 80066aa:	f7ff fe9f 	bl	80063ec <STRHAL_ADC_RegInit>
	STRHAL_ADC_RegInit(ADC4);
 80066ae:	480f      	ldr	r0, [pc, #60]	; (80066ec <STRHAL_ADC_Init+0x14c>)
 80066b0:	f7ff fe9c 	bl	80063ec <STRHAL_ADC_RegInit>
	STRHAL_ADC_RegInit(ADC5);
 80066b4:	480f      	ldr	r0, [pc, #60]	; (80066f4 <STRHAL_ADC_Init+0x154>)
 80066b6:	f7ff fe99 	bl	80063ec <STRHAL_ADC_RegInit>

	STRHAL_ADC_Calibrate();
 80066ba:	f7ff ff0b 	bl	80064d4 <STRHAL_ADC_Calibrate>
}
 80066be:	bf00      	nop
 80066c0:	3714      	adds	r7, #20
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd90      	pop	{r4, r7, pc}
 80066c6:	bf00      	nop
 80066c8:	001c0002 	.word	0x001c0002
 80066cc:	001e0002 	.word	0x001e0002
 80066d0:	20000a68 	.word	0x20000a68
 80066d4:	40020400 	.word	0x40020400
 80066d8:	20000a94 	.word	0x20000a94
 80066dc:	50000100 	.word	0x50000100
 80066e0:	20000ac0 	.word	0x20000ac0
 80066e4:	50000400 	.word	0x50000400
 80066e8:	20000aec 	.word	0x20000aec
 80066ec:	50000500 	.word	0x50000500
 80066f0:	20000b18 	.word	0x20000b18
 80066f4:	50000600 	.word	0x50000600
 80066f8:	50000300 	.word	0x50000300
 80066fc:	50000700 	.word	0x50000700

08006700 <STRHAL_ADC_SubscribeChannel>:

STRHAL_ADC_Data_t* STRHAL_ADC_SubscribeChannel(STRHAL_ADC_Channel_t *channel, STRHAL_ADC_InType_t type)
{
 8006700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006704:	b0a1      	sub	sp, #132	; 0x84
 8006706:	af00      	add	r7, sp, #0
 8006708:	6378      	str	r0, [r7, #52]	; 0x34
 800670a:	460b      	mov	r3, r1
 800670c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	STRHAL_ADC_AnalogPin_t analogPin;
	STRHAL_ADC_Data_t *data_ptr = NULL;
 8006710:	2300      	movs	r3, #0
 8006712:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint32_t *length_ptr = NULL;
 8006714:	2300      	movs	r3, #0
 8006716:	67bb      	str	r3, [r7, #120]	; 0x78
	uint32_t dmaChannel = 0;
 8006718:	2300      	movs	r3, #0
 800671a:	677b      	str	r3, [r7, #116]	; 0x74
	uint64_t adcChannelMsk[2] = { 0, 0 };
 800671c:	f04f 0200 	mov.w	r2, #0
 8006720:	f04f 0300 	mov.w	r3, #0
 8006724:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8006728:	f04f 0200 	mov.w	r2, #0
 800672c:	f04f 0300 	mov.w	r3, #0
 8006730:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	if (channel->ADCx == ADC1)
 8006734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800673c:	d11c      	bne.n	8006778 <STRHAL_ADC_SubscribeChannel+0x78>
	{
		analogPin = gpioMapping[0][channel->channelId];
 800673e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006740:	791b      	ldrb	r3, [r3, #4]
 8006742:	4aa3      	ldr	r2, [pc, #652]	; (80069d0 <STRHAL_ADC_SubscribeChannel+0x2d0>)
 8006744:	011b      	lsls	r3, r3, #4
 8006746:	4413      	add	r3, r2
 8006748:	f107 0460 	add.w	r4, r7, #96	; 0x60
 800674c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800674e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		data_ptr = adc1_buf.data;
 8006752:	4ba0      	ldr	r3, [pc, #640]	; (80069d4 <STRHAL_ADC_SubscribeChannel+0x2d4>)
 8006754:	67fb      	str	r3, [r7, #124]	; 0x7c
		length_ptr = &adc1_buf.length;
 8006756:	4ba0      	ldr	r3, [pc, #640]	; (80069d8 <STRHAL_ADC_SubscribeChannel+0x2d8>)
 8006758:	67bb      	str	r3, [r7, #120]	; 0x78
		dmaChannel = STRHAL_ADC_DMA_CHANNEL;
 800675a:	2300      	movs	r3, #0
 800675c:	677b      	str	r3, [r7, #116]	; 0x74
		adcChannelMsk[0] = (1U) << (channel->channelId);
 800675e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006760:	791b      	ldrb	r3, [r3, #4]
 8006762:	461a      	mov	r2, r3
 8006764:	2301      	movs	r3, #1
 8006766:	4093      	lsls	r3, r2
 8006768:	2200      	movs	r2, #0
 800676a:	62bb      	str	r3, [r7, #40]	; 0x28
 800676c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800676e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8006772:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 8006776:	e091      	b.n	800689c <STRHAL_ADC_SubscribeChannel+0x19c>
	}
	else if (channel->ADCx == ADC2)
 8006778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	4b97      	ldr	r3, [pc, #604]	; (80069dc <STRHAL_ADC_SubscribeChannel+0x2dc>)
 800677e:	429a      	cmp	r2, r3
 8006780:	d11e      	bne.n	80067c0 <STRHAL_ADC_SubscribeChannel+0xc0>
	{
		analogPin = gpioMapping[1][channel->channelId];
 8006782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006784:	791b      	ldrb	r3, [r3, #4]
 8006786:	4a92      	ldr	r2, [pc, #584]	; (80069d0 <STRHAL_ADC_SubscribeChannel+0x2d0>)
 8006788:	3313      	adds	r3, #19
 800678a:	011b      	lsls	r3, r3, #4
 800678c:	4413      	add	r3, r2
 800678e:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8006792:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006794:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		data_ptr = adc2_buf.data;
 8006798:	4b91      	ldr	r3, [pc, #580]	; (80069e0 <STRHAL_ADC_SubscribeChannel+0x2e0>)
 800679a:	67fb      	str	r3, [r7, #124]	; 0x7c
		length_ptr = &adc2_buf.length;
 800679c:	4b91      	ldr	r3, [pc, #580]	; (80069e4 <STRHAL_ADC_SubscribeChannel+0x2e4>)
 800679e:	67bb      	str	r3, [r7, #120]	; 0x78
		dmaChannel = STRHAL_ADC_DMA_CHANNEL + 1;
 80067a0:	2301      	movs	r3, #1
 80067a2:	677b      	str	r3, [r7, #116]	; 0x74
		adcChannelMsk[0] = (1U) << (STRHAL_ADC_CHANNEL_LAST + channel->channelId);
 80067a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067a6:	791b      	ldrb	r3, [r3, #4]
 80067a8:	3313      	adds	r3, #19
 80067aa:	2201      	movs	r2, #1
 80067ac:	fa02 f303 	lsl.w	r3, r2, r3
 80067b0:	2200      	movs	r2, #0
 80067b2:	623b      	str	r3, [r7, #32]
 80067b4:	627a      	str	r2, [r7, #36]	; 0x24
 80067b6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80067ba:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 80067be:	e06d      	b.n	800689c <STRHAL_ADC_SubscribeChannel+0x19c>
	}
	else if (channel->ADCx == ADC3)
 80067c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	4b88      	ldr	r3, [pc, #544]	; (80069e8 <STRHAL_ADC_SubscribeChannel+0x2e8>)
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d11e      	bne.n	8006808 <STRHAL_ADC_SubscribeChannel+0x108>
	{
		analogPin = gpioMapping[2][channel->channelId];
 80067ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067cc:	791b      	ldrb	r3, [r3, #4]
 80067ce:	4a80      	ldr	r2, [pc, #512]	; (80069d0 <STRHAL_ADC_SubscribeChannel+0x2d0>)
 80067d0:	3326      	adds	r3, #38	; 0x26
 80067d2:	011b      	lsls	r3, r3, #4
 80067d4:	4413      	add	r3, r2
 80067d6:	f107 0460 	add.w	r4, r7, #96	; 0x60
 80067da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80067dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		data_ptr = adc3_buf.data;
 80067e0:	4b82      	ldr	r3, [pc, #520]	; (80069ec <STRHAL_ADC_SubscribeChannel+0x2ec>)
 80067e2:	67fb      	str	r3, [r7, #124]	; 0x7c
		length_ptr = &adc3_buf.length;
 80067e4:	4b82      	ldr	r3, [pc, #520]	; (80069f0 <STRHAL_ADC_SubscribeChannel+0x2f0>)
 80067e6:	67bb      	str	r3, [r7, #120]	; 0x78
		dmaChannel = STRHAL_ADC_DMA_CHANNEL + 2;
 80067e8:	2302      	movs	r3, #2
 80067ea:	677b      	str	r3, [r7, #116]	; 0x74
		adcChannelMsk[0] = (1U) << (2 * STRHAL_ADC_CHANNEL_LAST + channel->channelId);
 80067ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ee:	791b      	ldrb	r3, [r3, #4]
 80067f0:	3326      	adds	r3, #38	; 0x26
 80067f2:	2201      	movs	r2, #1
 80067f4:	fa02 f303 	lsl.w	r3, r2, r3
 80067f8:	2200      	movs	r2, #0
 80067fa:	61bb      	str	r3, [r7, #24]
 80067fc:	61fa      	str	r2, [r7, #28]
 80067fe:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8006802:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 8006806:	e049      	b.n	800689c <STRHAL_ADC_SubscribeChannel+0x19c>
	}
	else if (channel->ADCx == ADC4)
 8006808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a79      	ldr	r2, [pc, #484]	; (80069f4 <STRHAL_ADC_SubscribeChannel+0x2f4>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d11e      	bne.n	8006850 <STRHAL_ADC_SubscribeChannel+0x150>
	{
		analogPin = gpioMapping[3][channel->channelId];
 8006812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006814:	791b      	ldrb	r3, [r3, #4]
 8006816:	4a6e      	ldr	r2, [pc, #440]	; (80069d0 <STRHAL_ADC_SubscribeChannel+0x2d0>)
 8006818:	3339      	adds	r3, #57	; 0x39
 800681a:	011b      	lsls	r3, r3, #4
 800681c:	4413      	add	r3, r2
 800681e:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8006822:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006824:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		data_ptr = adc4_buf.data;
 8006828:	4b73      	ldr	r3, [pc, #460]	; (80069f8 <STRHAL_ADC_SubscribeChannel+0x2f8>)
 800682a:	67fb      	str	r3, [r7, #124]	; 0x7c
		length_ptr = &adc4_buf.length;
 800682c:	4b73      	ldr	r3, [pc, #460]	; (80069fc <STRHAL_ADC_SubscribeChannel+0x2fc>)
 800682e:	67bb      	str	r3, [r7, #120]	; 0x78
		dmaChannel = STRHAL_ADC_DMA_CHANNEL + 3;
 8006830:	2303      	movs	r3, #3
 8006832:	677b      	str	r3, [r7, #116]	; 0x74
		adcChannelMsk[1] = (1U) << (2 * STRHAL_ADC_CHANNEL_LAST + channel->channelId);
 8006834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006836:	791b      	ldrb	r3, [r3, #4]
 8006838:	3326      	adds	r3, #38	; 0x26
 800683a:	2201      	movs	r2, #1
 800683c:	fa02 f303 	lsl.w	r3, r2, r3
 8006840:	2200      	movs	r2, #0
 8006842:	613b      	str	r3, [r7, #16]
 8006844:	617a      	str	r2, [r7, #20]
 8006846:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800684a:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
 800684e:	e025      	b.n	800689c <STRHAL_ADC_SubscribeChannel+0x19c>
	}
	else if (channel->ADCx == ADC5)
 8006850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a6a      	ldr	r2, [pc, #424]	; (8006a00 <STRHAL_ADC_SubscribeChannel+0x300>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d11e      	bne.n	8006898 <STRHAL_ADC_SubscribeChannel+0x198>
	{
		analogPin = gpioMapping[4][channel->channelId];
 800685a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800685c:	791b      	ldrb	r3, [r3, #4]
 800685e:	4a5c      	ldr	r2, [pc, #368]	; (80069d0 <STRHAL_ADC_SubscribeChannel+0x2d0>)
 8006860:	334c      	adds	r3, #76	; 0x4c
 8006862:	011b      	lsls	r3, r3, #4
 8006864:	4413      	add	r3, r2
 8006866:	f107 0460 	add.w	r4, r7, #96	; 0x60
 800686a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800686c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		data_ptr = adc5_buf.data;
 8006870:	4b64      	ldr	r3, [pc, #400]	; (8006a04 <STRHAL_ADC_SubscribeChannel+0x304>)
 8006872:	67fb      	str	r3, [r7, #124]	; 0x7c
		length_ptr = &adc5_buf.length;
 8006874:	4b64      	ldr	r3, [pc, #400]	; (8006a08 <STRHAL_ADC_SubscribeChannel+0x308>)
 8006876:	67bb      	str	r3, [r7, #120]	; 0x78
		dmaChannel = STRHAL_ADC_DMA_CHANNEL + 4;
 8006878:	2304      	movs	r3, #4
 800687a:	677b      	str	r3, [r7, #116]	; 0x74
		adcChannelMsk[1] = (1U) << (2 * STRHAL_ADC_CHANNEL_LAST + channel->channelId);
 800687c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800687e:	791b      	ldrb	r3, [r3, #4]
 8006880:	3326      	adds	r3, #38	; 0x26
 8006882:	2201      	movs	r2, #1
 8006884:	fa02 f303 	lsl.w	r3, r2, r3
 8006888:	2200      	movs	r2, #0
 800688a:	60bb      	str	r3, [r7, #8]
 800688c:	60fa      	str	r2, [r7, #12]
 800688e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8006892:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
 8006896:	e001      	b.n	800689c <STRHAL_ADC_SubscribeChannel+0x19c>
	}
	else
	{
		return NULL;
 8006898:	2300      	movs	r3, #0
 800689a:	e094      	b.n	80069c6 <STRHAL_ADC_SubscribeChannel+0x2c6>
	}

	// wrong input type passed
	if (analogPin.type != type)
 800689c:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80068a0:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d001      	beq.n	80068ac <STRHAL_ADC_SubscribeChannel+0x1ac>
	{
		return NULL;
 80068a8:	2300      	movs	r3, #0
 80068aa:	e08c      	b.n	80069c6 <STRHAL_ADC_SubscribeChannel+0x2c6>
	}

	// channel already initialized
	if ((STRHAL_ADC_ChannelState[0] & adcChannelMsk[0]) && (STRHAL_ADC_ChannelState[1] & adcChannelMsk[1]))
 80068ac:	4b57      	ldr	r3, [pc, #348]	; (8006a0c <STRHAL_ADC_SubscribeChannel+0x30c>)
 80068ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80068b2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80068b6:	ea00 0a02 	and.w	sl, r0, r2
 80068ba:	ea01 0b03 	and.w	fp, r1, r3
 80068be:	ea5a 030b 	orrs.w	r3, sl, fp
 80068c2:	d00d      	beq.n	80068e0 <STRHAL_ADC_SubscribeChannel+0x1e0>
 80068c4:	4b51      	ldr	r3, [pc, #324]	; (8006a0c <STRHAL_ADC_SubscribeChannel+0x30c>)
 80068c6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80068ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80068ce:	ea00 0802 	and.w	r8, r0, r2
 80068d2:	ea01 0903 	and.w	r9, r1, r3
 80068d6:	ea58 0309 	orrs.w	r3, r8, r9
 80068da:	d001      	beq.n	80068e0 <STRHAL_ADC_SubscribeChannel+0x1e0>
	{
		return NULL;
 80068dc:	2300      	movs	r3, #0
 80068de:	e072      	b.n	80069c6 <STRHAL_ADC_SubscribeChannel+0x2c6>
	}

	STRHAL_ADC_ChannelState[0] |= adcChannelMsk[0];
 80068e0:	4b4a      	ldr	r3, [pc, #296]	; (8006a0c <STRHAL_ADC_SubscribeChannel+0x30c>)
 80068e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80068e6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80068ea:	ea40 0402 	orr.w	r4, r0, r2
 80068ee:	603c      	str	r4, [r7, #0]
 80068f0:	430b      	orrs	r3, r1
 80068f2:	607b      	str	r3, [r7, #4]
 80068f4:	4b45      	ldr	r3, [pc, #276]	; (8006a0c <STRHAL_ADC_SubscribeChannel+0x30c>)
 80068f6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80068fa:	e9c3 1200 	strd	r1, r2, [r3]
	STRHAL_ADC_ChannelState[1] |= adcChannelMsk[1];
 80068fe:	4b43      	ldr	r3, [pc, #268]	; (8006a0c <STRHAL_ADC_SubscribeChannel+0x30c>)
 8006900:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006904:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006908:	ea40 0502 	orr.w	r5, r0, r2
 800690c:	ea41 0603 	orr.w	r6, r1, r3
 8006910:	4b3e      	ldr	r3, [pc, #248]	; (8006a0c <STRHAL_ADC_SubscribeChannel+0x30c>)
 8006912:	e9c3 5602 	strd	r5, r6, [r3, #8]

	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8006916:	2004      	movs	r0, #4
 8006918:	f7ff fcc6 	bl	80062a8 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 800691c:	2020      	movs	r0, #32
 800691e:	f7ff fcc3 	bl	80062a8 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8006922:	2001      	movs	r0, #1
 8006924:	f7ff fcc0 	bl	80062a8 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8006928:	2002      	movs	r0, #2
 800692a:	f7ff fcbd 	bl	80062a8 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 800692e:	2010      	movs	r0, #16
 8006930:	f7ff fcba 	bl	80062a8 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 8006934:	2008      	movs	r0, #8
 8006936:	f7ff fcb7 	bl	80062a8 <LL_AHB2_GRP1_EnableClock>

	if (type == STRHAL_ADC_INTYPE_REGULAR)
 800693a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800693e:	2b00      	cmp	r3, #0
 8006940:	d115      	bne.n	800696e <STRHAL_ADC_SubscribeChannel+0x26e>
	{
		LL_GPIO_InitTypeDef GPIO_InitStruct =
 8006942:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006946:	2200      	movs	r2, #0
 8006948:	601a      	str	r2, [r3, #0]
 800694a:	605a      	str	r2, [r3, #4]
 800694c:	609a      	str	r2, [r3, #8]
 800694e:	60da      	str	r2, [r3, #12]
 8006950:	611a      	str	r2, [r3, #16]
 8006952:	615a      	str	r2, [r3, #20]
		{ 0 };

		GPIO_InitStruct.Pin = analogPin.pin;
 8006954:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006956:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8006958:	2303      	movs	r3, #3
 800695a:	63fb      	str	r3, [r7, #60]	; 0x3c
		GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800695c:	2300      	movs	r3, #0
 800695e:	64bb      	str	r3, [r7, #72]	; 0x48
		LL_GPIO_Init(analogPin.port, &GPIO_InitStruct);
 8006960:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006962:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006966:	4611      	mov	r1, r2
 8006968:	4618      	mov	r0, r3
 800696a:	f7fd fcf0 	bl	800434e <LL_GPIO_Init>
	}

	LL_ADC_SetChannelSamplingTime(channel->ADCx, analogPin.channel, STRHAL_ADC_CHANNEL_SAMPLINGTIME);
 800696e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006974:	2206      	movs	r2, #6
 8006976:	4618      	mov	r0, r3
 8006978:	f7ff fb86 	bl	8006088 <LL_ADC_SetChannelSamplingTime>
	LL_ADC_SetChannelSingleDiff(channel->ADCx, analogPin.channel, STRHAL_ADC_SINGLEDIFF);
 800697c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006982:	227f      	movs	r2, #127	; 0x7f
 8006984:	4618      	mov	r0, r3
 8006986:	f7ff fbab 	bl	80060e0 <LL_ADC_SetChannelSingleDiff>

	LL_ADC_REG_SetSequencerRanks(channel->ADCx, adcRanks[*length_ptr], analogPin.channel);
 800698a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800698c:	6818      	ldr	r0, [r3, #0]
 800698e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a1f      	ldr	r2, [pc, #124]	; (8006a10 <STRHAL_ADC_SubscribeChannel+0x310>)
 8006994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006998:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800699a:	4619      	mov	r1, r3
 800699c:	f7ff fb48 	bl	8006030 <LL_ADC_REG_SetSequencerRanks>
	uint32_t length = *length_ptr;
 80069a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	673b      	str	r3, [r7, #112]	; 0x70
	LL_DMA_SetDataLength(STRHAL_ADC_DMA, dmaChannel, length + 1);
 80069a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069a8:	3301      	adds	r3, #1
 80069aa:	461a      	mov	r2, r3
 80069ac:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80069ae:	4819      	ldr	r0, [pc, #100]	; (8006a14 <STRHAL_ADC_SubscribeChannel+0x314>)
 80069b0:	f7ff fcd2 	bl	8006358 <LL_DMA_SetDataLength>
	(*length_ptr)++;
 80069b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	1c5a      	adds	r2, r3, #1
 80069ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069bc:	601a      	str	r2, [r3, #0]
	return &data_ptr[length];
 80069be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069c0:	005b      	lsls	r3, r3, #1
 80069c2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80069c4:	4413      	add	r3, r2
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3784      	adds	r7, #132	; 0x84
 80069ca:	46bd      	mov	sp, r7
 80069cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069d0:	08009fa0 	.word	0x08009fa0
 80069d4:	20000a68 	.word	0x20000a68
 80069d8:	20000a90 	.word	0x20000a90
 80069dc:	50000100 	.word	0x50000100
 80069e0:	20000a94 	.word	0x20000a94
 80069e4:	20000abc 	.word	0x20000abc
 80069e8:	50000400 	.word	0x50000400
 80069ec:	20000ac0 	.word	0x20000ac0
 80069f0:	20000ae8 	.word	0x20000ae8
 80069f4:	50000500 	.word	0x50000500
 80069f8:	20000aec 	.word	0x20000aec
 80069fc:	20000b14 	.word	0x20000b14
 8006a00:	50000600 	.word	0x50000600
 8006a04:	20000b18 	.word	0x20000b18
 8006a08:	20000b40 	.word	0x20000b40
 8006a0c:	20000b48 	.word	0x20000b48
 8006a10:	08009f20 	.word	0x08009f20
 8006a14:	40020400 	.word	0x40020400

08006a18 <STRHAL_ADC_Run>:

void STRHAL_ADC_Run()
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	af00      	add	r7, sp, #0
	LL_ADC_REG_SetSequencerLength(ADC1, adcSeqRanks[adc1_buf.length - 1]);
 8006a1c:	4b5a      	ldr	r3, [pc, #360]	; (8006b88 <STRHAL_ADC_Run+0x170>)
 8006a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a20:	3b01      	subs	r3, #1
 8006a22:	4a5a      	ldr	r2, [pc, #360]	; (8006b8c <STRHAL_ADC_Run+0x174>)
 8006a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a28:	4619      	mov	r1, r3
 8006a2a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006a2e:	f7ff faec 	bl	800600a <LL_ADC_REG_SetSequencerLength>
	LL_ADC_REG_SetSequencerLength(ADC2, adcSeqRanks[adc2_buf.length - 1]);
 8006a32:	4b57      	ldr	r3, [pc, #348]	; (8006b90 <STRHAL_ADC_Run+0x178>)
 8006a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a36:	3b01      	subs	r3, #1
 8006a38:	4a54      	ldr	r2, [pc, #336]	; (8006b8c <STRHAL_ADC_Run+0x174>)
 8006a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a3e:	4619      	mov	r1, r3
 8006a40:	4854      	ldr	r0, [pc, #336]	; (8006b94 <STRHAL_ADC_Run+0x17c>)
 8006a42:	f7ff fae2 	bl	800600a <LL_ADC_REG_SetSequencerLength>
	LL_ADC_REG_SetSequencerLength(ADC3, adcSeqRanks[adc3_buf.length - 1]);
 8006a46:	4b54      	ldr	r3, [pc, #336]	; (8006b98 <STRHAL_ADC_Run+0x180>)
 8006a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	4a4f      	ldr	r2, [pc, #316]	; (8006b8c <STRHAL_ADC_Run+0x174>)
 8006a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a52:	4619      	mov	r1, r3
 8006a54:	4851      	ldr	r0, [pc, #324]	; (8006b9c <STRHAL_ADC_Run+0x184>)
 8006a56:	f7ff fad8 	bl	800600a <LL_ADC_REG_SetSequencerLength>
	LL_ADC_REG_SetSequencerLength(ADC4, adcSeqRanks[adc4_buf.length - 1]);
 8006a5a:	4b51      	ldr	r3, [pc, #324]	; (8006ba0 <STRHAL_ADC_Run+0x188>)
 8006a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	4a4a      	ldr	r2, [pc, #296]	; (8006b8c <STRHAL_ADC_Run+0x174>)
 8006a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a66:	4619      	mov	r1, r3
 8006a68:	484e      	ldr	r0, [pc, #312]	; (8006ba4 <STRHAL_ADC_Run+0x18c>)
 8006a6a:	f7ff face 	bl	800600a <LL_ADC_REG_SetSequencerLength>
	LL_ADC_REG_SetSequencerLength(ADC5, adcSeqRanks[adc5_buf.length - 1]);
 8006a6e:	4b4e      	ldr	r3, [pc, #312]	; (8006ba8 <STRHAL_ADC_Run+0x190>)
 8006a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a72:	3b01      	subs	r3, #1
 8006a74:	4a45      	ldr	r2, [pc, #276]	; (8006b8c <STRHAL_ADC_Run+0x174>)
 8006a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	484b      	ldr	r0, [pc, #300]	; (8006bac <STRHAL_ADC_Run+0x194>)
 8006a7e:	f7ff fac4 	bl	800600a <LL_ADC_REG_SetSequencerLength>

	LL_DMA_EnableChannel(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL);
 8006a82:	2100      	movs	r1, #0
 8006a84:	484a      	ldr	r0, [pc, #296]	; (8006bb0 <STRHAL_ADC_Run+0x198>)
 8006a86:	f7ff fc27 	bl	80062d8 <LL_DMA_EnableChannel>
	while (!LL_DMA_IsEnabledChannel(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL));
 8006a8a:	bf00      	nop
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	4848      	ldr	r0, [pc, #288]	; (8006bb0 <STRHAL_ADC_Run+0x198>)
 8006a90:	f7ff fc44 	bl	800631c <LL_DMA_IsEnabledChannel>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d0f8      	beq.n	8006a8c <STRHAL_ADC_Run+0x74>
	LL_DMA_EnableChannel(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 1);
 8006a9a:	2101      	movs	r1, #1
 8006a9c:	4844      	ldr	r0, [pc, #272]	; (8006bb0 <STRHAL_ADC_Run+0x198>)
 8006a9e:	f7ff fc1b 	bl	80062d8 <LL_DMA_EnableChannel>
	while (!LL_DMA_IsEnabledChannel(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 1));
 8006aa2:	bf00      	nop
 8006aa4:	2101      	movs	r1, #1
 8006aa6:	4842      	ldr	r0, [pc, #264]	; (8006bb0 <STRHAL_ADC_Run+0x198>)
 8006aa8:	f7ff fc38 	bl	800631c <LL_DMA_IsEnabledChannel>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d0f8      	beq.n	8006aa4 <STRHAL_ADC_Run+0x8c>
	LL_DMA_EnableChannel(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 2);
 8006ab2:	2102      	movs	r1, #2
 8006ab4:	483e      	ldr	r0, [pc, #248]	; (8006bb0 <STRHAL_ADC_Run+0x198>)
 8006ab6:	f7ff fc0f 	bl	80062d8 <LL_DMA_EnableChannel>
	while (!LL_DMA_IsEnabledChannel(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 2));
 8006aba:	bf00      	nop
 8006abc:	2102      	movs	r1, #2
 8006abe:	483c      	ldr	r0, [pc, #240]	; (8006bb0 <STRHAL_ADC_Run+0x198>)
 8006ac0:	f7ff fc2c 	bl	800631c <LL_DMA_IsEnabledChannel>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d0f8      	beq.n	8006abc <STRHAL_ADC_Run+0xa4>
	LL_DMA_EnableChannel(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 3);
 8006aca:	2103      	movs	r1, #3
 8006acc:	4838      	ldr	r0, [pc, #224]	; (8006bb0 <STRHAL_ADC_Run+0x198>)
 8006ace:	f7ff fc03 	bl	80062d8 <LL_DMA_EnableChannel>
	while (!LL_DMA_IsEnabledChannel(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 3));
 8006ad2:	bf00      	nop
 8006ad4:	2103      	movs	r1, #3
 8006ad6:	4836      	ldr	r0, [pc, #216]	; (8006bb0 <STRHAL_ADC_Run+0x198>)
 8006ad8:	f7ff fc20 	bl	800631c <LL_DMA_IsEnabledChannel>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d0f8      	beq.n	8006ad4 <STRHAL_ADC_Run+0xbc>
	LL_DMA_EnableChannel(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 4);
 8006ae2:	2104      	movs	r1, #4
 8006ae4:	4832      	ldr	r0, [pc, #200]	; (8006bb0 <STRHAL_ADC_Run+0x198>)
 8006ae6:	f7ff fbf7 	bl	80062d8 <LL_DMA_EnableChannel>
	while (!LL_DMA_IsEnabledChannel(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 4));
 8006aea:	bf00      	nop
 8006aec:	2104      	movs	r1, #4
 8006aee:	4830      	ldr	r0, [pc, #192]	; (8006bb0 <STRHAL_ADC_Run+0x198>)
 8006af0:	f7ff fc14 	bl	800631c <LL_DMA_IsEnabledChannel>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d0f8      	beq.n	8006aec <STRHAL_ADC_Run+0xd4>

	LL_ADC_Enable(ADC1);
 8006afa:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006afe:	f7ff fb52 	bl	80061a6 <LL_ADC_Enable>
	while (LL_ADC_IsActiveFlag_ADRDY(ADC1) == 0);
 8006b02:	bf00      	nop
 8006b04:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006b08:	f7ff fba2 	bl	8006250 <LL_ADC_IsActiveFlag_ADRDY>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d0f8      	beq.n	8006b04 <STRHAL_ADC_Run+0xec>
	LL_ADC_Enable(ADC2);
 8006b12:	4820      	ldr	r0, [pc, #128]	; (8006b94 <STRHAL_ADC_Run+0x17c>)
 8006b14:	f7ff fb47 	bl	80061a6 <LL_ADC_Enable>
	while (LL_ADC_IsActiveFlag_ADRDY(ADC2) == 0);
 8006b18:	bf00      	nop
 8006b1a:	481e      	ldr	r0, [pc, #120]	; (8006b94 <STRHAL_ADC_Run+0x17c>)
 8006b1c:	f7ff fb98 	bl	8006250 <LL_ADC_IsActiveFlag_ADRDY>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d0f9      	beq.n	8006b1a <STRHAL_ADC_Run+0x102>
	LL_ADC_Enable(ADC3);
 8006b26:	481d      	ldr	r0, [pc, #116]	; (8006b9c <STRHAL_ADC_Run+0x184>)
 8006b28:	f7ff fb3d 	bl	80061a6 <LL_ADC_Enable>
	while (LL_ADC_IsActiveFlag_ADRDY(ADC3) == 0);
 8006b2c:	bf00      	nop
 8006b2e:	481b      	ldr	r0, [pc, #108]	; (8006b9c <STRHAL_ADC_Run+0x184>)
 8006b30:	f7ff fb8e 	bl	8006250 <LL_ADC_IsActiveFlag_ADRDY>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d0f9      	beq.n	8006b2e <STRHAL_ADC_Run+0x116>
	LL_ADC_Enable(ADC4);
 8006b3a:	481a      	ldr	r0, [pc, #104]	; (8006ba4 <STRHAL_ADC_Run+0x18c>)
 8006b3c:	f7ff fb33 	bl	80061a6 <LL_ADC_Enable>
	while (LL_ADC_IsActiveFlag_ADRDY(ADC4) == 0);
 8006b40:	bf00      	nop
 8006b42:	4818      	ldr	r0, [pc, #96]	; (8006ba4 <STRHAL_ADC_Run+0x18c>)
 8006b44:	f7ff fb84 	bl	8006250 <LL_ADC_IsActiveFlag_ADRDY>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d0f9      	beq.n	8006b42 <STRHAL_ADC_Run+0x12a>
	LL_ADC_Enable(ADC5);
 8006b4e:	4817      	ldr	r0, [pc, #92]	; (8006bac <STRHAL_ADC_Run+0x194>)
 8006b50:	f7ff fb29 	bl	80061a6 <LL_ADC_Enable>
	while (LL_ADC_IsActiveFlag_ADRDY(ADC5) == 0);
 8006b54:	bf00      	nop
 8006b56:	4815      	ldr	r0, [pc, #84]	; (8006bac <STRHAL_ADC_Run+0x194>)
 8006b58:	f7ff fb7a 	bl	8006250 <LL_ADC_IsActiveFlag_ADRDY>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d0f9      	beq.n	8006b56 <STRHAL_ADC_Run+0x13e>

	LL_ADC_REG_StartConversion(ADC1);
 8006b62:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006b66:	f7ff fb5f 	bl	8006228 <LL_ADC_REG_StartConversion>
	LL_ADC_REG_StartConversion(ADC2);
 8006b6a:	480a      	ldr	r0, [pc, #40]	; (8006b94 <STRHAL_ADC_Run+0x17c>)
 8006b6c:	f7ff fb5c 	bl	8006228 <LL_ADC_REG_StartConversion>
	LL_ADC_REG_StartConversion(ADC3);
 8006b70:	480a      	ldr	r0, [pc, #40]	; (8006b9c <STRHAL_ADC_Run+0x184>)
 8006b72:	f7ff fb59 	bl	8006228 <LL_ADC_REG_StartConversion>
	LL_ADC_REG_StartConversion(ADC4);
 8006b76:	480b      	ldr	r0, [pc, #44]	; (8006ba4 <STRHAL_ADC_Run+0x18c>)
 8006b78:	f7ff fb56 	bl	8006228 <LL_ADC_REG_StartConversion>
	LL_ADC_REG_StartConversion(ADC5);
 8006b7c:	480b      	ldr	r0, [pc, #44]	; (8006bac <STRHAL_ADC_Run+0x194>)
 8006b7e:	f7ff fb53 	bl	8006228 <LL_ADC_REG_StartConversion>
}
 8006b82:	bf00      	nop
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	20000a68 	.word	0x20000a68
 8006b8c:	08009f60 	.word	0x08009f60
 8006b90:	20000a94 	.word	0x20000a94
 8006b94:	50000100 	.word	0x50000100
 8006b98:	20000ac0 	.word	0x20000ac0
 8006b9c:	50000400 	.word	0x50000400
 8006ba0:	20000aec 	.word	0x20000aec
 8006ba4:	50000500 	.word	0x50000500
 8006ba8:	20000b18 	.word	0x20000b18
 8006bac:	50000600 	.word	0x50000600
 8006bb0:	40020400 	.word	0x40020400

08006bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006bb8:	4b04      	ldr	r3, [pc, #16]	; (8006bcc <__NVIC_GetPriorityGrouping+0x18>)
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	0a1b      	lsrs	r3, r3, #8
 8006bbe:	f003 0307 	and.w	r3, r3, #7
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr
 8006bcc:	e000ed00 	.word	0xe000ed00

08006bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	db0b      	blt.n	8006bfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006be2:	79fb      	ldrb	r3, [r7, #7]
 8006be4:	f003 021f 	and.w	r2, r3, #31
 8006be8:	4907      	ldr	r1, [pc, #28]	; (8006c08 <__NVIC_EnableIRQ+0x38>)
 8006bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bee:	095b      	lsrs	r3, r3, #5
 8006bf0:	2001      	movs	r0, #1
 8006bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8006bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006bfa:	bf00      	nop
 8006bfc:	370c      	adds	r7, #12
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop
 8006c08:	e000e100 	.word	0xe000e100

08006c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	4603      	mov	r3, r0
 8006c14:	6039      	str	r1, [r7, #0]
 8006c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	db0a      	blt.n	8006c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	b2da      	uxtb	r2, r3
 8006c24:	490c      	ldr	r1, [pc, #48]	; (8006c58 <__NVIC_SetPriority+0x4c>)
 8006c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c2a:	0112      	lsls	r2, r2, #4
 8006c2c:	b2d2      	uxtb	r2, r2
 8006c2e:	440b      	add	r3, r1
 8006c30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006c34:	e00a      	b.n	8006c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	b2da      	uxtb	r2, r3
 8006c3a:	4908      	ldr	r1, [pc, #32]	; (8006c5c <__NVIC_SetPriority+0x50>)
 8006c3c:	79fb      	ldrb	r3, [r7, #7]
 8006c3e:	f003 030f 	and.w	r3, r3, #15
 8006c42:	3b04      	subs	r3, #4
 8006c44:	0112      	lsls	r2, r2, #4
 8006c46:	b2d2      	uxtb	r2, r2
 8006c48:	440b      	add	r3, r1
 8006c4a:	761a      	strb	r2, [r3, #24]
}
 8006c4c:	bf00      	nop
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr
 8006c58:	e000e100 	.word	0xe000e100
 8006c5c:	e000ed00 	.word	0xe000ed00

08006c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b089      	sub	sp, #36	; 0x24
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f003 0307 	and.w	r3, r3, #7
 8006c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	f1c3 0307 	rsb	r3, r3, #7
 8006c7a:	2b04      	cmp	r3, #4
 8006c7c:	bf28      	it	cs
 8006c7e:	2304      	movcs	r3, #4
 8006c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006c82:	69fb      	ldr	r3, [r7, #28]
 8006c84:	3304      	adds	r3, #4
 8006c86:	2b06      	cmp	r3, #6
 8006c88:	d902      	bls.n	8006c90 <NVIC_EncodePriority+0x30>
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	3b03      	subs	r3, #3
 8006c8e:	e000      	b.n	8006c92 <NVIC_EncodePriority+0x32>
 8006c90:	2300      	movs	r3, #0
 8006c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006c94:	f04f 32ff 	mov.w	r2, #4294967295
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c9e:	43da      	mvns	r2, r3
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	401a      	ands	r2, r3
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	fa01 f303 	lsl.w	r3, r1, r3
 8006cb2:	43d9      	mvns	r1, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006cb8:	4313      	orrs	r3, r2
         );
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3724      	adds	r7, #36	; 0x24
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr
	...

08006cc8 <LL_AHB2_GRP1_EnableClock>:
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006cd0:	4b08      	ldr	r3, [pc, #32]	; (8006cf4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006cd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006cd4:	4907      	ldr	r1, [pc, #28]	; (8006cf4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006cdc:	4b05      	ldr	r3, [pc, #20]	; (8006cf4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006cde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4013      	ands	r3, r2
 8006ce4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
}
 8006ce8:	bf00      	nop
 8006cea:	3714      	adds	r7, #20
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr
 8006cf4:	40021000 	.word	0x40021000

08006cf8 <LL_APB1_GRP1_EnableClock>:
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8006d00:	4b08      	ldr	r3, [pc, #32]	; (8006d24 <LL_APB1_GRP1_EnableClock+0x2c>)
 8006d02:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006d04:	4907      	ldr	r1, [pc, #28]	; (8006d24 <LL_APB1_GRP1_EnableClock+0x2c>)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8006d0c:	4b05      	ldr	r3, [pc, #20]	; (8006d24 <LL_APB1_GRP1_EnableClock+0x2c>)
 8006d0e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4013      	ands	r3, r2
 8006d14:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006d16:	68fb      	ldr	r3, [r7, #12]
}
 8006d18:	bf00      	nop
 8006d1a:	3714      	adds	r7, #20
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr
 8006d24:	40021000 	.word	0x40021000

08006d28 <LL_RCC_SetFDCANClockSource>:
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_FDCANSEL, FDCANxSource);
 8006d30:	4b07      	ldr	r3, [pc, #28]	; (8006d50 <LL_RCC_SetFDCANClockSource+0x28>)
 8006d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d36:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006d3a:	4905      	ldr	r1, [pc, #20]	; (8006d50 <LL_RCC_SetFDCANClockSource+0x28>)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006d44:	bf00      	nop
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr
 8006d50:	40021000 	.word	0x40021000

08006d54 <STRHAL_CAN_Init_GPIO>:
{ [STRHAL_FDCAN1] =
{ .can = FDCAN1, .can_ram = FDCAN1_MESSAGE_RAM, .state = STRHAL_CAN_STATE_0, .filter_n = 0, .fifo_sub_state = 0 }, [STRHAL_FDCAN2] =
{ .can = FDCAN2, .can_ram = FDCAN2_MESSAGE_RAM, .state = STRHAL_CAN_STATE_0, .filter_n = 0, .fifo_sub_state = 0 } };

static void STRHAL_CAN_Init_GPIO(void)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b086      	sub	sp, #24
 8006d58:	af00      	add	r7, sp, #0

	LL_GPIO_InitTypeDef GPIO_InitStruct =
 8006d5a:	463b      	mov	r3, r7
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	601a      	str	r2, [r3, #0]
 8006d60:	605a      	str	r2, [r3, #4]
 8006d62:	609a      	str	r2, [r3, #8]
 8006d64:	60da      	str	r2, [r3, #12]
 8006d66:	611a      	str	r2, [r3, #16]
 8006d68:	615a      	str	r2, [r3, #20]
	{ 0 };

	LL_RCC_SetFDCANClockSource(LL_RCC_FDCAN_CLKSOURCE_PCLK1);
 8006d6a:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8006d6e:	f7ff ffdb 	bl	8006d28 <LL_RCC_SetFDCANClockSource>

	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_FDCAN);
 8006d72:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8006d76:	f7ff ffbf 	bl	8006cf8 <LL_APB1_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8006d7a:	2001      	movs	r0, #1
 8006d7c:	f7ff ffa4 	bl	8006cc8 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8006d80:	2002      	movs	r0, #2
 8006d82:	f7ff ffa1 	bl	8006cc8 <LL_AHB2_GRP1_EnableClock>

	//FDCAN1 GPIO Configuration
	//PA11     ------> FDCAN1_RX
	//PA12     ------> FDCAN1_TX

	GPIO_InitStruct.Pin = LL_GPIO_PIN_11 | LL_GPIO_PIN_12;
 8006d86:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006d8a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006d8c:	2302      	movs	r3, #2
 8006d8e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006d90:	2300      	movs	r3, #0
 8006d92:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006d94:	2300      	movs	r3, #0
 8006d96:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_9;
 8006d9c:	2309      	movs	r3, #9
 8006d9e:	617b      	str	r3, [r7, #20]

	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006da0:	463b      	mov	r3, r7
 8006da2:	4619      	mov	r1, r3
 8006da4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006da8:	f7fd fad1 	bl	800434e <LL_GPIO_Init>

	//FDCAN2 GPIO Configuration
	//PB5     ------> FDCAN2_RX
	//PB6     ------> FDCAN2_TX

	GPIO_InitStruct.Pin = LL_GPIO_PIN_5 | LL_GPIO_PIN_6;
 8006dac:	2360      	movs	r3, #96	; 0x60
 8006dae:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006db0:	2302      	movs	r3, #2
 8006db2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006db4:	2300      	movs	r3, #0
 8006db6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006db8:	2300      	movs	r3, #0
 8006dba:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_9;
 8006dc0:	2309      	movs	r3, #9
 8006dc2:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006dc4:	463b      	mov	r3, r7
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	4803      	ldr	r0, [pc, #12]	; (8006dd8 <STRHAL_CAN_Init_GPIO+0x84>)
 8006dca:	f7fd fac0 	bl	800434e <LL_GPIO_Init>

}
 8006dce:	bf00      	nop
 8006dd0:	3718      	adds	r7, #24
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	48000400 	.word	0x48000400

08006ddc <STRHAL_CAN_Instance_Init>:

int STRHAL_CAN_Instance_Init(STRHAL_FDCAN_Id_t fdcan_id)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	4603      	mov	r3, r0
 8006de4:	71fb      	strb	r3, [r7, #7]
	if (fdcan_id < 0 || fdcan_id >= STRHAL_N_FDCAN)
 8006de6:	79fb      	ldrb	r3, [r7, #7]
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d902      	bls.n	8006df2 <STRHAL_CAN_Instance_Init+0x16>
		return -1;
 8006dec:	f04f 33ff 	mov.w	r3, #4294967295
 8006df0:	e0e9      	b.n	8006fc6 <STRHAL_CAN_Instance_Init+0x1ea>

	_fdcans[fdcan_id].state = STRHAL_CAN_STATE_INITIALISING;
 8006df2:	79fa      	ldrb	r2, [r7, #7]
 8006df4:	4976      	ldr	r1, [pc, #472]	; (8006fd0 <STRHAL_CAN_Instance_Init+0x1f4>)
 8006df6:	4613      	mov	r3, r2
 8006df8:	005b      	lsls	r3, r3, #1
 8006dfa:	4413      	add	r3, r2
 8006dfc:	00db      	lsls	r3, r3, #3
 8006dfe:	440b      	add	r3, r1
 8006e00:	3308      	adds	r3, #8
 8006e02:	2201      	movs	r2, #1
 8006e04:	701a      	strb	r2, [r3, #0]

	FDCAN_GlobalTypeDef *can = _fdcans[fdcan_id].can;
 8006e06:	79fa      	ldrb	r2, [r7, #7]
 8006e08:	4971      	ldr	r1, [pc, #452]	; (8006fd0 <STRHAL_CAN_Instance_Init+0x1f4>)
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	005b      	lsls	r3, r3, #1
 8006e0e:	4413      	add	r3, r2
 8006e10:	00db      	lsls	r3, r3, #3
 8006e12:	440b      	add	r3, r1
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	60bb      	str	r3, [r7, #8]
	//Can_Message_RAM *can_ram = handles[can_handle_index].can_ram;
	LL_RCC_SetFDCANClockSource(LL_RCC_FDCAN_CLKSOURCE_PCLK1);
 8006e18:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8006e1c:	f7ff ff84 	bl	8006d28 <LL_RCC_SetFDCANClockSource>

	CLEAR_BIT(can->CCCR, FDCAN_CCCR_CSR);
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	699b      	ldr	r3, [r3, #24]
 8006e24:	f023 0210 	bic.w	r2, r3, #16
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	619a      	str	r2, [r3, #24]

	uint32_t tot = 0;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	60fb      	str	r3, [r7, #12]

	// Check Sleep mode acknowledge
	while ((can->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006e30:	e009      	b.n	8006e46 <STRHAL_CAN_Instance_Init+0x6a>
	{
		tot++;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	3301      	adds	r3, #1
 8006e36:	60fb      	str	r3, [r7, #12]
		if (tot > STRHAL_CAN_START_TOT)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	4a66      	ldr	r2, [pc, #408]	; (8006fd4 <STRHAL_CAN_Instance_Init+0x1f8>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d902      	bls.n	8006e46 <STRHAL_CAN_Instance_Init+0x6a>
			return -1;
 8006e40:	f04f 33ff 	mov.w	r3, #4294967295
 8006e44:	e0bf      	b.n	8006fc6 <STRHAL_CAN_Instance_Init+0x1ea>
	while ((can->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	f003 0308 	and.w	r3, r3, #8
 8006e4e:	2b08      	cmp	r3, #8
 8006e50:	d0ef      	beq.n	8006e32 <STRHAL_CAN_Instance_Init+0x56>
	}

	SET_BIT(can->CCCR, FDCAN_CCCR_INIT);
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	699b      	ldr	r3, [r3, #24]
 8006e56:	f043 0201 	orr.w	r2, r3, #1
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	619a      	str	r2, [r3, #24]

	// Wait until the INIT bit into CCCR register is set
	while ((can->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006e5e:	e009      	b.n	8006e74 <STRHAL_CAN_Instance_Init+0x98>
	{
		tot++;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	3301      	adds	r3, #1
 8006e64:	60fb      	str	r3, [r7, #12]
		if (tot > STRHAL_CAN_START_TOT)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	4a5a      	ldr	r2, [pc, #360]	; (8006fd4 <STRHAL_CAN_Instance_Init+0x1f8>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d902      	bls.n	8006e74 <STRHAL_CAN_Instance_Init+0x98>
			return -1;
 8006e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8006e72:	e0a8      	b.n	8006fc6 <STRHAL_CAN_Instance_Init+0x1ea>
	while ((can->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	699b      	ldr	r3, [r3, #24]
 8006e78:	f003 0301 	and.w	r3, r3, #1
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d0ef      	beq.n	8006e60 <STRHAL_CAN_Instance_Init+0x84>
	}

	// Enable configuration change
	SET_BIT(can->CCCR, FDCAN_CCCR_CCE);
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	699b      	ldr	r3, [r3, #24]
 8006e84:	f043 0202 	orr.w	r2, r3, #2
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	619a      	str	r2, [r3, #24]
	// Wait until the CCE bit into CCCR register is set
	while ((can->CCCR & FDCAN_CCCR_CCE) == 0U)
 8006e8c:	e009      	b.n	8006ea2 <STRHAL_CAN_Instance_Init+0xc6>
	{
		tot++;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	3301      	adds	r3, #1
 8006e92:	60fb      	str	r3, [r7, #12]
		if (tot > STRHAL_CAN_START_TOT)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	4a4f      	ldr	r2, [pc, #316]	; (8006fd4 <STRHAL_CAN_Instance_Init+0x1f8>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d902      	bls.n	8006ea2 <STRHAL_CAN_Instance_Init+0xc6>
			return -1;
 8006e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8006ea0:	e091      	b.n	8006fc6 <STRHAL_CAN_Instance_Init+0x1ea>
	while ((can->CCCR & FDCAN_CCCR_CCE) == 0U)
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	699b      	ldr	r3, [r3, #24]
 8006ea6:	f003 0302 	and.w	r3, r3, #2
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d0ef      	beq.n	8006e8e <STRHAL_CAN_Instance_Init+0xb2>
	}

	//SET_BIT(can->CCCR, FDCAN_CCCR_DAR);  //AutoRetransmission Disabled
	CLEAR_BIT(can->CCCR, FDCAN_CCCR_DAR);  //AutoRetransmission Enabled
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	699b      	ldr	r3, [r3, #24]
 8006eb2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	619a      	str	r2, [r3, #24]

	CLEAR_BIT(can->CCCR, FDCAN_CCCR_TXP);  //transmit pause Disabled
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	699b      	ldr	r3, [r3, #24]
 8006ebe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	619a      	str	r2, [r3, #24]

	SET_BIT(can->CCCR, FDCAN_CCCR_PXHD); //Protocol Exception Handling  Disabled
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	699b      	ldr	r3, [r3, #24]
 8006eca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	619a      	str	r2, [r3, #24]

	SET_BIT(can->CCCR, FDCAN_FRAME_FD_BRS); //FD mode with BitRate Switching
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	699b      	ldr	r3, [r3, #24]
 8006ed6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	619a      	str	r2, [r3, #24]

	CLEAR_BIT(can->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	699b      	ldr	r3, [r3, #24]
 8006ee2:	f023 02a4 	bic.w	r2, r3, #164	; 0xa4
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	619a      	str	r2, [r3, #24]
	CLEAR_BIT(can->TEST, FDCAN_TEST_LBCK);
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	f023 0210 	bic.w	r2, r3, #16
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	611a      	str	r2, [r3, #16]

	//if(fdcan_id == STRHAL_FDCAN1) { // TODO find out why this is here - it is here because the FDCAN_CONFIG reg needs only to be set once
	MODIFY_REG(FDCAN_CONFIG->CKDIV, FDCAN_CKDIV_PDIV, FDCAN_CLOCK_DIV2);
 8006ef6:	4b38      	ldr	r3, [pc, #224]	; (8006fd8 <STRHAL_CAN_Instance_Init+0x1fc>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f023 030f 	bic.w	r3, r3, #15
 8006efe:	4a36      	ldr	r2, [pc, #216]	; (8006fd8 <STRHAL_CAN_Instance_Init+0x1fc>)
 8006f00:	f043 0301 	orr.w	r3, r3, #1
 8006f04:	6013      	str	r3, [r2, #0]
	//}

	// Set the nominal bit timing register
	can->NBTP = ((((uint32_t) FDCAN_NOMINAL_SYNC_JUMP_WIDTH - 1U) << FDCAN_NBTP_NSJW_Pos) | (((uint32_t) FDCAN_NOMINAL_TIMESEG_1 - 1U) << FDCAN_NBTP_NTSEG1_Pos) | (((uint32_t) FDCAN_NOMINAL_TIMESEG_2 - 1U) << FDCAN_NBTP_NTSEG2_Pos) | (((uint32_t) FDCAN_NOMINAL_PRESCALER - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	4a34      	ldr	r2, [pc, #208]	; (8006fdc <STRHAL_CAN_Instance_Init+0x200>)
 8006f0a:	61da      	str	r2, [r3, #28]

	// Bit Rate Switching Enable
	can->DBTP = ((((uint32_t) FDCAN_DATA_SYNC_JUMP_WIDTH - 1U) << FDCAN_DBTP_DSJW_Pos) | (((uint32_t) FDCAN_DATA_TIMESEG_1 - 1U) << FDCAN_DBTP_DTSEG1_Pos) | (((uint32_t) FDCAN_DATA_TIMESEG_2 - 1U) << FDCAN_DBTP_DTSEG2_Pos) | (((uint32_t) FDCAN_DATA_PRESCALER - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	4a34      	ldr	r2, [pc, #208]	; (8006fe0 <STRHAL_CAN_Instance_Init+0x204>)
 8006f10:	60da      	str	r2, [r3, #12]

	MODIFY_REG(can->RXGFC, FDCAN_RXGFC_LSS, (STRHAL_CAN_STD_FILTER_NUMBER << FDCAN_RXGFC_LSS_Pos)); // Standard filter elements number
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f18:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	MODIFY_REG(can->RXGFC, FDCAN_RXGFC_LSE, (STRHAL_CAN_EXT_FILTER_NUMBER << FDCAN_RXGFC_LSE_Pos)); // Extended filter elements number
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f28:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	MODIFY_REG(can->RXGFC, FDCAN_RXGFC_F0OM, (FDCAN_RX_FIFO_BLOCKING << FDCAN_RXGFC_F0OM_Pos)); // FIFO 0 operation mode
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f38:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	MODIFY_REG(can->RXGFC, FDCAN_RXGFC_F1OM, (FDCAN_RX_FIFO_BLOCKING << FDCAN_RXGFC_F1OM_Pos)); // FIFO 1 operation mode
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	MODIFY_REG(can->RXGFC, FDCAN_RXGFC_ANFS, (FDCAN_REJECT << FDCAN_RXGFC_ANFS_Pos)); // Accept Non-matching Frames Standard
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f58:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006f5c:	f043 0220 	orr.w	r2, r3, #32
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	MODIFY_REG(can->RXGFC, FDCAN_RXGFC_ANFE, (FDCAN_REJECT << FDCAN_RXGFC_ANFE_Pos)); // Accept Non-matching Frames Extended
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f6c:	f023 030c 	bic.w	r3, r3, #12
 8006f70:	f043 0208 	orr.w	r2, r3, #8
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	MODIFY_REG(can->RXGFC, FDCAN_RXGFC_RRFS, (FDCAN_FILTER_REMOTE << FDCAN_RXGFC_RRFS_Pos)); // Reject Remote Frames Standard
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f80:	f023 0202 	bic.w	r2, r3, #2
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	MODIFY_REG(can->RXGFC, FDCAN_RXGFC_RRFE, (FDCAN_REJECT_REMOTE << FDCAN_RXGFC_RRFE_Pos)); // Reject Remote Frames Extended
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f90:	f043 0201 	orr.w	r2, r3, #1
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	CLEAR_BIT(can->TXBC, FDCAN_TXBC_TFQM); // Tx FIFO/Queue Mode
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006fa0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

	//Config TxDelayCompensation
	can->TDCR = ((FDCAN_TDC_FILTER << FDCAN_TDCR_TDCF_Pos) | (FDCAN_TDC_OFFSET << FDCAN_TDCR_TDCO_Pos));
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	f240 5206 	movw	r2, #1286	; 0x506
 8006fb0:	649a      	str	r2, [r3, #72]	; 0x48

	// Enable transmitter delay compensation
	SET_BIT(can->DBTP, FDCAN_DBTP_TDC);
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	60da      	str	r2, [r3, #12]

	LL_mDelay(100);
 8006fbe:	2064      	movs	r0, #100	; 0x64
 8006fc0:	f7fe fb80 	bl	80056c4 <LL_mDelay>

	return 0;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3710      	adds	r7, #16
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	20000004 	.word	0x20000004
 8006fd4:	00f42400 	.word	0x00f42400
 8006fd8:	40006500 	.word	0x40006500
 8006fdc:	0001160f 	.word	0x0001160f
 8006fe0:	00010611 	.word	0x00010611

08006fe4 <STRHAL_CAN_Subscribe>:

int STRHAL_CAN_Subscribe(STRHAL_FDCAN_Id_t fdcan_id, STRHAL_FDCAN_Rx_Id_t rx_id, STRHAL_FDCAN_Filter_t *filter, uint8_t n, STRHAL_CAN_Receptor_t receptor)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b087      	sub	sp, #28
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	603a      	str	r2, [r7, #0]
 8006fec:	461a      	mov	r2, r3
 8006fee:	4603      	mov	r3, r0
 8006ff0:	71fb      	strb	r3, [r7, #7]
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	71bb      	strb	r3, [r7, #6]
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	717b      	strb	r3, [r7, #5]
	/* Error handling for user inputs */
	if (fdcan_id < 0 || fdcan_id >= STRHAL_N_FDCAN) // invalid fdcan instance
 8006ffa:	79fb      	ldrb	r3, [r7, #7]
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d902      	bls.n	8007006 <STRHAL_CAN_Subscribe+0x22>
		return -1;
 8007000:	f04f 33ff 	mov.w	r3, #4294967295
 8007004:	e0bd      	b.n	8007182 <STRHAL_CAN_Subscribe+0x19e>

	STRHAL_CAN_Handle_t *fdcan = &_fdcans[fdcan_id];
 8007006:	79fa      	ldrb	r2, [r7, #7]
 8007008:	4613      	mov	r3, r2
 800700a:	005b      	lsls	r3, r3, #1
 800700c:	4413      	add	r3, r2
 800700e:	00db      	lsls	r3, r3, #3
 8007010:	4a5f      	ldr	r2, [pc, #380]	; (8007190 <STRHAL_CAN_Subscribe+0x1ac>)
 8007012:	4413      	add	r3, r2
 8007014:	613b      	str	r3, [r7, #16]
	if (fdcan->state != STRHAL_CAN_STATE_INITIALISING)	// fdcan not in init mode (Subscribe called in wrong order)
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	7a1b      	ldrb	r3, [r3, #8]
 800701a:	b2db      	uxtb	r3, r3
 800701c:	2b01      	cmp	r3, #1
 800701e:	d002      	beq.n	8007026 <STRHAL_CAN_Subscribe+0x42>
		return -1;
 8007020:	f04f 33ff 	mov.w	r3, #4294967295
 8007024:	e0ad      	b.n	8007182 <STRHAL_CAN_Subscribe+0x19e>

	if (filter == NULL || receptor == NULL) // Nullptr check
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d002      	beq.n	8007032 <STRHAL_CAN_Subscribe+0x4e>
 800702c:	6a3b      	ldr	r3, [r7, #32]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d101      	bne.n	8007036 <STRHAL_CAN_Subscribe+0x52>
		return 0;
 8007032:	2300      	movs	r3, #0
 8007034:	e0a5      	b.n	8007182 <STRHAL_CAN_Subscribe+0x19e>

	if (n > STRHAL_CAN_RAM_N_FILTER - fdcan->filter_n) // Correct Filter Nbr
 8007036:	797a      	ldrb	r2, [r7, #5]
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	7d1b      	ldrb	r3, [r3, #20]
 800703c:	f1c3 031c 	rsb	r3, r3, #28
 8007040:	429a      	cmp	r2, r3
 8007042:	dd04      	ble.n	800704e <STRHAL_CAN_Subscribe+0x6a>
		n = fdcan->filter_n - n;
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	7d1a      	ldrb	r2, [r3, #20]
 8007048:	797b      	ldrb	r3, [r7, #5]
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	717b      	strb	r3, [r7, #5]

	if (fdcan->fifo_sub_state & (1U << rx_id)) // Already subscribed to this fifo
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	7d5b      	ldrb	r3, [r3, #21]
 8007052:	461a      	mov	r2, r3
 8007054:	79bb      	ldrb	r3, [r7, #6]
 8007056:	fa22 f303 	lsr.w	r3, r2, r3
 800705a:	f003 0301 	and.w	r3, r3, #1
 800705e:	2b00      	cmp	r3, #0
 8007060:	d002      	beq.n	8007068 <STRHAL_CAN_Subscribe+0x84>
		return -1;
 8007062:	f04f 33ff 	mov.w	r3, #4294967295
 8007066:	e08c      	b.n	8007182 <STRHAL_CAN_Subscribe+0x19e>

	Can_Message_RAM *can_ram = fdcan->can_ram;
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	60fb      	str	r3, [r7, #12]

	uint32_t sfec;

	switch (rx_id)
 800706e:	79bb      	ldrb	r3, [r7, #6]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d002      	beq.n	800707a <STRHAL_CAN_Subscribe+0x96>
 8007074:	2b01      	cmp	r3, #1
 8007076:	d010      	beq.n	800709a <STRHAL_CAN_Subscribe+0xb6>
 8007078:	e01b      	b.n	80070b2 <STRHAL_CAN_Subscribe+0xce>
	{
		case STRHAL_FDCAN_RX0:
			fdcan->rxReceptors[0] = receptor;
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	6a3a      	ldr	r2, [r7, #32]
 800707e:	60da      	str	r2, [r3, #12]
			fdcan->fifo_sub_state |= 1U << STRHAL_FDCAN_RX0;
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	7d5b      	ldrb	r3, [r3, #21]
 8007084:	f043 0301 	orr.w	r3, r3, #1
 8007088:	b2da      	uxtb	r2, r3
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	755a      	strb	r2, [r3, #21]
			sfec = FDCAN_FILTER_TO_RXFIFO0;
 800708e:	2301      	movs	r3, #1
 8007090:	60bb      	str	r3, [r7, #8]
			break;
 8007092:	bf00      	nop
		default:
			return -1;
	}

	uint8_t i;
	for (i = 0; i < n; i++, fdcan->filter_n++)
 8007094:	2300      	movs	r3, #0
 8007096:	75fb      	strb	r3, [r7, #23]
 8007098:	e05f      	b.n	800715a <STRHAL_CAN_Subscribe+0x176>
			fdcan->rxReceptors[1] = receptor;
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	6a3a      	ldr	r2, [r7, #32]
 800709e:	611a      	str	r2, [r3, #16]
			fdcan->fifo_sub_state |= 1U << STRHAL_FDCAN_RX1;
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	7d5b      	ldrb	r3, [r3, #21]
 80070a4:	f043 0302 	orr.w	r3, r3, #2
 80070a8:	b2da      	uxtb	r2, r3
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	755a      	strb	r2, [r3, #21]
			sfec = FDCAN_FILTER_TO_RXFIFO1;
 80070ae:	2302      	movs	r3, #2
 80070b0:	60bb      	str	r3, [r7, #8]
			return -1;
 80070b2:	f04f 33ff 	mov.w	r3, #4294967295
 80070b6:	e064      	b.n	8007182 <STRHAL_CAN_Subscribe+0x19e>
	{
		can_ram->std_filters[i].S0.bit.SFEC = sfec;
 80070b8:	7df9      	ldrb	r1, [r7, #23]
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	f003 0307 	and.w	r3, r3, #7
 80070c0:	b2d8      	uxtb	r0, r3
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80070c8:	f360 63dd 	bfi	r3, r0, #27, #3
 80070cc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		can_ram->std_filters[i].S0.bit.SFID1 = filter[i].value_id1;
 80070d0:	7dfa      	ldrb	r2, [r7, #23]
 80070d2:	4613      	mov	r3, r2
 80070d4:	005b      	lsls	r3, r3, #1
 80070d6:	4413      	add	r3, r2
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	461a      	mov	r2, r3
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	4413      	add	r3, r2
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	7df9      	ldrb	r1, [r7, #23]
 80070e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80070e8:	b298      	uxth	r0, r3
 80070ea:	68fa      	ldr	r2, [r7, #12]
 80070ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80070f0:	f360 431a 	bfi	r3, r0, #16, #11
 80070f4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		can_ram->std_filters[i].S0.bit.SFID2 = filter[i].mask_id2;
 80070f8:	7dfa      	ldrb	r2, [r7, #23]
 80070fa:	4613      	mov	r3, r2
 80070fc:	005b      	lsls	r3, r3, #1
 80070fe:	4413      	add	r3, r2
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	461a      	mov	r2, r3
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	4413      	add	r3, r2
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	7df9      	ldrb	r1, [r7, #23]
 800710c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007110:	b298      	uxth	r0, r3
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007118:	f360 030a 	bfi	r3, r0, #0, #11
 800711c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		can_ram->std_filters[i].S0.bit.SFT = filter[i].type;
 8007120:	7dfa      	ldrb	r2, [r7, #23]
 8007122:	4613      	mov	r3, r2
 8007124:	005b      	lsls	r3, r3, #1
 8007126:	4413      	add	r3, r2
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	461a      	mov	r2, r3
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	4413      	add	r3, r2
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	7df9      	ldrb	r1, [r7, #23]
 8007134:	f003 0303 	and.w	r3, r3, #3
 8007138:	b2d8      	uxtb	r0, r3
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007140:	f360 739f 	bfi	r3, r0, #30, #2
 8007144:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	for (i = 0; i < n; i++, fdcan->filter_n++)
 8007148:	7dfb      	ldrb	r3, [r7, #23]
 800714a:	3301      	adds	r3, #1
 800714c:	75fb      	strb	r3, [r7, #23]
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	7d1b      	ldrb	r3, [r3, #20]
 8007152:	3301      	adds	r3, #1
 8007154:	b2da      	uxtb	r2, r3
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	751a      	strb	r2, [r3, #20]
 800715a:	7dfa      	ldrb	r2, [r7, #23]
 800715c:	797b      	ldrb	r3, [r7, #5]
 800715e:	429a      	cmp	r2, r3
 8007160:	d3aa      	bcc.n	80070b8 <STRHAL_CAN_Subscribe+0xd4>
	}
	MODIFY_REG(fdcan->can->RXGFC, FDCAN_RXGFC_LSS, (fdcan->filter_n << FDCAN_RXGFC_LSS_Pos)); // Standard filter elements number
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800716a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	7d1b      	ldrb	r3, [r3, #20]
 8007172:	041b      	lsls	r3, r3, #16
 8007174:	4619      	mov	r1, r3
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	430a      	orrs	r2, r1
 800717c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	return n;
 8007180:	797b      	ldrb	r3, [r7, #5]
}
 8007182:	4618      	mov	r0, r3
 8007184:	371c      	adds	r7, #28
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop
 8007190:	20000004 	.word	0x20000004

08007194 <STRHAL_CAN_Init>:

STRHAL_Oof_t STRHAL_CAN_Init()
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
	STRHAL_Oof_t status = STRHAL_NOICE;
 800719a:	2300      	movs	r3, #0
 800719c:	71fb      	strb	r3, [r7, #7]
	STRHAL_CAN_Init_GPIO();
 800719e:	f7ff fdd9 	bl	8006d54 <STRHAL_CAN_Init_GPIO>

	return status;
 80071a2:	79fb      	ldrb	r3, [r7, #7]
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3708      	adds	r7, #8
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <STRHAL_CAN_Send>:
	*rxfXA = i & 0x7;
	return n;
}

int32_t STRHAL_CAN_Send(STRHAL_FDCAN_Id_t fdcan_id, uint32_t id, const uint8_t *data, uint32_t n)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b08b      	sub	sp, #44	; 0x2c
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60b9      	str	r1, [r7, #8]
 80071b4:	607a      	str	r2, [r7, #4]
 80071b6:	603b      	str	r3, [r7, #0]
 80071b8:	4603      	mov	r3, r0
 80071ba:	73fb      	strb	r3, [r7, #15]
	if (fdcan_id < 0 || fdcan_id >= STRHAL_N_FDCAN)
 80071bc:	7bfb      	ldrb	r3, [r7, #15]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d902      	bls.n	80071c8 <STRHAL_CAN_Send+0x1c>
		return -1;
 80071c2:	f04f 33ff 	mov.w	r3, #4294967295
 80071c6:	e0b8      	b.n	800733a <STRHAL_CAN_Send+0x18e>

	if (n == 0)
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d101      	bne.n	80071d2 <STRHAL_CAN_Send+0x26>
		return 0;
 80071ce:	2300      	movs	r3, #0
 80071d0:	e0b3      	b.n	800733a <STRHAL_CAN_Send+0x18e>

	FDCAN_GlobalTypeDef *can = _fdcans[fdcan_id].can;
 80071d2:	7bfa      	ldrb	r2, [r7, #15]
 80071d4:	495c      	ldr	r1, [pc, #368]	; (8007348 <STRHAL_CAN_Send+0x19c>)
 80071d6:	4613      	mov	r3, r2
 80071d8:	005b      	lsls	r3, r3, #1
 80071da:	4413      	add	r3, r2
 80071dc:	00db      	lsls	r3, r3, #3
 80071de:	440b      	add	r3, r1
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	61fb      	str	r3, [r7, #28]
	Can_Message_RAM *can_ram = _fdcans[fdcan_id].can_ram;
 80071e4:	7bfa      	ldrb	r2, [r7, #15]
 80071e6:	4958      	ldr	r1, [pc, #352]	; (8007348 <STRHAL_CAN_Send+0x19c>)
 80071e8:	4613      	mov	r3, r2
 80071ea:	005b      	lsls	r3, r3, #1
 80071ec:	4413      	add	r3, r2
 80071ee:	00db      	lsls	r3, r3, #3
 80071f0:	440b      	add	r3, r1
 80071f2:	3304      	adds	r3, #4
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	61bb      	str	r3, [r7, #24]

	if (!(can->TXFQS & FDCAN_TXFQS_TFFL))
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80071fe:	f003 0307 	and.w	r3, r3, #7
 8007202:	2b00      	cmp	r3, #0
 8007204:	d102      	bne.n	800720c <STRHAL_CAN_Send+0x60>
		return -1;
 8007206:	f04f 33ff 	mov.w	r3, #4294967295
 800720a:	e096      	b.n	800733a <STRHAL_CAN_Send+0x18e>

	if (n > FDCAN_ELMTS_ARRAY_SIZE)
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	2b40      	cmp	r3, #64	; 0x40
 8007210:	d901      	bls.n	8007216 <STRHAL_CAN_Send+0x6a>
		n = FDCAN_ELMTS_ARRAY_SIZE;
 8007212:	2340      	movs	r3, #64	; 0x40
 8007214:	603b      	str	r3, [r7, #0]

	uint8_t i = ((can->TXFQS & FDCAN_TXFQS_TFQPI_Msk) >> FDCAN_TXFQS_TFQPI_Pos);
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800721c:	0c1b      	lsrs	r3, r3, #16
 800721e:	b2db      	uxtb	r3, r3
 8007220:	f003 0303 	and.w	r3, r3, #3
 8007224:	75fb      	strb	r3, [r7, #23]

	Can_Tx_Element *frame = &can_ram->tx_buffer[i];
 8007226:	7dfa      	ldrb	r2, [r7, #23]
 8007228:	4613      	mov	r3, r2
 800722a:	00db      	lsls	r3, r3, #3
 800722c:	4413      	add	r3, r2
 800722e:	00db      	lsls	r3, r3, #3
 8007230:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007234:	69ba      	ldr	r2, [r7, #24]
 8007236:	4413      	add	r3, r2
 8007238:	613b      	str	r3, [r7, #16]
	frame->T0.bit.XTD = 0;
 800723a:	693a      	ldr	r2, [r7, #16]
 800723c:	6813      	ldr	r3, [r2, #0]
 800723e:	f36f 739e 	bfc	r3, #30, #1
 8007242:	6013      	str	r3, [r2, #0]
	frame->T0.bit.ID = id << 18;
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	049b      	lsls	r3, r3, #18
 8007248:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800724c:	693a      	ldr	r2, [r7, #16]
 800724e:	6813      	ldr	r3, [r2, #0]
 8007250:	f361 031c 	bfi	r3, r1, #0, #29
 8007254:	6013      	str	r3, [r2, #0]
	frame->T0.bit.RTR = 0;
 8007256:	693a      	ldr	r2, [r7, #16]
 8007258:	6813      	ldr	r3, [r2, #0]
 800725a:	f36f 735d 	bfc	r3, #29, #1
 800725e:	6013      	str	r3, [r2, #0]
	frame->T1.bit.FDF = 1;
 8007260:	693a      	ldr	r2, [r7, #16]
 8007262:	6853      	ldr	r3, [r2, #4]
 8007264:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007268:	6053      	str	r3, [r2, #4]
	frame->T1.bit.BRS = 1;
 800726a:	693a      	ldr	r2, [r7, #16]
 800726c:	6853      	ldr	r3, [r2, #4]
 800726e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007272:	6053      	str	r3, [r2, #4]
	frame->T1.bit.DLC = Can_LengthToDlc[n];
 8007274:	4a35      	ldr	r2, [pc, #212]	; (800734c <STRHAL_CAN_Send+0x1a0>)
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800727c:	f003 030f 	and.w	r3, r3, #15
 8007280:	b2d9      	uxtb	r1, r3
 8007282:	693a      	ldr	r2, [r7, #16]
 8007284:	6853      	ldr	r3, [r2, #4]
 8007286:	f361 4313 	bfi	r3, r1, #16, #4
 800728a:	6053      	str	r3, [r2, #4]
	frame->T1.bit.EFCC = 0;
 800728c:	693a      	ldr	r2, [r7, #16]
 800728e:	6853      	ldr	r3, [r2, #4]
 8007290:	f36f 53d7 	bfc	r3, #23, #1
 8007294:	6053      	str	r3, [r2, #4]
	frame->T1.bit.MM = 0;
 8007296:	693a      	ldr	r2, [r7, #16]
 8007298:	6853      	ldr	r3, [r2, #4]
 800729a:	f36f 631f 	bfc	r3, #24, #8
 800729e:	6053      	str	r3, [r2, #4]
	/*if(frame->T0.bit.ID == 0 || frame->T1.bit.DLC == 0) {
	 uint8_t temp = 1;
	 (void) temp;
	 }*/

	uint32_t j = 0;
 80072a0:	2300      	movs	r3, #0
 80072a2:	627b      	str	r3, [r7, #36]	; 0x24
	for (uint32_t c = 0; c < n; c += 4)
 80072a4:	2300      	movs	r3, #0
 80072a6:	623b      	str	r3, [r7, #32]
 80072a8:	e025      	b.n	80072f6 <STRHAL_CAN_Send+0x14a>
		frame->data.word[j++] = data[c] | data[c + 1] << 8 | data[c + 2] << 16 | data[c + 3] << 24;
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	6a3b      	ldr	r3, [r7, #32]
 80072ae:	4413      	add	r3, r2
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	4619      	mov	r1, r3
 80072b4:	6a3b      	ldr	r3, [r7, #32]
 80072b6:	3301      	adds	r3, #1
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	4413      	add	r3, r2
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	021b      	lsls	r3, r3, #8
 80072c0:	ea41 0203 	orr.w	r2, r1, r3
 80072c4:	6a3b      	ldr	r3, [r7, #32]
 80072c6:	3302      	adds	r3, #2
 80072c8:	6879      	ldr	r1, [r7, #4]
 80072ca:	440b      	add	r3, r1
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	041b      	lsls	r3, r3, #16
 80072d0:	431a      	orrs	r2, r3
 80072d2:	6a3b      	ldr	r3, [r7, #32]
 80072d4:	3303      	adds	r3, #3
 80072d6:	6879      	ldr	r1, [r7, #4]
 80072d8:	440b      	add	r3, r1
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	061b      	lsls	r3, r3, #24
 80072de:	ea42 0103 	orr.w	r1, r2, r3
 80072e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e4:	1c5a      	adds	r2, r3, #1
 80072e6:	627a      	str	r2, [r7, #36]	; 0x24
 80072e8:	693a      	ldr	r2, [r7, #16]
 80072ea:	3302      	adds	r3, #2
 80072ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint32_t c = 0; c < n; c += 4)
 80072f0:	6a3b      	ldr	r3, [r7, #32]
 80072f2:	3304      	adds	r3, #4
 80072f4:	623b      	str	r3, [r7, #32]
 80072f6:	6a3a      	ldr	r2, [r7, #32]
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d3d5      	bcc.n	80072aa <STRHAL_CAN_Send+0xfe>
	while (j < Can_DlcToLength[Can_LengthToDlc[n]] / 4)
 80072fe:	e007      	b.n	8007310 <STRHAL_CAN_Send+0x164>
		frame->data.word[j++] = 0;
 8007300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007302:	1c5a      	adds	r2, r3, #1
 8007304:	627a      	str	r2, [r7, #36]	; 0x24
 8007306:	693a      	ldr	r2, [r7, #16]
 8007308:	3302      	adds	r3, #2
 800730a:	2100      	movs	r1, #0
 800730c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	while (j < Can_DlcToLength[Can_LengthToDlc[n]] / 4)
 8007310:	4a0e      	ldr	r2, [pc, #56]	; (800734c <STRHAL_CAN_Send+0x1a0>)
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007318:	4a0d      	ldr	r2, [pc, #52]	; (8007350 <STRHAL_CAN_Send+0x1a4>)
 800731a:	5cd3      	ldrb	r3, [r2, r3]
 800731c:	089b      	lsrs	r3, r3, #2
 800731e:	b2db      	uxtb	r3, r3
 8007320:	461a      	mov	r2, r3
 8007322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007324:	4293      	cmp	r3, r2
 8007326:	d3eb      	bcc.n	8007300 <STRHAL_CAN_Send+0x154>

	can->TXBAR = (1 << i);
 8007328:	7dfb      	ldrb	r3, [r7, #23]
 800732a:	2201      	movs	r2, #1
 800732c:	fa02 f303 	lsl.w	r3, r2, r3
 8007330:	461a      	mov	r2, r3
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

	return n;
 8007338:	683b      	ldr	r3, [r7, #0]
}
 800733a:	4618      	mov	r0, r3
 800733c:	372c      	adds	r7, #44	; 0x2c
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	20000004 	.word	0x20000004
 800734c:	0800a5a0 	.word	0x0800a5a0
 8007350:	0800a590 	.word	0x0800a590

08007354 <STRHAL_CAN_Run>:

void STRHAL_CAN_Run()
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
	// End initialisation - start FDCANs
	STRHAL_CAN_Handle_t *fdcan1 = &_fdcans[STRHAL_FDCAN1];
 800735a:	4b55      	ldr	r3, [pc, #340]	; (80074b0 <STRHAL_CAN_Run+0x15c>)
 800735c:	607b      	str	r3, [r7, #4]
	STRHAL_CAN_Handle_t *fdcan2 = &_fdcans[STRHAL_FDCAN2];
 800735e:	4b55      	ldr	r3, [pc, #340]	; (80074b4 <STRHAL_CAN_Run+0x160>)
 8007360:	603b      	str	r3, [r7, #0]
	if (fdcan1->state == STRHAL_CAN_STATE_INITIALISING)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	7a1b      	ldrb	r3, [r3, #8]
 8007366:	b2db      	uxtb	r3, r3
 8007368:	2b01      	cmp	r3, #1
 800736a:	d14b      	bne.n	8007404 <STRHAL_CAN_Run+0xb0>
	{
		if (fdcan1->fifo_sub_state & (1U << STRHAL_FDCAN_RX0))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	7d5b      	ldrb	r3, [r3, #21]
 8007370:	f003 0301 	and.w	r3, r3, #1
 8007374:	2b00      	cmp	r3, #0
 8007376:	d011      	beq.n	800739c <STRHAL_CAN_Run+0x48>
		{
			CLEAR_BIT(FDCAN1->ILS, FDCAN_ILS_RXFIFO0);
 8007378:	4b4f      	ldr	r3, [pc, #316]	; (80074b8 <STRHAL_CAN_Run+0x164>)
 800737a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800737c:	4a4e      	ldr	r2, [pc, #312]	; (80074b8 <STRHAL_CAN_Run+0x164>)
 800737e:	f023 0301 	bic.w	r3, r3, #1
 8007382:	6593      	str	r3, [r2, #88]	; 0x58
			SET_BIT(FDCAN1->ILE, FDCAN_ILE_EINT0);
 8007384:	4b4c      	ldr	r3, [pc, #304]	; (80074b8 <STRHAL_CAN_Run+0x164>)
 8007386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007388:	4a4b      	ldr	r2, [pc, #300]	; (80074b8 <STRHAL_CAN_Run+0x164>)
 800738a:	f043 0301 	orr.w	r3, r3, #1
 800738e:	65d3      	str	r3, [r2, #92]	; 0x5c
			SET_BIT(FDCAN1->IE, FDCAN_IE_RF0NE);
 8007390:	4b49      	ldr	r3, [pc, #292]	; (80074b8 <STRHAL_CAN_Run+0x164>)
 8007392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007394:	4a48      	ldr	r2, [pc, #288]	; (80074b8 <STRHAL_CAN_Run+0x164>)
 8007396:	f043 0301 	orr.w	r3, r3, #1
 800739a:	6553      	str	r3, [r2, #84]	; 0x54
		}
		if (fdcan1->fifo_sub_state & (1U << STRHAL_FDCAN_RX1))
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	7d5b      	ldrb	r3, [r3, #21]
 80073a0:	f003 0302 	and.w	r3, r3, #2
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d011      	beq.n	80073cc <STRHAL_CAN_Run+0x78>
		{
			CLEAR_BIT(FDCAN1->ILS, FDCAN_ILS_RXFIFO1);
 80073a8:	4b43      	ldr	r3, [pc, #268]	; (80074b8 <STRHAL_CAN_Run+0x164>)
 80073aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073ac:	4a42      	ldr	r2, [pc, #264]	; (80074b8 <STRHAL_CAN_Run+0x164>)
 80073ae:	f023 0302 	bic.w	r3, r3, #2
 80073b2:	6593      	str	r3, [r2, #88]	; 0x58
			SET_BIT(FDCAN1->ILE, FDCAN_ILE_EINT0);
 80073b4:	4b40      	ldr	r3, [pc, #256]	; (80074b8 <STRHAL_CAN_Run+0x164>)
 80073b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073b8:	4a3f      	ldr	r2, [pc, #252]	; (80074b8 <STRHAL_CAN_Run+0x164>)
 80073ba:	f043 0301 	orr.w	r3, r3, #1
 80073be:	65d3      	str	r3, [r2, #92]	; 0x5c
			SET_BIT(FDCAN1->IE, FDCAN_IE_RF1NE);
 80073c0:	4b3d      	ldr	r3, [pc, #244]	; (80074b8 <STRHAL_CAN_Run+0x164>)
 80073c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073c4:	4a3c      	ldr	r2, [pc, #240]	; (80074b8 <STRHAL_CAN_Run+0x164>)
 80073c6:	f043 0308 	orr.w	r3, r3, #8
 80073ca:	6553      	str	r3, [r2, #84]	; 0x54
		}

		NVIC_SetPriority(FDCAN1_IT0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 1));
 80073cc:	f7ff fbf2 	bl	8006bb4 <__NVIC_GetPriorityGrouping>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2201      	movs	r2, #1
 80073d4:	2100      	movs	r1, #0
 80073d6:	4618      	mov	r0, r3
 80073d8:	f7ff fc42 	bl	8006c60 <NVIC_EncodePriority>
 80073dc:	4603      	mov	r3, r0
 80073de:	4619      	mov	r1, r3
 80073e0:	2015      	movs	r0, #21
 80073e2:	f7ff fc13 	bl	8006c0c <__NVIC_SetPriority>
		NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80073e6:	2015      	movs	r0, #21
 80073e8:	f7ff fbf2 	bl	8006bd0 <__NVIC_EnableIRQ>

		CLEAR_BIT(FDCAN1->CCCR, FDCAN_CCCR_INIT);
 80073ec:	4b32      	ldr	r3, [pc, #200]	; (80074b8 <STRHAL_CAN_Run+0x164>)
 80073ee:	699b      	ldr	r3, [r3, #24]
 80073f0:	4a31      	ldr	r2, [pc, #196]	; (80074b8 <STRHAL_CAN_Run+0x164>)
 80073f2:	f023 0301 	bic.w	r3, r3, #1
 80073f6:	6193      	str	r3, [r2, #24]

		_fdcans[STRHAL_FDCAN1].state = STRHAL_CAN_STATE_RUNNING;
 80073f8:	4b2d      	ldr	r3, [pc, #180]	; (80074b0 <STRHAL_CAN_Run+0x15c>)
 80073fa:	2202      	movs	r2, #2
 80073fc:	721a      	strb	r2, [r3, #8]
		LL_mDelay(100);
 80073fe:	2064      	movs	r0, #100	; 0x64
 8007400:	f7fe f960 	bl	80056c4 <LL_mDelay>
	}
	if (fdcan2->state == STRHAL_CAN_STATE_INITIALISING)
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	7a1b      	ldrb	r3, [r3, #8]
 8007408:	b2db      	uxtb	r3, r3
 800740a:	2b01      	cmp	r3, #1
 800740c:	d14c      	bne.n	80074a8 <STRHAL_CAN_Run+0x154>
	{
		if (fdcan2->fifo_sub_state & (1U << STRHAL_FDCAN_RX0))
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	7d5b      	ldrb	r3, [r3, #21]
 8007412:	f003 0301 	and.w	r3, r3, #1
 8007416:	2b00      	cmp	r3, #0
 8007418:	d011      	beq.n	800743e <STRHAL_CAN_Run+0xea>
		{
			CLEAR_BIT(FDCAN2->ILS, FDCAN_ILS_RXFIFO0);
 800741a:	4b28      	ldr	r3, [pc, #160]	; (80074bc <STRHAL_CAN_Run+0x168>)
 800741c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800741e:	4a27      	ldr	r2, [pc, #156]	; (80074bc <STRHAL_CAN_Run+0x168>)
 8007420:	f023 0301 	bic.w	r3, r3, #1
 8007424:	6593      	str	r3, [r2, #88]	; 0x58
			SET_BIT(FDCAN2->ILE, FDCAN_ILE_EINT0);
 8007426:	4b25      	ldr	r3, [pc, #148]	; (80074bc <STRHAL_CAN_Run+0x168>)
 8007428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800742a:	4a24      	ldr	r2, [pc, #144]	; (80074bc <STRHAL_CAN_Run+0x168>)
 800742c:	f043 0301 	orr.w	r3, r3, #1
 8007430:	65d3      	str	r3, [r2, #92]	; 0x5c
			SET_BIT(FDCAN2->IE, FDCAN_IE_RF0NE);
 8007432:	4b22      	ldr	r3, [pc, #136]	; (80074bc <STRHAL_CAN_Run+0x168>)
 8007434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007436:	4a21      	ldr	r2, [pc, #132]	; (80074bc <STRHAL_CAN_Run+0x168>)
 8007438:	f043 0301 	orr.w	r3, r3, #1
 800743c:	6553      	str	r3, [r2, #84]	; 0x54
		}
		if (fdcan2->fifo_sub_state & (1U << STRHAL_FDCAN_RX1))
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	7d5b      	ldrb	r3, [r3, #21]
 8007442:	f003 0302 	and.w	r3, r3, #2
 8007446:	2b00      	cmp	r3, #0
 8007448:	d011      	beq.n	800746e <STRHAL_CAN_Run+0x11a>
		{
			CLEAR_BIT(FDCAN2->ILS, FDCAN_ILS_RXFIFO1);
 800744a:	4b1c      	ldr	r3, [pc, #112]	; (80074bc <STRHAL_CAN_Run+0x168>)
 800744c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800744e:	4a1b      	ldr	r2, [pc, #108]	; (80074bc <STRHAL_CAN_Run+0x168>)
 8007450:	f023 0302 	bic.w	r3, r3, #2
 8007454:	6593      	str	r3, [r2, #88]	; 0x58
			SET_BIT(FDCAN2->ILE, FDCAN_ILE_EINT0);
 8007456:	4b19      	ldr	r3, [pc, #100]	; (80074bc <STRHAL_CAN_Run+0x168>)
 8007458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800745a:	4a18      	ldr	r2, [pc, #96]	; (80074bc <STRHAL_CAN_Run+0x168>)
 800745c:	f043 0301 	orr.w	r3, r3, #1
 8007460:	65d3      	str	r3, [r2, #92]	; 0x5c
			SET_BIT(FDCAN2->IE, FDCAN_IE_RF1NE);
 8007462:	4b16      	ldr	r3, [pc, #88]	; (80074bc <STRHAL_CAN_Run+0x168>)
 8007464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007466:	4a15      	ldr	r2, [pc, #84]	; (80074bc <STRHAL_CAN_Run+0x168>)
 8007468:	f043 0308 	orr.w	r3, r3, #8
 800746c:	6553      	str	r3, [r2, #84]	; 0x54
		}

		NVIC_SetPriority(FDCAN2_IT0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 2));
 800746e:	f7ff fba1 	bl	8006bb4 <__NVIC_GetPriorityGrouping>
 8007472:	4603      	mov	r3, r0
 8007474:	2202      	movs	r2, #2
 8007476:	2100      	movs	r1, #0
 8007478:	4618      	mov	r0, r3
 800747a:	f7ff fbf1 	bl	8006c60 <NVIC_EncodePriority>
 800747e:	4603      	mov	r3, r0
 8007480:	4619      	mov	r1, r3
 8007482:	2056      	movs	r0, #86	; 0x56
 8007484:	f7ff fbc2 	bl	8006c0c <__NVIC_SetPriority>
		NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8007488:	2056      	movs	r0, #86	; 0x56
 800748a:	f7ff fba1 	bl	8006bd0 <__NVIC_EnableIRQ>

		CLEAR_BIT(FDCAN2->CCCR, FDCAN_CCCR_INIT);
 800748e:	4b0b      	ldr	r3, [pc, #44]	; (80074bc <STRHAL_CAN_Run+0x168>)
 8007490:	699b      	ldr	r3, [r3, #24]
 8007492:	4a0a      	ldr	r2, [pc, #40]	; (80074bc <STRHAL_CAN_Run+0x168>)
 8007494:	f023 0301 	bic.w	r3, r3, #1
 8007498:	6193      	str	r3, [r2, #24]
		_fdcans[STRHAL_FDCAN2].state = STRHAL_CAN_STATE_RUNNING;
 800749a:	4b05      	ldr	r3, [pc, #20]	; (80074b0 <STRHAL_CAN_Run+0x15c>)
 800749c:	2202      	movs	r2, #2
 800749e:	f883 2020 	strb.w	r2, [r3, #32]
		LL_mDelay(100);
 80074a2:	2064      	movs	r0, #100	; 0x64
 80074a4:	f7fe f90e 	bl	80056c4 <LL_mDelay>
	}

}
 80074a8:	bf00      	nop
 80074aa:	3708      	adds	r7, #8
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	20000004 	.word	0x20000004
 80074b4:	2000001c 	.word	0x2000001c
 80074b8:	40006400 	.word	0x40006400
 80074bc:	40006800 	.word	0x40006800

080074c0 <FDCAN1_IT0_IRQHandler>:

void FDCAN1_IT0_IRQHandler(void)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b08c      	sub	sp, #48	; 0x30
 80074c4:	af00      	add	r7, sp, #0
	if (FDCAN1->IR & FDCAN_IR_RF0N)
 80074c6:	4b47      	ldr	r3, [pc, #284]	; (80075e4 <FDCAN1_IT0_IRQHandler+0x124>)
 80074c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074ca:	f003 0301 	and.w	r3, r3, #1
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d03f      	beq.n	8007552 <FDCAN1_IT0_IRQHandler+0x92>
	{
		SET_BIT(FDCAN1->IR, FDCAN_IR_RF0N);
 80074d2:	4b44      	ldr	r3, [pc, #272]	; (80075e4 <FDCAN1_IT0_IRQHandler+0x124>)
 80074d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074d6:	4a43      	ldr	r2, [pc, #268]	; (80075e4 <FDCAN1_IT0_IRQHandler+0x124>)
 80074d8:	f043 0301 	orr.w	r3, r3, #1
 80074dc:	6513      	str	r3, [r2, #80]	; 0x50

		STRHAL_CAN_Receptor_t rec = _fdcans[STRHAL_FDCAN1].rxReceptors[0];
 80074de:	4b42      	ldr	r3, [pc, #264]	; (80075e8 <FDCAN1_IT0_IRQHandler+0x128>)
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	62fb      	str	r3, [r7, #44]	; 0x2c
		Can_Message_RAM *can_ram = _fdcans[STRHAL_FDCAN1].can_ram;
 80074e4:	4b40      	ldr	r3, [pc, #256]	; (80075e8 <FDCAN1_IT0_IRQHandler+0x128>)
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	62bb      	str	r3, [r7, #40]	; 0x28

		uint8_t i;
		uint32_t l;
		uint32_t id;

		i = ((FDCAN_RXF0S_F0GI_Msk & FDCAN1->RXF0S) >> FDCAN_RXF0S_F0GI_Pos);
 80074ea:	4b3e      	ldr	r3, [pc, #248]	; (80075e4 <FDCAN1_IT0_IRQHandler+0x124>)
 80074ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074f0:	0a1b      	lsrs	r3, r3, #8
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	f003 0303 	and.w	r3, r3, #3
 80074f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		Can_Rx_Element *rx_fifo = &can_ram->rx_fifo0[i];
 80074fc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007500:	4613      	mov	r3, r2
 8007502:	00db      	lsls	r3, r3, #3
 8007504:	4413      	add	r3, r2
 8007506:	00db      	lsls	r3, r3, #3
 8007508:	33b0      	adds	r3, #176	; 0xb0
 800750a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800750c:	4413      	add	r3, r2
 800750e:	623b      	str	r3, [r7, #32]

		id = rx_fifo->R0.bit.ID >> 18;
 8007510:	6a3b      	ldr	r3, [r7, #32]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f3c3 031c 	ubfx	r3, r3, #0, #29
 8007518:	149b      	asrs	r3, r3, #18
 800751a:	61fb      	str	r3, [r7, #28]
		l = Can_DlcToLength[rx_fifo->R1.bit.DLC];
 800751c:	6a3b      	ldr	r3, [r7, #32]
 800751e:	799b      	ldrb	r3, [r3, #6]
 8007520:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8007524:	b2db      	uxtb	r3, r3
 8007526:	461a      	mov	r2, r3
 8007528:	4b30      	ldr	r3, [pc, #192]	; (80075ec <FDCAN1_IT0_IRQHandler+0x12c>)
 800752a:	5c9b      	ldrb	r3, [r3, r2]
 800752c:	61bb      	str	r3, [r7, #24]

		if (rec != NULL)
 800752e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007530:	2b00      	cmp	r3, #0
 8007532:	d007      	beq.n	8007544 <FDCAN1_IT0_IRQHandler+0x84>
			rec(id, rx_fifo->data.byte, l - 2);
 8007534:	6a3b      	ldr	r3, [r7, #32]
 8007536:	f103 0108 	add.w	r1, r3, #8
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	1e9a      	subs	r2, r3, #2
 800753e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007540:	69f8      	ldr	r0, [r7, #28]
 8007542:	4798      	blx	r3

		FDCAN1->RXF0A = i & 0x7;
 8007544:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007548:	4a26      	ldr	r2, [pc, #152]	; (80075e4 <FDCAN1_IT0_IRQHandler+0x124>)
 800754a:	f003 0307 	and.w	r3, r3, #7
 800754e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	}
	if (FDCAN1->IR & FDCAN_IR_RF1N)
 8007552:	4b24      	ldr	r3, [pc, #144]	; (80075e4 <FDCAN1_IT0_IRQHandler+0x124>)
 8007554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007556:	f003 0308 	and.w	r3, r3, #8
 800755a:	2b00      	cmp	r3, #0
 800755c:	d03d      	beq.n	80075da <FDCAN1_IT0_IRQHandler+0x11a>
	{
		SET_BIT(FDCAN1->IR, FDCAN_IR_RF1N);
 800755e:	4b21      	ldr	r3, [pc, #132]	; (80075e4 <FDCAN1_IT0_IRQHandler+0x124>)
 8007560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007562:	4a20      	ldr	r2, [pc, #128]	; (80075e4 <FDCAN1_IT0_IRQHandler+0x124>)
 8007564:	f043 0308 	orr.w	r3, r3, #8
 8007568:	6513      	str	r3, [r2, #80]	; 0x50

		STRHAL_CAN_Receptor_t rec = _fdcans[STRHAL_FDCAN1].rxReceptors[1];
 800756a:	4b1f      	ldr	r3, [pc, #124]	; (80075e8 <FDCAN1_IT0_IRQHandler+0x128>)
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	617b      	str	r3, [r7, #20]
		Can_Message_RAM *can_ram = _fdcans[STRHAL_FDCAN1].can_ram;
 8007570:	4b1d      	ldr	r3, [pc, #116]	; (80075e8 <FDCAN1_IT0_IRQHandler+0x128>)
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	613b      	str	r3, [r7, #16]

		uint8_t i;
		uint32_t l;
		uint32_t id;

		i = ((FDCAN_RXF1S_F1GI_Msk & FDCAN1->RXF1S) >> FDCAN_RXF1S_F1GI_Pos);
 8007576:	4b1b      	ldr	r3, [pc, #108]	; (80075e4 <FDCAN1_IT0_IRQHandler+0x124>)
 8007578:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800757c:	0a1b      	lsrs	r3, r3, #8
 800757e:	b2db      	uxtb	r3, r3
 8007580:	f003 0303 	and.w	r3, r3, #3
 8007584:	73fb      	strb	r3, [r7, #15]

		Can_Rx_Element *rx_fifo = &can_ram->rx_fifo1[i];
 8007586:	7bfa      	ldrb	r2, [r7, #15]
 8007588:	4613      	mov	r3, r2
 800758a:	00db      	lsls	r3, r3, #3
 800758c:	4413      	add	r3, r2
 800758e:	00db      	lsls	r3, r3, #3
 8007590:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8007594:	693a      	ldr	r2, [r7, #16]
 8007596:	4413      	add	r3, r2
 8007598:	60bb      	str	r3, [r7, #8]

		id = rx_fifo->R0.bit.ID >> 18;
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f3c3 031c 	ubfx	r3, r3, #0, #29
 80075a2:	149b      	asrs	r3, r3, #18
 80075a4:	607b      	str	r3, [r7, #4]
		l = Can_DlcToLength[rx_fifo->R1.bit.DLC];
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	799b      	ldrb	r3, [r3, #6]
 80075aa:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	461a      	mov	r2, r3
 80075b2:	4b0e      	ldr	r3, [pc, #56]	; (80075ec <FDCAN1_IT0_IRQHandler+0x12c>)
 80075b4:	5c9b      	ldrb	r3, [r3, r2]
 80075b6:	603b      	str	r3, [r7, #0]

		//rec(id, rx_fifo->data.byte, l);
		if (rec != NULL)
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d007      	beq.n	80075ce <FDCAN1_IT0_IRQHandler+0x10e>
			rec(id, rx_fifo->data.byte, l - 2);
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	f103 0108 	add.w	r1, r3, #8
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	1e9a      	subs	r2, r3, #2
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	4798      	blx	r3
		FDCAN1->RXF1A = i & 0x7;
 80075ce:	7bfb      	ldrb	r3, [r7, #15]
 80075d0:	4a04      	ldr	r2, [pc, #16]	; (80075e4 <FDCAN1_IT0_IRQHandler+0x124>)
 80075d2:	f003 0307 	and.w	r3, r3, #7
 80075d6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	}
}
 80075da:	bf00      	nop
 80075dc:	3730      	adds	r7, #48	; 0x30
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop
 80075e4:	40006400 	.word	0x40006400
 80075e8:	20000004 	.word	0x20000004
 80075ec:	0800a590 	.word	0x0800a590

080075f0 <FDCAN2_IT0_IRQHandler>:

void FDCAN2_IT0_IRQHandler(void)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b08c      	sub	sp, #48	; 0x30
 80075f4:	af00      	add	r7, sp, #0
	if (FDCAN2->IR & FDCAN_IR_RF0N)
 80075f6:	4b47      	ldr	r3, [pc, #284]	; (8007714 <FDCAN2_IT0_IRQHandler+0x124>)
 80075f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075fa:	f003 0301 	and.w	r3, r3, #1
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d03f      	beq.n	8007682 <FDCAN2_IT0_IRQHandler+0x92>
	{
		CLEAR_BIT(FDCAN2->IR, FDCAN_IR_RF0N);
 8007602:	4b44      	ldr	r3, [pc, #272]	; (8007714 <FDCAN2_IT0_IRQHandler+0x124>)
 8007604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007606:	4a43      	ldr	r2, [pc, #268]	; (8007714 <FDCAN2_IT0_IRQHandler+0x124>)
 8007608:	f023 0301 	bic.w	r3, r3, #1
 800760c:	6513      	str	r3, [r2, #80]	; 0x50

		STRHAL_CAN_Receptor_t rec = _fdcans[STRHAL_FDCAN2].rxReceptors[0];
 800760e:	4b42      	ldr	r3, [pc, #264]	; (8007718 <FDCAN2_IT0_IRQHandler+0x128>)
 8007610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007612:	62fb      	str	r3, [r7, #44]	; 0x2c
		Can_Message_RAM *can_ram = _fdcans[STRHAL_FDCAN2].can_ram;
 8007614:	4b40      	ldr	r3, [pc, #256]	; (8007718 <FDCAN2_IT0_IRQHandler+0x128>)
 8007616:	69db      	ldr	r3, [r3, #28]
 8007618:	62bb      	str	r3, [r7, #40]	; 0x28

		uint8_t i;
		uint32_t l;
		uint32_t id;

		i = ((FDCAN_RXF0S_F0GI_Msk & FDCAN2->RXF0S) >> FDCAN_RXF0S_F0GI_Pos);
 800761a:	4b3e      	ldr	r3, [pc, #248]	; (8007714 <FDCAN2_IT0_IRQHandler+0x124>)
 800761c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007620:	0a1b      	lsrs	r3, r3, #8
 8007622:	b2db      	uxtb	r3, r3
 8007624:	f003 0303 	and.w	r3, r3, #3
 8007628:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		Can_Rx_Element *rx_fifo = &can_ram->rx_fifo0[i];
 800762c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007630:	4613      	mov	r3, r2
 8007632:	00db      	lsls	r3, r3, #3
 8007634:	4413      	add	r3, r2
 8007636:	00db      	lsls	r3, r3, #3
 8007638:	33b0      	adds	r3, #176	; 0xb0
 800763a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800763c:	4413      	add	r3, r2
 800763e:	623b      	str	r3, [r7, #32]

		id = rx_fifo->R0.bit.ID >> 18;
 8007640:	6a3b      	ldr	r3, [r7, #32]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f3c3 031c 	ubfx	r3, r3, #0, #29
 8007648:	149b      	asrs	r3, r3, #18
 800764a:	61fb      	str	r3, [r7, #28]
		l = Can_DlcToLength[rx_fifo->R1.bit.DLC];
 800764c:	6a3b      	ldr	r3, [r7, #32]
 800764e:	799b      	ldrb	r3, [r3, #6]
 8007650:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8007654:	b2db      	uxtb	r3, r3
 8007656:	461a      	mov	r2, r3
 8007658:	4b30      	ldr	r3, [pc, #192]	; (800771c <FDCAN2_IT0_IRQHandler+0x12c>)
 800765a:	5c9b      	ldrb	r3, [r3, r2]
 800765c:	61bb      	str	r3, [r7, #24]

		//rec(id, rx_fifo->data.byte, l);
		if (rec != NULL)
 800765e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007660:	2b00      	cmp	r3, #0
 8007662:	d007      	beq.n	8007674 <FDCAN2_IT0_IRQHandler+0x84>
			rec(id, rx_fifo->data.byte, l - 2);
 8007664:	6a3b      	ldr	r3, [r7, #32]
 8007666:	f103 0108 	add.w	r1, r3, #8
 800766a:	69bb      	ldr	r3, [r7, #24]
 800766c:	1e9a      	subs	r2, r3, #2
 800766e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007670:	69f8      	ldr	r0, [r7, #28]
 8007672:	4798      	blx	r3

		FDCAN2->RXF0A = i & 0x7;
 8007674:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007678:	4a26      	ldr	r2, [pc, #152]	; (8007714 <FDCAN2_IT0_IRQHandler+0x124>)
 800767a:	f003 0307 	and.w	r3, r3, #7
 800767e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

	}
	if (FDCAN2->IR & FDCAN_IR_RF1N)
 8007682:	4b24      	ldr	r3, [pc, #144]	; (8007714 <FDCAN2_IT0_IRQHandler+0x124>)
 8007684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007686:	f003 0308 	and.w	r3, r3, #8
 800768a:	2b00      	cmp	r3, #0
 800768c:	d03d      	beq.n	800770a <FDCAN2_IT0_IRQHandler+0x11a>
	{
		CLEAR_BIT(FDCAN2->IR, FDCAN_IR_RF1N);
 800768e:	4b21      	ldr	r3, [pc, #132]	; (8007714 <FDCAN2_IT0_IRQHandler+0x124>)
 8007690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007692:	4a20      	ldr	r2, [pc, #128]	; (8007714 <FDCAN2_IT0_IRQHandler+0x124>)
 8007694:	f023 0308 	bic.w	r3, r3, #8
 8007698:	6513      	str	r3, [r2, #80]	; 0x50

		STRHAL_CAN_Receptor_t rec = _fdcans[STRHAL_FDCAN2].rxReceptors[1];
 800769a:	4b1f      	ldr	r3, [pc, #124]	; (8007718 <FDCAN2_IT0_IRQHandler+0x128>)
 800769c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800769e:	617b      	str	r3, [r7, #20]
		Can_Message_RAM *can_ram = _fdcans[STRHAL_FDCAN2].can_ram;
 80076a0:	4b1d      	ldr	r3, [pc, #116]	; (8007718 <FDCAN2_IT0_IRQHandler+0x128>)
 80076a2:	69db      	ldr	r3, [r3, #28]
 80076a4:	613b      	str	r3, [r7, #16]

		uint8_t i;
		uint32_t l;
		uint32_t id;

		i = ((FDCAN_RXF1S_F1GI_Msk & FDCAN2->RXF1S) >> FDCAN_RXF1S_F1GI_Pos);
 80076a6:	4b1b      	ldr	r3, [pc, #108]	; (8007714 <FDCAN2_IT0_IRQHandler+0x124>)
 80076a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80076ac:	0a1b      	lsrs	r3, r3, #8
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	f003 0303 	and.w	r3, r3, #3
 80076b4:	73fb      	strb	r3, [r7, #15]

		Can_Rx_Element *rx_fifo = &can_ram->rx_fifo1[i];
 80076b6:	7bfa      	ldrb	r2, [r7, #15]
 80076b8:	4613      	mov	r3, r2
 80076ba:	00db      	lsls	r3, r3, #3
 80076bc:	4413      	add	r3, r2
 80076be:	00db      	lsls	r3, r3, #3
 80076c0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80076c4:	693a      	ldr	r2, [r7, #16]
 80076c6:	4413      	add	r3, r2
 80076c8:	60bb      	str	r3, [r7, #8]

		id = rx_fifo->R0.bit.ID >> 18;
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f3c3 031c 	ubfx	r3, r3, #0, #29
 80076d2:	149b      	asrs	r3, r3, #18
 80076d4:	607b      	str	r3, [r7, #4]
		l = Can_DlcToLength[rx_fifo->R1.bit.DLC];
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	799b      	ldrb	r3, [r3, #6]
 80076da:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	461a      	mov	r2, r3
 80076e2:	4b0e      	ldr	r3, [pc, #56]	; (800771c <FDCAN2_IT0_IRQHandler+0x12c>)
 80076e4:	5c9b      	ldrb	r3, [r3, r2]
 80076e6:	603b      	str	r3, [r7, #0]

		//rec(id, rx_fifo->data.byte, l);
		if (rec != NULL)
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d007      	beq.n	80076fe <FDCAN2_IT0_IRQHandler+0x10e>
			rec(id, rx_fifo->data.byte, l - 2);
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	f103 0108 	add.w	r1, r3, #8
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	1e9a      	subs	r2, r3, #2
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	4798      	blx	r3
		FDCAN2->RXF1A = i & 0x7;
 80076fe:	7bfb      	ldrb	r3, [r7, #15]
 8007700:	4a04      	ldr	r2, [pc, #16]	; (8007714 <FDCAN2_IT0_IRQHandler+0x124>)
 8007702:	f003 0307 	and.w	r3, r3, #7
 8007706:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	}
}
 800770a:	bf00      	nop
 800770c:	3730      	adds	r7, #48	; 0x30
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	40006800 	.word	0x40006800
 8007718:	20000004 	.word	0x20000004
 800771c:	0800a590 	.word	0x0800a590

08007720 <STRHAL_Clock_Init>:
#include <STRHAL_Clock.h>

void STRHAL_Clock_Init()
{
 8007720:	b480      	push	{r7}
 8007722:	af00      	add	r7, sp, #0

}
 8007724:	bf00      	nop
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr

0800772e <LL_GPIO_ReadOutputPort>:
{
 800772e:	b480      	push	{r7}
 8007730:	b083      	sub	sp, #12
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	695b      	ldr	r3, [r3, #20]
}
 800773a:	4618      	mov	r0, r3
 800773c:	370c      	adds	r7, #12
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr

08007746 <LL_GPIO_SetOutputPin>:
{
 8007746:	b480      	push	{r7}
 8007748:	b083      	sub	sp, #12
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
 800774e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	683a      	ldr	r2, [r7, #0]
 8007754:	619a      	str	r2, [r3, #24]
}
 8007756:	bf00      	nop
 8007758:	370c      	adds	r7, #12
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr

08007762 <LL_GPIO_ResetOutputPin>:
{
 8007762:	b480      	push	{r7}
 8007764:	b083      	sub	sp, #12
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
 800776a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	683a      	ldr	r2, [r7, #0]
 8007770:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007772:	bf00      	nop
 8007774:	370c      	adds	r7, #12
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
	...

08007780 <LL_AHB2_GRP1_EnableClock>:
{
 8007780:	b480      	push	{r7}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007788:	4b08      	ldr	r3, [pc, #32]	; (80077ac <LL_AHB2_GRP1_EnableClock+0x2c>)
 800778a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800778c:	4907      	ldr	r1, [pc, #28]	; (80077ac <LL_AHB2_GRP1_EnableClock+0x2c>)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4313      	orrs	r3, r2
 8007792:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007794:	4b05      	ldr	r3, [pc, #20]	; (80077ac <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007796:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4013      	ands	r3, r2
 800779c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800779e:	68fb      	ldr	r3, [r7, #12]
}
 80077a0:	bf00      	nop
 80077a2:	3714      	adds	r7, #20
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr
 80077ac:	40021000 	.word	0x40021000

080077b0 <STRHAL_GPIO_Init>:
#include <stm32g4xx_ll_gpio.h>
#include <stm32g4xx_ll_rcc.h>
#include <STRHAL_GPIO.h>

void STRHAL_GPIO_Init()
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	af00      	add	r7, sp, #0
	/* GPIO Ports Clock Enable */
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80077b4:	2001      	movs	r0, #1
 80077b6:	f7ff ffe3 	bl	8007780 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80077ba:	2002      	movs	r0, #2
 80077bc:	f7ff ffe0 	bl	8007780 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80077c0:	2004      	movs	r0, #4
 80077c2:	f7ff ffdd 	bl	8007780 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 80077c6:	2008      	movs	r0, #8
 80077c8:	f7ff ffda 	bl	8007780 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 80077cc:	2010      	movs	r0, #16
 80077ce:	f7ff ffd7 	bl	8007780 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 80077d2:	2020      	movs	r0, #32
 80077d4:	f7ff ffd4 	bl	8007780 <LL_AHB2_GRP1_EnableClock>
}
 80077d8:	bf00      	nop
 80077da:	bd80      	pop	{r7, pc}

080077dc <STRHAL_GPIO_SingleInit>:

// requires the type parameter and the gpio type to be the same TODO: find a better way to enforce that!
void STRHAL_GPIO_SingleInit(const STRHAL_GPIO_t *gpio, STRHAL_GPIO_Type_t type)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b088      	sub	sp, #32
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	460b      	mov	r3, r1
 80077e6:	70fb      	strb	r3, [r7, #3]
	if (gpio->pin > 0x1F)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	791b      	ldrb	r3, [r3, #4]
 80077ec:	2b1f      	cmp	r3, #31
 80077ee:	d84d      	bhi.n	800788c <STRHAL_GPIO_SingleInit+0xb0>
		return;

	LL_GPIO_InitTypeDef GPIO_InitStruct =
 80077f0:	f107 0308 	add.w	r3, r7, #8
 80077f4:	2200      	movs	r2, #0
 80077f6:	601a      	str	r2, [r3, #0]
 80077f8:	605a      	str	r2, [r3, #4]
 80077fa:	609a      	str	r2, [r3, #8]
 80077fc:	60da      	str	r2, [r3, #12]
 80077fe:	611a      	str	r2, [r3, #16]
 8007800:	615a      	str	r2, [r3, #20]
	{ 0 };

	LL_GPIO_ResetOutputPin(gpio->port, (1 << gpio->pin));
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	791b      	ldrb	r3, [r3, #4]
 800780a:	4619      	mov	r1, r3
 800780c:	2301      	movs	r3, #1
 800780e:	408b      	lsls	r3, r1
 8007810:	4619      	mov	r1, r3
 8007812:	4610      	mov	r0, r2
 8007814:	f7ff ffa5 	bl	8007762 <LL_GPIO_ResetOutputPin>

	GPIO_InitStruct.Pin = (1 << gpio->pin);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	791b      	ldrb	r3, [r3, #4]
 800781c:	461a      	mov	r2, r3
 800781e:	2301      	movs	r3, #1
 8007820:	4093      	lsls	r3, r2
 8007822:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8007824:	2302      	movs	r3, #2
 8007826:	613b      	str	r3, [r7, #16]
	switch (type)
 8007828:	78fb      	ldrb	r3, [r7, #3]
 800782a:	2b04      	cmp	r3, #4
 800782c:	d825      	bhi.n	800787a <STRHAL_GPIO_SingleInit+0x9e>
 800782e:	a201      	add	r2, pc, #4	; (adr r2, 8007834 <STRHAL_GPIO_SingleInit+0x58>)
 8007830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007834:	08007849 	.word	0x08007849
 8007838:	08007853 	.word	0x08007853
 800783c:	0800785d 	.word	0x0800785d
 8007840:	08007867 	.word	0x08007867
 8007844:	08007871 	.word	0x08007871
	{
		case STRHAL_GPIO_TYPE_OPP:
			GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007848:	2301      	movs	r3, #1
 800784a:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800784c:	2300      	movs	r3, #0
 800784e:	617b      	str	r3, [r7, #20]
			break;
 8007850:	e013      	b.n	800787a <STRHAL_GPIO_SingleInit+0x9e>

		case STRHAL_GPIO_TYPE_OOD:
			GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007852:	2301      	movs	r3, #1
 8007854:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8007856:	2301      	movs	r3, #1
 8007858:	617b      	str	r3, [r7, #20]
			break;
 800785a:	e00e      	b.n	800787a <STRHAL_GPIO_SingleInit+0x9e>

		case STRHAL_GPIO_TYPE_IHZ:
			GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800785c:	2300      	movs	r3, #0
 800785e:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007860:	2300      	movs	r3, #0
 8007862:	61bb      	str	r3, [r7, #24]
			break;
 8007864:	e009      	b.n	800787a <STRHAL_GPIO_SingleInit+0x9e>

		case STRHAL_GPIO_TYPE_IPU:
			GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8007866:	2300      	movs	r3, #0
 8007868:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800786a:	2301      	movs	r3, #1
 800786c:	61bb      	str	r3, [r7, #24]
			break;
 800786e:	e004      	b.n	800787a <STRHAL_GPIO_SingleInit+0x9e>

		case STRHAL_GPIO_TYPE_IPD:
			GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8007870:	2300      	movs	r3, #0
 8007872:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8007874:	2302      	movs	r3, #2
 8007876:	61bb      	str	r3, [r7, #24]
			break;
 8007878:	bf00      	nop
	}
	LL_GPIO_Init(gpio->port, &GPIO_InitStruct);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f107 0208 	add.w	r2, r7, #8
 8007882:	4611      	mov	r1, r2
 8007884:	4618      	mov	r0, r3
 8007886:	f7fc fd62 	bl	800434e <LL_GPIO_Init>
 800788a:	e000      	b.n	800788e <STRHAL_GPIO_SingleInit+0xb2>
		return;
 800788c:	bf00      	nop
	//gpio->type = type;
}
 800788e:	3720      	adds	r7, #32
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <STRHAL_GPIO_Write>:
		STRHAL_GPIO_SingleInit(&gpios->gpios[i], type);
	}
}

inline void STRHAL_GPIO_Write(const STRHAL_GPIO_t *gpio, STRHAL_GPIO_Value_t value)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	460b      	mov	r3, r1
 800789e:	70fb      	strb	r3, [r7, #3]
	if (gpio->pin > 0x1F)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	791b      	ldrb	r3, [r3, #4]
 80078a4:	2b1f      	cmp	r3, #31
 80078a6:	d81a      	bhi.n	80078de <STRHAL_GPIO_Write+0x4a>
		return;

	if (value == STRHAL_GPIO_VALUE_H)
 80078a8:	78fb      	ldrb	r3, [r7, #3]
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d10b      	bne.n	80078c6 <STRHAL_GPIO_Write+0x32>
	{
		LL_GPIO_SetOutputPin(gpio->port, (1 << gpio->pin));
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	791b      	ldrb	r3, [r3, #4]
 80078b6:	4619      	mov	r1, r3
 80078b8:	2301      	movs	r3, #1
 80078ba:	408b      	lsls	r3, r1
 80078bc:	4619      	mov	r1, r3
 80078be:	4610      	mov	r0, r2
 80078c0:	f7ff ff41 	bl	8007746 <LL_GPIO_SetOutputPin>
 80078c4:	e00c      	b.n	80078e0 <STRHAL_GPIO_Write+0x4c>
	}
	else
	{
		LL_GPIO_ResetOutputPin(gpio->port, (1 << gpio->pin));
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	791b      	ldrb	r3, [r3, #4]
 80078ce:	4619      	mov	r1, r3
 80078d0:	2301      	movs	r3, #1
 80078d2:	408b      	lsls	r3, r1
 80078d4:	4619      	mov	r1, r3
 80078d6:	4610      	mov	r0, r2
 80078d8:	f7ff ff43 	bl	8007762 <LL_GPIO_ResetOutputPin>
 80078dc:	e000      	b.n	80078e0 <STRHAL_GPIO_Write+0x4c>
		return;
 80078de:	bf00      	nop
	}

}
 80078e0:	3708      	adds	r7, #8
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}

080078e6 <STRHAL_GPIO_ReadOutput>:

	return (LL_GPIO_ReadInputPort(gpio->port) & (1 << gpio->pin)) ? 1 : 0;
}

STRHAL_GPIO_Value_t STRHAL_GPIO_ReadOutput(const STRHAL_GPIO_t *gpio)
{
 80078e6:	b580      	push	{r7, lr}
 80078e8:	b082      	sub	sp, #8
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
	if (gpio->pin > 0x1F)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	791b      	ldrb	r3, [r3, #4]
 80078f2:	2b1f      	cmp	r3, #31
 80078f4:	d901      	bls.n	80078fa <STRHAL_GPIO_ReadOutput+0x14>
		return STRHAL_GPIO_VALUE_L;
 80078f6:	2300      	movs	r3, #0
 80078f8:	e010      	b.n	800791c <STRHAL_GPIO_ReadOutput+0x36>

	return (LL_GPIO_ReadOutputPort(gpio->port) & (1 << gpio->pin)) ? 1 : 0;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4618      	mov	r0, r3
 8007900:	f7ff ff15 	bl	800772e <LL_GPIO_ReadOutputPort>
 8007904:	4602      	mov	r2, r0
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	791b      	ldrb	r3, [r3, #4]
 800790a:	4619      	mov	r1, r3
 800790c:	2301      	movs	r3, #1
 800790e:	408b      	lsls	r3, r1
 8007910:	4013      	ands	r3, r2
 8007912:	2b00      	cmp	r3, #0
 8007914:	bf14      	ite	ne
 8007916:	2301      	movne	r3, #1
 8007918:	2300      	moveq	r3, #0
 800791a:	b2db      	uxtb	r3, r3
}
 800791c:	4618      	mov	r0, r3
 800791e:	3708      	adds	r7, #8
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <LL_AHB2_GRP1_EnableClock>:
{
 8007924:	b480      	push	{r7}
 8007926:	b085      	sub	sp, #20
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800792c:	4b08      	ldr	r3, [pc, #32]	; (8007950 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800792e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007930:	4907      	ldr	r1, [pc, #28]	; (8007950 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4313      	orrs	r3, r2
 8007936:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007938:	4b05      	ldr	r3, [pc, #20]	; (8007950 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800793a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	4013      	ands	r3, r2
 8007940:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007942:	68fb      	ldr	r3, [r7, #12]
}
 8007944:	bf00      	nop
 8007946:	3714      	adds	r7, #20
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr
 8007950:	40021000 	.word	0x40021000

08007954 <LL_APB2_GRP1_EnableClock>:
{
 8007954:	b480      	push	{r7}
 8007956:	b085      	sub	sp, #20
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800795c:	4b08      	ldr	r3, [pc, #32]	; (8007980 <LL_APB2_GRP1_EnableClock+0x2c>)
 800795e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007960:	4907      	ldr	r1, [pc, #28]	; (8007980 <LL_APB2_GRP1_EnableClock+0x2c>)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4313      	orrs	r3, r2
 8007966:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8007968:	4b05      	ldr	r3, [pc, #20]	; (8007980 <LL_APB2_GRP1_EnableClock+0x2c>)
 800796a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4013      	ands	r3, r2
 8007970:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007972:	68fb      	ldr	r3, [r7, #12]
}
 8007974:	bf00      	nop
 8007976:	3714      	adds	r7, #20
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr
 8007980:	40021000 	.word	0x40021000

08007984 <LL_GPIO_SetPinMode>:
{
 8007984:	b480      	push	{r7}
 8007986:	b08b      	sub	sp, #44	; 0x2c
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	fa93 f3a3 	rbit	r3, r3
 800799e:	613b      	str	r3, [r7, #16]
  return result;
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d101      	bne.n	80079ae <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80079aa:	2320      	movs	r3, #32
 80079ac:	e003      	b.n	80079b6 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	fab3 f383 	clz	r3, r3
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	005b      	lsls	r3, r3, #1
 80079b8:	2103      	movs	r1, #3
 80079ba:	fa01 f303 	lsl.w	r3, r1, r3
 80079be:	43db      	mvns	r3, r3
 80079c0:	401a      	ands	r2, r3
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079c6:	6a3b      	ldr	r3, [r7, #32]
 80079c8:	fa93 f3a3 	rbit	r3, r3
 80079cc:	61fb      	str	r3, [r7, #28]
  return result;
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80079d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d101      	bne.n	80079dc <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80079d8:	2320      	movs	r3, #32
 80079da:	e003      	b.n	80079e4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80079dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079de:	fab3 f383 	clz	r3, r3
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	005b      	lsls	r3, r3, #1
 80079e6:	6879      	ldr	r1, [r7, #4]
 80079e8:	fa01 f303 	lsl.w	r3, r1, r3
 80079ec:	431a      	orrs	r2, r3
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	601a      	str	r2, [r3, #0]
}
 80079f2:	bf00      	nop
 80079f4:	372c      	adds	r7, #44	; 0x2c
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr

080079fe <LL_OPAMP_SetFunctionalMode>:
  *         @arg @ref LL_OPAMP_MODE_PGA_IO0_BIAS
  *         @arg @ref LL_OPAMP_MODE_PGA_IO0_IO1_BIAS
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_SetFunctionalMode(OPAMP_TypeDef *OPAMPx, uint32_t FunctionalMode)
{
 80079fe:	b480      	push	{r7}
 8007a00:	b083      	sub	sp, #12
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
 8007a06:	6039      	str	r1, [r7, #0]
  /* Note: Bit OPAMP_CSR_CALON reset to ensure to be in functional mode */
  MODIFY_REG(OPAMPx->CSR, OPAMP_CSR_PGGAIN_4 | OPAMP_CSR_PGGAIN_3 | OPAMP_CSR_VMSEL | OPAMP_CSR_CALON, FunctionalMode);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f423 23c1 	bic.w	r3, r3, #395264	; 0x60800
 8007a10:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8007a14:	683a      	ldr	r2, [r7, #0]
 8007a16:	431a      	orrs	r2, r3
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	601a      	str	r2, [r3, #0]
}
 8007a1c:	bf00      	nop
 8007a1e:	370c      	adds	r7, #12
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <LL_OPAMP_SetPGAGain>:
  *         @arg @ref LL_OPAMP_PGA_GAIN_32_OR_MINUS_31
  *         @arg @ref LL_OPAMP_PGA_GAIN_64_OR_MINUS_63
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_SetPGAGain(OPAMP_TypeDef *OPAMPx, uint32_t PGAGain)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b083      	sub	sp, #12
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(OPAMPx->CSR, OPAMP_CSR_PGGAIN_2 | OPAMP_CSR_PGGAIN_1 | OPAMP_CSR_PGGAIN_0, PGAGain);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f423 32e0 	bic.w	r2, r3, #114688	; 0x1c000
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	431a      	orrs	r2, r3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	601a      	str	r2, [r3, #0]
}
 8007a42:	bf00      	nop
 8007a44:	370c      	adds	r7, #12
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr

08007a4e <LL_OPAMP_SetInputNonInverting>:
  *         @arg @ref LL_OPAMP_INPUT_NONINVERT_IO3
  *         @arg @ref LL_OPAMP_INPUT_NONINVERT_DAC
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_SetInputNonInverting(OPAMP_TypeDef *OPAMPx, uint32_t InputNonInverting)
{
 8007a4e:	b480      	push	{r7}
 8007a50:	b083      	sub	sp, #12
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
 8007a56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(OPAMPx->CSR, OPAMP_CSR_VPSEL, InputNonInverting);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f023 020c 	bic.w	r2, r3, #12
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	431a      	orrs	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	601a      	str	r2, [r3, #0]
}
 8007a68:	bf00      	nop
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <LL_OPAMP_SetInputInverting>:
  *         @arg @ref LL_OPAMP_INPUT_INVERT_IO1
  *         @arg @ref LL_OPAMP_INPUT_INVERT_CONNECT_NO
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_SetInputInverting(OPAMP_TypeDef *OPAMPx, uint32_t InputInverting)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  /* Manage cases of OPAMP inverting input not connected (0x10 and 0x11)      */
  /* to not modify OPAMP mode follower or PGA.                                */
  /* Bit OPAMP_CSR_VMSEL_1 is set by OPAMP mode (follower, PGA). */
  MODIFY_REG(OPAMPx->CSR, (~(InputInverting >> 1)) & OPAMP_CSR_VMSEL_0, InputInverting);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	085b      	lsrs	r3, r3, #1
 8007a86:	43db      	mvns	r3, r3
 8007a88:	f003 0320 	and.w	r3, r3, #32
 8007a8c:	43db      	mvns	r3, r3
 8007a8e:	401a      	ands	r2, r3
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	431a      	orrs	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	601a      	str	r2, [r3, #0]
}
 8007a98:	bf00      	nop
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <LL_OPAMP_SetInternalOutput>:
  *         @arg @ref LL_OPAMP_INTERNAL_OUPUT_DISABLED
  *         @arg @ref LL_OPAMP_INTERNAL_OUPUT_ENABLED
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_SetInternalOutput(OPAMP_TypeDef *OPAMPx, uint32_t InternalOutput)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(OPAMPx->CSR, OPAMP_CSR_OPAMPINTEN, InternalOutput);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	431a      	orrs	r2, r3
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	601a      	str	r2, [r3, #0]
}
 8007abe:	bf00      	nop
 8007ac0:	370c      	adds	r7, #12
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr

08007aca <LL_OPAMP_Enable>:
  * @rmtoll CSR      OPAMPXEN       LL_OPAMP_Enable
  * @param  OPAMPx OPAMP instance
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_Enable(OPAMP_TypeDef *OPAMPx)
{
 8007aca:	b480      	push	{r7}
 8007acc:	b083      	sub	sp, #12
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
  SET_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f043 0201 	orr.w	r2, r3, #1
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	601a      	str	r2, [r3, #0]
}
 8007ade:	bf00      	nop
 8007ae0:	370c      	adds	r7, #12
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr

08007aea <LL_OPAMP_IsEnabled>:
  * @rmtoll CSR      OPAMPXEN       LL_OPAMP_IsEnabled
  * @param  OPAMPx OPAMP instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_OPAMP_IsEnabled(OPAMP_TypeDef *OPAMPx)
{
 8007aea:	b480      	push	{r7}
 8007aec:	b083      	sub	sp, #12
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN) == (OPAMP_CSR_OPAMPxEN)) ? 1UL : 0UL);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f003 0301 	and.w	r3, r3, #1
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d101      	bne.n	8007b02 <LL_OPAMP_IsEnabled+0x18>
 8007afe:	2301      	movs	r3, #1
 8007b00:	e000      	b.n	8007b04 <LL_OPAMP_IsEnabled+0x1a>
 8007b02:	2300      	movs	r3, #0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <STRHAL_OPAMP_Init>:
#include <STRHAL_OPAMP.h>

void STRHAL_OPAMP_Init()
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	af00      	add	r7, sp, #0

	// GPIO init
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8007b14:	2004      	movs	r0, #4
 8007b16:	f7ff ff05 	bl	8007924 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8007b1a:	2020      	movs	r0, #32
 8007b1c:	f7ff ff02 	bl	8007924 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8007b20:	2001      	movs	r0, #1
 8007b22:	f7ff feff 	bl	8007924 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8007b26:	2002      	movs	r0, #2
 8007b28:	f7ff fefc 	bl	8007924 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 8007b2c:	2010      	movs	r0, #16
 8007b2e:	f7ff fef9 	bl	8007924 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 8007b32:	2008      	movs	r0, #8
 8007b34:	f7ff fef6 	bl	8007924 <LL_AHB2_GRP1_EnableClock>

	LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_7, LL_GPIO_MODE_ANALOG);
 8007b38:	2203      	movs	r2, #3
 8007b3a:	2180      	movs	r1, #128	; 0x80
 8007b3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007b40:	f7ff ff20 	bl	8007984 <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_0, LL_GPIO_MODE_ANALOG);
 8007b44:	2203      	movs	r2, #3
 8007b46:	2101      	movs	r1, #1
 8007b48:	4819      	ldr	r0, [pc, #100]	; (8007bb0 <STRHAL_OPAMP_Init+0xa0>)
 8007b4a:	f7ff ff1b 	bl	8007984 <LL_GPIO_SetPinMode>

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8007b4e:	2001      	movs	r0, #1
 8007b50:	f7ff ff00 	bl	8007954 <LL_APB2_GRP1_EnableClock>

	LL_OPAMP_SetFunctionalMode(OPAMP2, LL_OPAMP_MODE_PGA);
 8007b54:	2140      	movs	r1, #64	; 0x40
 8007b56:	4817      	ldr	r0, [pc, #92]	; (8007bb4 <STRHAL_OPAMP_Init+0xa4>)
 8007b58:	f7ff ff51 	bl	80079fe <LL_OPAMP_SetFunctionalMode>
	LL_OPAMP_SetPGAGain(OPAMP2, LL_OPAMP_PGA_GAIN_32_OR_MINUS_31);
 8007b5c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8007b60:	4814      	ldr	r0, [pc, #80]	; (8007bb4 <STRHAL_OPAMP_Init+0xa4>)
 8007b62:	f7ff ff61 	bl	8007a28 <LL_OPAMP_SetPGAGain>
	LL_OPAMP_SetInputNonInverting(OPAMP2, LL_OPAMP_INPUT_NONINVERT_IO0);
 8007b66:	2100      	movs	r1, #0
 8007b68:	4812      	ldr	r0, [pc, #72]	; (8007bb4 <STRHAL_OPAMP_Init+0xa4>)
 8007b6a:	f7ff ff70 	bl	8007a4e <LL_OPAMP_SetInputNonInverting>
	LL_OPAMP_SetInputInverting(OPAMP2, LL_OPAMP_INPUT_INVERT_CONNECT_NO);
 8007b6e:	2140      	movs	r1, #64	; 0x40
 8007b70:	4810      	ldr	r0, [pc, #64]	; (8007bb4 <STRHAL_OPAMP_Init+0xa4>)
 8007b72:	f7ff ff7f 	bl	8007a74 <LL_OPAMP_SetInputInverting>
	LL_OPAMP_SetInternalOutput(OPAMP2, LL_OPAMP_INTERNAL_OUPUT_ENABLED);
 8007b76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007b7a:	480e      	ldr	r0, [pc, #56]	; (8007bb4 <STRHAL_OPAMP_Init+0xa4>)
 8007b7c:	f7ff ff92 	bl	8007aa4 <LL_OPAMP_SetInternalOutput>
	LL_OPAMP_SetFunctionalMode(OPAMP3, LL_OPAMP_MODE_PGA);
 8007b80:	2140      	movs	r1, #64	; 0x40
 8007b82:	480d      	ldr	r0, [pc, #52]	; (8007bb8 <STRHAL_OPAMP_Init+0xa8>)
 8007b84:	f7ff ff3b 	bl	80079fe <LL_OPAMP_SetFunctionalMode>
	LL_OPAMP_SetPGAGain(OPAMP3, LL_OPAMP_PGA_GAIN_32_OR_MINUS_31);
 8007b88:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8007b8c:	480a      	ldr	r0, [pc, #40]	; (8007bb8 <STRHAL_OPAMP_Init+0xa8>)
 8007b8e:	f7ff ff4b 	bl	8007a28 <LL_OPAMP_SetPGAGain>
	LL_OPAMP_SetInputNonInverting(OPAMP3, LL_OPAMP_INPUT_NONINVERT_IO0);
 8007b92:	2100      	movs	r1, #0
 8007b94:	4808      	ldr	r0, [pc, #32]	; (8007bb8 <STRHAL_OPAMP_Init+0xa8>)
 8007b96:	f7ff ff5a 	bl	8007a4e <LL_OPAMP_SetInputNonInverting>
	LL_OPAMP_SetInputInverting(OPAMP3, LL_OPAMP_INPUT_INVERT_CONNECT_NO);
 8007b9a:	2140      	movs	r1, #64	; 0x40
 8007b9c:	4806      	ldr	r0, [pc, #24]	; (8007bb8 <STRHAL_OPAMP_Init+0xa8>)
 8007b9e:	f7ff ff69 	bl	8007a74 <LL_OPAMP_SetInputInverting>
	LL_OPAMP_SetInternalOutput(OPAMP3, LL_OPAMP_INTERNAL_OUPUT_ENABLED);
 8007ba2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007ba6:	4804      	ldr	r0, [pc, #16]	; (8007bb8 <STRHAL_OPAMP_Init+0xa8>)
 8007ba8:	f7ff ff7c 	bl	8007aa4 <LL_OPAMP_SetInternalOutput>
}
 8007bac:	bf00      	nop
 8007bae:	bd80      	pop	{r7, pc}
 8007bb0:	48000400 	.word	0x48000400
 8007bb4:	40010304 	.word	0x40010304
 8007bb8:	40010308 	.word	0x40010308

08007bbc <STRHAL_OPAMP_Run>:

void STRHAL_OPAMP_Run()
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	af00      	add	r7, sp, #0
	LL_OPAMP_Enable(OPAMP2);
 8007bc0:	480b      	ldr	r0, [pc, #44]	; (8007bf0 <STRHAL_OPAMP_Run+0x34>)
 8007bc2:	f7ff ff82 	bl	8007aca <LL_OPAMP_Enable>
	while (!LL_OPAMP_IsEnabled(OPAMP2));
 8007bc6:	bf00      	nop
 8007bc8:	4809      	ldr	r0, [pc, #36]	; (8007bf0 <STRHAL_OPAMP_Run+0x34>)
 8007bca:	f7ff ff8e 	bl	8007aea <LL_OPAMP_IsEnabled>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d0f9      	beq.n	8007bc8 <STRHAL_OPAMP_Run+0xc>
	LL_OPAMP_Enable(OPAMP3);
 8007bd4:	4807      	ldr	r0, [pc, #28]	; (8007bf4 <STRHAL_OPAMP_Run+0x38>)
 8007bd6:	f7ff ff78 	bl	8007aca <LL_OPAMP_Enable>
	while (!LL_OPAMP_IsEnabled(OPAMP3));
 8007bda:	bf00      	nop
 8007bdc:	4805      	ldr	r0, [pc, #20]	; (8007bf4 <STRHAL_OPAMP_Run+0x38>)
 8007bde:	f7ff ff84 	bl	8007aea <LL_OPAMP_IsEnabled>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d0f9      	beq.n	8007bdc <STRHAL_OPAMP_Run+0x20>
}
 8007be8:	bf00      	nop
 8007bea:	bf00      	nop
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	40010304 	.word	0x40010304
 8007bf4:	40010308 	.word	0x40010308

08007bf8 <LL_AHB2_GRP1_EnableClock>:
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b085      	sub	sp, #20
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007c00:	4b08      	ldr	r3, [pc, #32]	; (8007c24 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007c02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c04:	4907      	ldr	r1, [pc, #28]	; (8007c24 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007c0c:	4b05      	ldr	r3, [pc, #20]	; (8007c24 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007c0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	4013      	ands	r3, r2
 8007c14:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007c16:	68fb      	ldr	r3, [r7, #12]
}
 8007c18:	bf00      	nop
 8007c1a:	3714      	adds	r7, #20
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr
 8007c24:	40021000 	.word	0x40021000

08007c28 <LL_AHB3_GRP1_EnableClock>:
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8007c30:	4b08      	ldr	r3, [pc, #32]	; (8007c54 <LL_AHB3_GRP1_EnableClock+0x2c>)
 8007c32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007c34:	4907      	ldr	r1, [pc, #28]	; (8007c54 <LL_AHB3_GRP1_EnableClock+0x2c>)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8007c3c:	4b05      	ldr	r3, [pc, #20]	; (8007c54 <LL_AHB3_GRP1_EnableClock+0x2c>)
 8007c3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	4013      	ands	r3, r2
 8007c44:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007c46:	68fb      	ldr	r3, [r7, #12]
}
 8007c48:	bf00      	nop
 8007c4a:	3714      	adds	r7, #20
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr
 8007c54:	40021000 	.word	0x40021000

08007c58 <_init_GPIO>:
static inline int _wait_for_status(uint32_t flag, uint16_t tot);
static inline int _wait_for_status_clear(uint32_t flag, uint16_t);
static inline void _clear_status(uint32_t flags);

static void _init_GPIO()
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b086      	sub	sp, #24
 8007c5c:	af00      	add	r7, sp, #0
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 8007c5e:	2010      	movs	r0, #16
 8007c60:	f7ff ffca 	bl	8007bf8 <LL_AHB2_GRP1_EnableClock>

	LL_GPIO_InitTypeDef GPIO_InitStruct =
 8007c64:	463b      	mov	r3, r7
 8007c66:	2200      	movs	r2, #0
 8007c68:	601a      	str	r2, [r3, #0]
 8007c6a:	605a      	str	r2, [r3, #4]
 8007c6c:	609a      	str	r2, [r3, #8]
 8007c6e:	60da      	str	r2, [r3, #12]
 8007c70:	611a      	str	r2, [r3, #16]
 8007c72:	615a      	str	r2, [r3, #20]
	{ 0 };
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007c74:	2300      	movs	r3, #0
 8007c76:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8007c7c:	2302      	movs	r3, #2
 8007c7e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pin = LL_GPIO_PIN_10 | LL_GPIO_PIN_11 | LL_GPIO_PIN_12 | LL_GPIO_PIN_13 | LL_GPIO_PIN_14 | LL_GPIO_PIN_15;
 8007c80:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8007c84:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007c86:	2302      	movs	r3, #2
 8007c88:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_10;
 8007c8a:	230a      	movs	r3, #10
 8007c8c:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007c8e:	463b      	mov	r3, r7
 8007c90:	4619      	mov	r1, r3
 8007c92:	4803      	ldr	r0, [pc, #12]	; (8007ca0 <_init_GPIO+0x48>)
 8007c94:	f7fc fb5b 	bl	800434e <LL_GPIO_Init>
}
 8007c98:	bf00      	nop
 8007c9a:	3718      	adds	r7, #24
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	48001000 	.word	0x48001000

08007ca4 <STRHAL_QSPI_Init>:

void STRHAL_QSPI_Init()
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	af00      	add	r7, sp, #0
	LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_QSPI);
 8007ca8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007cac:	f7ff ffbc 	bl	8007c28 <LL_AHB3_GRP1_EnableClock>
}
 8007cb0:	bf00      	nop
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <STRHAL_QSPI_Flash_Init>:

int STRHAL_QSPI_Flash_Init(const STRHAL_QSPI_Config_t *config)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
	STRHAL_QSPI_Reset();
 8007cbc:	f000 f848 	bl	8007d50 <STRHAL_QSPI_Reset>

	_init_GPIO();
 8007cc0:	f7ff ffca 	bl	8007c58 <_init_GPIO>

	QUADSPI->CR |= STRHAL_QSPI_FIFO_THRESH << QUADSPI_CR_FTHRES_Pos;
 8007cc4:	4b21      	ldr	r3, [pc, #132]	; (8007d4c <STRHAL_QSPI_Flash_Init+0x98>)
 8007cc6:	4a21      	ldr	r2, [pc, #132]	; (8007d4c <STRHAL_QSPI_Flash_Init+0x98>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	6013      	str	r3, [r2, #0]

	if (_wait_for_status_clear(QUADSPI_SR_BUSY, 100) < 0)
 8007ccc:	2164      	movs	r1, #100	; 0x64
 8007cce:	2020      	movs	r0, #32
 8007cd0:	f000 fa20 	bl	8008114 <_wait_for_status_clear>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	da02      	bge.n	8007ce0 <STRHAL_QSPI_Flash_Init+0x2c>
		return -1;
 8007cda:	f04f 33ff 	mov.w	r3, #4294967295
 8007cde:	e031      	b.n	8007d44 <STRHAL_QSPI_Flash_Init+0x90>

	QUADSPI->CR |= config->psc << QUADSPI_CR_PRESCALER_Pos;
 8007ce0:	4b1a      	ldr	r3, [pc, #104]	; (8007d4c <STRHAL_QSPI_Flash_Init+0x98>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	7812      	ldrb	r2, [r2, #0]
 8007ce8:	f3c2 0204 	ubfx	r2, r2, #0, #5
 8007cec:	b2d2      	uxtb	r2, r2
 8007cee:	0612      	lsls	r2, r2, #24
 8007cf0:	4611      	mov	r1, r2
 8007cf2:	4a16      	ldr	r2, [pc, #88]	; (8007d4c <STRHAL_QSPI_Flash_Init+0x98>)
 8007cf4:	430b      	orrs	r3, r1
 8007cf6:	6013      	str	r3, [r2, #0]
	QUADSPI->DCR |= config->flash_size << QUADSPI_DCR_FSIZE_Pos;
 8007cf8:	4b14      	ldr	r3, [pc, #80]	; (8007d4c <STRHAL_QSPI_Flash_Init+0x98>)
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	7852      	ldrb	r2, [r2, #1]
 8007d00:	f3c2 0204 	ubfx	r2, r2, #0, #5
 8007d04:	b2d2      	uxtb	r2, r2
 8007d06:	0412      	lsls	r2, r2, #16
 8007d08:	4611      	mov	r1, r2
 8007d0a:	4a10      	ldr	r2, [pc, #64]	; (8007d4c <STRHAL_QSPI_Flash_Init+0x98>)
 8007d0c:	430b      	orrs	r3, r1
 8007d0e:	6053      	str	r3, [r2, #4]
	QUADSPI->DCR |= config->ncs_high_time << QUADSPI_DCR_CSHT_Pos;
 8007d10:	4b0e      	ldr	r3, [pc, #56]	; (8007d4c <STRHAL_QSPI_Flash_Init+0x98>)
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	7852      	ldrb	r2, [r2, #1]
 8007d18:	f3c2 1242 	ubfx	r2, r2, #5, #3
 8007d1c:	b2d2      	uxtb	r2, r2
 8007d1e:	0212      	lsls	r2, r2, #8
 8007d20:	4611      	mov	r1, r2
 8007d22:	4a0a      	ldr	r2, [pc, #40]	; (8007d4c <STRHAL_QSPI_Flash_Init+0x98>)
 8007d24:	430b      	orrs	r3, r1
 8007d26:	6053      	str	r3, [r2, #4]
	QUADSPI->DCR |= config->clk_level << QUADSPI_DCR_CKMODE_Pos;
 8007d28:	4b08      	ldr	r3, [pc, #32]	; (8007d4c <STRHAL_QSPI_Flash_Init+0x98>)
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	7892      	ldrb	r2, [r2, #2]
 8007d30:	f3c2 0200 	ubfx	r2, r2, #0, #1
 8007d34:	b2d2      	uxtb	r2, r2
 8007d36:	4611      	mov	r1, r2
 8007d38:	4a04      	ldr	r2, [pc, #16]	; (8007d4c <STRHAL_QSPI_Flash_Init+0x98>)
 8007d3a:	430b      	orrs	r3, r1
 8007d3c:	6053      	str	r3, [r2, #4]

	STRHAL_QSPI_Run();
 8007d3e:	f000 f82b 	bl	8007d98 <STRHAL_QSPI_Run>

	return 0;
 8007d42:	2300      	movs	r3, #0
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3708      	adds	r7, #8
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	a0001000 	.word	0xa0001000

08007d50 <STRHAL_QSPI_Reset>:

void STRHAL_QSPI_Reset()
{
 8007d50:	b480      	push	{r7}
 8007d52:	af00      	add	r7, sp, #0
	if (QUADSPI->CR & QUADSPI_CR_EN)
 8007d54:	4b0f      	ldr	r3, [pc, #60]	; (8007d94 <STRHAL_QSPI_Reset+0x44>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f003 0301 	and.w	r3, r3, #1
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d005      	beq.n	8007d6c <STRHAL_QSPI_Reset+0x1c>
		QUADSPI->CR &= ~QUADSPI_CR_EN;
 8007d60:	4b0c      	ldr	r3, [pc, #48]	; (8007d94 <STRHAL_QSPI_Reset+0x44>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a0b      	ldr	r2, [pc, #44]	; (8007d94 <STRHAL_QSPI_Reset+0x44>)
 8007d66:	f023 0301 	bic.w	r3, r3, #1
 8007d6a:	6013      	str	r3, [r2, #0]

	CLEAR_REG(QUADSPI->CR);
 8007d6c:	4b09      	ldr	r3, [pc, #36]	; (8007d94 <STRHAL_QSPI_Reset+0x44>)
 8007d6e:	2200      	movs	r2, #0
 8007d70:	601a      	str	r2, [r3, #0]
	CLEAR_REG(QUADSPI->DCR);
 8007d72:	4b08      	ldr	r3, [pc, #32]	; (8007d94 <STRHAL_QSPI_Reset+0x44>)
 8007d74:	2200      	movs	r2, #0
 8007d76:	605a      	str	r2, [r3, #4]
	CLEAR_REG(QUADSPI->CCR);
 8007d78:	4b06      	ldr	r3, [pc, #24]	; (8007d94 <STRHAL_QSPI_Reset+0x44>)
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	615a      	str	r2, [r3, #20]

	QUADSPI->FCR |= (QUADSPI_FCR_CSMF | QUADSPI_FCR_CTCF | QUADSPI_FCR_CTEF | QUADSPI_FCR_CTOF);
 8007d7e:	4b05      	ldr	r3, [pc, #20]	; (8007d94 <STRHAL_QSPI_Reset+0x44>)
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	4a04      	ldr	r2, [pc, #16]	; (8007d94 <STRHAL_QSPI_Reset+0x44>)
 8007d84:	f043 031b 	orr.w	r3, r3, #27
 8007d88:	60d3      	str	r3, [r2, #12]
}
 8007d8a:	bf00      	nop
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr
 8007d94:	a0001000 	.word	0xa0001000

08007d98 <STRHAL_QSPI_Run>:

void STRHAL_QSPI_Run()
{
 8007d98:	b480      	push	{r7}
 8007d9a:	af00      	add	r7, sp, #0
	QUADSPI->CR |= QUADSPI_CR_EN; // Enable QSPI
 8007d9c:	4b05      	ldr	r3, [pc, #20]	; (8007db4 <STRHAL_QSPI_Run+0x1c>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a04      	ldr	r2, [pc, #16]	; (8007db4 <STRHAL_QSPI_Run+0x1c>)
 8007da2:	f043 0301 	orr.w	r3, r3, #1
 8007da6:	6013      	str	r3, [r2, #0]
}
 8007da8:	bf00      	nop
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr
 8007db2:	bf00      	nop
 8007db4:	a0001000 	.word	0xa0001000

08007db8 <STRHAL_QSPI_Indirect_Write>:
{
	QUADSPI->CR &= ~QUADSPI_CR_EN;  // Enable QSPI
}

uint32_t STRHAL_QSPI_Indirect_Write(const STRHAL_QSPI_Command_t *cmd, const uint8_t *data, uint32_t n, uint16_t tot)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b088      	sub	sp, #32
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	60b9      	str	r1, [r7, #8]
 8007dc2:	607a      	str	r2, [r7, #4]
 8007dc4:	807b      	strh	r3, [r7, #2]
	if (_wait_for_status_clear(QUADSPI_SR_BUSY, tot) < 0)
 8007dc6:	887b      	ldrh	r3, [r7, #2]
 8007dc8:	4619      	mov	r1, r3
 8007dca:	2020      	movs	r0, #32
 8007dcc:	f000 f9a2 	bl	8008114 <_wait_for_status_clear>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	da02      	bge.n	8007ddc <STRHAL_QSPI_Indirect_Write+0x24>
		return -1;
 8007dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8007dda:	e09e      	b.n	8007f1a <STRHAL_QSPI_Indirect_Write+0x162>

	__IO uint32_t *data_reg = &QUADSPI->DR;
 8007ddc:	4b51      	ldr	r3, [pc, #324]	; (8007f24 <STRHAL_QSPI_Indirect_Write+0x16c>)
 8007dde:	617b      	str	r3, [r7, #20]
	_clear_status(QUADSPI_FCR_CSMF | QUADSPI_FCR_CTCF | QUADSPI_FCR_CTEF | QUADSPI_FCR_CTOF);
 8007de0:	201b      	movs	r0, #27
 8007de2:	f000 f9c3 	bl	800816c <_clear_status>

	uint32_t ccr = 0x00000000;
 8007de6:	2300      	movs	r3, #0
 8007de8:	61fb      	str	r3, [r7, #28]

	if (n > 0)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d007      	beq.n	8007e00 <STRHAL_QSPI_Indirect_Write+0x48>
	{
		ccr |= QUADSPI_CCR_DMODE_0;
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007df6:	61fb      	str	r3, [r7, #28]
		WRITE_REG(QUADSPI->DLR, n - 1U);
 8007df8:	4a4b      	ldr	r2, [pc, #300]	; (8007f28 <STRHAL_QSPI_Indirect_Write+0x170>)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	3b01      	subs	r3, #1
 8007dfe:	6113      	str	r3, [r2, #16]
	}

	if (cmd->alt_size > 0)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	7a5b      	ldrb	r3, [r3, #9]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d010      	beq.n	8007e2a <STRHAL_QSPI_Indirect_Write+0x72>
	{
		ccr |= QUADSPI_CCR_ABMODE_0;
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e0e:	61fb      	str	r3, [r7, #28]
		ccr |= ((cmd->alt_size - 1) & 0x3) << QUADSPI_CCR_ABSIZE_Pos;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	7a5b      	ldrb	r3, [r3, #9]
 8007e14:	3b01      	subs	r3, #1
 8007e16:	041b      	lsls	r3, r3, #16
 8007e18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007e1c:	69fa      	ldr	r2, [r7, #28]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	61fb      	str	r3, [r7, #28]
		WRITE_REG(QUADSPI->ABR, cmd->alt);
 8007e22:	4a41      	ldr	r2, [pc, #260]	; (8007f28 <STRHAL_QSPI_Indirect_Write+0x170>)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	61d3      	str	r3, [r2, #28]
	}

	ccr |= (cmd->dummy_size & 0x1F) << QUADSPI_CCR_DCYC_Pos;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	7c1b      	ldrb	r3, [r3, #16]
 8007e2e:	049b      	lsls	r3, r3, #18
 8007e30:	f403 03f8 	and.w	r3, r3, #8126464	; 0x7c0000
 8007e34:	69fa      	ldr	r2, [r7, #28]
 8007e36:	4313      	orrs	r3, r2
 8007e38:	61fb      	str	r3, [r7, #28]

	if (cmd->instruction_size > 0)
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	785b      	ldrb	r3, [r3, #1]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d026      	beq.n	8007e90 <STRHAL_QSPI_Indirect_Write+0xd8>
	{
		ccr |= QUADSPI_CCR_IMODE_0;
 8007e42:	69fb      	ldr	r3, [r7, #28]
 8007e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e48:	61fb      	str	r3, [r7, #28]
		ccr |= cmd->instruction << QUADSPI_CCR_INSTRUCTION_Pos;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	461a      	mov	r2, r3
 8007e50:	69fb      	ldr	r3, [r7, #28]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	61fb      	str	r3, [r7, #28]
		if (cmd->addr_size > 0)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	7a1b      	ldrb	r3, [r3, #8]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d014      	beq.n	8007e88 <STRHAL_QSPI_Indirect_Write+0xd0>
		{
			ccr |= QUADSPI_CCR_ADMODE_0;
 8007e5e:	69fb      	ldr	r3, [r7, #28]
 8007e60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007e64:	61fb      	str	r3, [r7, #28]
			ccr |= ((cmd->addr_size - 1) & 0x3) << QUADSPI_CCR_ADSIZE_Pos;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	7a1b      	ldrb	r3, [r3, #8]
 8007e6a:	3b01      	subs	r3, #1
 8007e6c:	031b      	lsls	r3, r3, #12
 8007e6e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007e72:	69fa      	ldr	r2, [r7, #28]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	61fb      	str	r3, [r7, #28]
			WRITE_REG(QUADSPI->CCR, ccr);
 8007e78:	4a2b      	ldr	r2, [pc, #172]	; (8007f28 <STRHAL_QSPI_Indirect_Write+0x170>)
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	6153      	str	r3, [r2, #20]
			WRITE_REG(QUADSPI->AR, cmd->addr);
 8007e7e:	4a2a      	ldr	r2, [pc, #168]	; (8007f28 <STRHAL_QSPI_Indirect_Write+0x170>)
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	6193      	str	r3, [r2, #24]
 8007e86:	e01f      	b.n	8007ec8 <STRHAL_QSPI_Indirect_Write+0x110>
		}
		else
		{
			WRITE_REG(QUADSPI->CCR, ccr);
 8007e88:	4a27      	ldr	r2, [pc, #156]	; (8007f28 <STRHAL_QSPI_Indirect_Write+0x170>)
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	6153      	str	r3, [r2, #20]
 8007e8e:	e01b      	b.n	8007ec8 <STRHAL_QSPI_Indirect_Write+0x110>
		}
	}
	else
	{
		if (cmd->addr_size > 0)
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	7a1b      	ldrb	r3, [r3, #8]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d014      	beq.n	8007ec2 <STRHAL_QSPI_Indirect_Write+0x10a>
		{
			ccr |= QUADSPI_CCR_ADMODE_0;
 8007e98:	69fb      	ldr	r3, [r7, #28]
 8007e9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007e9e:	61fb      	str	r3, [r7, #28]
			ccr |= ((cmd->addr_size - 1) & 0x3) << QUADSPI_CCR_ADSIZE_Pos;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	7a1b      	ldrb	r3, [r3, #8]
 8007ea4:	3b01      	subs	r3, #1
 8007ea6:	031b      	lsls	r3, r3, #12
 8007ea8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007eac:	69fa      	ldr	r2, [r7, #28]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	61fb      	str	r3, [r7, #28]
			WRITE_REG(QUADSPI->CCR, ccr);
 8007eb2:	4a1d      	ldr	r2, [pc, #116]	; (8007f28 <STRHAL_QSPI_Indirect_Write+0x170>)
 8007eb4:	69fb      	ldr	r3, [r7, #28]
 8007eb6:	6153      	str	r3, [r2, #20]
			WRITE_REG(QUADSPI->AR, cmd->addr);
 8007eb8:	4a1b      	ldr	r2, [pc, #108]	; (8007f28 <STRHAL_QSPI_Indirect_Write+0x170>)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	6193      	str	r3, [r2, #24]
 8007ec0:	e002      	b.n	8007ec8 <STRHAL_QSPI_Indirect_Write+0x110>
		}
		else
		{
			WRITE_REG(QUADSPI->CCR, ccr);
 8007ec2:	4a19      	ldr	r2, [pc, #100]	; (8007f28 <STRHAL_QSPI_Indirect_Write+0x170>)
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	6153      	str	r3, [r2, #20]
		}
	}

	uint32_t i;
	for (i = 0; i < n; ++i)
 8007ec8:	2300      	movs	r3, #0
 8007eca:	61bb      	str	r3, [r7, #24]
 8007ecc:	e012      	b.n	8007ef4 <STRHAL_QSPI_Indirect_Write+0x13c>
	{
		if (_wait_for_status(QUADSPI_SR_FTF, tot) < 0)
 8007ece:	887b      	ldrh	r3, [r7, #2]
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	2004      	movs	r0, #4
 8007ed4:	f000 f8f2 	bl	80080bc <_wait_for_status>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	da01      	bge.n	8007ee2 <STRHAL_QSPI_Indirect_Write+0x12a>
			return i;
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	e01b      	b.n	8007f1a <STRHAL_QSPI_Indirect_Write+0x162>

		*((__IO uint8_t*) data_reg) = data[i];
 8007ee2:	68ba      	ldr	r2, [r7, #8]
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	4413      	add	r3, r2
 8007ee8:	781a      	ldrb	r2, [r3, #0]
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n; ++i)
 8007eee:	69bb      	ldr	r3, [r7, #24]
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	61bb      	str	r3, [r7, #24]
 8007ef4:	69ba      	ldr	r2, [r7, #24]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d3e8      	bcc.n	8007ece <STRHAL_QSPI_Indirect_Write+0x116>

	}

	if (_wait_for_status(QUADSPI_SR_TCF, tot) == 0)
 8007efc:	887b      	ldrh	r3, [r7, #2]
 8007efe:	4619      	mov	r1, r3
 8007f00:	2002      	movs	r0, #2
 8007f02:	f000 f8db 	bl	80080bc <_wait_for_status>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d105      	bne.n	8007f18 <STRHAL_QSPI_Indirect_Write+0x160>
	{
		SET_BIT(QUADSPI->FCR, QUADSPI_FCR_CTCF);
 8007f0c:	4b06      	ldr	r3, [pc, #24]	; (8007f28 <STRHAL_QSPI_Indirect_Write+0x170>)
 8007f0e:	68db      	ldr	r3, [r3, #12]
 8007f10:	4a05      	ldr	r2, [pc, #20]	; (8007f28 <STRHAL_QSPI_Indirect_Write+0x170>)
 8007f12:	f043 0302 	orr.w	r3, r3, #2
 8007f16:	60d3      	str	r3, [r2, #12]
	}

	return i;
 8007f18:	69bb      	ldr	r3, [r7, #24]
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3720      	adds	r7, #32
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	a0001020 	.word	0xa0001020
 8007f28:	a0001000 	.word	0xa0001000

08007f2c <STRHAL_QSPI_Indirect_Read>:

uint32_t STRHAL_QSPI_Indirect_Read(const STRHAL_QSPI_Command_t *cmd, uint8_t *data, uint32_t n, uint16_t tot)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b088      	sub	sp, #32
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	607a      	str	r2, [r7, #4]
 8007f38:	807b      	strh	r3, [r7, #2]
	if (_wait_for_status_clear(QUADSPI_SR_BUSY, tot) < 0)
 8007f3a:	887b      	ldrh	r3, [r7, #2]
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	2020      	movs	r0, #32
 8007f40:	f000 f8e8 	bl	8008114 <_wait_for_status_clear>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	da02      	bge.n	8007f50 <STRHAL_QSPI_Indirect_Read+0x24>
		return -1;
 8007f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f4e:	e0ad      	b.n	80080ac <STRHAL_QSPI_Indirect_Read+0x180>

	__IO uint32_t *data_reg = &QUADSPI->DR;
 8007f50:	4b58      	ldr	r3, [pc, #352]	; (80080b4 <STRHAL_QSPI_Indirect_Read+0x188>)
 8007f52:	617b      	str	r3, [r7, #20]
	_clear_status(QUADSPI_FCR_CSMF | QUADSPI_FCR_CTCF | QUADSPI_FCR_CTEF | QUADSPI_FCR_CTOF);
 8007f54:	201b      	movs	r0, #27
 8007f56:	f000 f909 	bl	800816c <_clear_status>

	uint32_t ccr = 0x00000000;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	61fb      	str	r3, [r7, #28]

	ccr |= QUADSPI_CCR_FMODE_0;
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007f64:	61fb      	str	r3, [r7, #28]

	if (n > 0)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d007      	beq.n	8007f7c <STRHAL_QSPI_Indirect_Read+0x50>
	{
		ccr |= QUADSPI_CCR_DMODE_0;
 8007f6c:	69fb      	ldr	r3, [r7, #28]
 8007f6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f72:	61fb      	str	r3, [r7, #28]
		WRITE_REG(QUADSPI->DLR, n - 1U);
 8007f74:	4a50      	ldr	r2, [pc, #320]	; (80080b8 <STRHAL_QSPI_Indirect_Read+0x18c>)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	3b01      	subs	r3, #1
 8007f7a:	6113      	str	r3, [r2, #16]
	}
	if (cmd->alt_size > 0)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	7a5b      	ldrb	r3, [r3, #9]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d010      	beq.n	8007fa6 <STRHAL_QSPI_Indirect_Read+0x7a>
	{
		ccr |= QUADSPI_CCR_ABMODE_0;
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f8a:	61fb      	str	r3, [r7, #28]
		ccr |= ((cmd->alt_size - 1) & 0x3) << QUADSPI_CCR_ABSIZE_Pos;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	7a5b      	ldrb	r3, [r3, #9]
 8007f90:	3b01      	subs	r3, #1
 8007f92:	041b      	lsls	r3, r3, #16
 8007f94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007f98:	69fa      	ldr	r2, [r7, #28]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	61fb      	str	r3, [r7, #28]
		WRITE_REG(QUADSPI->ABR, cmd->alt);
 8007f9e:	4a46      	ldr	r2, [pc, #280]	; (80080b8 <STRHAL_QSPI_Indirect_Read+0x18c>)
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	61d3      	str	r3, [r2, #28]
	}

	ccr |= (cmd->dummy_size & 0x1F) << QUADSPI_CCR_DCYC_Pos;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	7c1b      	ldrb	r3, [r3, #16]
 8007faa:	049b      	lsls	r3, r3, #18
 8007fac:	f403 03f8 	and.w	r3, r3, #8126464	; 0x7c0000
 8007fb0:	69fa      	ldr	r2, [r7, #28]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	61fb      	str	r3, [r7, #28]

	if (cmd->instruction_size > 0)
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	785b      	ldrb	r3, [r3, #1]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d026      	beq.n	800800c <STRHAL_QSPI_Indirect_Read+0xe0>
	{
		ccr |= QUADSPI_CCR_IMODE_0;
 8007fbe:	69fb      	ldr	r3, [r7, #28]
 8007fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fc4:	61fb      	str	r3, [r7, #28]
		ccr |= cmd->instruction << QUADSPI_CCR_INSTRUCTION_Pos;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	461a      	mov	r2, r3
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	61fb      	str	r3, [r7, #28]
		if (cmd->addr_size > 0)
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	7a1b      	ldrb	r3, [r3, #8]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d014      	beq.n	8008004 <STRHAL_QSPI_Indirect_Read+0xd8>
		{
			ccr |= QUADSPI_CCR_ADMODE_0;
 8007fda:	69fb      	ldr	r3, [r7, #28]
 8007fdc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007fe0:	61fb      	str	r3, [r7, #28]
			ccr |= ((cmd->addr_size - 1) & 0x3) << QUADSPI_CCR_ADSIZE_Pos;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	7a1b      	ldrb	r3, [r3, #8]
 8007fe6:	3b01      	subs	r3, #1
 8007fe8:	031b      	lsls	r3, r3, #12
 8007fea:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007fee:	69fa      	ldr	r2, [r7, #28]
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	61fb      	str	r3, [r7, #28]
			WRITE_REG(QUADSPI->CCR, ccr);
 8007ff4:	4a30      	ldr	r2, [pc, #192]	; (80080b8 <STRHAL_QSPI_Indirect_Read+0x18c>)
 8007ff6:	69fb      	ldr	r3, [r7, #28]
 8007ff8:	6153      	str	r3, [r2, #20]
			WRITE_REG(QUADSPI->AR, cmd->addr);
 8007ffa:	4a2f      	ldr	r2, [pc, #188]	; (80080b8 <STRHAL_QSPI_Indirect_Read+0x18c>)
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	6193      	str	r3, [r2, #24]
 8008002:	e01f      	b.n	8008044 <STRHAL_QSPI_Indirect_Read+0x118>
		}
		else
		{
			WRITE_REG(QUADSPI->CCR, ccr);
 8008004:	4a2c      	ldr	r2, [pc, #176]	; (80080b8 <STRHAL_QSPI_Indirect_Read+0x18c>)
 8008006:	69fb      	ldr	r3, [r7, #28]
 8008008:	6153      	str	r3, [r2, #20]
 800800a:	e01b      	b.n	8008044 <STRHAL_QSPI_Indirect_Read+0x118>
		}
	}
	else
	{
		if (cmd->addr_size > 0)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	7a1b      	ldrb	r3, [r3, #8]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d014      	beq.n	800803e <STRHAL_QSPI_Indirect_Read+0x112>
		{
			ccr |= QUADSPI_CCR_ADMODE_0;
 8008014:	69fb      	ldr	r3, [r7, #28]
 8008016:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800801a:	61fb      	str	r3, [r7, #28]
			ccr |= ((cmd->addr_size - 1) & 0x3) << QUADSPI_CCR_ADSIZE_Pos;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	7a1b      	ldrb	r3, [r3, #8]
 8008020:	3b01      	subs	r3, #1
 8008022:	031b      	lsls	r3, r3, #12
 8008024:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008028:	69fa      	ldr	r2, [r7, #28]
 800802a:	4313      	orrs	r3, r2
 800802c:	61fb      	str	r3, [r7, #28]
			WRITE_REG(QUADSPI->CCR, ccr);
 800802e:	4a22      	ldr	r2, [pc, #136]	; (80080b8 <STRHAL_QSPI_Indirect_Read+0x18c>)
 8008030:	69fb      	ldr	r3, [r7, #28]
 8008032:	6153      	str	r3, [r2, #20]
			WRITE_REG(QUADSPI->AR, cmd->addr);
 8008034:	4a20      	ldr	r2, [pc, #128]	; (80080b8 <STRHAL_QSPI_Indirect_Read+0x18c>)
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	6193      	str	r3, [r2, #24]
 800803c:	e002      	b.n	8008044 <STRHAL_QSPI_Indirect_Read+0x118>
		}
		else
		{
			WRITE_REG(QUADSPI->CCR, ccr);
 800803e:	4a1e      	ldr	r2, [pc, #120]	; (80080b8 <STRHAL_QSPI_Indirect_Read+0x18c>)
 8008040:	69fb      	ldr	r3, [r7, #28]
 8008042:	6153      	str	r3, [r2, #20]
		}
	}

	if (_wait_for_status(QUADSPI_SR_BUSY, tot) < 0)
 8008044:	887b      	ldrh	r3, [r7, #2]
 8008046:	4619      	mov	r1, r3
 8008048:	2020      	movs	r0, #32
 800804a:	f000 f837 	bl	80080bc <_wait_for_status>
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	da01      	bge.n	8008058 <STRHAL_QSPI_Indirect_Read+0x12c>
		return 0;
 8008054:	2300      	movs	r3, #0
 8008056:	e029      	b.n	80080ac <STRHAL_QSPI_Indirect_Read+0x180>

	uint32_t i;
	for (i = 0; i < n; ++i)
 8008058:	2300      	movs	r3, #0
 800805a:	61bb      	str	r3, [r7, #24]
 800805c:	e016      	b.n	800808c <STRHAL_QSPI_Indirect_Read+0x160>
	{
		if (_wait_for_status(QUADSPI_SR_FTF | QUADSPI_SR_TCF, tot) < 0)
 800805e:	887b      	ldrh	r3, [r7, #2]
 8008060:	4619      	mov	r1, r3
 8008062:	2006      	movs	r0, #6
 8008064:	f000 f82a 	bl	80080bc <_wait_for_status>
 8008068:	4603      	mov	r3, r0
 800806a:	2b00      	cmp	r3, #0
 800806c:	da04      	bge.n	8008078 <STRHAL_QSPI_Indirect_Read+0x14c>
		{
			_clear_status(QUADSPI_SR_TCF);
 800806e:	2002      	movs	r0, #2
 8008070:	f000 f87c 	bl	800816c <_clear_status>
			return i;
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	e019      	b.n	80080ac <STRHAL_QSPI_Indirect_Read+0x180>
		}
		data[i] = *((__IO uint8_t*) data_reg);
 8008078:	68ba      	ldr	r2, [r7, #8]
 800807a:	69bb      	ldr	r3, [r7, #24]
 800807c:	4413      	add	r3, r2
 800807e:	697a      	ldr	r2, [r7, #20]
 8008080:	7812      	ldrb	r2, [r2, #0]
 8008082:	b2d2      	uxtb	r2, r2
 8008084:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n; ++i)
 8008086:	69bb      	ldr	r3, [r7, #24]
 8008088:	3301      	adds	r3, #1
 800808a:	61bb      	str	r3, [r7, #24]
 800808c:	69ba      	ldr	r2, [r7, #24]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	429a      	cmp	r2, r3
 8008092:	d3e4      	bcc.n	800805e <STRHAL_QSPI_Indirect_Read+0x132>
	}

	if (_wait_for_status(QUADSPI_SR_TCF, tot) == 0)
 8008094:	887b      	ldrh	r3, [r7, #2]
 8008096:	4619      	mov	r1, r3
 8008098:	2002      	movs	r0, #2
 800809a:	f000 f80f 	bl	80080bc <_wait_for_status>
 800809e:	4603      	mov	r3, r0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d102      	bne.n	80080aa <STRHAL_QSPI_Indirect_Read+0x17e>
	{
		_clear_status(QUADSPI_SR_TCF);
 80080a4:	2002      	movs	r0, #2
 80080a6:	f000 f861 	bl	800816c <_clear_status>
	}
	return i;
 80080aa:	69bb      	ldr	r3, [r7, #24]
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3720      	adds	r7, #32
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}
 80080b4:	a0001020 	.word	0xa0001020
 80080b8:	a0001000 	.word	0xa0001000

080080bc <_wait_for_status>:

int _wait_for_status(uint32_t flag, uint16_t tot)
{
 80080bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80080c0:	b084      	sub	sp, #16
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
 80080c6:	460b      	mov	r3, r1
 80080c8:	807b      	strh	r3, [r7, #2]
	uint64_t start = STRHAL_Systick_GetTick();
 80080ca:	f000 f91f 	bl	800830c <STRHAL_Systick_GetTick>
 80080ce:	e9c7 0102 	strd	r0, r1, [r7, #8]

	while (!(QUADSPI->SR & flag))
 80080d2:	e011      	b.n	80080f8 <_wait_for_status+0x3c>
	{
		if (STRHAL_Systick_GetTick() - start > tot)
 80080d4:	f000 f91a 	bl	800830c <STRHAL_Systick_GetTick>
 80080d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80080dc:	1a84      	subs	r4, r0, r2
 80080de:	eb61 0503 	sbc.w	r5, r1, r3
 80080e2:	887b      	ldrh	r3, [r7, #2]
 80080e4:	2200      	movs	r2, #0
 80080e6:	4698      	mov	r8, r3
 80080e8:	4691      	mov	r9, r2
 80080ea:	45a0      	cmp	r8, r4
 80080ec:	eb79 0305 	sbcs.w	r3, r9, r5
 80080f0:	d202      	bcs.n	80080f8 <_wait_for_status+0x3c>
			return -1;
 80080f2:	f04f 33ff 	mov.w	r3, #4294967295
 80080f6:	e006      	b.n	8008106 <_wait_for_status+0x4a>
	while (!(QUADSPI->SR & flag))
 80080f8:	4b05      	ldr	r3, [pc, #20]	; (8008110 <_wait_for_status+0x54>)
 80080fa:	689a      	ldr	r2, [r3, #8]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	4013      	ands	r3, r2
 8008100:	2b00      	cmp	r3, #0
 8008102:	d0e7      	beq.n	80080d4 <_wait_for_status+0x18>
	}
	return 0;
 8008104:	2300      	movs	r3, #0
}
 8008106:	4618      	mov	r0, r3
 8008108:	3710      	adds	r7, #16
 800810a:	46bd      	mov	sp, r7
 800810c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008110:	a0001000 	.word	0xa0001000

08008114 <_wait_for_status_clear>:

int _wait_for_status_clear(uint32_t flag, uint16_t tot)
{
 8008114:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008118:	b084      	sub	sp, #16
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
 800811e:	460b      	mov	r3, r1
 8008120:	807b      	strh	r3, [r7, #2]
	uint64_t start = STRHAL_Systick_GetTick();
 8008122:	f000 f8f3 	bl	800830c <STRHAL_Systick_GetTick>
 8008126:	e9c7 0102 	strd	r0, r1, [r7, #8]

	while (QUADSPI->SR & flag)
 800812a:	e011      	b.n	8008150 <_wait_for_status_clear+0x3c>
	{
		if (STRHAL_Systick_GetTick() - start > tot)
 800812c:	f000 f8ee 	bl	800830c <STRHAL_Systick_GetTick>
 8008130:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008134:	1a84      	subs	r4, r0, r2
 8008136:	eb61 0503 	sbc.w	r5, r1, r3
 800813a:	887b      	ldrh	r3, [r7, #2]
 800813c:	2200      	movs	r2, #0
 800813e:	4698      	mov	r8, r3
 8008140:	4691      	mov	r9, r2
 8008142:	45a0      	cmp	r8, r4
 8008144:	eb79 0305 	sbcs.w	r3, r9, r5
 8008148:	d202      	bcs.n	8008150 <_wait_for_status_clear+0x3c>
			return -1;
 800814a:	f04f 33ff 	mov.w	r3, #4294967295
 800814e:	e006      	b.n	800815e <_wait_for_status_clear+0x4a>
	while (QUADSPI->SR & flag)
 8008150:	4b05      	ldr	r3, [pc, #20]	; (8008168 <_wait_for_status_clear+0x54>)
 8008152:	689a      	ldr	r2, [r3, #8]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	4013      	ands	r3, r2
 8008158:	2b00      	cmp	r3, #0
 800815a:	d1e7      	bne.n	800812c <_wait_for_status_clear+0x18>
	}
	return 0;
 800815c:	2300      	movs	r3, #0
}
 800815e:	4618      	mov	r0, r3
 8008160:	3710      	adds	r7, #16
 8008162:	46bd      	mov	sp, r7
 8008164:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008168:	a0001000 	.word	0xa0001000

0800816c <_clear_status>:

void _clear_status(uint32_t flags)
{
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
	QUADSPI->FCR |= (flags);
 8008174:	4b05      	ldr	r3, [pc, #20]	; (800818c <_clear_status+0x20>)
 8008176:	68da      	ldr	r2, [r3, #12]
 8008178:	4904      	ldr	r1, [pc, #16]	; (800818c <_clear_status+0x20>)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4313      	orrs	r3, r2
 800817e:	60cb      	str	r3, [r1, #12]
}
 8008180:	bf00      	nop
 8008182:	370c      	adds	r7, #12
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr
 800818c:	a0001000 	.word	0xa0001000

08008190 <LL_AHB2_GRP1_EnableClock>:
{
 8008190:	b480      	push	{r7}
 8008192:	b085      	sub	sp, #20
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8008198:	4b08      	ldr	r3, [pc, #32]	; (80081bc <LL_AHB2_GRP1_EnableClock+0x2c>)
 800819a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800819c:	4907      	ldr	r1, [pc, #28]	; (80081bc <LL_AHB2_GRP1_EnableClock+0x2c>)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4313      	orrs	r3, r2
 80081a2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80081a4:	4b05      	ldr	r3, [pc, #20]	; (80081bc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80081a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	4013      	ands	r3, r2
 80081ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80081ae:	68fb      	ldr	r3, [r7, #12]
}
 80081b0:	bf00      	nop
 80081b2:	3714      	adds	r7, #20
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr
 80081bc:	40021000 	.word	0x40021000

080081c0 <LL_APB1_GRP1_EnableClock>:
{
 80081c0:	b480      	push	{r7}
 80081c2:	b085      	sub	sp, #20
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80081c8:	4b08      	ldr	r3, [pc, #32]	; (80081ec <LL_APB1_GRP1_EnableClock+0x2c>)
 80081ca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80081cc:	4907      	ldr	r1, [pc, #28]	; (80081ec <LL_APB1_GRP1_EnableClock+0x2c>)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4313      	orrs	r3, r2
 80081d2:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80081d4:	4b05      	ldr	r3, [pc, #20]	; (80081ec <LL_APB1_GRP1_EnableClock+0x2c>)
 80081d6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	4013      	ands	r3, r2
 80081dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80081de:	68fb      	ldr	r3, [r7, #12]
}
 80081e0:	bf00      	nop
 80081e2:	3714      	adds	r7, #20
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr
 80081ec:	40021000 	.word	0x40021000

080081f0 <LL_APB2_GRP1_EnableClock>:
{
 80081f0:	b480      	push	{r7}
 80081f2:	b085      	sub	sp, #20
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80081f8:	4b08      	ldr	r3, [pc, #32]	; (800821c <LL_APB2_GRP1_EnableClock+0x2c>)
 80081fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80081fc:	4907      	ldr	r1, [pc, #28]	; (800821c <LL_APB2_GRP1_EnableClock+0x2c>)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4313      	orrs	r3, r2
 8008202:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8008204:	4b05      	ldr	r3, [pc, #20]	; (800821c <LL_APB2_GRP1_EnableClock+0x2c>)
 8008206:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4013      	ands	r3, r2
 800820c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800820e:	68fb      	ldr	r3, [r7, #12]
}
 8008210:	bf00      	nop
 8008212:	3714      	adds	r7, #20
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr
 800821c:	40021000 	.word	0x40021000

08008220 <LL_SPI_Disable>:
  * @rmtoll CR1          SPE           LL_SPI_Disable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Disable(SPI_TypeDef *SPIx)
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	601a      	str	r2, [r3, #0]
}
 8008234:	bf00      	nop
 8008236:	370c      	adds	r7, #12
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr

08008240 <STRHAL_SPI_Init>:
static inline int _wait_for_rxtxend(SPI_TypeDef *spix, uint16_t tot);
static inline int _wait_for_rxne(SPI_TypeDef *spix, uint16_t tot);
static inline int _rx_flush(SPI_TypeDef *spix, uint16_t tot);

void STRHAL_SPI_Init()
{
 8008240:	b580      	push	{r7, lr}
 8008242:	af00      	add	r7, sp, #0
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8008244:	2004      	movs	r0, #4
 8008246:	f7ff ffa3 	bl	8008190 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 800824a:	2020      	movs	r0, #32
 800824c:	f7ff ffa0 	bl	8008190 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8008250:	2001      	movs	r0, #1
 8008252:	f7ff ff9d 	bl	8008190 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8008256:	2002      	movs	r0, #2
 8008258:	f7ff ff9a 	bl	8008190 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 800825c:	2010      	movs	r0, #16
 800825e:	f7ff ff97 	bl	8008190 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 8008262:	2008      	movs	r0, #8
 8008264:	f7ff ff94 	bl	8008190 <LL_AHB2_GRP1_EnableClock>

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8008268:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800826c:	f7ff ffc0 	bl	80081f0 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8008270:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8008274:	f7ff ffa4 	bl	80081c0 <LL_APB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8008278:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800827c:	f7ff ffa0 	bl	80081c0 <LL_APB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI4);
 8008280:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008284:	f7ff ff9c 	bl	80081c0 <LL_APB1_GRP1_EnableClock>

	LL_SPI_DeInit(SPI1);
 8008288:	480c      	ldr	r0, [pc, #48]	; (80082bc <STRHAL_SPI_Init+0x7c>)
 800828a:	f7fc fbc9 	bl	8004a20 <LL_SPI_DeInit>
	LL_SPI_DeInit(SPI2);
 800828e:	480c      	ldr	r0, [pc, #48]	; (80082c0 <STRHAL_SPI_Init+0x80>)
 8008290:	f7fc fbc6 	bl	8004a20 <LL_SPI_DeInit>
	LL_SPI_DeInit(SPI3);
 8008294:	480b      	ldr	r0, [pc, #44]	; (80082c4 <STRHAL_SPI_Init+0x84>)
 8008296:	f7fc fbc3 	bl	8004a20 <LL_SPI_DeInit>
	LL_SPI_DeInit(SPI4);
 800829a:	480b      	ldr	r0, [pc, #44]	; (80082c8 <STRHAL_SPI_Init+0x88>)
 800829c:	f7fc fbc0 	bl	8004a20 <LL_SPI_DeInit>

	LL_SPI_Disable(SPI1);
 80082a0:	4806      	ldr	r0, [pc, #24]	; (80082bc <STRHAL_SPI_Init+0x7c>)
 80082a2:	f7ff ffbd 	bl	8008220 <LL_SPI_Disable>
	LL_SPI_Disable(SPI2);
 80082a6:	4806      	ldr	r0, [pc, #24]	; (80082c0 <STRHAL_SPI_Init+0x80>)
 80082a8:	f7ff ffba 	bl	8008220 <LL_SPI_Disable>
	LL_SPI_Disable(SPI3);
 80082ac:	4805      	ldr	r0, [pc, #20]	; (80082c4 <STRHAL_SPI_Init+0x84>)
 80082ae:	f7ff ffb7 	bl	8008220 <LL_SPI_Disable>
	LL_SPI_Disable(SPI4);
 80082b2:	4805      	ldr	r0, [pc, #20]	; (80082c8 <STRHAL_SPI_Init+0x88>)
 80082b4:	f7ff ffb4 	bl	8008220 <LL_SPI_Disable>
}
 80082b8:	bf00      	nop
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	40013000 	.word	0x40013000
 80082c0:	40003800 	.word	0x40003800
 80082c4:	40003c00 	.word	0x40003c00
 80082c8:	40013c00 	.word	0x40013c00

080082cc <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 80082cc:	b480      	push	{r7}
 80082ce:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80082d0:	4b05      	ldr	r3, [pc, #20]	; (80082e8 <LL_SYSTICK_EnableIT+0x1c>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a04      	ldr	r2, [pc, #16]	; (80082e8 <LL_SYSTICK_EnableIT+0x1c>)
 80082d6:	f043 0302 	orr.w	r3, r3, #2
 80082da:	6013      	str	r3, [r2, #0]
}
 80082dc:	bf00      	nop
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr
 80082e6:	bf00      	nop
 80082e8:	e000e010 	.word	0xe000e010

080082ec <STRHAL_SysTick_Init>:
#include <STRHAL_SysTick.h>

static volatile uint64_t systick_count = 0;

void STRHAL_SysTick_Init()
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	af00      	add	r7, sp, #0
	//LL_Init1msTick(SystemCoreClock);
	//1ms tick already in STRHAL.c sysclock init
	LL_SYSTICK_EnableIT();
 80082f0:	f7ff ffec 	bl	80082cc <LL_SYSTICK_EnableIT>
	systick_count = 0;
 80082f4:	4904      	ldr	r1, [pc, #16]	; (8008308 <STRHAL_SysTick_Init+0x1c>)
 80082f6:	f04f 0200 	mov.w	r2, #0
 80082fa:	f04f 0300 	mov.w	r3, #0
 80082fe:	e9c1 2300 	strd	r2, r3, [r1]
}
 8008302:	bf00      	nop
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	20000b58 	.word	0x20000b58

0800830c <STRHAL_Systick_GetTick>:
	uint64_t end = systick_count + ticks;
	while (systick_count < end);
}

uint64_t STRHAL_Systick_GetTick()
{
 800830c:	b480      	push	{r7}
 800830e:	af00      	add	r7, sp, #0
	return systick_count;
 8008310:	4b04      	ldr	r3, [pc, #16]	; (8008324 <STRHAL_Systick_GetTick+0x18>)
 8008312:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8008316:	4610      	mov	r0, r2
 8008318:	4619      	mov	r1, r3
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr
 8008322:	bf00      	nop
 8008324:	20000b58 	.word	0x20000b58

08008328 <SysTick_Handler>:

void SysTick_Handler()
{
 8008328:	b480      	push	{r7}
 800832a:	af00      	add	r7, sp, #0
	systick_count++;
 800832c:	4b06      	ldr	r3, [pc, #24]	; (8008348 <SysTick_Handler+0x20>)
 800832e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008332:	1c50      	adds	r0, r2, #1
 8008334:	f143 0100 	adc.w	r1, r3, #0
 8008338:	4b03      	ldr	r3, [pc, #12]	; (8008348 <SysTick_Handler+0x20>)
 800833a:	e9c3 0100 	strd	r0, r1, [r3]
}
 800833e:	bf00      	nop
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr
 8008348:	20000b58 	.word	0x20000b58

0800834c <__NVIC_GetPriorityGrouping>:
{
 800834c:	b480      	push	{r7}
 800834e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008350:	4b04      	ldr	r3, [pc, #16]	; (8008364 <__NVIC_GetPriorityGrouping+0x18>)
 8008352:	68db      	ldr	r3, [r3, #12]
 8008354:	0a1b      	lsrs	r3, r3, #8
 8008356:	f003 0307 	and.w	r3, r3, #7
}
 800835a:	4618      	mov	r0, r3
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr
 8008364:	e000ed00 	.word	0xe000ed00

08008368 <__NVIC_EnableIRQ>:
{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0
 800836e:	4603      	mov	r3, r0
 8008370:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008376:	2b00      	cmp	r3, #0
 8008378:	db0b      	blt.n	8008392 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800837a:	79fb      	ldrb	r3, [r7, #7]
 800837c:	f003 021f 	and.w	r2, r3, #31
 8008380:	4907      	ldr	r1, [pc, #28]	; (80083a0 <__NVIC_EnableIRQ+0x38>)
 8008382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008386:	095b      	lsrs	r3, r3, #5
 8008388:	2001      	movs	r0, #1
 800838a:	fa00 f202 	lsl.w	r2, r0, r2
 800838e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008392:	bf00      	nop
 8008394:	370c      	adds	r7, #12
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr
 800839e:	bf00      	nop
 80083a0:	e000e100 	.word	0xe000e100

080083a4 <__NVIC_SetPriority>:
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	4603      	mov	r3, r0
 80083ac:	6039      	str	r1, [r7, #0]
 80083ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80083b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	db0a      	blt.n	80083ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	b2da      	uxtb	r2, r3
 80083bc:	490c      	ldr	r1, [pc, #48]	; (80083f0 <__NVIC_SetPriority+0x4c>)
 80083be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083c2:	0112      	lsls	r2, r2, #4
 80083c4:	b2d2      	uxtb	r2, r2
 80083c6:	440b      	add	r3, r1
 80083c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80083cc:	e00a      	b.n	80083e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	b2da      	uxtb	r2, r3
 80083d2:	4908      	ldr	r1, [pc, #32]	; (80083f4 <__NVIC_SetPriority+0x50>)
 80083d4:	79fb      	ldrb	r3, [r7, #7]
 80083d6:	f003 030f 	and.w	r3, r3, #15
 80083da:	3b04      	subs	r3, #4
 80083dc:	0112      	lsls	r2, r2, #4
 80083de:	b2d2      	uxtb	r2, r2
 80083e0:	440b      	add	r3, r1
 80083e2:	761a      	strb	r2, [r3, #24]
}
 80083e4:	bf00      	nop
 80083e6:	370c      	adds	r7, #12
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr
 80083f0:	e000e100 	.word	0xe000e100
 80083f4:	e000ed00 	.word	0xe000ed00

080083f8 <NVIC_EncodePriority>:
{
 80083f8:	b480      	push	{r7}
 80083fa:	b089      	sub	sp, #36	; 0x24
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f003 0307 	and.w	r3, r3, #7
 800840a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800840c:	69fb      	ldr	r3, [r7, #28]
 800840e:	f1c3 0307 	rsb	r3, r3, #7
 8008412:	2b04      	cmp	r3, #4
 8008414:	bf28      	it	cs
 8008416:	2304      	movcs	r3, #4
 8008418:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	3304      	adds	r3, #4
 800841e:	2b06      	cmp	r3, #6
 8008420:	d902      	bls.n	8008428 <NVIC_EncodePriority+0x30>
 8008422:	69fb      	ldr	r3, [r7, #28]
 8008424:	3b03      	subs	r3, #3
 8008426:	e000      	b.n	800842a <NVIC_EncodePriority+0x32>
 8008428:	2300      	movs	r3, #0
 800842a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800842c:	f04f 32ff 	mov.w	r2, #4294967295
 8008430:	69bb      	ldr	r3, [r7, #24]
 8008432:	fa02 f303 	lsl.w	r3, r2, r3
 8008436:	43da      	mvns	r2, r3
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	401a      	ands	r2, r3
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008440:	f04f 31ff 	mov.w	r1, #4294967295
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	fa01 f303 	lsl.w	r3, r1, r3
 800844a:	43d9      	mvns	r1, r3
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008450:	4313      	orrs	r3, r2
}
 8008452:	4618      	mov	r0, r3
 8008454:	3724      	adds	r7, #36	; 0x24
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr
	...

08008460 <LL_AHB2_GRP1_EnableClock>:
{
 8008460:	b480      	push	{r7}
 8008462:	b085      	sub	sp, #20
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8008468:	4b08      	ldr	r3, [pc, #32]	; (800848c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800846a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800846c:	4907      	ldr	r1, [pc, #28]	; (800848c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4313      	orrs	r3, r2
 8008472:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8008474:	4b05      	ldr	r3, [pc, #20]	; (800848c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8008476:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4013      	ands	r3, r2
 800847c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800847e:	68fb      	ldr	r3, [r7, #12]
}
 8008480:	bf00      	nop
 8008482:	3714      	adds	r7, #20
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr
 800848c:	40021000 	.word	0x40021000

08008490 <LL_APB1_GRP1_EnableClock>:
{
 8008490:	b480      	push	{r7}
 8008492:	b085      	sub	sp, #20
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8008498:	4b08      	ldr	r3, [pc, #32]	; (80084bc <LL_APB1_GRP1_EnableClock+0x2c>)
 800849a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800849c:	4907      	ldr	r1, [pc, #28]	; (80084bc <LL_APB1_GRP1_EnableClock+0x2c>)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4313      	orrs	r3, r2
 80084a2:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80084a4:	4b05      	ldr	r3, [pc, #20]	; (80084bc <LL_APB1_GRP1_EnableClock+0x2c>)
 80084a6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	4013      	ands	r3, r2
 80084ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80084ae:	68fb      	ldr	r3, [r7, #12]
}
 80084b0:	bf00      	nop
 80084b2:	3714      	adds	r7, #20
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr
 80084bc:	40021000 	.word	0x40021000

080084c0 <LL_APB2_GRP1_EnableClock>:
{
 80084c0:	b480      	push	{r7}
 80084c2:	b085      	sub	sp, #20
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80084c8:	4b08      	ldr	r3, [pc, #32]	; (80084ec <LL_APB2_GRP1_EnableClock+0x2c>)
 80084ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80084cc:	4907      	ldr	r1, [pc, #28]	; (80084ec <LL_APB2_GRP1_EnableClock+0x2c>)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	4313      	orrs	r3, r2
 80084d2:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80084d4:	4b05      	ldr	r3, [pc, #20]	; (80084ec <LL_APB2_GRP1_EnableClock+0x2c>)
 80084d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	4013      	ands	r3, r2
 80084dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80084de:	68fb      	ldr	r3, [r7, #12]
}
 80084e0:	bf00      	nop
 80084e2:	3714      	adds	r7, #20
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr
 80084ec:	40021000 	.word	0x40021000

080084f0 <LL_TIM_EnableCounter>:
{
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f043 0201 	orr.w	r2, r3, #1
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	601a      	str	r2, [r3, #0]
}
 8008504:	bf00      	nop
 8008506:	370c      	adds	r7, #12
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr

08008510 <LL_TIM_IsEnabledCounter>:
{
 8008510:	b480      	push	{r7}
 8008512:	b083      	sub	sp, #12
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->CR1, TIM_CR1_CEN) == (TIM_CR1_CEN)) ? 1UL : 0UL);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f003 0301 	and.w	r3, r3, #1
 8008520:	2b01      	cmp	r3, #1
 8008522:	d101      	bne.n	8008528 <LL_TIM_IsEnabledCounter+0x18>
 8008524:	2301      	movs	r3, #1
 8008526:	e000      	b.n	800852a <LL_TIM_IsEnabledCounter+0x1a>
 8008528:	2300      	movs	r3, #0
}
 800852a:	4618      	mov	r0, r3
 800852c:	370c      	adds	r7, #12
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr

08008536 <LL_TIM_EnableARRPreload>:
{
 8008536:	b480      	push	{r7}
 8008538:	b083      	sub	sp, #12
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	601a      	str	r2, [r3, #0]
}
 800854a:	bf00      	nop
 800854c:	370c      	adds	r7, #12
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr

08008556 <LL_TIM_CC_EnableChannel>:
{
 8008556:	b480      	push	{r7}
 8008558:	b083      	sub	sp, #12
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
 800855e:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6a1a      	ldr	r2, [r3, #32]
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	431a      	orrs	r2, r3
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	621a      	str	r2, [r3, #32]
}
 800856c:	bf00      	nop
 800856e:	370c      	adds	r7, #12
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <LL_TIM_CC_DisableChannel>:
{
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a1a      	ldr	r2, [r3, #32]
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	43db      	mvns	r3, r3
 800858a:	401a      	ands	r2, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	621a      	str	r2, [r3, #32]
}
 8008590:	bf00      	nop
 8008592:	370c      	adds	r7, #12
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <LL_TIM_OC_DisableFast>:
{
 800859c:	b480      	push	{r7}
 800859e:	b085      	sub	sp, #20
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d02e      	beq.n	800860a <LL_TIM_OC_DisableFast+0x6e>
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	2b04      	cmp	r3, #4
 80085b0:	d029      	beq.n	8008606 <LL_TIM_OC_DisableFast+0x6a>
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	2b10      	cmp	r3, #16
 80085b6:	d024      	beq.n	8008602 <LL_TIM_OC_DisableFast+0x66>
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	2b40      	cmp	r3, #64	; 0x40
 80085bc:	d01f      	beq.n	80085fe <LL_TIM_OC_DisableFast+0x62>
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085c4:	d019      	beq.n	80085fa <LL_TIM_OC_DisableFast+0x5e>
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085cc:	d013      	beq.n	80085f6 <LL_TIM_OC_DisableFast+0x5a>
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085d4:	d00d      	beq.n	80085f2 <LL_TIM_OC_DisableFast+0x56>
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085dc:	d007      	beq.n	80085ee <LL_TIM_OC_DisableFast+0x52>
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085e4:	d101      	bne.n	80085ea <LL_TIM_OC_DisableFast+0x4e>
 80085e6:	2308      	movs	r3, #8
 80085e8:	e010      	b.n	800860c <LL_TIM_OC_DisableFast+0x70>
 80085ea:	2309      	movs	r3, #9
 80085ec:	e00e      	b.n	800860c <LL_TIM_OC_DisableFast+0x70>
 80085ee:	2307      	movs	r3, #7
 80085f0:	e00c      	b.n	800860c <LL_TIM_OC_DisableFast+0x70>
 80085f2:	2306      	movs	r3, #6
 80085f4:	e00a      	b.n	800860c <LL_TIM_OC_DisableFast+0x70>
 80085f6:	2305      	movs	r3, #5
 80085f8:	e008      	b.n	800860c <LL_TIM_OC_DisableFast+0x70>
 80085fa:	2304      	movs	r3, #4
 80085fc:	e006      	b.n	800860c <LL_TIM_OC_DisableFast+0x70>
 80085fe:	2303      	movs	r3, #3
 8008600:	e004      	b.n	800860c <LL_TIM_OC_DisableFast+0x70>
 8008602:	2302      	movs	r3, #2
 8008604:	e002      	b.n	800860c <LL_TIM_OC_DisableFast+0x70>
 8008606:	2301      	movs	r3, #1
 8008608:	e000      	b.n	800860c <LL_TIM_OC_DisableFast+0x70>
 800860a:	2300      	movs	r3, #0
 800860c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	3318      	adds	r3, #24
 8008612:	4619      	mov	r1, r3
 8008614:	7bfb      	ldrb	r3, [r7, #15]
 8008616:	4a0b      	ldr	r2, [pc, #44]	; (8008644 <LL_TIM_OC_DisableFast+0xa8>)
 8008618:	5cd3      	ldrb	r3, [r2, r3]
 800861a:	440b      	add	r3, r1
 800861c:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	7bfb      	ldrb	r3, [r7, #15]
 8008624:	4908      	ldr	r1, [pc, #32]	; (8008648 <LL_TIM_OC_DisableFast+0xac>)
 8008626:	5ccb      	ldrb	r3, [r1, r3]
 8008628:	4619      	mov	r1, r3
 800862a:	2304      	movs	r3, #4
 800862c:	408b      	lsls	r3, r1
 800862e:	43db      	mvns	r3, r3
 8008630:	401a      	ands	r2, r3
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	601a      	str	r2, [r3, #0]
}
 8008636:	bf00      	nop
 8008638:	3714      	adds	r7, #20
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr
 8008642:	bf00      	nop
 8008644:	0800a6a4 	.word	0x0800a6a4
 8008648:	0800a6b0 	.word	0x0800a6b0

0800864c <LL_TIM_OC_EnablePreload>:
{
 800864c:	b480      	push	{r7}
 800864e:	b085      	sub	sp, #20
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	2b01      	cmp	r3, #1
 800865a:	d02e      	beq.n	80086ba <LL_TIM_OC_EnablePreload+0x6e>
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	2b04      	cmp	r3, #4
 8008660:	d029      	beq.n	80086b6 <LL_TIM_OC_EnablePreload+0x6a>
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	2b10      	cmp	r3, #16
 8008666:	d024      	beq.n	80086b2 <LL_TIM_OC_EnablePreload+0x66>
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	2b40      	cmp	r3, #64	; 0x40
 800866c:	d01f      	beq.n	80086ae <LL_TIM_OC_EnablePreload+0x62>
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008674:	d019      	beq.n	80086aa <LL_TIM_OC_EnablePreload+0x5e>
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800867c:	d013      	beq.n	80086a6 <LL_TIM_OC_EnablePreload+0x5a>
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008684:	d00d      	beq.n	80086a2 <LL_TIM_OC_EnablePreload+0x56>
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800868c:	d007      	beq.n	800869e <LL_TIM_OC_EnablePreload+0x52>
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008694:	d101      	bne.n	800869a <LL_TIM_OC_EnablePreload+0x4e>
 8008696:	2308      	movs	r3, #8
 8008698:	e010      	b.n	80086bc <LL_TIM_OC_EnablePreload+0x70>
 800869a:	2309      	movs	r3, #9
 800869c:	e00e      	b.n	80086bc <LL_TIM_OC_EnablePreload+0x70>
 800869e:	2307      	movs	r3, #7
 80086a0:	e00c      	b.n	80086bc <LL_TIM_OC_EnablePreload+0x70>
 80086a2:	2306      	movs	r3, #6
 80086a4:	e00a      	b.n	80086bc <LL_TIM_OC_EnablePreload+0x70>
 80086a6:	2305      	movs	r3, #5
 80086a8:	e008      	b.n	80086bc <LL_TIM_OC_EnablePreload+0x70>
 80086aa:	2304      	movs	r3, #4
 80086ac:	e006      	b.n	80086bc <LL_TIM_OC_EnablePreload+0x70>
 80086ae:	2303      	movs	r3, #3
 80086b0:	e004      	b.n	80086bc <LL_TIM_OC_EnablePreload+0x70>
 80086b2:	2302      	movs	r3, #2
 80086b4:	e002      	b.n	80086bc <LL_TIM_OC_EnablePreload+0x70>
 80086b6:	2301      	movs	r3, #1
 80086b8:	e000      	b.n	80086bc <LL_TIM_OC_EnablePreload+0x70>
 80086ba:	2300      	movs	r3, #0
 80086bc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	3318      	adds	r3, #24
 80086c2:	4619      	mov	r1, r3
 80086c4:	7bfb      	ldrb	r3, [r7, #15]
 80086c6:	4a0a      	ldr	r2, [pc, #40]	; (80086f0 <LL_TIM_OC_EnablePreload+0xa4>)
 80086c8:	5cd3      	ldrb	r3, [r2, r3]
 80086ca:	440b      	add	r3, r1
 80086cc:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	7bfb      	ldrb	r3, [r7, #15]
 80086d4:	4907      	ldr	r1, [pc, #28]	; (80086f4 <LL_TIM_OC_EnablePreload+0xa8>)
 80086d6:	5ccb      	ldrb	r3, [r1, r3]
 80086d8:	4619      	mov	r1, r3
 80086da:	2308      	movs	r3, #8
 80086dc:	408b      	lsls	r3, r1
 80086de:	431a      	orrs	r2, r3
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	601a      	str	r2, [r3, #0]
}
 80086e4:	bf00      	nop
 80086e6:	3714      	adds	r7, #20
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr
 80086f0:	0800a6a4 	.word	0x0800a6a4
 80086f4:	0800a6b0 	.word	0x0800a6b0

080086f8 <LL_TIM_DisableMasterSlaveMode>:
{
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	689b      	ldr	r3, [r3, #8]
 8008704:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	609a      	str	r2, [r3, #8]
}
 800870c:	bf00      	nop
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <LL_TIM_EnableAutomaticOutput>:
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_AOE);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008724:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	645a      	str	r2, [r3, #68]	; 0x44
}
 800872c:	bf00      	nop
 800872e:	370c      	adds	r7, #12
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <LL_TIM_ClearFlag_UPDATE>:
{
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f06f 0201 	mvn.w	r2, #1
 8008746:	611a      	str	r2, [r3, #16]
}
 8008748:	bf00      	nop
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	691b      	ldr	r3, [r3, #16]
 8008760:	f003 0301 	and.w	r3, r3, #1
 8008764:	2b01      	cmp	r3, #1
 8008766:	d101      	bne.n	800876c <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8008768:	2301      	movs	r3, #1
 800876a:	e000      	b.n	800876e <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	370c      	adds	r7, #12
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr

0800877a <LL_TIM_EnableIT_UPDATE>:
{
 800877a:	b480      	push	{r7}
 800877c:	b083      	sub	sp, #12
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	f043 0201 	orr.w	r2, r3, #1
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	60da      	str	r2, [r3, #12]
}
 800878e:	bf00      	nop
 8008790:	370c      	adds	r7, #12
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr

0800879a <STRHAL_TIM_Init>:
 [STRHAL_TIM_TIM8_CH4N_PC13] = { .tim = &_tims[STRHAL_TIM_TIM8], .port = GPIOC, .pin = LL_GPIO_PIN_13, .afn = LL_GPIO_AF_4,  .n = LL_TIM_CHANNEL_CH4N, .ccr = &TIM8->CCR4, },
 [STRHAL_TIM_TIM8_CH4N_PD0]  = { .tim = &_tims[STRHAL_TIM_TIM8], .port = GPIOC, .pin = LL_GPIO_PIN_0,  .afn = LL_GPIO_AF_6,  .n = LL_TIM_CHANNEL_CH4N, .ccr = &TIM8->CCR4, },
 [STRHAL_TIM_TIM8_CH4_PD1]   = { .tim = &_tims[STRHAL_TIM_TIM8], .port = GPIOC, .pin = LL_GPIO_PIN_1,  .afn = LL_GPIO_AF_4,  .n = LL_TIM_CHANNEL_CH4,  .ccr = &TIM8->CCR4, }, };

void STRHAL_TIM_Init()
{
 800879a:	b580      	push	{r7, lr}
 800879c:	af00      	add	r7, sp, #0
	/* GPIO Ports Clock Enable */
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800879e:	2001      	movs	r0, #1
 80087a0:	f7ff fe5e 	bl	8008460 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80087a4:	2002      	movs	r0, #2
 80087a6:	f7ff fe5b 	bl	8008460 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80087aa:	2004      	movs	r0, #4
 80087ac:	f7ff fe58 	bl	8008460 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 80087b0:	2008      	movs	r0, #8
 80087b2:	f7ff fe55 	bl	8008460 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 80087b6:	2010      	movs	r0, #16
 80087b8:	f7ff fe52 	bl	8008460 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 80087bc:	2020      	movs	r0, #32
 80087be:	f7ff fe4f 	bl	8008460 <LL_AHB2_GRP1_EnableClock>

	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80087c2:	2001      	movs	r0, #1
 80087c4:	f7ff fe64 	bl	8008490 <LL_APB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80087c8:	2002      	movs	r0, #2
 80087ca:	f7ff fe61 	bl	8008490 <LL_APB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 80087ce:	2004      	movs	r0, #4
 80087d0:	f7ff fe5e 	bl	8008490 <LL_APB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 80087d4:	2010      	movs	r0, #16
 80087d6:	f7ff fe5b 	bl	8008490 <LL_APB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 80087da:	2020      	movs	r0, #32
 80087dc:	f7ff fe58 	bl	8008490 <LL_APB1_GRP1_EnableClock>

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 80087e0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80087e4:	f7ff fe6c 	bl	80084c0 <LL_APB2_GRP1_EnableClock>
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM8);
 80087e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80087ec:	f7ff fe68 	bl	80084c0 <LL_APB2_GRP1_EnableClock>

	NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80087f0:	2036      	movs	r0, #54	; 0x36
 80087f2:	f7ff fdb9 	bl	8008368 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(TIM7_DAC_IRQn);
 80087f6:	2037      	movs	r0, #55	; 0x37
 80087f8:	f7ff fdb6 	bl	8008368 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM6_DAC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 1, 3));
 80087fc:	f7ff fda6 	bl	800834c <__NVIC_GetPriorityGrouping>
 8008800:	4603      	mov	r3, r0
 8008802:	2203      	movs	r2, #3
 8008804:	2101      	movs	r1, #1
 8008806:	4618      	mov	r0, r3
 8008808:	f7ff fdf6 	bl	80083f8 <NVIC_EncodePriority>
 800880c:	4603      	mov	r3, r0
 800880e:	4619      	mov	r1, r3
 8008810:	2036      	movs	r0, #54	; 0x36
 8008812:	f7ff fdc7 	bl	80083a4 <__NVIC_SetPriority>
	NVIC_SetPriority(TIM7_DAC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 1, 2)); //TODO check priorities
 8008816:	f7ff fd99 	bl	800834c <__NVIC_GetPriorityGrouping>
 800881a:	4603      	mov	r3, r0
 800881c:	2202      	movs	r2, #2
 800881e:	2101      	movs	r1, #1
 8008820:	4618      	mov	r0, r3
 8008822:	f7ff fde9 	bl	80083f8 <NVIC_EncodePriority>
 8008826:	4603      	mov	r3, r0
 8008828:	4619      	mov	r1, r3
 800882a:	2037      	movs	r0, #55	; 0x37
 800882c:	f7ff fdba 	bl	80083a4 <__NVIC_SetPriority>
}
 8008830:	bf00      	nop
 8008832:	bd80      	pop	{r7, pc}

08008834 <STRHAL_TIM_PWM_Init>:

int32_t STRHAL_TIM_PWM_Init(STRHAL_TIM_TimerId_t id, uint16_t psc, uint16_t res)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b08a      	sub	sp, #40	; 0x28
 8008838:	af00      	add	r7, sp, #0
 800883a:	4603      	mov	r3, r0
 800883c:	71fb      	strb	r3, [r7, #7]
 800883e:	460b      	mov	r3, r1
 8008840:	80bb      	strh	r3, [r7, #4]
 8008842:	4613      	mov	r3, r2
 8008844:	807b      	strh	r3, [r7, #2]
	if (id > STRHAL_TIM_N_TIM || id < 0)
 8008846:	79fb      	ldrb	r3, [r7, #7]
 8008848:	2b05      	cmp	r3, #5
 800884a:	d902      	bls.n	8008852 <STRHAL_TIM_PWM_Init+0x1e>
		return -1;
 800884c:	f04f 33ff 	mov.w	r3, #4294967295
 8008850:	e06e      	b.n	8008930 <STRHAL_TIM_PWM_Init+0xfc>

	STRHAL_TIM_Timer_t *tim = &_tims[id];
 8008852:	79fb      	ldrb	r3, [r7, #7]
 8008854:	00db      	lsls	r3, r3, #3
 8008856:	4a38      	ldr	r2, [pc, #224]	; (8008938 <STRHAL_TIM_PWM_Init+0x104>)
 8008858:	4413      	add	r3, r2
 800885a:	627b      	str	r3, [r7, #36]	; 0x24
	if (tim->utype == STRHAL_TIM_USAGE_PWM)
 800885c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885e:	79db      	ldrb	r3, [r3, #7]
 8008860:	2b02      	cmp	r3, #2
 8008862:	d101      	bne.n	8008868 <STRHAL_TIM_PWM_Init+0x34>
		return 0; //TODO: return actual hardware Frequency
 8008864:	2300      	movs	r3, #0
 8008866:	e063      	b.n	8008930 <STRHAL_TIM_PWM_Init+0xfc>

	if (tim->utype != STRHAL_TIM_USAGE_000)
 8008868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886a:	79db      	ldrb	r3, [r3, #7]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d002      	beq.n	8008876 <STRHAL_TIM_PWM_Init+0x42>
		return -1;
 8008870:	f04f 33ff 	mov.w	r3, #4294967295
 8008874:	e05c      	b.n	8008930 <STRHAL_TIM_PWM_Init+0xfc>

	LL_TIM_InitTypeDef TIM_InitStruct =
 8008876:	f107 030c 	add.w	r3, r7, #12
 800887a:	2200      	movs	r2, #0
 800887c:	601a      	str	r2, [r3, #0]
 800887e:	605a      	str	r2, [r3, #4]
 8008880:	609a      	str	r2, [r3, #8]
 8008882:	60da      	str	r2, [r3, #12]
 8008884:	611a      	str	r2, [r3, #16]
	{ 0 };
	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8008886:	2300      	movs	r3, #0
 8008888:	61bb      	str	r3, [r7, #24]
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERDIRECTION_UP;
 800888a:	2300      	movs	r3, #0
 800888c:	613b      	str	r3, [r7, #16]
	TIM_InitStruct.Autoreload = res - 1;
 800888e:	887b      	ldrh	r3, [r7, #2]
 8008890:	3b01      	subs	r3, #1
 8008892:	617b      	str	r3, [r7, #20]
	TIM_InitStruct.Prescaler = psc > 0 ? psc - 1 : psc;
 8008894:	88bb      	ldrh	r3, [r7, #4]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d003      	beq.n	80088a2 <STRHAL_TIM_PWM_Init+0x6e>
 800889a:	88bb      	ldrh	r3, [r7, #4]
 800889c:	3b01      	subs	r3, #1
 800889e:	b29b      	uxth	r3, r3
 80088a0:	e000      	b.n	80088a4 <STRHAL_TIM_PWM_Init+0x70>
 80088a2:	88bb      	ldrh	r3, [r7, #4]
 80088a4:	81bb      	strh	r3, [r7, #12]
	LL_TIM_Init(tim->timx, &TIM_InitStruct);
 80088a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f107 020c 	add.w	r2, r7, #12
 80088ae:	4611      	mov	r1, r2
 80088b0:	4618      	mov	r0, r3
 80088b2:	f7fc f991 	bl	8004bd8 <LL_TIM_Init>

	LL_TIM_EnableARRPreload(tim->timx);
 80088b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4618      	mov	r0, r3
 80088bc:	f7ff fe3b 	bl	8008536 <LL_TIM_EnableARRPreload>
	if (IS_TIM_BREAK_INSTANCE(tim->timx))
 80088c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a1d      	ldr	r2, [pc, #116]	; (800893c <STRHAL_TIM_PWM_Init+0x108>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d018      	beq.n	80088fc <STRHAL_TIM_PWM_Init+0xc8>
 80088ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a1c      	ldr	r2, [pc, #112]	; (8008940 <STRHAL_TIM_PWM_Init+0x10c>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d013      	beq.n	80088fc <STRHAL_TIM_PWM_Init+0xc8>
 80088d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a1a      	ldr	r2, [pc, #104]	; (8008944 <STRHAL_TIM_PWM_Init+0x110>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d00e      	beq.n	80088fc <STRHAL_TIM_PWM_Init+0xc8>
 80088de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a19      	ldr	r2, [pc, #100]	; (8008948 <STRHAL_TIM_PWM_Init+0x114>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d009      	beq.n	80088fc <STRHAL_TIM_PWM_Init+0xc8>
 80088e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a17      	ldr	r2, [pc, #92]	; (800894c <STRHAL_TIM_PWM_Init+0x118>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d004      	beq.n	80088fc <STRHAL_TIM_PWM_Init+0xc8>
 80088f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a16      	ldr	r2, [pc, #88]	; (8008950 <STRHAL_TIM_PWM_Init+0x11c>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d104      	bne.n	8008906 <STRHAL_TIM_PWM_Init+0xd2>
		LL_TIM_EnableAutomaticOutput(tim->timx);
 80088fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4618      	mov	r0, r3
 8008902:	f7ff ff09 	bl	8008718 <LL_TIM_EnableAutomaticOutput>

	LL_TIM_DisableMasterSlaveMode(tim->timx);
 8008906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4618      	mov	r0, r3
 800890c:	f7ff fef4 	bl	80086f8 <LL_TIM_DisableMasterSlaveMode>

	tim->cfreq = 0;
 8008910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008912:	2200      	movs	r2, #0
 8008914:	809a      	strh	r2, [r3, #4]
	tim->utype = STRHAL_TIM_USAGE_PWM;
 8008916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008918:	2202      	movs	r2, #2
 800891a:	71da      	strb	r2, [r3, #7]

	uint16_t freq = SystemCoreClock / (res * psc);
 800891c:	4b0d      	ldr	r3, [pc, #52]	; (8008954 <STRHAL_TIM_PWM_Init+0x120>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	887a      	ldrh	r2, [r7, #2]
 8008922:	88b9      	ldrh	r1, [r7, #4]
 8008924:	fb01 f202 	mul.w	r2, r1, r2
 8008928:	fbb3 f3f2 	udiv	r3, r3, r2
 800892c:	847b      	strh	r3, [r7, #34]	; 0x22
	return freq;
 800892e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
}
 8008930:	4618      	mov	r0, r3
 8008932:	3728      	adds	r7, #40	; 0x28
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}
 8008938:	2000004c 	.word	0x2000004c
 800893c:	40012c00 	.word	0x40012c00
 8008940:	40013400 	.word	0x40013400
 8008944:	40014000 	.word	0x40014000
 8008948:	40014400 	.word	0x40014400
 800894c:	40014800 	.word	0x40014800
 8008950:	40015000 	.word	0x40015000
 8008954:	20000000 	.word	0x20000000

08008958 <STRHAL_TIM_PWM_AddChannel>:

int STRHAL_TIM_PWM_AddChannel(STRHAL_TIM_PWM_Channel_t *pwmChannel, STRHAL_TIM_ChannelId_t channelId, STRHAL_TIM_PWM_ChannelType_t pwmType)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b092      	sub	sp, #72	; 0x48
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	460b      	mov	r3, r1
 8008962:	70fb      	strb	r3, [r7, #3]
 8008964:	4613      	mov	r3, r2
 8008966:	70bb      	strb	r3, [r7, #2]
	if (channelId > STRHAL_TIM_N_TIM_CHANNELS)
 8008968:	78fb      	ldrb	r3, [r7, #3]
 800896a:	2b5b      	cmp	r3, #91	; 0x5b
 800896c:	d902      	bls.n	8008974 <STRHAL_TIM_PWM_AddChannel+0x1c>
		return -1;
 800896e:	f04f 33ff 	mov.w	r3, #4294967295
 8008972:	e060      	b.n	8008a36 <STRHAL_TIM_PWM_AddChannel+0xde>

	const STRHAL_TIM_Channel_t *ch = &_tim_channels[channelId];
 8008974:	78fa      	ldrb	r2, [r7, #3]
 8008976:	4613      	mov	r3, r2
 8008978:	005b      	lsls	r3, r3, #1
 800897a:	4413      	add	r3, r2
 800897c:	00db      	lsls	r3, r3, #3
 800897e:	4a30      	ldr	r2, [pc, #192]	; (8008a40 <STRHAL_TIM_PWM_AddChannel+0xe8>)
 8008980:	4413      	add	r3, r2
 8008982:	647b      	str	r3, [r7, #68]	; 0x44
	if (pwmType == STRHAL_TIM_PWM_CHANNELTYPE_SO)
 8008984:	78bb      	ldrb	r3, [r7, #2]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d14e      	bne.n	8008a28 <STRHAL_TIM_PWM_AddChannel+0xd0>
	{

		LL_GPIO_InitTypeDef GPIO_InitStruct =
 800898a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800898e:	2200      	movs	r2, #0
 8008990:	601a      	str	r2, [r3, #0]
 8008992:	605a      	str	r2, [r3, #4]
 8008994:	609a      	str	r2, [r3, #8]
 8008996:	60da      	str	r2, [r3, #12]
 8008998:	611a      	str	r2, [r3, #16]
 800899a:	615a      	str	r2, [r3, #20]
		{ 0 };
		GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800899c:	2302      	movs	r3, #2
 800899e:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = ch->afn;
 80089a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	643b      	str	r3, [r7, #64]	; 0x40
		GPIO_InitStruct.Pin = ch->pin;
 80089a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089a8:	689b      	ldr	r3, [r3, #8]
 80089aa:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80089ac:	2300      	movs	r3, #0
 80089ae:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80089b0:	2300      	movs	r3, #0
 80089b2:	63fb      	str	r3, [r7, #60]	; 0x3c
		GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80089b4:	2302      	movs	r3, #2
 80089b6:	637b      	str	r3, [r7, #52]	; 0x34
		LL_GPIO_Init(ch->port, &GPIO_InitStruct);
 80089b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80089c0:	4611      	mov	r1, r2
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7fb fcc3 	bl	800434e <LL_GPIO_Init>

		LL_TIM_OC_InitTypeDef OC_InitStruct =
 80089c8:	f107 030c 	add.w	r3, r7, #12
 80089cc:	2220      	movs	r2, #32
 80089ce:	2100      	movs	r1, #0
 80089d0:	4618      	mov	r0, r3
 80089d2:	f001 f86b 	bl	8009aac <memset>
		{ 0 };
		OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80089d6:	2360      	movs	r3, #96	; 0x60
 80089d8:	60fb      	str	r3, [r7, #12]
		OC_InitStruct.OCState = LL_TIM_OCSTATE_ENABLE;
 80089da:	2301      	movs	r3, #1
 80089dc:	613b      	str	r3, [r7, #16]
		OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80089de:	2300      	movs	r3, #0
 80089e0:	61fb      	str	r3, [r7, #28]
		OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_LOW;
 80089e2:	2302      	movs	r3, #2
 80089e4:	623b      	str	r3, [r7, #32]
		OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 80089e6:	2300      	movs	r3, #0
 80089e8:	627b      	str	r3, [r7, #36]	; 0x24
		OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_HIGH;
 80089ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80089ee:	62bb      	str	r3, [r7, #40]	; 0x28
		LL_TIM_OC_Init(ch->tim->timx, ch->n, &OC_InitStruct);
 80089f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	6818      	ldr	r0, [r3, #0]
 80089f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089f8:	691b      	ldr	r3, [r3, #16]
 80089fa:	f107 020c 	add.w	r2, r7, #12
 80089fe:	4619      	mov	r1, r3
 8008a00:	f7fc f98c 	bl	8004d1c <LL_TIM_OC_Init>
		LL_TIM_OC_EnablePreload(ch->tim->timx, ch->n);
 8008a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a0c:	691b      	ldr	r3, [r3, #16]
 8008a0e:	4619      	mov	r1, r3
 8008a10:	4610      	mov	r0, r2
 8008a12:	f7ff fe1b 	bl	800864c <LL_TIM_OC_EnablePreload>
		LL_TIM_OC_DisableFast(ch->tim->timx, ch->n);
 8008a16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	681a      	ldr	r2, [r3, #0]
 8008a1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a1e:	691b      	ldr	r3, [r3, #16]
 8008a20:	4619      	mov	r1, r3
 8008a22:	4610      	mov	r0, r2
 8008a24:	f7ff fdba 	bl	800859c <LL_TIM_OC_DisableFast>
	else if (pwmType == STRHAL_TIM_PWM_CHANNELTYPE_IN)
	{
		//LL_TIM_IC_InitTypeDef IC_InitStruct = {0};
	}

	pwmChannel->channelId = channelId;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	78fa      	ldrb	r2, [r7, #3]
 8008a2c:	701a      	strb	r2, [r3, #0]
	pwmChannel->type = pwmType;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	78ba      	ldrb	r2, [r7, #2]
 8008a32:	705a      	strb	r2, [r3, #1]
	return 0;
 8008a34:	2300      	movs	r3, #0
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3748      	adds	r7, #72	; 0x48
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	0800a6bc 	.word	0x0800a6bc

08008a44 <STRHAL_TIM_PWM_SetDuty>:
	LL_TIM_SetAutoReload(tim->timx, res - 1);
	return SystemCoreClock / (psc * res);
}

int32_t STRHAL_TIM_PWM_SetDuty(STRHAL_TIM_PWM_Channel_t *pwmChannel, uint16_t duty)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b085      	sub	sp, #20
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	807b      	strh	r3, [r7, #2]
	if (pwmChannel->channelId > STRHAL_TIM_N_TIM_CHANNELS)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	2b5b      	cmp	r3, #91	; 0x5b
 8008a56:	d902      	bls.n	8008a5e <STRHAL_TIM_PWM_SetDuty+0x1a>
		return -1;
 8008a58:	f04f 33ff 	mov.w	r3, #4294967295
 8008a5c:	e016      	b.n	8008a8c <STRHAL_TIM_PWM_SetDuty+0x48>

	const STRHAL_TIM_Channel_t *ch = &_tim_channels[pwmChannel->channelId];
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	461a      	mov	r2, r3
 8008a64:	4613      	mov	r3, r2
 8008a66:	005b      	lsls	r3, r3, #1
 8008a68:	4413      	add	r3, r2
 8008a6a:	00db      	lsls	r3, r3, #3
 8008a6c:	4a0a      	ldr	r2, [pc, #40]	; (8008a98 <STRHAL_TIM_PWM_SetDuty+0x54>)
 8008a6e:	4413      	add	r3, r2
 8008a70:	60fb      	str	r3, [r7, #12]
	if (ch->tim->utype != STRHAL_TIM_USAGE_PWM)
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	79db      	ldrb	r3, [r3, #7]
 8008a78:	2b02      	cmp	r3, #2
 8008a7a:	d002      	beq.n	8008a82 <STRHAL_TIM_PWM_SetDuty+0x3e>
		return -1;
 8008a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8008a80:	e004      	b.n	8008a8c <STRHAL_TIM_PWM_SetDuty+0x48>

	*ch->ccr = duty;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	695b      	ldr	r3, [r3, #20]
 8008a86:	887a      	ldrh	r2, [r7, #2]
 8008a88:	601a      	str	r2, [r3, #0]
	return duty;
 8008a8a:	887b      	ldrh	r3, [r7, #2]
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3714      	adds	r7, #20
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr
 8008a98:	0800a6bc 	.word	0x0800a6bc

08008a9c <STRHAL_TIM_PWM_Enable>:

int STRHAL_TIM_PWM_Enable(STRHAL_TIM_PWM_Channel_t *pwmChannel, int enable)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
	if (pwmChannel->channelId > STRHAL_TIM_N_TIM_CHANNELS)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	2b5b      	cmp	r3, #91	; 0x5b
 8008aac:	d902      	bls.n	8008ab4 <STRHAL_TIM_PWM_Enable+0x18>
		return -1;
 8008aae:	f04f 33ff 	mov.w	r3, #4294967295
 8008ab2:	e037      	b.n	8008b24 <STRHAL_TIM_PWM_Enable+0x88>

	const STRHAL_TIM_Channel_t *ch = &_tim_channels[pwmChannel->channelId];
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	461a      	mov	r2, r3
 8008aba:	4613      	mov	r3, r2
 8008abc:	005b      	lsls	r3, r3, #1
 8008abe:	4413      	add	r3, r2
 8008ac0:	00db      	lsls	r3, r3, #3
 8008ac2:	4a1a      	ldr	r2, [pc, #104]	; (8008b2c <STRHAL_TIM_PWM_Enable+0x90>)
 8008ac4:	4413      	add	r3, r2
 8008ac6:	60fb      	str	r3, [r7, #12]
	if (ch->tim->utype != STRHAL_TIM_USAGE_PWM)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	79db      	ldrb	r3, [r3, #7]
 8008ace:	2b02      	cmp	r3, #2
 8008ad0:	d002      	beq.n	8008ad8 <STRHAL_TIM_PWM_Enable+0x3c>
		return -1;
 8008ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ad6:	e025      	b.n	8008b24 <STRHAL_TIM_PWM_Enable+0x88>

	if (enable)
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d018      	beq.n	8008b10 <STRHAL_TIM_PWM_Enable+0x74>
	{
		LL_TIM_CC_EnableChannel(ch->tim->timx, ch->n);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	681a      	ldr	r2, [r3, #0]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	691b      	ldr	r3, [r3, #16]
 8008ae8:	4619      	mov	r1, r3
 8008aea:	4610      	mov	r0, r2
 8008aec:	f7ff fd33 	bl	8008556 <LL_TIM_CC_EnableChannel>
		if (!LL_TIM_IsEnabledCounter(ch->tim->timx))
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4618      	mov	r0, r3
 8008af8:	f7ff fd0a 	bl	8008510 <LL_TIM_IsEnabledCounter>
 8008afc:	4603      	mov	r3, r0
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d10f      	bne.n	8008b22 <STRHAL_TIM_PWM_Enable+0x86>
			LL_TIM_EnableCounter(ch->tim->timx);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f7ff fcf1 	bl	80084f0 <LL_TIM_EnableCounter>
 8008b0e:	e008      	b.n	8008b22 <STRHAL_TIM_PWM_Enable+0x86>
	}
	else
	{
		LL_TIM_CC_DisableChannel(ch->tim->timx, ch->n);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	691b      	ldr	r3, [r3, #16]
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	4610      	mov	r0, r2
 8008b1e:	f7ff fd2b 	bl	8008578 <LL_TIM_CC_DisableChannel>
	}

	return enable;
 8008b22:	683b      	ldr	r3, [r7, #0]
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3710      	adds	r7, #16
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	0800a6bc 	.word	0x0800a6bc

08008b30 <STRHAL_TIM_Heartbeat_Init>:

int32_t STRHAL_TIM_Heartbeat_Init(STRHAL_TIM_BasicTimerId_t id, uint16_t psc, uint16_t res)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b08a      	sub	sp, #40	; 0x28
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	4603      	mov	r3, r0
 8008b38:	71fb      	strb	r3, [r7, #7]
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	80bb      	strh	r3, [r7, #4]
 8008b3e:	4613      	mov	r3, r2
 8008b40:	807b      	strh	r3, [r7, #2]
	if (id > STRHAL_TIM_N_BASICTIM || id < 0)
 8008b42:	79fb      	ldrb	r3, [r7, #7]
 8008b44:	2b02      	cmp	r3, #2
 8008b46:	d902      	bls.n	8008b4e <STRHAL_TIM_Heartbeat_Init+0x1e>
		return -1;
 8008b48:	f04f 33ff 	mov.w	r3, #4294967295
 8008b4c:	e043      	b.n	8008bd6 <STRHAL_TIM_Heartbeat_Init+0xa6>

	STRHAL_TIM_BasicTimer_t *tim = &_basicTims[id];
 8008b4e:	79fa      	ldrb	r2, [r7, #7]
 8008b50:	4613      	mov	r3, r2
 8008b52:	005b      	lsls	r3, r3, #1
 8008b54:	4413      	add	r3, r2
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	4a21      	ldr	r2, [pc, #132]	; (8008be0 <STRHAL_TIM_Heartbeat_Init+0xb0>)
 8008b5a:	4413      	add	r3, r2
 8008b5c:	627b      	str	r3, [r7, #36]	; 0x24
	if (tim->utype != STRHAL_TIM_USAGE_000)
 8008b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b60:	799b      	ldrb	r3, [r3, #6]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d002      	beq.n	8008b6c <STRHAL_TIM_Heartbeat_Init+0x3c>
		return -1;
 8008b66:	f04f 33ff 	mov.w	r3, #4294967295
 8008b6a:	e034      	b.n	8008bd6 <STRHAL_TIM_Heartbeat_Init+0xa6>

	LL_TIM_InitTypeDef TIM_InitStruct =
 8008b6c:	f107 030c 	add.w	r3, r7, #12
 8008b70:	2200      	movs	r2, #0
 8008b72:	601a      	str	r2, [r3, #0]
 8008b74:	605a      	str	r2, [r3, #4]
 8008b76:	609a      	str	r2, [r3, #8]
 8008b78:	60da      	str	r2, [r3, #12]
 8008b7a:	611a      	str	r2, [r3, #16]
	{ 0 };
	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	61bb      	str	r3, [r7, #24]
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERDIRECTION_UP;
 8008b80:	2300      	movs	r3, #0
 8008b82:	613b      	str	r3, [r7, #16]
	TIM_InitStruct.Autoreload = res - 1;
 8008b84:	887b      	ldrh	r3, [r7, #2]
 8008b86:	3b01      	subs	r3, #1
 8008b88:	617b      	str	r3, [r7, #20]
	TIM_InitStruct.Prescaler = psc > 0 ? psc - 1 : psc;
 8008b8a:	88bb      	ldrh	r3, [r7, #4]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d003      	beq.n	8008b98 <STRHAL_TIM_Heartbeat_Init+0x68>
 8008b90:	88bb      	ldrh	r3, [r7, #4]
 8008b92:	3b01      	subs	r3, #1
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	e000      	b.n	8008b9a <STRHAL_TIM_Heartbeat_Init+0x6a>
 8008b98:	88bb      	ldrh	r3, [r7, #4]
 8008b9a:	81bb      	strh	r3, [r7, #12]
	LL_TIM_Init(tim->timx, &TIM_InitStruct);
 8008b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f107 020c 	add.w	r2, r7, #12
 8008ba4:	4611      	mov	r1, r2
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f7fc f816 	bl	8004bd8 <LL_TIM_Init>

	LL_TIM_EnableARRPreload(tim->timx);
 8008bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f7ff fcc0 	bl	8008536 <LL_TIM_EnableARRPreload>

	tim->cfreq = 0;
 8008bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb8:	2200      	movs	r2, #0
 8008bba:	809a      	strh	r2, [r3, #4]
	tim->utype = STRHAL_TIM_USAGE_BRN;
 8008bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bbe:	2203      	movs	r2, #3
 8008bc0:	719a      	strb	r2, [r3, #6]

	uint16_t freq = SystemCoreClock / (res * psc);
 8008bc2:	4b08      	ldr	r3, [pc, #32]	; (8008be4 <STRHAL_TIM_Heartbeat_Init+0xb4>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	887a      	ldrh	r2, [r7, #2]
 8008bc8:	88b9      	ldrh	r1, [r7, #4]
 8008bca:	fb01 f202 	mul.w	r2, r1, r2
 8008bce:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bd2:	847b      	strh	r3, [r7, #34]	; 0x22
	return freq;
 8008bd4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3728      	adds	r7, #40	; 0x28
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop
 8008be0:	20000034 	.word	0x20000034
 8008be4:	20000000 	.word	0x20000000

08008be8 <STRHAL_TIM_Heartbeat_Subscribe>:

int STRHAL_TIM_Heartbeat_Subscribe(STRHAL_TIM_BasicTimerId_t id, STRHAL_TIM_Burnable_t burn)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b085      	sub	sp, #20
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	4603      	mov	r3, r0
 8008bf0:	6039      	str	r1, [r7, #0]
 8008bf2:	71fb      	strb	r3, [r7, #7]
	if (id > STRHAL_TIM_N_BASICTIM || id < 0)
 8008bf4:	79fb      	ldrb	r3, [r7, #7]
 8008bf6:	2b02      	cmp	r3, #2
 8008bf8:	d902      	bls.n	8008c00 <STRHAL_TIM_Heartbeat_Subscribe+0x18>
		return -1;
 8008bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8008bfe:	e012      	b.n	8008c26 <STRHAL_TIM_Heartbeat_Subscribe+0x3e>

	STRHAL_TIM_BasicTimer_t *tim = &_basicTims[id];
 8008c00:	79fa      	ldrb	r2, [r7, #7]
 8008c02:	4613      	mov	r3, r2
 8008c04:	005b      	lsls	r3, r3, #1
 8008c06:	4413      	add	r3, r2
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	4a0a      	ldr	r2, [pc, #40]	; (8008c34 <STRHAL_TIM_Heartbeat_Subscribe+0x4c>)
 8008c0c:	4413      	add	r3, r2
 8008c0e:	60fb      	str	r3, [r7, #12]
	if (tim->utype != STRHAL_TIM_USAGE_BRN)
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	799b      	ldrb	r3, [r3, #6]
 8008c14:	2b03      	cmp	r3, #3
 8008c16:	d002      	beq.n	8008c1e <STRHAL_TIM_Heartbeat_Subscribe+0x36>
		return -1;
 8008c18:	f04f 33ff 	mov.w	r3, #4294967295
 8008c1c:	e003      	b.n	8008c26 <STRHAL_TIM_Heartbeat_Subscribe+0x3e>

	tim->burnie = burn;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	683a      	ldr	r2, [r7, #0]
 8008c22:	609a      	str	r2, [r3, #8]
	return 0;
 8008c24:	2300      	movs	r3, #0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3714      	adds	r7, #20
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr
 8008c32:	bf00      	nop
 8008c34:	20000034 	.word	0x20000034

08008c38 <STRHAL_TIM_Heartbeat_StartHeartbeat>:

int STRHAL_TIM_Heartbeat_StartHeartbeat(STRHAL_TIM_BasicTimerId_t id)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b084      	sub	sp, #16
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	4603      	mov	r3, r0
 8008c40:	71fb      	strb	r3, [r7, #7]
	if (id > STRHAL_TIM_N_BASICTIM || id < 0)
 8008c42:	79fb      	ldrb	r3, [r7, #7]
 8008c44:	2b02      	cmp	r3, #2
 8008c46:	d902      	bls.n	8008c4e <STRHAL_TIM_Heartbeat_StartHeartbeat+0x16>
		return -1;
 8008c48:	f04f 33ff 	mov.w	r3, #4294967295
 8008c4c:	e01e      	b.n	8008c8c <STRHAL_TIM_Heartbeat_StartHeartbeat+0x54>

	STRHAL_TIM_BasicTimer_t *tim = &_basicTims[id];
 8008c4e:	79fa      	ldrb	r2, [r7, #7]
 8008c50:	4613      	mov	r3, r2
 8008c52:	005b      	lsls	r3, r3, #1
 8008c54:	4413      	add	r3, r2
 8008c56:	009b      	lsls	r3, r3, #2
 8008c58:	4a0e      	ldr	r2, [pc, #56]	; (8008c94 <STRHAL_TIM_Heartbeat_StartHeartbeat+0x5c>)
 8008c5a:	4413      	add	r3, r2
 8008c5c:	60fb      	str	r3, [r7, #12]
	if (tim->utype != STRHAL_TIM_USAGE_BRN)
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	799b      	ldrb	r3, [r3, #6]
 8008c62:	2b03      	cmp	r3, #3
 8008c64:	d002      	beq.n	8008c6c <STRHAL_TIM_Heartbeat_StartHeartbeat+0x34>
		return -1;
 8008c66:	f04f 33ff 	mov.w	r3, #4294967295
 8008c6a:	e00f      	b.n	8008c8c <STRHAL_TIM_Heartbeat_StartHeartbeat+0x54>

	LL_TIM_ClearFlag_UPDATE(tim->timx);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4618      	mov	r0, r3
 8008c72:	f7ff fd61 	bl	8008738 <LL_TIM_ClearFlag_UPDATE>
	LL_TIM_EnableIT_UPDATE(tim->timx);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f7ff fd7d 	bl	800877a <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(tim->timx);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4618      	mov	r0, r3
 8008c86:	f7ff fc33 	bl	80084f0 <LL_TIM_EnableCounter>
	return 0;
 8008c8a:	2300      	movs	r3, #0
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3710      	adds	r7, #16
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}
 8008c94:	20000034 	.word	0x20000034

08008c98 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
	if (LL_TIM_IsActiveFlag_UPDATE(TIM6))
 8008c9e:	480b      	ldr	r0, [pc, #44]	; (8008ccc <TIM6_DAC_IRQHandler+0x34>)
 8008ca0:	f7ff fd58 	bl	8008754 <LL_TIM_IsActiveFlag_UPDATE>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d00b      	beq.n	8008cc2 <TIM6_DAC_IRQHandler+0x2a>
	{
		STRHAL_TIM_BasicTimer_t *tim = &_basicTims[STRHAL_TIM_TIM6];
 8008caa:	4b09      	ldr	r3, [pc, #36]	; (8008cd0 <TIM6_DAC_IRQHandler+0x38>)
 8008cac:	607b      	str	r3, [r7, #4]

		if (tim->burnie != NULL)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	689b      	ldr	r3, [r3, #8]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d002      	beq.n	8008cbc <TIM6_DAC_IRQHandler+0x24>
			tim->burnie();
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	4798      	blx	r3

		LL_TIM_ClearFlag_UPDATE(TIM6);
 8008cbc:	4803      	ldr	r0, [pc, #12]	; (8008ccc <TIM6_DAC_IRQHandler+0x34>)
 8008cbe:	f7ff fd3b 	bl	8008738 <LL_TIM_ClearFlag_UPDATE>
	}
}
 8008cc2:	bf00      	nop
 8008cc4:	3708      	adds	r7, #8
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
 8008cca:	bf00      	nop
 8008ccc:	40001000 	.word	0x40001000
 8008cd0:	20000034 	.word	0x20000034

08008cd4 <TIM7_IRQHandler>:

void TIM7_IRQHandler(void)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b082      	sub	sp, #8
 8008cd8:	af00      	add	r7, sp, #0
	if (LL_TIM_IsActiveFlag_UPDATE(TIM7))
 8008cda:	480b      	ldr	r0, [pc, #44]	; (8008d08 <TIM7_IRQHandler+0x34>)
 8008cdc:	f7ff fd3a 	bl	8008754 <LL_TIM_IsActiveFlag_UPDATE>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d00b      	beq.n	8008cfe <TIM7_IRQHandler+0x2a>
	{
		STRHAL_TIM_BasicTimer_t *tim = &_basicTims[STRHAL_TIM_TIM7];
 8008ce6:	4b09      	ldr	r3, [pc, #36]	; (8008d0c <TIM7_IRQHandler+0x38>)
 8008ce8:	607b      	str	r3, [r7, #4]

		if (tim->burnie != NULL)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d002      	beq.n	8008cf8 <TIM7_IRQHandler+0x24>
			tim->burnie();
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	4798      	blx	r3

		LL_TIM_ClearFlag_UPDATE(TIM7);
 8008cf8:	4803      	ldr	r0, [pc, #12]	; (8008d08 <TIM7_IRQHandler+0x34>)
 8008cfa:	f7ff fd1d 	bl	8008738 <LL_TIM_ClearFlag_UPDATE>
	}
}
 8008cfe:	bf00      	nop
 8008d00:	3708      	adds	r7, #8
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop
 8008d08:	40001400 	.word	0x40001400
 8008d0c:	20000040 	.word	0x20000040

08008d10 <__NVIC_GetPriorityGrouping>:
{
 8008d10:	b480      	push	{r7}
 8008d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008d14:	4b04      	ldr	r3, [pc, #16]	; (8008d28 <__NVIC_GetPriorityGrouping+0x18>)
 8008d16:	68db      	ldr	r3, [r3, #12]
 8008d18:	0a1b      	lsrs	r3, r3, #8
 8008d1a:	f003 0307 	and.w	r3, r3, #7
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr
 8008d28:	e000ed00 	.word	0xe000ed00

08008d2c <__NVIC_EnableIRQ>:
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	4603      	mov	r3, r0
 8008d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	db0b      	blt.n	8008d56 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008d3e:	79fb      	ldrb	r3, [r7, #7]
 8008d40:	f003 021f 	and.w	r2, r3, #31
 8008d44:	4907      	ldr	r1, [pc, #28]	; (8008d64 <__NVIC_EnableIRQ+0x38>)
 8008d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d4a:	095b      	lsrs	r3, r3, #5
 8008d4c:	2001      	movs	r0, #1
 8008d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8008d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008d56:	bf00      	nop
 8008d58:	370c      	adds	r7, #12
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr
 8008d62:	bf00      	nop
 8008d64:	e000e100 	.word	0xe000e100

08008d68 <__NVIC_SetPriority>:
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b083      	sub	sp, #12
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	4603      	mov	r3, r0
 8008d70:	6039      	str	r1, [r7, #0]
 8008d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	db0a      	blt.n	8008d92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	b2da      	uxtb	r2, r3
 8008d80:	490c      	ldr	r1, [pc, #48]	; (8008db4 <__NVIC_SetPriority+0x4c>)
 8008d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d86:	0112      	lsls	r2, r2, #4
 8008d88:	b2d2      	uxtb	r2, r2
 8008d8a:	440b      	add	r3, r1
 8008d8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008d90:	e00a      	b.n	8008da8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	b2da      	uxtb	r2, r3
 8008d96:	4908      	ldr	r1, [pc, #32]	; (8008db8 <__NVIC_SetPriority+0x50>)
 8008d98:	79fb      	ldrb	r3, [r7, #7]
 8008d9a:	f003 030f 	and.w	r3, r3, #15
 8008d9e:	3b04      	subs	r3, #4
 8008da0:	0112      	lsls	r2, r2, #4
 8008da2:	b2d2      	uxtb	r2, r2
 8008da4:	440b      	add	r3, r1
 8008da6:	761a      	strb	r2, [r3, #24]
}
 8008da8:	bf00      	nop
 8008daa:	370c      	adds	r7, #12
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr
 8008db4:	e000e100 	.word	0xe000e100
 8008db8:	e000ed00 	.word	0xe000ed00

08008dbc <NVIC_EncodePriority>:
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b089      	sub	sp, #36	; 0x24
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	60f8      	str	r0, [r7, #12]
 8008dc4:	60b9      	str	r1, [r7, #8]
 8008dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f003 0307 	and.w	r3, r3, #7
 8008dce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008dd0:	69fb      	ldr	r3, [r7, #28]
 8008dd2:	f1c3 0307 	rsb	r3, r3, #7
 8008dd6:	2b04      	cmp	r3, #4
 8008dd8:	bf28      	it	cs
 8008dda:	2304      	movcs	r3, #4
 8008ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008dde:	69fb      	ldr	r3, [r7, #28]
 8008de0:	3304      	adds	r3, #4
 8008de2:	2b06      	cmp	r3, #6
 8008de4:	d902      	bls.n	8008dec <NVIC_EncodePriority+0x30>
 8008de6:	69fb      	ldr	r3, [r7, #28]
 8008de8:	3b03      	subs	r3, #3
 8008dea:	e000      	b.n	8008dee <NVIC_EncodePriority+0x32>
 8008dec:	2300      	movs	r3, #0
 8008dee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008df0:	f04f 32ff 	mov.w	r2, #4294967295
 8008df4:	69bb      	ldr	r3, [r7, #24]
 8008df6:	fa02 f303 	lsl.w	r3, r2, r3
 8008dfa:	43da      	mvns	r2, r3
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	401a      	ands	r2, r3
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008e04:	f04f 31ff 	mov.w	r1, #4294967295
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8008e0e:	43d9      	mvns	r1, r3
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008e14:	4313      	orrs	r3, r2
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3724      	adds	r7, #36	; 0x24
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr
	...

08008e24 <LL_AHB1_GRP1_EnableClock>:
{
 8008e24:	b480      	push	{r7}
 8008e26:	b085      	sub	sp, #20
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8008e2c:	4b08      	ldr	r3, [pc, #32]	; (8008e50 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008e2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e30:	4907      	ldr	r1, [pc, #28]	; (8008e50 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	4313      	orrs	r3, r2
 8008e36:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8008e38:	4b05      	ldr	r3, [pc, #20]	; (8008e50 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008e3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	4013      	ands	r3, r2
 8008e40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008e42:	68fb      	ldr	r3, [r7, #12]
}
 8008e44:	bf00      	nop
 8008e46:	3714      	adds	r7, #20
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr
 8008e50:	40021000 	.word	0x40021000

08008e54 <LL_AHB2_GRP1_EnableClock>:
{
 8008e54:	b480      	push	{r7}
 8008e56:	b085      	sub	sp, #20
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8008e5c:	4b08      	ldr	r3, [pc, #32]	; (8008e80 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8008e5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e60:	4907      	ldr	r1, [pc, #28]	; (8008e80 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	4313      	orrs	r3, r2
 8008e66:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8008e68:	4b05      	ldr	r3, [pc, #20]	; (8008e80 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8008e6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	4013      	ands	r3, r2
 8008e70:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008e72:	68fb      	ldr	r3, [r7, #12]
}
 8008e74:	bf00      	nop
 8008e76:	3714      	adds	r7, #20
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr
 8008e80:	40021000 	.word	0x40021000

08008e84 <LL_APB1_GRP1_EnableClock>:
{
 8008e84:	b480      	push	{r7}
 8008e86:	b085      	sub	sp, #20
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8008e8c:	4b08      	ldr	r3, [pc, #32]	; (8008eb0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8008e8e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008e90:	4907      	ldr	r1, [pc, #28]	; (8008eb0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	4313      	orrs	r3, r2
 8008e96:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8008e98:	4b05      	ldr	r3, [pc, #20]	; (8008eb0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8008e9a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	4013      	ands	r3, r2
 8008ea0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
}
 8008ea4:	bf00      	nop
 8008ea6:	3714      	adds	r7, #20
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr
 8008eb0:	40021000 	.word	0x40021000

08008eb4 <LL_DMA_GetDataLength>:
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b085      	sub	sp, #20
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	60fb      	str	r3, [r7, #12]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 8008ec2:	4a07      	ldr	r2, [pc, #28]	; (8008ee0 <LL_DMA_GetDataLength+0x2c>)
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	4413      	add	r3, r2
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	461a      	mov	r2, r3
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	4413      	add	r3, r2
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	b29b      	uxth	r3, r3
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3714      	adds	r7, #20
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr
 8008ee0:	0800af44 	.word	0x0800af44

08008ee4 <LL_DMA_IsActiveFlag_TC1>:
  * @rmtoll ISR          TCIF1         LL_DMA_IsActiveFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC1(DMA_TypeDef *DMAx)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b083      	sub	sp, #12
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1)) ? 1UL : 0UL);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f003 0302 	and.w	r3, r3, #2
 8008ef4:	2b02      	cmp	r3, #2
 8008ef6:	d101      	bne.n	8008efc <LL_DMA_IsActiveFlag_TC1+0x18>
 8008ef8:	2301      	movs	r3, #1
 8008efa:	e000      	b.n	8008efe <LL_DMA_IsActiveFlag_TC1+0x1a>
 8008efc:	2300      	movs	r3, #0
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	370c      	adds	r7, #12
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr

08008f0a <LL_DMA_IsActiveFlag_TC2>:
  * @rmtoll ISR          TCIF2         LL_DMA_IsActiveFlag_TC2
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC2(DMA_TypeDef *DMAx)
{
 8008f0a:	b480      	push	{r7}
 8008f0c:	b083      	sub	sp, #12
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF2) == (DMA_ISR_TCIF2)) ? 1UL : 0UL);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f003 0320 	and.w	r3, r3, #32
 8008f1a:	2b20      	cmp	r3, #32
 8008f1c:	d101      	bne.n	8008f22 <LL_DMA_IsActiveFlag_TC2+0x18>
 8008f1e:	2301      	movs	r3, #1
 8008f20:	e000      	b.n	8008f24 <LL_DMA_IsActiveFlag_TC2+0x1a>
 8008f22:	2300      	movs	r3, #0
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	370c      	adds	r7, #12
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr

08008f30 <LL_DMA_IsActiveFlag_TE1>:
  * @rmtoll ISR          TEIF1         LL_DMA_IsActiveFlag_TE1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE1(DMA_TypeDef *DMAx)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b083      	sub	sp, #12
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF1) == (DMA_ISR_TEIF1)) ? 1UL : 0UL);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f003 0308 	and.w	r3, r3, #8
 8008f40:	2b08      	cmp	r3, #8
 8008f42:	d101      	bne.n	8008f48 <LL_DMA_IsActiveFlag_TE1+0x18>
 8008f44:	2301      	movs	r3, #1
 8008f46:	e000      	b.n	8008f4a <LL_DMA_IsActiveFlag_TE1+0x1a>
 8008f48:	2300      	movs	r3, #0
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	370c      	adds	r7, #12
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr

08008f56 <LL_DMA_IsActiveFlag_TE2>:
  * @rmtoll ISR          TEIF2         LL_DMA_IsActiveFlag_TE2
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE2(DMA_TypeDef *DMAx)
{
 8008f56:	b480      	push	{r7}
 8008f58:	b083      	sub	sp, #12
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF2) == (DMA_ISR_TEIF2)) ? 1UL : 0UL);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f66:	2b80      	cmp	r3, #128	; 0x80
 8008f68:	d101      	bne.n	8008f6e <LL_DMA_IsActiveFlag_TE2+0x18>
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	e000      	b.n	8008f70 <LL_DMA_IsActiveFlag_TE2+0x1a>
 8008f6e:	2300      	movs	r3, #0
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	370c      	adds	r7, #12
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <LL_DMA_ClearFlag_TC1>:
  * @rmtoll IFCR         CTCIF1        LL_DMA_ClearFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b083      	sub	sp, #12
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2202      	movs	r2, #2
 8008f88:	605a      	str	r2, [r3, #4]
}
 8008f8a:	bf00      	nop
 8008f8c:	370c      	adds	r7, #12
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr

08008f96 <LL_DMA_ClearFlag_TC2>:
  * @rmtoll IFCR         CTCIF2        LL_DMA_ClearFlag_TC2
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC2(DMA_TypeDef *DMAx)
{
 8008f96:	b480      	push	{r7}
 8008f98:	b083      	sub	sp, #12
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF2);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2220      	movs	r2, #32
 8008fa2:	605a      	str	r2, [r3, #4]
}
 8008fa4:	bf00      	nop
 8008fa6:	370c      	adds	r7, #12
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <LL_DMA_ClearFlag_TE1>:
  * @rmtoll IFCR         CTEIF1        LL_DMA_ClearFlag_TE1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE1(DMA_TypeDef *DMAx)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF1);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2208      	movs	r2, #8
 8008fbc:	605a      	str	r2, [r3, #4]
}
 8008fbe:	bf00      	nop
 8008fc0:	370c      	adds	r7, #12
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr

08008fca <LL_DMA_ClearFlag_TE2>:
  * @rmtoll IFCR         CTEIF2        LL_DMA_ClearFlag_TE2
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE2(DMA_TypeDef *DMAx)
{
 8008fca:	b480      	push	{r7}
 8008fcc:	b083      	sub	sp, #12
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF2);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2280      	movs	r2, #128	; 0x80
 8008fd6:	605a      	str	r2, [r3, #4]
}
 8008fd8:	bf00      	nop
 8008fda:	370c      	adds	r7, #12
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b085      	sub	sp, #20
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 8008ff2:	4a0c      	ldr	r2, [pc, #48]	; (8009024 <LL_DMA_EnableIT_TC+0x40>)
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	4413      	add	r3, r2
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	4413      	add	r3, r2
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4908      	ldr	r1, [pc, #32]	; (8009024 <LL_DMA_EnableIT_TC+0x40>)
 8009004:	683a      	ldr	r2, [r7, #0]
 8009006:	440a      	add	r2, r1
 8009008:	7812      	ldrb	r2, [r2, #0]
 800900a:	4611      	mov	r1, r2
 800900c:	68fa      	ldr	r2, [r7, #12]
 800900e:	440a      	add	r2, r1
 8009010:	f043 0302 	orr.w	r3, r3, #2
 8009014:	6013      	str	r3, [r2, #0]
}
 8009016:	bf00      	nop
 8009018:	3714      	adds	r7, #20
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop
 8009024:	0800af44 	.word	0x0800af44

08009028 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8009028:	b480      	push	{r7}
 800902a:	b085      	sub	sp, #20
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TEIE);
 8009036:	4a0c      	ldr	r2, [pc, #48]	; (8009068 <LL_DMA_EnableIT_TE+0x40>)
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	4413      	add	r3, r2
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	461a      	mov	r2, r3
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	4413      	add	r3, r2
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4908      	ldr	r1, [pc, #32]	; (8009068 <LL_DMA_EnableIT_TE+0x40>)
 8009048:	683a      	ldr	r2, [r7, #0]
 800904a:	440a      	add	r2, r1
 800904c:	7812      	ldrb	r2, [r2, #0]
 800904e:	4611      	mov	r1, r2
 8009050:	68fa      	ldr	r2, [r7, #12]
 8009052:	440a      	add	r2, r1
 8009054:	f043 0308 	orr.w	r3, r3, #8
 8009058:	6013      	str	r3, [r2, #0]
}
 800905a:	bf00      	nop
 800905c:	3714      	adds	r7, #20
 800905e:	46bd      	mov	sp, r7
 8009060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009064:	4770      	bx	lr
 8009066:	bf00      	nop
 8009068:	0800af44 	.word	0x0800af44

0800906c <LL_DMA_IsEnabledIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800906c:	b480      	push	{r7}
 800906e:	b085      	sub	sp, #20
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	60fb      	str	r3, [r7, #12]
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 800907a:	4a0a      	ldr	r2, [pc, #40]	; (80090a4 <LL_DMA_IsEnabledIT_TC+0x38>)
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	4413      	add	r3, r2
 8009080:	781b      	ldrb	r3, [r3, #0]
 8009082:	461a      	mov	r2, r3
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	4413      	add	r3, r2
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f003 0302 	and.w	r3, r3, #2
                    DMA_CCR_TCIE) == (DMA_CCR_TCIE)) ? 1UL : 0UL);
 800908e:	2b02      	cmp	r3, #2
 8009090:	d101      	bne.n	8009096 <LL_DMA_IsEnabledIT_TC+0x2a>
 8009092:	2301      	movs	r3, #1
 8009094:	e000      	b.n	8009098 <LL_DMA_IsEnabledIT_TC+0x2c>
 8009096:	2300      	movs	r3, #0
}
 8009098:	4618      	mov	r0, r3
 800909a:	3714      	adds	r7, #20
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr
 80090a4:	0800af44 	.word	0x0800af44

080090a8 <LL_DMA_IsEnabledIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b085      	sub	sp, #20
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	60fb      	str	r3, [r7, #12]
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 80090b6:	4a0a      	ldr	r2, [pc, #40]	; (80090e0 <LL_DMA_IsEnabledIT_TE+0x38>)
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	4413      	add	r3, r2
 80090bc:	781b      	ldrb	r3, [r3, #0]
 80090be:	461a      	mov	r2, r3
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	4413      	add	r3, r2
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f003 0308 	and.w	r3, r3, #8
                    DMA_CCR_TEIE) == (DMA_CCR_TEIE)) ? 1UL : 0UL);
 80090ca:	2b08      	cmp	r3, #8
 80090cc:	d101      	bne.n	80090d2 <LL_DMA_IsEnabledIT_TE+0x2a>
 80090ce:	2301      	movs	r3, #1
 80090d0:	e000      	b.n	80090d4 <LL_DMA_IsEnabledIT_TE+0x2c>
 80090d2:	2300      	movs	r3, #0
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3714      	adds	r7, #20
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr
 80090e0:	0800af44 	.word	0x0800af44

080090e4 <LL_USART_Enable>:
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f043 0201 	orr.w	r2, r3, #1
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	601a      	str	r2, [r3, #0]
}
 80090f8:	bf00      	nop
 80090fa:	370c      	adds	r7, #12
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr

08009104 <LL_USART_Disable>:
{
 8009104:	b480      	push	{r7}
 8009106:	b083      	sub	sp, #12
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f023 0201 	bic.w	r2, r3, #1
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	601a      	str	r2, [r3, #0]
}
 8009118:	bf00      	nop
 800911a:	370c      	adds	r7, #12
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr

08009124 <LL_USART_DisableFIFO>:
{
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	601a      	str	r2, [r3, #0]
}
 8009138:	bf00      	nop
 800913a:	370c      	adds	r7, #12
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr

08009144 <LL_USART_SetTXFIFOThreshold>:
{
 8009144:	b480      	push	{r7}
 8009146:	b089      	sub	sp, #36	; 0x24
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	3308      	adds	r3, #8
 8009152:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	e853 3f00 	ldrex	r3, [r3]
 800915a:	60bb      	str	r3, [r7, #8]
   return(result);
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	075b      	lsls	r3, r3, #29
 8009166:	4313      	orrs	r3, r2
 8009168:	61fb      	str	r3, [r7, #28]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	3308      	adds	r3, #8
 800916e:	69fa      	ldr	r2, [r7, #28]
 8009170:	61ba      	str	r2, [r7, #24]
 8009172:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009174:	6979      	ldr	r1, [r7, #20]
 8009176:	69ba      	ldr	r2, [r7, #24]
 8009178:	e841 2300 	strex	r3, r2, [r1]
 800917c:	613b      	str	r3, [r7, #16]
   return(result);
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d1e4      	bne.n	800914e <LL_USART_SetTXFIFOThreshold+0xa>
}
 8009184:	bf00      	nop
 8009186:	bf00      	nop
 8009188:	3724      	adds	r7, #36	; 0x24
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr

08009192 <LL_USART_SetRXFIFOThreshold>:
{
 8009192:	b480      	push	{r7}
 8009194:	b089      	sub	sp, #36	; 0x24
 8009196:	af00      	add	r7, sp, #0
 8009198:	6078      	str	r0, [r7, #4]
 800919a:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	3308      	adds	r3, #8
 80091a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	e853 3f00 	ldrex	r3, [r3]
 80091a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	065b      	lsls	r3, r3, #25
 80091b4:	4313      	orrs	r3, r2
 80091b6:	61fb      	str	r3, [r7, #28]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	3308      	adds	r3, #8
 80091bc:	69fa      	ldr	r2, [r7, #28]
 80091be:	61ba      	str	r2, [r7, #24]
 80091c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c2:	6979      	ldr	r1, [r7, #20]
 80091c4:	69ba      	ldr	r2, [r7, #24]
 80091c6:	e841 2300 	strex	r3, r2, [r1]
 80091ca:	613b      	str	r3, [r7, #16]
   return(result);
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d1e4      	bne.n	800919c <LL_USART_SetRXFIFOThreshold+0xa>
}
 80091d2:	bf00      	nop
 80091d4:	bf00      	nop
 80091d6:	3724      	adds	r7, #36	; 0x24
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <LL_USART_EnableDirectionRx>:
{
 80091e0:	b480      	push	{r7}
 80091e2:	b089      	sub	sp, #36	; 0x24
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RE);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	e853 3f00 	ldrex	r3, [r3]
 80091f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	f043 0304 	orr.w	r3, r3, #4
 80091fa:	61fb      	str	r3, [r7, #28]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	69fa      	ldr	r2, [r7, #28]
 8009200:	61ba      	str	r2, [r7, #24]
 8009202:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009204:	6979      	ldr	r1, [r7, #20]
 8009206:	69ba      	ldr	r2, [r7, #24]
 8009208:	e841 2300 	strex	r3, r2, [r1]
 800920c:	613b      	str	r3, [r7, #16]
   return(result);
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d1e9      	bne.n	80091e8 <LL_USART_EnableDirectionRx+0x8>
}
 8009214:	bf00      	nop
 8009216:	bf00      	nop
 8009218:	3724      	adds	r7, #36	; 0x24
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr

08009222 <LL_USART_EnableDirectionTx>:
{
 8009222:	b480      	push	{r7}
 8009224:	b089      	sub	sp, #36	; 0x24
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TE);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	e853 3f00 	ldrex	r3, [r3]
 8009234:	60bb      	str	r3, [r7, #8]
   return(result);
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	f043 0308 	orr.w	r3, r3, #8
 800923c:	61fb      	str	r3, [r7, #28]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	69fa      	ldr	r2, [r7, #28]
 8009242:	61ba      	str	r2, [r7, #24]
 8009244:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009246:	6979      	ldr	r1, [r7, #20]
 8009248:	69ba      	ldr	r2, [r7, #24]
 800924a:	e841 2300 	strex	r3, r2, [r1]
 800924e:	613b      	str	r3, [r7, #16]
   return(result);
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d1e9      	bne.n	800922a <LL_USART_EnableDirectionTx+0x8>
}
 8009256:	bf00      	nop
 8009258:	bf00      	nop
 800925a:	3724      	adds	r7, #36	; 0x24
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr

08009264 <LL_USART_SetTXRXSwap>:
{
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_SWAP, SwapConfig);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	431a      	orrs	r2, r3
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	605a      	str	r2, [r3, #4]
}
 800927e:	bf00      	nop
 8009280:	370c      	adds	r7, #12
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr

0800928a <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800928a:	b480      	push	{r7}
 800928c:	b083      	sub	sp, #12
 800928e:	af00      	add	r7, sp, #0
 8009290:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	609a      	str	r2, [r3, #8]
}
 80092aa:	bf00      	nop
 80092ac:	370c      	adds	r7, #12
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr

080092b6 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 80092b6:	b480      	push	{r7}
 80092b8:	b083      	sub	sp, #12
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	69db      	ldr	r3, [r3, #28]
 80092c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092c6:	2b40      	cmp	r3, #64	; 0x40
 80092c8:	d101      	bne.n	80092ce <LL_USART_IsActiveFlag_TC+0x18>
 80092ca:	2301      	movs	r3, #1
 80092cc:	e000      	b.n	80092d0 <LL_USART_IsActiveFlag_TC+0x1a>
 80092ce:	2300      	movs	r3, #0
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	370c      	adds	r7, #12
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr

080092dc <LL_USART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_USART_IsActiveFlag_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(USART_TypeDef *USARTx)
{
 80092dc:	b480      	push	{r7}
 80092de:	b083      	sub	sp, #12
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	69db      	ldr	r3, [r3, #28]
 80092e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092ec:	2b80      	cmp	r3, #128	; 0x80
 80092ee:	d101      	bne.n	80092f4 <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 80092f0:	2301      	movs	r3, #1
 80092f2:	e000      	b.n	80092f6 <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 80092f4:	2300      	movs	r3, #0
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	370c      	adds	r7, #12
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr

08009302 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8009302:	b480      	push	{r7}
 8009304:	b089      	sub	sp, #36	; 0x24
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	3308      	adds	r3, #8
 800930e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	e853 3f00 	ldrex	r3, [r3]
 8009316:	60bb      	str	r3, [r7, #8]
   return(result);
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800931e:	61fb      	str	r3, [r7, #28]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	3308      	adds	r3, #8
 8009324:	69fa      	ldr	r2, [r7, #28]
 8009326:	61ba      	str	r2, [r7, #24]
 8009328:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800932a:	6979      	ldr	r1, [r7, #20]
 800932c:	69ba      	ldr	r2, [r7, #24]
 800932e:	e841 2300 	strex	r3, r2, [r1]
 8009332:	613b      	str	r3, [r7, #16]
   return(result);
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d1e7      	bne.n	800930a <LL_USART_EnableDMAReq_RX+0x8>
}
 800933a:	bf00      	nop
 800933c:	bf00      	nop
 800933e:	3724      	adds	r7, #36	; 0x24
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr

08009348 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8009348:	b480      	push	{r7}
 800934a:	b089      	sub	sp, #36	; 0x24
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	3308      	adds	r3, #8
 8009354:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	e853 3f00 	ldrex	r3, [r3]
 800935c:	60bb      	str	r3, [r7, #8]
   return(result);
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009364:	61fb      	str	r3, [r7, #28]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	3308      	adds	r3, #8
 800936a:	69fa      	ldr	r2, [r7, #28]
 800936c:	61ba      	str	r2, [r7, #24]
 800936e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009370:	6979      	ldr	r1, [r7, #20]
 8009372:	69ba      	ldr	r2, [r7, #24]
 8009374:	e841 2300 	strex	r3, r2, [r1]
 8009378:	613b      	str	r3, [r7, #16]
   return(result);
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d1e7      	bne.n	8009350 <LL_USART_EnableDMAReq_TX+0x8>
}
 8009380:	bf00      	nop
 8009382:	bf00      	nop
 8009384:	3724      	adds	r7, #36	; 0x24
 8009386:	46bd      	mov	sp, r7
 8009388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938c:	4770      	bx	lr
	...

08009390 <STRHAL_UART_Init>:
//{ .uart = USART3, .dma_rx_channel = LL_DMA_CHANNEL_1, .dma_tx_channel = LL_DMA_CHANNEL_2, .dma_rx_request = LL_DMAMUX_REQ_USART3_RX, .dma_tx_request = LL_DMAMUX_REQ_USART3_TX, .it_rx_handler = DMA1_Channel3_IRQn, .it_tx_handler = DMA1_Channel4_IRQn, .baud_rate = 115200, .swap = 0 },
[STRHAL_UART4] =
{ .uart = UART4, .dma_rx_channel = LL_DMA_CHANNEL_1, .dma_tx_channel = LL_DMA_CHANNEL_2, .dma_rx_request = LL_DMAMUX_REQ_UART4_RX, .dma_tx_request = LL_DMAMUX_REQ_UART4_TX, .it_rx_handler = DMA1_Channel3_IRQn, .it_tx_handler = DMA1_Channel4_IRQn, .baud_rate = 115200, .swap = 0 } };

void STRHAL_UART_Init()
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b086      	sub	sp, #24
 8009394:	af00      	add	r7, sp, #0
	//LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART3);
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8009396:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800939a:	f7ff fd73 	bl	8008e84 <LL_APB1_GRP1_EnableClock>
	//LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800939e:	2004      	movs	r0, #4
 80093a0:	f7ff fd58 	bl	8008e54 <LL_AHB2_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMAMUX1);
 80093a4:	2004      	movs	r0, #4
 80093a6:	f7ff fd3d 	bl	8008e24 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80093aa:	2001      	movs	r0, #1
 80093ac:	f7ff fd3a 	bl	8008e24 <LL_AHB1_GRP1_EnableClock>

	LL_GPIO_InitTypeDef GPIO_InitStruct =
 80093b0:	463b      	mov	r3, r7
 80093b2:	2200      	movs	r2, #0
 80093b4:	601a      	str	r2, [r3, #0]
 80093b6:	605a      	str	r2, [r3, #4]
 80093b8:	609a      	str	r2, [r3, #8]
 80093ba:	60da      	str	r2, [r3, #12]
 80093bc:	611a      	str	r2, [r3, #16]
 80093be:	615a      	str	r2, [r3, #20]
	{ 0 };
	GPIO_InitStruct.Pin = LL_GPIO_PIN_10 | LL_GPIO_PIN_11;
 80093c0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80093c4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80093c6:	2302      	movs	r3, #2
 80093c8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80093ca:	2302      	movs	r3, #2
 80093cc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80093ce:	2300      	movs	r3, #0
 80093d0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80093d2:	2301      	movs	r3, #1
 80093d4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80093d6:	2305      	movs	r3, #5
 80093d8:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80093da:	463b      	mov	r3, r7
 80093dc:	4619      	mov	r1, r3
 80093de:	4803      	ldr	r0, [pc, #12]	; (80093ec <STRHAL_UART_Init+0x5c>)
 80093e0:	f7fa ffb5 	bl	800434e <LL_GPIO_Init>

//	GPIO_InitStruct.Pin = LL_GPIO_PIN_3 | LL_GPIO_PIN_4;
//	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}
 80093e4:	bf00      	nop
 80093e6:	3718      	adds	r7, #24
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}
 80093ec:	48000800 	.word	0x48000800

080093f0 <STRHAL_UART_Instance_Init>:

int STRHAL_UART_Instance_Init(STRHAL_UART_Id_t uart_id)
{
 80093f0:	b590      	push	{r4, r7, lr}
 80093f2:	b097      	sub	sp, #92	; 0x5c
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	4603      	mov	r3, r0
 80093f8:	71fb      	strb	r3, [r7, #7]
	if (uart_id < 0 || uart_id >= STRHAL_N_UART)
 80093fa:	79fb      	ldrb	r3, [r7, #7]
 80093fc:	2b02      	cmp	r3, #2
 80093fe:	d902      	bls.n	8009406 <STRHAL_UART_Instance_Init+0x16>
		return -1;
 8009400:	f04f 33ff 	mov.w	r3, #4294967295
 8009404:	e126      	b.n	8009654 <STRHAL_UART_Instance_Init+0x264>

	STRHAL_UART_Handle_t *_uart = &_uarts[uart_id];
 8009406:	79fb      	ldrb	r3, [r7, #7]
 8009408:	f44f 720e 	mov.w	r2, #568	; 0x238
 800940c:	fb02 f303 	mul.w	r3, r2, r3
 8009410:	4a92      	ldr	r2, [pc, #584]	; (800965c <STRHAL_UART_Instance_Init+0x26c>)
 8009412:	4413      	add	r3, r2
 8009414:	657b      	str	r3, [r7, #84]	; 0x54

	LL_USART_Disable(_uart->uart);
 8009416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4618      	mov	r0, r3
 800941c:	f7ff fe72 	bl	8009104 <LL_USART_Disable>

	LL_USART_InitTypeDef UART_InitStruct =
 8009420:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009424:	2220      	movs	r2, #32
 8009426:	2100      	movs	r1, #0
 8009428:	4618      	mov	r0, r3
 800942a:	f000 fb3f 	bl	8009aac <memset>
	{ 0 };
	UART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800942e:	2300      	movs	r3, #0
 8009430:	63fb      	str	r3, [r7, #60]	; 0x3c
	UART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8009432:	2300      	movs	r3, #0
 8009434:	643b      	str	r3, [r7, #64]	; 0x40
	UART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8009436:	2300      	movs	r3, #0
 8009438:	647b      	str	r3, [r7, #68]	; 0x44
	UART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800943a:	230c      	movs	r3, #12
 800943c:	64bb      	str	r3, [r7, #72]	; 0x48
	UART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800943e:	2300      	movs	r3, #0
 8009440:	64fb      	str	r3, [r7, #76]	; 0x4c
	UART_InitStruct.BaudRate = _uart->baud_rate;
 8009442:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009444:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8009448:	63bb      	str	r3, [r7, #56]	; 0x38
	UART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 800944a:	2300      	movs	r3, #0
 800944c:	637b      	str	r3, [r7, #52]	; 0x34
	UART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800944e:	2300      	movs	r3, #0
 8009450:	653b      	str	r3, [r7, #80]	; 0x50
	LL_USART_Init(_uart->uart, &UART_InitStruct);
 8009452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800945a:	4611      	mov	r1, r2
 800945c:	4618      	mov	r0, r3
 800945e:	f7fc f853 	bl	8005508 <LL_USART_Init>

	LL_USART_SetTXFIFOThreshold(_uart->uart, LL_USART_FIFOTHRESHOLD_1_8);
 8009462:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	2100      	movs	r1, #0
 8009468:	4618      	mov	r0, r3
 800946a:	f7ff fe6b 	bl	8009144 <LL_USART_SetTXFIFOThreshold>
	LL_USART_SetRXFIFOThreshold(_uart->uart, LL_USART_FIFOTHRESHOLD_1_8);
 800946e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	2100      	movs	r1, #0
 8009474:	4618      	mov	r0, r3
 8009476:	f7ff fe8c 	bl	8009192 <LL_USART_SetRXFIFOThreshold>
	LL_USART_DisableFIFO(_uart->uart);
 800947a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4618      	mov	r0, r3
 8009480:	f7ff fe50 	bl	8009124 <LL_USART_DisableFIFO>
	LL_USART_ConfigAsyncMode(_uart->uart);
 8009484:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4618      	mov	r0, r3
 800948a:	f7ff fefe 	bl	800928a <LL_USART_ConfigAsyncMode>
	if (_uart->swap)
 800948e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009490:	f893 3234 	ldrb.w	r3, [r3, #564]	; 0x234
 8009494:	2b00      	cmp	r3, #0
 8009496:	d006      	beq.n	80094a6 <STRHAL_UART_Instance_Init+0xb6>
		LL_USART_SetTXRXSwap(_uart->uart, LL_USART_TXRX_SWAPPED);
 8009498:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80094a0:	4618      	mov	r0, r3
 80094a2:	f7ff fedf 	bl	8009264 <LL_USART_SetTXRXSwap>

	LL_DMA_InitTypeDef DMA_InitStruct =
 80094a6:	f107 0308 	add.w	r3, r7, #8
 80094aa:	222c      	movs	r2, #44	; 0x2c
 80094ac:	2100      	movs	r1, #0
 80094ae:	4618      	mov	r0, r3
 80094b0:	f000 fafc 	bl	8009aac <memset>
	{ 0 };

	DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 80094b4:	2300      	movs	r3, #0
 80094b6:	613b      	str	r3, [r7, #16]
	DMA_InitStruct.MemoryOrM2MDstAddress = (uint32_t) _uart->rx_buf.data;
 80094b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094ba:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80094be:	60fb      	str	r3, [r7, #12]
	DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 80094c0:	2300      	movs	r3, #0
 80094c2:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 80094c4:	2380      	movs	r3, #128	; 0x80
 80094c6:	61fb      	str	r3, [r7, #28]
	DMA_InitStruct.Mode = LL_DMA_MODE_CIRCULAR;
 80094c8:	2320      	movs	r3, #32
 80094ca:	617b      	str	r3, [r7, #20]
	DMA_InitStruct.NbData = STRHAL_UART_BUF_SIZE;
 80094cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80094d0:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStruct.PeriphOrM2MSrcAddress = (uint32_t) &(_uart->uart->RDR);
 80094d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	3324      	adds	r3, #36	; 0x24
 80094d8:	60bb      	str	r3, [r7, #8]
	DMA_InitStruct.PeriphOrM2MSrcDataSize = (uint32_t) LL_DMA_PDATAALIGN_BYTE;
 80094da:	2300      	movs	r3, #0
 80094dc:	623b      	str	r3, [r7, #32]
	DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_MEMORY_NOINCREMENT;
 80094de:	2300      	movs	r3, #0
 80094e0:	61bb      	str	r3, [r7, #24]
	DMA_InitStruct.PeriphRequest = _uart->dma_rx_request;
 80094e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094e4:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80094e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMA_InitStruct.Priority = LL_DMA_PRIORITY_HIGH;
 80094ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80094ee:	633b      	str	r3, [r7, #48]	; 0x30

	LL_DMA_Init(DMA1, _uart->dma_rx_channel, &DMA_InitStruct);
 80094f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094f2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80094f6:	f107 0208 	add.w	r2, r7, #8
 80094fa:	4619      	mov	r1, r3
 80094fc:	4858      	ldr	r0, [pc, #352]	; (8009660 <STRHAL_UART_Instance_Init+0x270>)
 80094fe:	f7fa fd9b 	bl	8004038 <LL_DMA_Init>

	LL_USART_EnableDMAReq_RX(_uart->uart);
 8009502:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4618      	mov	r0, r3
 8009508:	f7ff fefb 	bl	8009302 <LL_USART_EnableDMAReq_RX>

	LL_DMA_EnableIT_TC(DMA1, _uart->dma_rx_channel);
 800950c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800950e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009512:	4619      	mov	r1, r3
 8009514:	4852      	ldr	r0, [pc, #328]	; (8009660 <STRHAL_UART_Instance_Init+0x270>)
 8009516:	f7ff fd65 	bl	8008fe4 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableIT_TE(DMA1, _uart->dma_rx_channel);
 800951a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800951c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009520:	4619      	mov	r1, r3
 8009522:	484f      	ldr	r0, [pc, #316]	; (8009660 <STRHAL_UART_Instance_Init+0x270>)
 8009524:	f7ff fd80 	bl	8009028 <LL_DMA_EnableIT_TE>

	NVIC_SetPriority(_uart->it_rx_handler, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 1, 1));
 8009528:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800952a:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800952e:	b25c      	sxtb	r4, r3
 8009530:	f7ff fbee 	bl	8008d10 <__NVIC_GetPriorityGrouping>
 8009534:	4603      	mov	r3, r0
 8009536:	2201      	movs	r2, #1
 8009538:	2101      	movs	r1, #1
 800953a:	4618      	mov	r0, r3
 800953c:	f7ff fc3e 	bl	8008dbc <NVIC_EncodePriority>
 8009540:	4603      	mov	r3, r0
 8009542:	4619      	mov	r1, r3
 8009544:	4620      	mov	r0, r4
 8009546:	f7ff fc0f 	bl	8008d68 <__NVIC_SetPriority>
	NVIC_EnableIRQ(_uart->it_rx_handler);
 800954a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800954c:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8009550:	b25b      	sxtb	r3, r3
 8009552:	4618      	mov	r0, r3
 8009554:	f7ff fbea 	bl	8008d2c <__NVIC_EnableIRQ>

	/*DMA configuration for TX */
	DMA_InitStruct.Direction = LL_DMA_DIRECTION_MEMORY_TO_PERIPH;
 8009558:	2310      	movs	r3, #16
 800955a:	613b      	str	r3, [r7, #16]
	DMA_InitStruct.MemoryOrM2MDstAddress = (uint32_t) _uart->tx_buf.data;
 800955c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800955e:	3304      	adds	r3, #4
 8009560:	60fb      	str	r3, [r7, #12]
	DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 8009562:	2300      	movs	r3, #0
 8009564:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 8009566:	2380      	movs	r3, #128	; 0x80
 8009568:	61fb      	str	r3, [r7, #28]
	DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 800956a:	2300      	movs	r3, #0
 800956c:	617b      	str	r3, [r7, #20]
	DMA_InitStruct.NbData = STRHAL_UART_BUF_SIZE;
 800956e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009572:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStruct.PeriphOrM2MSrcAddress = (uint32_t) &(_uart->uart->TDR);
 8009574:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	3328      	adds	r3, #40	; 0x28
 800957a:	60bb      	str	r3, [r7, #8]
	DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 800957c:	2300      	movs	r3, #0
 800957e:	623b      	str	r3, [r7, #32]
	DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_MEMORY_NOINCREMENT;
 8009580:	2300      	movs	r3, #0
 8009582:	61bb      	str	r3, [r7, #24]
	DMA_InitStruct.PeriphRequest = _uart->dma_tx_request;
 8009584:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009586:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800958a:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMA_InitStruct.Priority = LL_DMA_PRIORITY_HIGH;
 800958c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009590:	633b      	str	r3, [r7, #48]	; 0x30
	LL_DMA_Init(DMA1, _uart->dma_tx_channel, &DMA_InitStruct);
 8009592:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009594:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8009598:	f107 0208 	add.w	r2, r7, #8
 800959c:	4619      	mov	r1, r3
 800959e:	4830      	ldr	r0, [pc, #192]	; (8009660 <STRHAL_UART_Instance_Init+0x270>)
 80095a0:	f7fa fd4a 	bl	8004038 <LL_DMA_Init>

	LL_USART_EnableDMAReq_TX(_uart->uart);
 80095a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4618      	mov	r0, r3
 80095aa:	f7ff fecd 	bl	8009348 <LL_USART_EnableDMAReq_TX>

	LL_DMA_EnableIT_TC(DMA1, _uart->dma_tx_channel);
 80095ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095b0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80095b4:	4619      	mov	r1, r3
 80095b6:	482a      	ldr	r0, [pc, #168]	; (8009660 <STRHAL_UART_Instance_Init+0x270>)
 80095b8:	f7ff fd14 	bl	8008fe4 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableIT_TE(DMA1, _uart->dma_tx_channel);
 80095bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095be:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80095c2:	4619      	mov	r1, r3
 80095c4:	4826      	ldr	r0, [pc, #152]	; (8009660 <STRHAL_UART_Instance_Init+0x270>)
 80095c6:	f7ff fd2f 	bl	8009028 <LL_DMA_EnableIT_TE>

	NVIC_SetPriority(_uart->it_tx_handler, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 1, 2));
 80095ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095cc:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80095d0:	b25c      	sxtb	r4, r3
 80095d2:	f7ff fb9d 	bl	8008d10 <__NVIC_GetPriorityGrouping>
 80095d6:	4603      	mov	r3, r0
 80095d8:	2202      	movs	r2, #2
 80095da:	2101      	movs	r1, #1
 80095dc:	4618      	mov	r0, r3
 80095de:	f7ff fbed 	bl	8008dbc <NVIC_EncodePriority>
 80095e2:	4603      	mov	r3, r0
 80095e4:	4619      	mov	r1, r3
 80095e6:	4620      	mov	r0, r4
 80095e8:	f7ff fbbe 	bl	8008d68 <__NVIC_SetPriority>
	NVIC_EnableIRQ(_uart->it_tx_handler);
 80095ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095ee:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80095f2:	b25b      	sxtb	r3, r3
 80095f4:	4618      	mov	r0, r3
 80095f6:	f7ff fb99 	bl	8008d2c <__NVIC_EnableIRQ>

	LL_USART_EnableDirectionTx(_uart->uart);
 80095fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4618      	mov	r0, r3
 8009600:	f7ff fe0f 	bl	8009222 <LL_USART_EnableDirectionTx>
	LL_USART_EnableDirectionRx(_uart->uart);
 8009604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4618      	mov	r0, r3
 800960a:	f7ff fde9 	bl	80091e0 <LL_USART_EnableDirectionRx>
	LL_USART_Enable(_uart->uart);
 800960e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4618      	mov	r0, r3
 8009614:	f7ff fd66 	bl	80090e4 <LL_USART_Enable>

	_uart->state = STRHAL_UART_STATE_00;
 8009618:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800961a:	2200      	movs	r2, #0
 800961c:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	_uart->rx_buf.h = _uart->rx_buf.n = _uart->tx_buf.n = 0;
 8009620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009622:	2200      	movs	r2, #0
 8009624:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8009628:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800962a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800962e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009630:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8009634:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009636:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800963a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800963c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	_uart->rx_buf.n_dma = STRHAL_UART_BUF_SIZE;
 8009640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009642:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009646:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	_uart->tx_buf.n = 0;
 800964a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800964c:	2200      	movs	r2, #0
 800964e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	return 0;
 8009652:	2300      	movs	r3, #0
}
 8009654:	4618      	mov	r0, r3
 8009656:	375c      	adds	r7, #92	; 0x5c
 8009658:	46bd      	mov	sp, r7
 800965a:	bd90      	pop	{r4, r7, pc}
 800965c:	20000074 	.word	0x20000074
 8009660:	40020000 	.word	0x40020000

08009664 <STRHAL_UART_Debug_Write_Blocking>:
{
	return STRHAL_UART_Write_DMA(STRHAL_UART_DEBUG, data, n);
}

int32_t STRHAL_UART_Debug_Write_Blocking(const char *data, uint32_t n, uint16_t timeout)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	4613      	mov	r3, r2
 8009670:	80fb      	strh	r3, [r7, #6]
	return STRHAL_UART_Write_Blocking(STRHAL_UART_DEBUG, data, n, timeout);
 8009672:	88fb      	ldrh	r3, [r7, #6]
 8009674:	68ba      	ldr	r2, [r7, #8]
 8009676:	68f9      	ldr	r1, [r7, #12]
 8009678:	2002      	movs	r0, #2
 800967a:	f000 f805 	bl	8009688 <STRHAL_UART_Write_Blocking>
 800967e:	4603      	mov	r3, r0
}
 8009680:	4618      	mov	r0, r3
 8009682:	3710      	adds	r7, #16
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <STRHAL_UART_Write_Blocking>:

	return n;
}

int32_t STRHAL_UART_Write_Blocking(STRHAL_UART_Id_t uart_id, const char *data, uint32_t n, uint16_t timeout)
{
 8009688:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800968c:	b08c      	sub	sp, #48	; 0x30
 800968e:	af00      	add	r7, sp, #0
 8009690:	6139      	str	r1, [r7, #16]
 8009692:	60fa      	str	r2, [r7, #12]
 8009694:	461a      	mov	r2, r3
 8009696:	4603      	mov	r3, r0
 8009698:	75fb      	strb	r3, [r7, #23]
 800969a:	4613      	mov	r3, r2
 800969c:	82bb      	strh	r3, [r7, #20]
	if (uart_id < 0 || uart_id >= STRHAL_N_UART)
 800969e:	7dfb      	ldrb	r3, [r7, #23]
 80096a0:	2b02      	cmp	r3, #2
 80096a2:	d902      	bls.n	80096aa <STRHAL_UART_Write_Blocking+0x22>
		return -1;
 80096a4:	f04f 33ff 	mov.w	r3, #4294967295
 80096a8:	e0a7      	b.n	80097fa <STRHAL_UART_Write_Blocking+0x172>

	STRHAL_UART_Handle_t *_uart = &_uarts[uart_id];
 80096aa:	7dfb      	ldrb	r3, [r7, #23]
 80096ac:	f44f 720e 	mov.w	r2, #568	; 0x238
 80096b0:	fb02 f303 	mul.w	r3, r2, r3
 80096b4:	4a53      	ldr	r2, [pc, #332]	; (8009804 <STRHAL_UART_Write_Blocking+0x17c>)
 80096b6:	4413      	add	r3, r2
 80096b8:	627b      	str	r3, [r7, #36]	; 0x24

	if (_uart->state & (STRHAL_UART_STATE_TX | STRHAL_UART_STATE_TE) || n > STRHAL_UART_BUF_SIZE)
 80096ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096bc:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 80096c0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d103      	bne.n	80096d0 <STRHAL_UART_Write_Blocking+0x48>
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096ce:	d901      	bls.n	80096d4 <STRHAL_UART_Write_Blocking+0x4c>
		return 0;
 80096d0:	2300      	movs	r3, #0
 80096d2:	e092      	b.n	80097fa <STRHAL_UART_Write_Blocking+0x172>

	uint32_t i;
	for (i = 0; i < n; ++i)
 80096d4:	2300      	movs	r3, #0
 80096d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80096d8:	e00c      	b.n	80096f4 <STRHAL_UART_Write_Blocking+0x6c>
		_uart->tx_buf.data[i] = data[i];
 80096da:	693a      	ldr	r2, [r7, #16]
 80096dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096de:	4413      	add	r3, r2
 80096e0:	7819      	ldrb	r1, [r3, #0]
 80096e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e6:	4413      	add	r3, r2
 80096e8:	3304      	adds	r3, #4
 80096ea:	460a      	mov	r2, r1
 80096ec:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n; ++i)
 80096ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f0:	3301      	adds	r3, #1
 80096f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80096f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d3ee      	bcc.n	80096da <STRHAL_UART_Write_Blocking+0x52>

	_uart->tx_buf.n = n;
 80096fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fe:	68fa      	ldr	r2, [r7, #12]
 8009700:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

	_uart->state &= ~STRHAL_UART_STATE_TC;
 8009704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009706:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 800970a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800970e:	b2da      	uxtb	r2, r3
 8009710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009712:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	_uart->state |= STRHAL_UART_STATE_TX;
 8009716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009718:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 800971c:	f043 0320 	orr.w	r3, r3, #32
 8009720:	b2da      	uxtb	r2, r3
 8009722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009724:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214

	uint8_t *tx_data = (uint8_t*) _uart->tx_buf.data;
 8009728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972a:	3304      	adds	r3, #4
 800972c:	62bb      	str	r3, [r7, #40]	; 0x28

	uint64_t tx_starttime = STRHAL_Systick_GetTick();
 800972e:	f7fe fded 	bl	800830c <STRHAL_Systick_GetTick>
 8009732:	e9c7 0106 	strd	r0, r1, [r7, #24]

	while (_uart->tx_buf.n > 0)
 8009736:	e02d      	b.n	8009794 <STRHAL_UART_Write_Blocking+0x10c>
	{
		// wait until byte transmitted, or timeout
		while (!LL_USART_IsActiveFlag_TXE_TXFNF(_uart->uart))
		{
			if (STRHAL_Systick_GetTick() - tx_starttime > timeout)
 8009738:	f7fe fde8 	bl	800830c <STRHAL_Systick_GetTick>
 800973c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009740:	ebb0 0802 	subs.w	r8, r0, r2
 8009744:	eb61 0903 	sbc.w	r9, r1, r3
 8009748:	8abb      	ldrh	r3, [r7, #20]
 800974a:	2200      	movs	r2, #0
 800974c:	603b      	str	r3, [r7, #0]
 800974e:	607a      	str	r2, [r7, #4]
 8009750:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009754:	460b      	mov	r3, r1
 8009756:	4543      	cmp	r3, r8
 8009758:	4613      	mov	r3, r2
 800975a:	eb73 0309 	sbcs.w	r3, r3, r9
 800975e:	d202      	bcs.n	8009766 <STRHAL_UART_Write_Blocking+0xde>
				return -1;
 8009760:	f04f 33ff 	mov.w	r3, #4294967295
 8009764:	e049      	b.n	80097fa <STRHAL_UART_Write_Blocking+0x172>
		while (!LL_USART_IsActiveFlag_TXE_TXFNF(_uart->uart))
 8009766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4618      	mov	r0, r3
 800976c:	f7ff fdb6 	bl	80092dc <LL_USART_IsActiveFlag_TXE_TXFNF>
 8009770:	4603      	mov	r3, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d0e0      	beq.n	8009738 <STRHAL_UART_Write_Blocking+0xb0>
		}
		_uart->uart->TDR = (uint8_t) (*tx_data & 0xFFU);
 8009776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009778:	781a      	ldrb	r2, [r3, #0]
 800977a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	629a      	str	r2, [r3, #40]	; 0x28
		tx_data++;
 8009780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009782:	3301      	adds	r3, #1
 8009784:	62bb      	str	r3, [r7, #40]	; 0x28
		_uart->tx_buf.n--;
 8009786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009788:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800978c:	1e5a      	subs	r2, r3, #1
 800978e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009790:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	while (_uart->tx_buf.n > 0)
 8009794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009796:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800979a:	2b00      	cmp	r3, #0
 800979c:	d1e3      	bne.n	8009766 <STRHAL_UART_Write_Blocking+0xde>
	}

	// wait until transmission complete, or timeout
	while (!LL_USART_IsActiveFlag_TC(_uart->uart))
 800979e:	e011      	b.n	80097c4 <STRHAL_UART_Write_Blocking+0x13c>
	{
		if (STRHAL_Systick_GetTick() - tx_starttime > timeout)
 80097a0:	f7fe fdb4 	bl	800830c <STRHAL_Systick_GetTick>
 80097a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80097a8:	1a84      	subs	r4, r0, r2
 80097aa:	eb61 0503 	sbc.w	r5, r1, r3
 80097ae:	8abb      	ldrh	r3, [r7, #20]
 80097b0:	2200      	movs	r2, #0
 80097b2:	469a      	mov	sl, r3
 80097b4:	4693      	mov	fp, r2
 80097b6:	45a2      	cmp	sl, r4
 80097b8:	eb7b 0305 	sbcs.w	r3, fp, r5
 80097bc:	d202      	bcs.n	80097c4 <STRHAL_UART_Write_Blocking+0x13c>
			return -1;
 80097be:	f04f 33ff 	mov.w	r3, #4294967295
 80097c2:	e01a      	b.n	80097fa <STRHAL_UART_Write_Blocking+0x172>
	while (!LL_USART_IsActiveFlag_TC(_uart->uart))
 80097c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4618      	mov	r0, r3
 80097ca:	f7ff fd74 	bl	80092b6 <LL_USART_IsActiveFlag_TC>
 80097ce:	4603      	mov	r3, r0
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d0e5      	beq.n	80097a0 <STRHAL_UART_Write_Blocking+0x118>
	}

	_uart->state &= ~STRHAL_UART_STATE_TX;
 80097d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d6:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 80097da:	f023 0320 	bic.w	r3, r3, #32
 80097de:	b2da      	uxtb	r2, r3
 80097e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e2:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	_uart->state |= STRHAL_UART_STATE_TC;
 80097e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e8:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 80097ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097f0:	b2da      	uxtb	r2, r3
 80097f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f4:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214

	return n;
 80097f8:	68fb      	ldr	r3, [r7, #12]
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3730      	adds	r7, #48	; 0x30
 80097fe:	46bd      	mov	sp, r7
 8009800:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009804:	20000074 	.word	0x20000074

08009808 <DMA1_Channel1_IRQHandler>:
{
	return _uarts[uart_id].state;
}

void DMA1_Channel1_IRQHandler(void)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b082      	sub	sp, #8
 800980c:	af00      	add	r7, sp, #0
	STRHAL_UART_Handle_t *_uart = &_uarts[STRHAL_UART4];
 800980e:	4b3f      	ldr	r3, [pc, #252]	; (800990c <DMA1_Channel1_IRQHandler+0x104>)
 8009810:	607b      	str	r3, [r7, #4]
	if (LL_DMA_IsEnabledIT_TC(DMA1, LL_DMA_CHANNEL_1) && LL_DMA_IsActiveFlag_TC1(DMA1))
 8009812:	2100      	movs	r1, #0
 8009814:	483e      	ldr	r0, [pc, #248]	; (8009910 <DMA1_Channel1_IRQHandler+0x108>)
 8009816:	f7ff fc29 	bl	800906c <LL_DMA_IsEnabledIT_TC>
 800981a:	4603      	mov	r3, r0
 800981c:	2b00      	cmp	r3, #0
 800981e:	d037      	beq.n	8009890 <DMA1_Channel1_IRQHandler+0x88>
 8009820:	483b      	ldr	r0, [pc, #236]	; (8009910 <DMA1_Channel1_IRQHandler+0x108>)
 8009822:	f7ff fb5f 	bl	8008ee4 <LL_DMA_IsActiveFlag_TC1>
 8009826:	4603      	mov	r3, r0
 8009828:	2b00      	cmp	r3, #0
 800982a:	d031      	beq.n	8009890 <DMA1_Channel1_IRQHandler+0x88>
	{
		LL_DMA_ClearFlag_TC1(DMA1);
 800982c:	4838      	ldr	r0, [pc, #224]	; (8009910 <DMA1_Channel1_IRQHandler+0x108>)
 800982e:	f7ff fba5 	bl	8008f7c <LL_DMA_ClearFlag_TC1>
		_uart->rx_buf.n += _uart->rx_buf.n_dma;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800983e:	441a      	add	r2, r3
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		_uart->rx_buf.n_dma = STRHAL_UART_BUF_SIZE;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f44f 7280 	mov.w	r2, #256	; 0x100
 800984c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (_uart->rx_buf.n > STRHAL_UART_BUF_SIZE)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009856:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800985a:	d953      	bls.n	8009904 <DMA1_Channel1_IRQHandler+0xfc>
		{
			_uart->rx_buf.h += _uart->rx_buf.n % STRHAL_UART_BUF_SIZE;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009868:	b2db      	uxtb	r3, r3
 800986a:	441a      	add	r2, r3
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			_uart->rx_buf.n = STRHAL_UART_BUF_SIZE;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009878:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

			_uart->state |= STRHAL_UART_STATE_RO;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 8009882:	f043 0308 	orr.w	r3, r3, #8
 8009886:	b2da      	uxtb	r2, r3
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
		if (_uart->rx_buf.n > STRHAL_UART_BUF_SIZE)
 800988e:	e039      	b.n	8009904 <DMA1_Channel1_IRQHandler+0xfc>
		}
	}

	else if (LL_DMA_IsEnabledIT_TE(DMA1, LL_DMA_CHANNEL_1) && LL_DMA_IsActiveFlag_TE1(DMA1))
 8009890:	2100      	movs	r1, #0
 8009892:	481f      	ldr	r0, [pc, #124]	; (8009910 <DMA1_Channel1_IRQHandler+0x108>)
 8009894:	f7ff fc08 	bl	80090a8 <LL_DMA_IsEnabledIT_TE>
 8009898:	4603      	mov	r3, r0
 800989a:	2b00      	cmp	r3, #0
 800989c:	d032      	beq.n	8009904 <DMA1_Channel1_IRQHandler+0xfc>
 800989e:	481c      	ldr	r0, [pc, #112]	; (8009910 <DMA1_Channel1_IRQHandler+0x108>)
 80098a0:	f7ff fb46 	bl	8008f30 <LL_DMA_IsActiveFlag_TE1>
 80098a4:	4603      	mov	r3, r0
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d02c      	beq.n	8009904 <DMA1_Channel1_IRQHandler+0xfc>
	{
		LL_DMA_ClearFlag_TE1(DMA1);
 80098aa:	4819      	ldr	r0, [pc, #100]	; (8009910 <DMA1_Channel1_IRQHandler+0x108>)
 80098ac:	f7ff fb80 	bl	8008fb0 <LL_DMA_ClearFlag_TE1>
		_uart->rx_buf.n = STRHAL_UART_BUF_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_1);
 80098b0:	2100      	movs	r1, #0
 80098b2:	4817      	ldr	r0, [pc, #92]	; (8009910 <DMA1_Channel1_IRQHandler+0x108>)
 80098b4:	f7ff fafe 	bl	8008eb4 <LL_DMA_GetDataLength>
 80098b8:	4603      	mov	r3, r0
 80098ba:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

		_uart->state &= ~STRHAL_UART_STATE_RX;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 80098ca:	f023 0302 	bic.w	r3, r3, #2
 80098ce:	b2da      	uxtb	r2, r3
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
		_uart->state &= ~STRHAL_UART_STATE_RC;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 80098dc:	f023 0304 	bic.w	r3, r3, #4
 80098e0:	b2da      	uxtb	r2, r3
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
		_uart->state |= STRHAL_UART_STATE_RE;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 80098ee:	f043 0310 	orr.w	r3, r3, #16
 80098f2:	b2da      	uxtb	r2, r3
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214

		STRHAL_OofHandler(STRHAL_OOF_UART, "DMA FAIL");
 80098fa:	4906      	ldr	r1, [pc, #24]	; (8009914 <DMA1_Channel1_IRQHandler+0x10c>)
 80098fc:	2008      	movs	r0, #8
 80098fe:	f7f7 fc37 	bl	8001170 <STRHAL_OofHandler>
	}
}
 8009902:	e7ff      	b.n	8009904 <DMA1_Channel1_IRQHandler+0xfc>
 8009904:	bf00      	nop
 8009906:	3708      	adds	r7, #8
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}
 800990c:	200004e4 	.word	0x200004e4
 8009910:	40020000 	.word	0x40020000
 8009914:	08009d24 	.word	0x08009d24

08009918 <DMA1_Channel2_IRQHandler>:

void DMA1_Channel2_IRQHandler(void)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b082      	sub	sp, #8
 800991c:	af00      	add	r7, sp, #0
	STRHAL_UART_Handle_t *_uart = &_uarts[STRHAL_UART4];
 800991e:	4b2a      	ldr	r3, [pc, #168]	; (80099c8 <DMA1_Channel2_IRQHandler+0xb0>)
 8009920:	607b      	str	r3, [r7, #4]
	if (LL_DMA_IsEnabledIT_TC(DMA1, LL_DMA_CHANNEL_2) && LL_DMA_IsActiveFlag_TC2(DMA1))
 8009922:	2101      	movs	r1, #1
 8009924:	4829      	ldr	r0, [pc, #164]	; (80099cc <DMA1_Channel2_IRQHandler+0xb4>)
 8009926:	f7ff fba1 	bl	800906c <LL_DMA_IsEnabledIT_TC>
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	d01b      	beq.n	8009968 <DMA1_Channel2_IRQHandler+0x50>
 8009930:	4826      	ldr	r0, [pc, #152]	; (80099cc <DMA1_Channel2_IRQHandler+0xb4>)
 8009932:	f7ff faea 	bl	8008f0a <LL_DMA_IsActiveFlag_TC2>
 8009936:	4603      	mov	r3, r0
 8009938:	2b00      	cmp	r3, #0
 800993a:	d015      	beq.n	8009968 <DMA1_Channel2_IRQHandler+0x50>
	{
		LL_DMA_ClearFlag_TC2(DMA1);
 800993c:	4823      	ldr	r0, [pc, #140]	; (80099cc <DMA1_Channel2_IRQHandler+0xb4>)
 800993e:	f7ff fb2a 	bl	8008f96 <LL_DMA_ClearFlag_TC2>
		_uart->state &= ~STRHAL_UART_STATE_TX;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 8009948:	f023 0320 	bic.w	r3, r3, #32
 800994c:	b2da      	uxtb	r2, r3
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
		_uart->state |= STRHAL_UART_STATE_TC;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 800995a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800995e:	b2da      	uxtb	r2, r3
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
		LL_DMA_ClearFlag_TE2(DMA1);
		_uart->state &= ~STRHAL_UART_STATE_TX;
		_uart->state &= ~STRHAL_UART_STATE_TC;
		_uart->state |= STRHAL_UART_STATE_TE;
	}
}
 8009966:	e02a      	b.n	80099be <DMA1_Channel2_IRQHandler+0xa6>
	else if (LL_DMA_IsEnabledIT_TE(DMA1, LL_DMA_CHANNEL_2) && LL_DMA_IsActiveFlag_TE2(DMA1))
 8009968:	2101      	movs	r1, #1
 800996a:	4818      	ldr	r0, [pc, #96]	; (80099cc <DMA1_Channel2_IRQHandler+0xb4>)
 800996c:	f7ff fb9c 	bl	80090a8 <LL_DMA_IsEnabledIT_TE>
 8009970:	4603      	mov	r3, r0
 8009972:	2b00      	cmp	r3, #0
 8009974:	d023      	beq.n	80099be <DMA1_Channel2_IRQHandler+0xa6>
 8009976:	4815      	ldr	r0, [pc, #84]	; (80099cc <DMA1_Channel2_IRQHandler+0xb4>)
 8009978:	f7ff faed 	bl	8008f56 <LL_DMA_IsActiveFlag_TE2>
 800997c:	4603      	mov	r3, r0
 800997e:	2b00      	cmp	r3, #0
 8009980:	d01d      	beq.n	80099be <DMA1_Channel2_IRQHandler+0xa6>
		LL_DMA_ClearFlag_TE2(DMA1);
 8009982:	4812      	ldr	r0, [pc, #72]	; (80099cc <DMA1_Channel2_IRQHandler+0xb4>)
 8009984:	f7ff fb21 	bl	8008fca <LL_DMA_ClearFlag_TE2>
		_uart->state &= ~STRHAL_UART_STATE_TX;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 800998e:	f023 0320 	bic.w	r3, r3, #32
 8009992:	b2da      	uxtb	r2, r3
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
		_uart->state &= ~STRHAL_UART_STATE_TC;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 80099a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099a4:	b2da      	uxtb	r2, r3
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
		_uart->state |= STRHAL_UART_STATE_TE;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 80099b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80099b6:	b2da      	uxtb	r2, r3
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
}
 80099be:	bf00      	nop
 80099c0:	3708      	adds	r7, #8
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	bf00      	nop
 80099c8:	200004e4 	.word	0x200004e4
 80099cc:	40020000 	.word	0x40020000

080099d0 <_ZdlPvj>:
 80099d0:	f000 b812 	b.w	80099f8 <_ZdlPv>

080099d4 <__cxa_guard_acquire>:
 80099d4:	6803      	ldr	r3, [r0, #0]
 80099d6:	07db      	lsls	r3, r3, #31
 80099d8:	d406      	bmi.n	80099e8 <__cxa_guard_acquire+0x14>
 80099da:	7843      	ldrb	r3, [r0, #1]
 80099dc:	b103      	cbz	r3, 80099e0 <__cxa_guard_acquire+0xc>
 80099de:	deff      	udf	#255	; 0xff
 80099e0:	2301      	movs	r3, #1
 80099e2:	7043      	strb	r3, [r0, #1]
 80099e4:	4618      	mov	r0, r3
 80099e6:	4770      	bx	lr
 80099e8:	2000      	movs	r0, #0
 80099ea:	4770      	bx	lr

080099ec <__cxa_guard_release>:
 80099ec:	2301      	movs	r3, #1
 80099ee:	6003      	str	r3, [r0, #0]
 80099f0:	4770      	bx	lr

080099f2 <__cxa_pure_virtual>:
 80099f2:	b508      	push	{r3, lr}
 80099f4:	f000 f80e 	bl	8009a14 <_ZSt9terminatev>

080099f8 <_ZdlPv>:
 80099f8:	f000 b842 	b.w	8009a80 <free>

080099fc <_ZN10__cxxabiv111__terminateEPFvvE>:
 80099fc:	b508      	push	{r3, lr}
 80099fe:	4780      	blx	r0
 8009a00:	f000 f80d 	bl	8009a1e <abort>

08009a04 <_ZSt13get_terminatev>:
 8009a04:	4b02      	ldr	r3, [pc, #8]	; (8009a10 <_ZSt13get_terminatev+0xc>)
 8009a06:	6818      	ldr	r0, [r3, #0]
 8009a08:	f3bf 8f5b 	dmb	ish
 8009a0c:	4770      	bx	lr
 8009a0e:	bf00      	nop
 8009a10:	2000071c 	.word	0x2000071c

08009a14 <_ZSt9terminatev>:
 8009a14:	b508      	push	{r3, lr}
 8009a16:	f7ff fff5 	bl	8009a04 <_ZSt13get_terminatev>
 8009a1a:	f7ff ffef 	bl	80099fc <_ZN10__cxxabiv111__terminateEPFvvE>

08009a1e <abort>:
 8009a1e:	b508      	push	{r3, lr}
 8009a20:	2006      	movs	r0, #6
 8009a22:	f000 f8bf 	bl	8009ba4 <raise>
 8009a26:	2001      	movs	r0, #1
 8009a28:	f7f7 fc04 	bl	8001234 <_exit>

08009a2c <__errno>:
 8009a2c:	4b01      	ldr	r3, [pc, #4]	; (8009a34 <__errno+0x8>)
 8009a2e:	6818      	ldr	r0, [r3, #0]
 8009a30:	4770      	bx	lr
 8009a32:	bf00      	nop
 8009a34:	20000720 	.word	0x20000720

08009a38 <__libc_init_array>:
 8009a38:	b570      	push	{r4, r5, r6, lr}
 8009a3a:	4d0d      	ldr	r5, [pc, #52]	; (8009a70 <__libc_init_array+0x38>)
 8009a3c:	4c0d      	ldr	r4, [pc, #52]	; (8009a74 <__libc_init_array+0x3c>)
 8009a3e:	1b64      	subs	r4, r4, r5
 8009a40:	10a4      	asrs	r4, r4, #2
 8009a42:	2600      	movs	r6, #0
 8009a44:	42a6      	cmp	r6, r4
 8009a46:	d109      	bne.n	8009a5c <__libc_init_array+0x24>
 8009a48:	4d0b      	ldr	r5, [pc, #44]	; (8009a78 <__libc_init_array+0x40>)
 8009a4a:	4c0c      	ldr	r4, [pc, #48]	; (8009a7c <__libc_init_array+0x44>)
 8009a4c:	f000 f8d4 	bl	8009bf8 <_init>
 8009a50:	1b64      	subs	r4, r4, r5
 8009a52:	10a4      	asrs	r4, r4, #2
 8009a54:	2600      	movs	r6, #0
 8009a56:	42a6      	cmp	r6, r4
 8009a58:	d105      	bne.n	8009a66 <__libc_init_array+0x2e>
 8009a5a:	bd70      	pop	{r4, r5, r6, pc}
 8009a5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a60:	4798      	blx	r3
 8009a62:	3601      	adds	r6, #1
 8009a64:	e7ee      	b.n	8009a44 <__libc_init_array+0xc>
 8009a66:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a6a:	4798      	blx	r3
 8009a6c:	3601      	adds	r6, #1
 8009a6e:	e7f2      	b.n	8009a56 <__libc_init_array+0x1e>
 8009a70:	0800af4c 	.word	0x0800af4c
 8009a74:	0800af4c 	.word	0x0800af4c
 8009a78:	0800af4c 	.word	0x0800af4c
 8009a7c:	0800af50 	.word	0x0800af50

08009a80 <free>:
 8009a80:	4b02      	ldr	r3, [pc, #8]	; (8009a8c <free+0xc>)
 8009a82:	4601      	mov	r1, r0
 8009a84:	6818      	ldr	r0, [r3, #0]
 8009a86:	f000 b819 	b.w	8009abc <_free_r>
 8009a8a:	bf00      	nop
 8009a8c:	20000720 	.word	0x20000720

08009a90 <memcpy>:
 8009a90:	440a      	add	r2, r1
 8009a92:	4291      	cmp	r1, r2
 8009a94:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a98:	d100      	bne.n	8009a9c <memcpy+0xc>
 8009a9a:	4770      	bx	lr
 8009a9c:	b510      	push	{r4, lr}
 8009a9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009aa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009aa6:	4291      	cmp	r1, r2
 8009aa8:	d1f9      	bne.n	8009a9e <memcpy+0xe>
 8009aaa:	bd10      	pop	{r4, pc}

08009aac <memset>:
 8009aac:	4402      	add	r2, r0
 8009aae:	4603      	mov	r3, r0
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d100      	bne.n	8009ab6 <memset+0xa>
 8009ab4:	4770      	bx	lr
 8009ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8009aba:	e7f9      	b.n	8009ab0 <memset+0x4>

08009abc <_free_r>:
 8009abc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009abe:	2900      	cmp	r1, #0
 8009ac0:	d044      	beq.n	8009b4c <_free_r+0x90>
 8009ac2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ac6:	9001      	str	r0, [sp, #4]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	f1a1 0404 	sub.w	r4, r1, #4
 8009ace:	bfb8      	it	lt
 8009ad0:	18e4      	addlt	r4, r4, r3
 8009ad2:	f000 f883 	bl	8009bdc <__malloc_lock>
 8009ad6:	4a1e      	ldr	r2, [pc, #120]	; (8009b50 <_free_r+0x94>)
 8009ad8:	9801      	ldr	r0, [sp, #4]
 8009ada:	6813      	ldr	r3, [r2, #0]
 8009adc:	b933      	cbnz	r3, 8009aec <_free_r+0x30>
 8009ade:	6063      	str	r3, [r4, #4]
 8009ae0:	6014      	str	r4, [r2, #0]
 8009ae2:	b003      	add	sp, #12
 8009ae4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ae8:	f000 b87e 	b.w	8009be8 <__malloc_unlock>
 8009aec:	42a3      	cmp	r3, r4
 8009aee:	d908      	bls.n	8009b02 <_free_r+0x46>
 8009af0:	6825      	ldr	r5, [r4, #0]
 8009af2:	1961      	adds	r1, r4, r5
 8009af4:	428b      	cmp	r3, r1
 8009af6:	bf01      	itttt	eq
 8009af8:	6819      	ldreq	r1, [r3, #0]
 8009afa:	685b      	ldreq	r3, [r3, #4]
 8009afc:	1949      	addeq	r1, r1, r5
 8009afe:	6021      	streq	r1, [r4, #0]
 8009b00:	e7ed      	b.n	8009ade <_free_r+0x22>
 8009b02:	461a      	mov	r2, r3
 8009b04:	685b      	ldr	r3, [r3, #4]
 8009b06:	b10b      	cbz	r3, 8009b0c <_free_r+0x50>
 8009b08:	42a3      	cmp	r3, r4
 8009b0a:	d9fa      	bls.n	8009b02 <_free_r+0x46>
 8009b0c:	6811      	ldr	r1, [r2, #0]
 8009b0e:	1855      	adds	r5, r2, r1
 8009b10:	42a5      	cmp	r5, r4
 8009b12:	d10b      	bne.n	8009b2c <_free_r+0x70>
 8009b14:	6824      	ldr	r4, [r4, #0]
 8009b16:	4421      	add	r1, r4
 8009b18:	1854      	adds	r4, r2, r1
 8009b1a:	42a3      	cmp	r3, r4
 8009b1c:	6011      	str	r1, [r2, #0]
 8009b1e:	d1e0      	bne.n	8009ae2 <_free_r+0x26>
 8009b20:	681c      	ldr	r4, [r3, #0]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	6053      	str	r3, [r2, #4]
 8009b26:	4421      	add	r1, r4
 8009b28:	6011      	str	r1, [r2, #0]
 8009b2a:	e7da      	b.n	8009ae2 <_free_r+0x26>
 8009b2c:	d902      	bls.n	8009b34 <_free_r+0x78>
 8009b2e:	230c      	movs	r3, #12
 8009b30:	6003      	str	r3, [r0, #0]
 8009b32:	e7d6      	b.n	8009ae2 <_free_r+0x26>
 8009b34:	6825      	ldr	r5, [r4, #0]
 8009b36:	1961      	adds	r1, r4, r5
 8009b38:	428b      	cmp	r3, r1
 8009b3a:	bf04      	itt	eq
 8009b3c:	6819      	ldreq	r1, [r3, #0]
 8009b3e:	685b      	ldreq	r3, [r3, #4]
 8009b40:	6063      	str	r3, [r4, #4]
 8009b42:	bf04      	itt	eq
 8009b44:	1949      	addeq	r1, r1, r5
 8009b46:	6021      	streq	r1, [r4, #0]
 8009b48:	6054      	str	r4, [r2, #4]
 8009b4a:	e7ca      	b.n	8009ae2 <_free_r+0x26>
 8009b4c:	b003      	add	sp, #12
 8009b4e:	bd30      	pop	{r4, r5, pc}
 8009b50:	20000b60 	.word	0x20000b60

08009b54 <_raise_r>:
 8009b54:	291f      	cmp	r1, #31
 8009b56:	b538      	push	{r3, r4, r5, lr}
 8009b58:	4604      	mov	r4, r0
 8009b5a:	460d      	mov	r5, r1
 8009b5c:	d904      	bls.n	8009b68 <_raise_r+0x14>
 8009b5e:	2316      	movs	r3, #22
 8009b60:	6003      	str	r3, [r0, #0]
 8009b62:	f04f 30ff 	mov.w	r0, #4294967295
 8009b66:	bd38      	pop	{r3, r4, r5, pc}
 8009b68:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009b6a:	b112      	cbz	r2, 8009b72 <_raise_r+0x1e>
 8009b6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b70:	b94b      	cbnz	r3, 8009b86 <_raise_r+0x32>
 8009b72:	4620      	mov	r0, r4
 8009b74:	f000 f830 	bl	8009bd8 <_getpid_r>
 8009b78:	462a      	mov	r2, r5
 8009b7a:	4601      	mov	r1, r0
 8009b7c:	4620      	mov	r0, r4
 8009b7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b82:	f000 b817 	b.w	8009bb4 <_kill_r>
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d00a      	beq.n	8009ba0 <_raise_r+0x4c>
 8009b8a:	1c59      	adds	r1, r3, #1
 8009b8c:	d103      	bne.n	8009b96 <_raise_r+0x42>
 8009b8e:	2316      	movs	r3, #22
 8009b90:	6003      	str	r3, [r0, #0]
 8009b92:	2001      	movs	r0, #1
 8009b94:	e7e7      	b.n	8009b66 <_raise_r+0x12>
 8009b96:	2400      	movs	r4, #0
 8009b98:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009b9c:	4628      	mov	r0, r5
 8009b9e:	4798      	blx	r3
 8009ba0:	2000      	movs	r0, #0
 8009ba2:	e7e0      	b.n	8009b66 <_raise_r+0x12>

08009ba4 <raise>:
 8009ba4:	4b02      	ldr	r3, [pc, #8]	; (8009bb0 <raise+0xc>)
 8009ba6:	4601      	mov	r1, r0
 8009ba8:	6818      	ldr	r0, [r3, #0]
 8009baa:	f7ff bfd3 	b.w	8009b54 <_raise_r>
 8009bae:	bf00      	nop
 8009bb0:	20000720 	.word	0x20000720

08009bb4 <_kill_r>:
 8009bb4:	b538      	push	{r3, r4, r5, lr}
 8009bb6:	4d07      	ldr	r5, [pc, #28]	; (8009bd4 <_kill_r+0x20>)
 8009bb8:	2300      	movs	r3, #0
 8009bba:	4604      	mov	r4, r0
 8009bbc:	4608      	mov	r0, r1
 8009bbe:	4611      	mov	r1, r2
 8009bc0:	602b      	str	r3, [r5, #0]
 8009bc2:	f7f7 fb27 	bl	8001214 <_kill>
 8009bc6:	1c43      	adds	r3, r0, #1
 8009bc8:	d102      	bne.n	8009bd0 <_kill_r+0x1c>
 8009bca:	682b      	ldr	r3, [r5, #0]
 8009bcc:	b103      	cbz	r3, 8009bd0 <_kill_r+0x1c>
 8009bce:	6023      	str	r3, [r4, #0]
 8009bd0:	bd38      	pop	{r3, r4, r5, pc}
 8009bd2:	bf00      	nop
 8009bd4:	20000b64 	.word	0x20000b64

08009bd8 <_getpid_r>:
 8009bd8:	f7f7 bb14 	b.w	8001204 <_getpid>

08009bdc <__malloc_lock>:
 8009bdc:	4801      	ldr	r0, [pc, #4]	; (8009be4 <__malloc_lock+0x8>)
 8009bde:	f000 b809 	b.w	8009bf4 <__retarget_lock_acquire_recursive>
 8009be2:	bf00      	nop
 8009be4:	20000b68 	.word	0x20000b68

08009be8 <__malloc_unlock>:
 8009be8:	4801      	ldr	r0, [pc, #4]	; (8009bf0 <__malloc_unlock+0x8>)
 8009bea:	f000 b804 	b.w	8009bf6 <__retarget_lock_release_recursive>
 8009bee:	bf00      	nop
 8009bf0:	20000b68 	.word	0x20000b68

08009bf4 <__retarget_lock_acquire_recursive>:
 8009bf4:	4770      	bx	lr

08009bf6 <__retarget_lock_release_recursive>:
 8009bf6:	4770      	bx	lr

08009bf8 <_init>:
 8009bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bfa:	bf00      	nop
 8009bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bfe:	bc08      	pop	{r3}
 8009c00:	469e      	mov	lr, r3
 8009c02:	4770      	bx	lr

08009c04 <_fini>:
 8009c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c06:	bf00      	nop
 8009c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c0a:	bc08      	pop	{r3}
 8009c0c:	469e      	mov	lr, r3
 8009c0e:	4770      	bx	lr
