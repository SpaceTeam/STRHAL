
firmware_liquids.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009824  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000135c  080099fc  080099fc  000199fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad58  0800ad58  00020784  2**0
                  CONTENTS
  4 .ARM          00000000  0800ad58  0800ad58  00020784  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ad58  0800ad58  00020784  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad58  0800ad58  0001ad58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad5c  0800ad5c  0001ad5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000784  20000000  0800ad60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ec  20000788  0800b4e4  00020788  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000b74  0800b4e4  00020b74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020784  2**0
                  CONTENTS, READONLY
 12 .debug_info   000296c1  00000000  00000000  000207b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006aca  00000000  00000000  00049e75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001900  00000000  00000000  00050940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016d8  00000000  00000000  00052240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b3c9  00000000  00000000  00053918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018f07  00000000  00000000  0007ece1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df36d  00000000  00000000  00097be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00176f55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a0c  00000000  00000000  00176fa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000788 	.word	0x20000788
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080099e4 	.word	0x080099e4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000078c 	.word	0x2000078c
 8000214:	080099e4 	.word	0x080099e4

08000218 <_ZN11AbstractComC1Em>:
#include <AbstractCom.h>

AbstractCom::AbstractCom(uint32_t nodeId) :
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
		nodeId(nodeId)
 8000222:	4a06      	ldr	r2, [pc, #24]	; (800023c <_ZN11AbstractComC1Em+0x24>)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	601a      	str	r2, [r3, #0]
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	683a      	ldr	r2, [r7, #0]
 800022c:	605a      	str	r2, [r3, #4]
{
}
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	4618      	mov	r0, r3
 8000232:	370c      	adds	r7, #12
 8000234:	46bd      	mov	sp, r7
 8000236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023a:	4770      	bx	lr
 800023c:	08009b44 	.word	0x08009b44

08000240 <_ZN3CanC1Em>:
#include <cstdio>

Com_Receptor_t Can::standardReceptor = nullptr;
uint32_t Can::_nodeId = 0; // TODO fix this pfusch

Can::Can(uint32_t nodeId) :
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
 8000248:	6039      	str	r1, [r7, #0]
		AbstractCom(nodeId)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	6839      	ldr	r1, [r7, #0]
 800024e:	4618      	mov	r0, r3
 8000250:	f7ff ffe2 	bl	8000218 <_ZN11AbstractComC1Em>
 8000254:	4a03      	ldr	r2, [pc, #12]	; (8000264 <_ZN3CanC1Em+0x24>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	601a      	str	r2, [r3, #0]
{
}
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	4618      	mov	r0, r3
 800025e:	3708      	adds	r7, #8
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	08009b54 	.word	0x08009b54

08000268 <_ZN3Can8instanceEm>:

Can& Can::instance(uint32_t nodeId)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
	static Can can(nodeId);
 8000270:	4b15      	ldr	r3, [pc, #84]	; (80002c8 <_ZN3Can8instanceEm+0x60>)
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	f3bf 8f5b 	dmb	ish
 8000278:	b2db      	uxtb	r3, r3
 800027a:	f003 0301 	and.w	r3, r3, #1
 800027e:	2b00      	cmp	r3, #0
 8000280:	bf0c      	ite	eq
 8000282:	2301      	moveq	r3, #1
 8000284:	2300      	movne	r3, #0
 8000286:	b2db      	uxtb	r3, r3
 8000288:	2b00      	cmp	r3, #0
 800028a:	d011      	beq.n	80002b0 <_ZN3Can8instanceEm+0x48>
 800028c:	480e      	ldr	r0, [pc, #56]	; (80002c8 <_ZN3Can8instanceEm+0x60>)
 800028e:	f009 fa93 	bl	80097b8 <__cxa_guard_acquire>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	bf14      	ite	ne
 8000298:	2301      	movne	r3, #1
 800029a:	2300      	moveq	r3, #0
 800029c:	b2db      	uxtb	r3, r3
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d006      	beq.n	80002b0 <_ZN3Can8instanceEm+0x48>
 80002a2:	6879      	ldr	r1, [r7, #4]
 80002a4:	4809      	ldr	r0, [pc, #36]	; (80002cc <_ZN3Can8instanceEm+0x64>)
 80002a6:	f7ff ffcb 	bl	8000240 <_ZN3CanC1Em>
 80002aa:	4807      	ldr	r0, [pc, #28]	; (80002c8 <_ZN3Can8instanceEm+0x60>)
 80002ac:	f009 fa90 	bl	80097d0 <__cxa_guard_release>

	if (nodeId != 0)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d002      	beq.n	80002bc <_ZN3Can8instanceEm+0x54>
		_nodeId = nodeId;
 80002b6:	4a06      	ldr	r2, [pc, #24]	; (80002d0 <_ZN3Can8instanceEm+0x68>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	6013      	str	r3, [r2, #0]

	return can;
 80002bc:	4b03      	ldr	r3, [pc, #12]	; (80002cc <_ZN3Can8instanceEm+0x64>)
}
 80002be:	4618      	mov	r0, r3
 80002c0:	3708      	adds	r7, #8
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	200007b4 	.word	0x200007b4
 80002cc:	200007ac 	.word	0x200007ac
 80002d0:	200007a8 	.word	0x200007a8

080002d4 <_ZN3Can4initEPFvmPhmEPFvvE>:

int Can::init(Com_Receptor_t receptor, Com_Heartbeat_t heartbeat)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
 80002da:	60f8      	str	r0, [r7, #12]
 80002dc:	60b9      	str	r1, [r7, #8]
 80002de:	607a      	str	r2, [r7, #4]
	return Can::init(receptor, heartbeat, COMMode::STANDARD_COM_MODE);
 80002e0:	2300      	movs	r3, #0
 80002e2:	687a      	ldr	r2, [r7, #4]
 80002e4:	68b9      	ldr	r1, [r7, #8]
 80002e6:	68f8      	ldr	r0, [r7, #12]
 80002e8:	f000 f806 	bl	80002f8 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode>
 80002ec:	4603      	mov	r3, r0
}
 80002ee:	4618      	mov	r0, r3
 80002f0:	3710      	adds	r7, #16
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
	...

080002f8 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode>:

int Can::init(Com_Receptor_t receptor, Com_Heartbeat_t heartbeat, COMMode mode)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b0a4      	sub	sp, #144	; 0x90
 80002fc:	af02      	add	r7, sp, #8
 80002fe:	60f8      	str	r0, [r7, #12]
 8000300:	60b9      	str	r1, [r7, #8]
 8000302:	607a      	str	r2, [r7, #4]
 8000304:	603b      	str	r3, [r7, #0]
	if(nodeId == 0)
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	685b      	ldr	r3, [r3, #4]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d102      	bne.n	8000314 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x1c>
		return -1;
 800030e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000312:	e17a      	b.n	800060a <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x312>

	standardReceptor = receptor;
 8000314:	4abf      	ldr	r2, [pc, #764]	; (8000614 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x31c>)
 8000316:	68bb      	ldr	r3, [r7, #8]
 8000318:	6013      	str	r3, [r2, #0]

	if (STRHAL_CAN_Instance_Init(STRHAL_FDCAN1) != 0)
 800031a:	2000      	movs	r0, #0
 800031c:	f006 fc5a 	bl	8006bd4 <STRHAL_CAN_Instance_Init>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	bf14      	ite	ne
 8000326:	2301      	movne	r3, #1
 8000328:	2300      	moveq	r3, #0
 800032a:	b2db      	uxtb	r3, r3
 800032c:	2b00      	cmp	r3, #0
 800032e:	d002      	beq.n	8000336 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x3e>
		return -1;
 8000330:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000334:	e169      	b.n	800060a <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x312>

	//if (STRHAL_CAN_Instance_Init(STRHAL_FDCAN2) != 0)
	//	return -1;

	if (STRHAL_TIM_Heartbeat_Init(STRHAL_TIM_TIM7, 1600, 1000) != 100)
 8000336:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800033a:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800033e:	2001      	movs	r0, #1
 8000340:	f008 faee 	bl	8008920 <STRHAL_TIM_Heartbeat_Init>
 8000344:	4603      	mov	r3, r0
 8000346:	2b64      	cmp	r3, #100	; 0x64
 8000348:	bf14      	ite	ne
 800034a:	2301      	movne	r3, #1
 800034c:	2300      	moveq	r3, #0
 800034e:	b2db      	uxtb	r3, r3
 8000350:	2b00      	cmp	r3, #0
 8000352:	d002      	beq.n	800035a <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x62>
		return -1;
 8000354:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000358:	e157      	b.n	800060a <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x312>

	if (STRHAL_TIM_Heartbeat_Subscribe(STRHAL_TIM_TIM7, heartbeat) != 0)
 800035a:	6879      	ldr	r1, [r7, #4]
 800035c:	2001      	movs	r0, #1
 800035e:	f008 fb3b 	bl	80089d8 <STRHAL_TIM_Heartbeat_Subscribe>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	bf14      	ite	ne
 8000368:	2301      	movne	r3, #1
 800036a:	2300      	moveq	r3, #0
 800036c:	b2db      	uxtb	r3, r3
 800036e:	2b00      	cmp	r3, #0
 8000370:	d002      	beq.n	8000378 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x80>
		return -1;
 8000372:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000376:	e148      	b.n	800060a <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x312>

	if (mode == COMMode::STANDARD_COM_MODE)
 8000378:	683b      	ldr	r3, [r7, #0]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d16f      	bne.n	800045e <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x166>
	{
		Can_MessageId_t mask =
 800037e:	2300      	movs	r3, #0
 8000380:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		{ 0 };
		mask.info.direction = 0x1;
 8000384:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8000388:	f043 0301 	orr.w	r3, r3, #1
 800038c:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
		mask.info.node_id = 0x3F;
 8000390:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8000394:	f043 037e 	orr.w	r3, r3, #126	; 0x7e
 8000398:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
		mask.info.special_cmd = 0x3;
 800039c:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80003a0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80003a4:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

		Can_MessageId_t id =
 80003a8:	2300      	movs	r3, #0
 80003aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		{ 0 };
		id.info.direction = MASTER2NODE_DIRECTION;
 80003ae:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80003b2:	f36f 0300 	bfc	r3, #0, #1
 80003b6:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
		id.info.special_cmd = STANDARD_SPECIAL_CMD;
 80003ba:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 80003be:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80003c2:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
		id.info.node_id = nodeId;
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	685b      	ldr	r3, [r3, #4]
 80003ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80003ce:	b2da      	uxtb	r2, r3
 80003d0:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80003d4:	f362 0346 	bfi	r3, r2, #1, #6
 80003d8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
		Can_MessageId_t id2 =
 80003dc:	2300      	movs	r3, #0
 80003de:	67fb      	str	r3, [r7, #124]	; 0x7c
		{ 0 };
		id2.info.direction = MASTER2NODE_DIRECTION;
 80003e0:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80003e4:	f36f 0300 	bfc	r3, #0, #1
 80003e8:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
		id2.info.special_cmd = STANDARD_SPECIAL_CMD;
 80003ec:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80003f0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80003f4:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
		id2.info.node_id = 0;
 80003f8:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80003fc:	f36f 0346 	bfc	r3, #1, #6
 8000400:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c

		STRHAL_FDCAN_Filter_t mainFilter[] =
 8000404:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000408:	2200      	movs	r2, #0
 800040a:	601a      	str	r2, [r3, #0]
 800040c:	605a      	str	r2, [r3, #4]
 800040e:	609a      	str	r2, [r3, #8]
 8000410:	60da      	str	r2, [r3, #12]
 8000412:	611a      	str	r2, [r3, #16]
 8000414:	615a      	str	r2, [r3, #20]
 8000416:	2302      	movs	r3, #2
 8000418:	66fb      	str	r3, [r7, #108]	; 0x6c
 800041a:	2302      	movs	r3, #2
 800041c:	67bb      	str	r3, [r7, #120]	; 0x78
		{
		{ .value_id1 = id.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
 800041e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
		{ .value_id1 = id2.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK } };
 8000422:	667b      	str	r3, [r7, #100]	; 0x64
		{ .value_id1 = id.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
 8000424:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
		{ .value_id1 = id2.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK } };
 8000428:	66bb      	str	r3, [r7, #104]	; 0x68
 800042a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800042c:	673b      	str	r3, [r7, #112]	; 0x70
 800042e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000432:	677b      	str	r3, [r7, #116]	; 0x74

		if (STRHAL_CAN_Subscribe(STRHAL_FDCAN1, STRHAL_FDCAN_RX0, mainFilter, 2, receptor) != 2)
 8000434:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8000438:	68bb      	ldr	r3, [r7, #8]
 800043a:	9300      	str	r3, [sp, #0]
 800043c:	2302      	movs	r3, #2
 800043e:	2100      	movs	r1, #0
 8000440:	2000      	movs	r0, #0
 8000442:	f006 fccb 	bl	8006ddc <STRHAL_CAN_Subscribe>
 8000446:	4603      	mov	r3, r0
 8000448:	2b02      	cmp	r3, #2
 800044a:	bf14      	ite	ne
 800044c:	2301      	movne	r3, #1
 800044e:	2300      	moveq	r3, #0
 8000450:	b2db      	uxtb	r3, r3
 8000452:	2b00      	cmp	r3, #0
 8000454:	f000 80d8 	beq.w	8000608 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x310>
			return -1;
 8000458:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800045c:	e0d5      	b.n	800060a <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x312>
	}
	else if (mode == COMMode::LISTENER_COM_MODE)
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	2b02      	cmp	r3, #2
 8000462:	f040 809f 	bne.w	80005a4 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x2ac>
	{
		Can_MessageId_t mask =
 8000466:	2300      	movs	r3, #0
 8000468:	663b      	str	r3, [r7, #96]	; 0x60
		{ 0 };
		mask.info.direction = 0x1;
 800046a:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800046e:	f043 0301 	orr.w	r3, r3, #1
 8000472:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
		mask.info.node_id = 0x1F;
 8000476:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800047a:	221f      	movs	r2, #31
 800047c:	f362 0346 	bfi	r3, r2, #1, #6
 8000480:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
		mask.info.special_cmd = 0x3;
 8000484:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8000488:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800048c:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60

		Can_MessageId_t id =
 8000490:	2300      	movs	r3, #0
 8000492:	65fb      	str	r3, [r7, #92]	; 0x5c
		{ 0 };
		id.info.direction = MASTER2NODE_DIRECTION;
 8000494:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8000498:	f36f 0300 	bfc	r3, #0, #1
 800049c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
		id.info.special_cmd = STANDARD_SPECIAL_CMD;
 80004a0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80004a4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80004a8:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
		id.info.node_id = nodeId;
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	685b      	ldr	r3, [r3, #4]
 80004b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80004b4:	b2da      	uxtb	r2, r3
 80004b6:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80004ba:	f362 0346 	bfi	r3, r2, #1, #6
 80004be:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

		Can_MessageId_t id2 =
 80004c2:	2300      	movs	r3, #0
 80004c4:	65bb      	str	r3, [r7, #88]	; 0x58
		{ 0 };
		id2.info.direction = MASTER2NODE_DIRECTION;
 80004c6:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80004ca:	f36f 0300 	bfc	r3, #0, #1
 80004ce:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		id2.info.special_cmd = STANDARD_SPECIAL_CMD;
 80004d2:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80004d6:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80004da:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
		id2.info.node_id = 0;
 80004de:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80004e2:	f36f 0346 	bfc	r3, #1, #6
 80004e6:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

		Can_MessageId_t id3 =
 80004ea:	2300      	movs	r3, #0
 80004ec:	657b      	str	r3, [r7, #84]	; 0x54
		{ 0 };
		id3.info.direction = NODE2MASTER_DIRECTION;
 80004ee:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80004f2:	f043 0301 	orr.w	r3, r3, #1
 80004f6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
		id3.info.special_cmd = STANDARD_SPECIAL_CMD;
 80004fa:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80004fe:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8000502:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
		id3.info.node_id = 6;
 8000506:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800050a:	2206      	movs	r2, #6
 800050c:	f362 0346 	bfi	r3, r2, #1, #6
 8000510:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

		Can_MessageId_t id4 =
 8000514:	2300      	movs	r3, #0
 8000516:	653b      	str	r3, [r7, #80]	; 0x50
		{ 0 };
		id4.info.direction = NODE2MASTER_DIRECTION;
 8000518:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800051c:	f043 0301 	orr.w	r3, r3, #1
 8000520:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
		id4.info.special_cmd = STANDARD_SPECIAL_CMD;
 8000524:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8000528:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800052c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
		id4.info.node_id = 7;
 8000530:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000534:	2207      	movs	r2, #7
 8000536:	f362 0346 	bfi	r3, r2, #1, #6
 800053a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

		STRHAL_FDCAN_Filter_t mainFilter[] =
 800053e:	f107 0314 	add.w	r3, r7, #20
 8000542:	2230      	movs	r2, #48	; 0x30
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f009 f9a2 	bl	8009890 <memset>
 800054c:	2302      	movs	r3, #2
 800054e:	61fb      	str	r3, [r7, #28]
 8000550:	2302      	movs	r3, #2
 8000552:	62bb      	str	r3, [r7, #40]	; 0x28
 8000554:	2302      	movs	r3, #2
 8000556:	637b      	str	r3, [r7, #52]	; 0x34
 8000558:	2302      	movs	r3, #2
 800055a:	643b      	str	r3, [r7, #64]	; 0x40
		{
		{ .value_id1 = id.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
 800055c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
		{ .value_id1 = id2.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
		{ .value_id1 = id3.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
		{ .value_id1 = id4.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK } };
 800055e:	617b      	str	r3, [r7, #20]
		{ .value_id1 = id.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
 8000560:	6e3b      	ldr	r3, [r7, #96]	; 0x60
		{ .value_id1 = id4.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK } };
 8000562:	61bb      	str	r3, [r7, #24]
		{ .value_id1 = id2.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
 8000564:	6dbb      	ldr	r3, [r7, #88]	; 0x58
		{ .value_id1 = id4.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK } };
 8000566:	623b      	str	r3, [r7, #32]
		{ .value_id1 = id2.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
 8000568:	6e3b      	ldr	r3, [r7, #96]	; 0x60
		{ .value_id1 = id4.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK } };
 800056a:	627b      	str	r3, [r7, #36]	; 0x24
		{ .value_id1 = id3.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
 800056c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
		{ .value_id1 = id4.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK } };
 800056e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{ .value_id1 = id3.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK },
 8000570:	6e3b      	ldr	r3, [r7, #96]	; 0x60
		{ .value_id1 = id4.uint32, .mask_id2 = mask.uint32, .type = FDCAN_FILTER_MASK } };
 8000572:	633b      	str	r3, [r7, #48]	; 0x30
 8000574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000576:	63bb      	str	r3, [r7, #56]	; 0x38
 8000578:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800057a:	63fb      	str	r3, [r7, #60]	; 0x3c

		if (STRHAL_CAN_Subscribe(STRHAL_FDCAN1, STRHAL_FDCAN_RX0, mainFilter, 4, receptor) != 4)
 800057c:	f107 0214 	add.w	r2, r7, #20
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	2304      	movs	r3, #4
 8000586:	2100      	movs	r1, #0
 8000588:	2000      	movs	r0, #0
 800058a:	f006 fc27 	bl	8006ddc <STRHAL_CAN_Subscribe>
 800058e:	4603      	mov	r3, r0
 8000590:	2b04      	cmp	r3, #4
 8000592:	bf14      	ite	ne
 8000594:	2301      	movne	r3, #1
 8000596:	2300      	moveq	r3, #0
 8000598:	b2db      	uxtb	r3, r3
 800059a:	2b00      	cmp	r3, #0
 800059c:	d034      	beq.n	8000608 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x310>
			return -1;
 800059e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005a2:	e032      	b.n	800060a <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x312>
	}
	else if (mode == COMMode::BRIDGE_COM_MODE)
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	d12e      	bne.n	8000608 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x310>
	{
		STRHAL_FDCAN_Filter_t mainFilter[] =
 80005aa:	2300      	movs	r3, #0
 80005ac:	647b      	str	r3, [r7, #68]	; 0x44
 80005ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80005b4:	2300      	movs	r3, #0
 80005b6:	64fb      	str	r3, [r7, #76]	; 0x4c
		{
		{ .value_id1 = 0x00, .mask_id2 = 0xFFFF, .type = FDCAN_FILTER_RANGE } };

		if (STRHAL_CAN_Subscribe(STRHAL_FDCAN1, STRHAL_FDCAN_RX0, mainFilter, 1, Can::internalReceptor) != 1)
 80005b8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80005bc:	4b16      	ldr	r3, [pc, #88]	; (8000618 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x320>)
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	2301      	movs	r3, #1
 80005c2:	2100      	movs	r1, #0
 80005c4:	2000      	movs	r0, #0
 80005c6:	f006 fc09 	bl	8006ddc <STRHAL_CAN_Subscribe>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	bf14      	ite	ne
 80005d0:	2301      	movne	r3, #1
 80005d2:	2300      	moveq	r3, #0
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d002      	beq.n	80005e0 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x2e8>
			return -1;
 80005da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005de:	e014      	b.n	800060a <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x312>

		if (STRHAL_CAN_Subscribe(STRHAL_FDCAN2, STRHAL_FDCAN_RX0, mainFilter, 1, Can::externalReceptor) != 1)
 80005e0:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80005e4:	4b0d      	ldr	r3, [pc, #52]	; (800061c <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x324>)
 80005e6:	9300      	str	r3, [sp, #0]
 80005e8:	2301      	movs	r3, #1
 80005ea:	2100      	movs	r1, #0
 80005ec:	2001      	movs	r0, #1
 80005ee:	f006 fbf5 	bl	8006ddc <STRHAL_CAN_Subscribe>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	bf14      	ite	ne
 80005f8:	2301      	movne	r3, #1
 80005fa:	2300      	moveq	r3, #0
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d002      	beq.n	8000608 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x310>
			return -1;
 8000602:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000606:	e000      	b.n	800060a <_ZN3Can4initEPFvmPhmEPFvvE7COMMode+0x312>
	}

	return 0;
 8000608:	2300      	movs	r3, #0
}
 800060a:	4618      	mov	r0, r3
 800060c:	3788      	adds	r7, #136	; 0x88
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	200007a4 	.word	0x200007a4
 8000618:	08000771 	.word	0x08000771
 800061c:	08000791 	.word	0x08000791

08000620 <_ZN3Can4execEv>:

int Can::exec()
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	STRHAL_CAN_Run();
 8000628:	f006 fd90 	bl	800714c <STRHAL_CAN_Run>
	if (STRHAL_TIM_Heartbeat_StartHeartbeat(STRHAL_TIM_TIM7) != 0)
 800062c:	2001      	movs	r0, #1
 800062e:	f008 f9fb 	bl	8008a28 <STRHAL_TIM_Heartbeat_StartHeartbeat>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	bf14      	ite	ne
 8000638:	2301      	movne	r3, #1
 800063a:	2300      	moveq	r3, #0
 800063c:	b2db      	uxtb	r3, r3
 800063e:	2b00      	cmp	r3, #0
 8000640:	d002      	beq.n	8000648 <_ZN3Can4execEv+0x28>
		return -1;
 8000642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000646:	e000      	b.n	800064a <_ZN3Can4execEv+0x2a>

	return 0;
 8000648:	2300      	movs	r3, #0
}
 800064a:	4618      	mov	r0, r3
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <_ZN3Can4sendEmPhh>:

int Can::send(uint32_t id, uint8_t *data, uint8_t n)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b096      	sub	sp, #88	; 0x58
 8000658:	af00      	add	r7, sp, #0
 800065a:	60f8      	str	r0, [r7, #12]
 800065c:	60b9      	str	r1, [r7, #8]
 800065e:	4613      	mov	r3, r2
 8000660:	71fb      	strb	r3, [r7, #7]
	Can_MessageId_t msgId =
 8000662:	2300      	movs	r3, #0
 8000664:	657b      	str	r3, [r7, #84]	; 0x54
	{ 0 };
	msgId.info.special_cmd = STANDARD_SPECIAL_CMD;
 8000666:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800066a:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800066e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	msgId.info.direction = NODE2MASTER_DIRECTION;
 8000672:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000676:	f043 0301 	orr.w	r3, r3, #1
 800067a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	if (id == 0)
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d10b      	bne.n	800069c <_ZN3Can4sendEmPhh+0x48>
	{
		msgId.info.node_id = _nodeId;
 8000684:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <_ZN3Can4sendEmPhh+0xa0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800068c:	b2da      	uxtb	r2, r3
 800068e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000692:	f362 0346 	bfi	r3, r2, #1, #6
 8000696:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800069a:	e009      	b.n	80006b0 <_ZN3Can4sendEmPhh+0x5c>
	}
	else
	{
		msgId.info.node_id = id;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80006a2:	b2da      	uxtb	r2, r3
 80006a4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80006a8:	f362 0346 	bfi	r3, r2, #1, #6
 80006ac:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	}
	msgId.info.priority = STANDARD_PRIORITY;
 80006b0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80006b4:	2202      	movs	r2, #2
 80006b6:	f362 0342 	bfi	r3, r2, #1, #2
 80006ba:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

	Can_MessageData_t msgData =
 80006be:	f107 0310 	add.w	r3, r7, #16
 80006c2:	2242      	movs	r2, #66	; 0x42
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f009 f8e2 	bl	8009890 <memset>
	{ 0 };

	memcpy(msgData.uint8, data, n);
 80006cc:	79fa      	ldrb	r2, [r7, #7]
 80006ce:	f107 0310 	add.w	r3, r7, #16
 80006d2:	68b9      	ldr	r1, [r7, #8]
 80006d4:	4618      	mov	r0, r3
 80006d6:	f009 f8cd 	bl	8009874 <memcpy>

	(void) STRHAL_CAN_Send(STRHAL_FDCAN1, msgId.uint32, msgData.uint8, n);
 80006da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	f107 0210 	add.w	r2, r7, #16
 80006e2:	2000      	movs	r0, #0
 80006e4:	f006 fc5e 	bl	8006fa4 <STRHAL_CAN_Send>
	return 0;
 80006e8:	2300      	movs	r3, #0
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3758      	adds	r7, #88	; 0x58
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	200007a8 	.word	0x200007a8

080006f8 <_ZN3Can14bridgeReceptorE17STRHAL_FDCAN_Id_tmPhm>:

	(void) STRHAL_CAN_Send(STRHAL_FDCAN1, msgId.uint32, msgData.uint8, n);
}

void Can::bridgeReceptor(STRHAL_FDCAN_Id_t bus_id, uint32_t id, uint8_t *data, uint32_t n)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60b9      	str	r1, [r7, #8]
 8000700:	607a      	str	r2, [r7, #4]
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	4603      	mov	r3, r0
 8000706:	73fb      	strb	r3, [r7, #15]
	Can_MessageId_t incoming_id;
	incoming_id.uint32 = id;
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	617b      	str	r3, [r7, #20]

	if (incoming_id.info.node_id == _nodeId)
 800070c:	7d3b      	ldrb	r3, [r7, #20]
 800070e:	f3c3 0345 	ubfx	r3, r3, #1, #6
 8000712:	b2db      	uxtb	r3, r3
 8000714:	461a      	mov	r2, r3
 8000716:	4b14      	ldr	r3, [pc, #80]	; (8000768 <_ZN3Can14bridgeReceptorE17STRHAL_FDCAN_Id_tmPhm+0x70>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	429a      	cmp	r2, r3
 800071c:	d106      	bne.n	800072c <_ZN3Can14bridgeReceptorE17STRHAL_FDCAN_Id_tmPhm+0x34>
	{
		Can::standardReceptor(id, data, n);
 800071e:	4b13      	ldr	r3, [pc, #76]	; (800076c <_ZN3Can14bridgeReceptorE17STRHAL_FDCAN_Id_tmPhm+0x74>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	683a      	ldr	r2, [r7, #0]
 8000724:	6879      	ldr	r1, [r7, #4]
 8000726:	68b8      	ldr	r0, [r7, #8]
 8000728:	4798      	blx	r3
	}
	else
	{
		STRHAL_CAN_Send(bus_id, id, data, n);
	}
}
 800072a:	e018      	b.n	800075e <_ZN3Can14bridgeReceptorE17STRHAL_FDCAN_Id_tmPhm+0x66>
	else if (incoming_id.info.node_id == 0)
 800072c:	7d3b      	ldrb	r3, [r7, #20]
 800072e:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000732:	b2db      	uxtb	r3, r3
 8000734:	2b00      	cmp	r3, #0
 8000736:	d10c      	bne.n	8000752 <_ZN3Can14bridgeReceptorE17STRHAL_FDCAN_Id_tmPhm+0x5a>
		STRHAL_CAN_Send(bus_id, id, data, n);
 8000738:	7bf8      	ldrb	r0, [r7, #15]
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	68b9      	ldr	r1, [r7, #8]
 8000740:	f006 fc30 	bl	8006fa4 <STRHAL_CAN_Send>
		Can::standardReceptor(id, data, n);
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <_ZN3Can14bridgeReceptorE17STRHAL_FDCAN_Id_tmPhm+0x74>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	683a      	ldr	r2, [r7, #0]
 800074a:	6879      	ldr	r1, [r7, #4]
 800074c:	68b8      	ldr	r0, [r7, #8]
 800074e:	4798      	blx	r3
}
 8000750:	e005      	b.n	800075e <_ZN3Can14bridgeReceptorE17STRHAL_FDCAN_Id_tmPhm+0x66>
		STRHAL_CAN_Send(bus_id, id, data, n);
 8000752:	7bf8      	ldrb	r0, [r7, #15]
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	68b9      	ldr	r1, [r7, #8]
 800075a:	f006 fc23 	bl	8006fa4 <STRHAL_CAN_Send>
}
 800075e:	bf00      	nop
 8000760:	3718      	adds	r7, #24
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200007a8 	.word	0x200007a8
 800076c:	200007a4 	.word	0x200007a4

08000770 <_ZN3Can16internalReceptorEmPhm>:

void Can::internalReceptor(uint32_t id, uint8_t *data, uint32_t n)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	607a      	str	r2, [r7, #4]
	//Can::bridgeReceptor(STRHAL_FDCAN2, id, data, n);
	STRHAL_CAN_Send(STRHAL_FDCAN2, id, data, n);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	68ba      	ldr	r2, [r7, #8]
 8000780:	68f9      	ldr	r1, [r7, #12]
 8000782:	2001      	movs	r0, #1
 8000784:	f006 fc0e 	bl	8006fa4 <STRHAL_CAN_Send>
}
 8000788:	bf00      	nop
 800078a:	3710      	adds	r7, #16
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <_ZN3Can16externalReceptorEmPhm>:

void Can::externalReceptor(uint32_t id, uint8_t *data, uint32_t n)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
	Can::bridgeReceptor(STRHAL_FDCAN1, id, data, n);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	68ba      	ldr	r2, [r7, #8]
 80007a0:	68f9      	ldr	r1, [r7, #12]
 80007a2:	2000      	movs	r0, #0
 80007a4:	f7ff ffa8 	bl	80006f8 <_ZN3Can14bridgeReceptorE17STRHAL_FDCAN_Id_tmPhm>
}
 80007a8:	bf00      	nop
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <_ZN14GenericChannelD1Ev>:
#include <STRHAL.h>
#include <Radio.h>
#include "../Modules/W25Qxx_Flash.h"
#include <Can.h>

class GenericChannel: public AbstractChannel
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	4a05      	ldr	r2, [pc, #20]	; (80007d0 <_ZN14GenericChannelD1Ev+0x20>)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 ff43 	bl	800164c <_ZN15AbstractChannelD1Ev>
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4618      	mov	r0, r3
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	08009c70 	.word	0x08009c70

080007d4 <_ZN14GenericChannelD0Ev>:
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f7ff ffe7 	bl	80007b0 <_ZN14GenericChannelD1Ev>
 80007e2:	21c8      	movs	r1, #200	; 0xc8
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f008 ffe5 	bl	80097b4 <_ZdlPvj>
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4618      	mov	r0, r3
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <_ZN12ServoChannelD1Ev>:
	FAULT,
	MOVIN,
	CALIB,
};

class ServoChannel: public AbstractChannel
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	4a05      	ldr	r2, [pc, #20]	; (8000814 <_ZN12ServoChannelD1Ev+0x20>)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4618      	mov	r0, r3
 8000806:	f000 ff21 	bl	800164c <_ZN15AbstractChannelD1Ev>
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4618      	mov	r0, r3
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	08009ca0 	.word	0x08009ca0

08000818 <_ZN12ServoChannelD0Ev>:
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f7ff ffe7 	bl	80007f4 <_ZN12ServoChannelD1Ev>
 8000826:	2168      	movs	r1, #104	; 0x68
 8000828:	6878      	ldr	r0, [r7, #4]
 800082a:	f008 ffc3 	bl	80097b4 <_ZdlPvj>
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4618      	mov	r0, r3
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <_ZN17DigitalOutChannelD1Ev>:
#include "./Channels/AbstractControlInputChannel.h"
#include "./Channels/AbstractControlOutputChannel.h"
#include <can_houbolt/channels/digital_out_channel_def.h>
#include <STRHAL.h>

class DigitalOutChannel: public AbstractChannel, public AbstractControlInputChannel, public AbstractControlOutputChannel
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	4a0d      	ldr	r2, [pc, #52]	; (8000878 <_ZN17DigitalOutChannelD1Ev+0x40>)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	4a0d      	ldr	r2, [pc, #52]	; (800087c <_ZN17DigitalOutChannelD1Ev+0x44>)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	611a      	str	r2, [r3, #16]
 800084c:	4a0c      	ldr	r2, [pc, #48]	; (8000880 <_ZN17DigitalOutChannelD1Ev+0x48>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	615a      	str	r2, [r3, #20]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	3314      	adds	r3, #20
 8000856:	4618      	mov	r0, r3
 8000858:	f000 ff38 	bl	80016cc <_ZN28AbstractControlOutputChannelD1Ev>
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	3310      	adds	r3, #16
 8000860:	4618      	mov	r0, r3
 8000862:	f000 ff13 	bl	800168c <_ZN27AbstractControlInputChannelD1Ev>
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4618      	mov	r0, r3
 800086a:	f000 feef 	bl	800164c <_ZN15AbstractChannelD1Ev>
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4618      	mov	r0, r3
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	08009c04 	.word	0x08009c04
 800087c:	08009c40 	.word	0x08009c40
 8000880:	08009c54 	.word	0x08009c54

08000884 <_ZThn16_N17DigitalOutChannelD1Ev>:
 8000884:	f1a0 0010 	sub.w	r0, r0, #16
 8000888:	e7d6      	b.n	8000838 <_ZN17DigitalOutChannelD1Ev>

0800088a <_ZThn20_N17DigitalOutChannelD1Ev>:
 800088a:	f1a0 0014 	sub.w	r0, r0, #20
 800088e:	e7d3      	b.n	8000838 <_ZN17DigitalOutChannelD1Ev>

08000890 <_ZN17DigitalOutChannelD0Ev>:
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f7ff ffcd 	bl	8000838 <_ZN17DigitalOutChannelD1Ev>
 800089e:	2134      	movs	r1, #52	; 0x34
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f008 ff87 	bl	80097b4 <_ZdlPvj>
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4618      	mov	r0, r3
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <_ZThn16_N17DigitalOutChannelD0Ev>:
 80008b0:	f1a0 0010 	sub.w	r0, r0, #16
 80008b4:	e7ec      	b.n	8000890 <_ZN17DigitalOutChannelD0Ev>

080008b6 <_ZThn20_N17DigitalOutChannelD0Ev>:
 80008b6:	f1a0 0014 	sub.w	r0, r0, #20
 80008ba:	e7e9      	b.n	8000890 <_ZN17DigitalOutChannelD0Ev>

080008bc <_ZN5IOBv4C1Emmm>:
#include <cstring>


#if defined(IOBv4_BOARD)

IOBv4::IOBv4(uint32_t node_id, uint32_t fw_version, uint32_t refresh_divider) :
 80008bc:	b590      	push	{r4, r7, lr}
 80008be:	b0d1      	sub	sp, #324	; 0x144
 80008c0:	af06      	add	r7, sp, #24
 80008c2:	f107 040c 	add.w	r4, r7, #12
 80008c6:	6020      	str	r0, [r4, #0]
 80008c8:	f107 0008 	add.w	r0, r7, #8
 80008cc:	6001      	str	r1, [r0, #0]
 80008ce:	1d39      	adds	r1, r7, #4
 80008d0:	600a      	str	r2, [r1, #0]
 80008d2:	463a      	mov	r2, r7
 80008d4:	6013      	str	r3, [r2, #0]
		channel9(9,{ ADC1, STRHAL_ADC_CHANNEL_2 },		{ GPIOA,  0, STRHAL_GPIO_TYPE_OPP }, STRHAL_ADC_INTYPE_REGULAR, 1),
		channel10(10,{ ADC1, STRHAL_ADC_CHANNEL_9 },	{ GPIOC,  2, STRHAL_GPIO_TYPE_OPP }, STRHAL_ADC_INTYPE_REGULAR, 1),
		channel11(11,{ ADC1, STRHAL_ADC_CHANNEL_7 },	{ GPIOB,  3, STRHAL_GPIO_TYPE_OPP }, STRHAL_ADC_INTYPE_REGULAR, 1),
		//pressurecontrol0(12, channel0, channel1),

		speaker(STRHAL_TIM_TIM8, STRHAL_TIM_TIM8_CH4_PC9)
 80008d6:	f107 030c 	add.w	r3, r7, #12
 80008da:	6818      	ldr	r0, [r3, #0]
 80008dc:	463b      	mov	r3, r7
 80008de:	1d3a      	adds	r2, r7, #4
 80008e0:	f107 0108 	add.w	r1, r7, #8
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	6812      	ldr	r2, [r2, #0]
 80008e8:	6809      	ldr	r1, [r1, #0]
 80008ea:	f001 f89d 	bl	8001a28 <_ZN14GenericChannelC1Emmm>
 80008ee:	4ad9      	ldr	r2, [pc, #868]	; (8000c54 <_ZN5IOBv4C1Emmm+0x398>)
 80008f0:	f107 030c 	add.w	r3, r7, #12
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	f107 030c 	add.w	r3, r7, #12
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4ad6      	ldr	r2, [pc, #856]	; (8000c58 <_ZN5IOBv4C1Emmm+0x39c>)
 8000900:	33c8      	adds	r3, #200	; 0xc8
 8000902:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000906:	e883 0003 	stmia.w	r3, {r0, r1}
 800090a:	f107 030c 	add.w	r3, r7, #12
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4ad2      	ldr	r2, [pc, #840]	; (8000c5c <_ZN5IOBv4C1Emmm+0x3a0>)
 8000912:	33d0      	adds	r3, #208	; 0xd0
 8000914:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000918:	e883 0003 	stmia.w	r3, {r0, r1}
 800091c:	f107 030c 	add.w	r3, r7, #12
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4acf      	ldr	r2, [pc, #828]	; (8000c60 <_ZN5IOBv4C1Emmm+0x3a4>)
 8000924:	33d8      	adds	r3, #216	; 0xd8
 8000926:	e892 0003 	ldmia.w	r2, {r0, r1}
 800092a:	e883 0003 	stmia.w	r3, {r0, r1}
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
		/**/servo0(0, 0, STRHAL_TIM_TIM4, STRHAL_TIM_TIM4_CH2_PB7,{ ADC1, STRHAL_ADC_CHANNEL_9 },{ ADC1, STRHAL_ADC_CHANNEL_1 },{ GPIOC, 13, STRHAL_GPIO_TYPE_OPP }, 1),
 8000938:	f107 0312 	add.w	r3, r7, #18
 800093c:	2203      	movs	r2, #3
 800093e:	701a      	strb	r2, [r3, #0]
 8000940:	f107 0313 	add.w	r3, r7, #19
 8000944:	223f      	movs	r2, #63	; 0x3f
 8000946:	701a      	strb	r2, [r3, #0]
		speaker(STRHAL_TIM_TIM8, STRHAL_TIM_TIM8_CH4_PC9)
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	4ac5      	ldr	r2, [pc, #788]	; (8000c64 <_ZN5IOBv4C1Emmm+0x3a8>)
 800094e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000952:	e883 0003 	stmia.w	r3, {r0, r1}
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4ac3      	ldr	r2, [pc, #780]	; (8000c68 <_ZN5IOBv4C1Emmm+0x3ac>)
 800095c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000960:	e883 0003 	stmia.w	r3, {r0, r1}
 8000964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000968:	4ac0      	ldr	r2, [pc, #768]	; (8000c6c <_ZN5IOBv4C1Emmm+0x3b0>)
 800096a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800096e:	e883 0003 	stmia.w	r3, {r0, r1}
 8000972:	f107 0212 	add.w	r2, r7, #18
 8000976:	2301      	movs	r3, #1
 8000978:	9304      	str	r3, [sp, #16]
 800097a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097e:	9303      	str	r3, [sp, #12]
 8000980:	f107 031c 	add.w	r3, r7, #28
 8000984:	9302      	str	r3, [sp, #8]
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	9301      	str	r3, [sp, #4]
 800098c:	f107 0313 	add.w	r3, r7, #19
 8000990:	9300      	str	r3, [sp, #0]
 8000992:	4613      	mov	r3, r2
 8000994:	2200      	movs	r2, #0
 8000996:	2100      	movs	r1, #0
 8000998:	4620      	mov	r0, r4
 800099a:	f001 fd13 	bl	80023c4 <_ZN12ServoChannelC1EhhRK20STRHAL_TIM_TimerId_tRK22STRHAL_TIM_ChannelId_tRK20STRHAL_ADC_Channel_tS8_RK13STRHAL_GPIO_tm>
 800099e:	f107 030c 	add.w	r3, r7, #12
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f503 74a4 	add.w	r4, r3, #328	; 0x148
		servo1(1, 1, STRHAL_TIM_TIM3, STRHAL_TIM_TIM3_CH3_PC8,{ ADC5, STRHAL_ADC_CHANNEL_2 },{ NULL, STRHAL_ADC_CHANNEL_LAST },{ NULL, 0x3F, STRHAL_GPIO_TYPE_OPP }, 1),
 80009a8:	2302      	movs	r3, #2
 80009aa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80009ae:	2335      	movs	r3, #53	; 0x35
 80009b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		speaker(STRHAL_TIM_TIM8, STRHAL_TIM_TIM8_CH4_PC9)
 80009b4:	4aae      	ldr	r2, [pc, #696]	; (8000c70 <_ZN5IOBv4C1Emmm+0x3b4>)
 80009b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009be:	e883 0003 	stmia.w	r3, {r0, r1}
 80009c2:	2300      	movs	r3, #0
 80009c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80009c6:	2313      	movs	r3, #19
 80009c8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 80009cc:	2300      	movs	r3, #0
 80009ce:	643b      	str	r3, [r7, #64]	; 0x40
 80009d0:	233f      	movs	r3, #63	; 0x3f
 80009d2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 80009d6:	2300      	movs	r3, #0
 80009d8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80009dc:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 80009e0:	2301      	movs	r3, #1
 80009e2:	9304      	str	r3, [sp, #16]
 80009e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009e8:	9303      	str	r3, [sp, #12]
 80009ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009ee:	9302      	str	r3, [sp, #8]
 80009f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009f4:	9301      	str	r3, [sp, #4]
 80009f6:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80009fa:	9300      	str	r3, [sp, #0]
 80009fc:	4613      	mov	r3, r2
 80009fe:	2201      	movs	r2, #1
 8000a00:	2101      	movs	r1, #1
 8000a02:	4620      	mov	r0, r4
 8000a04:	f001 fcde 	bl	80023c4 <_ZN12ServoChannelC1EhhRK20STRHAL_TIM_TimerId_tRK22STRHAL_TIM_ChannelId_tRK20STRHAL_ADC_Channel_tS8_RK13STRHAL_GPIO_tm>
 8000a08:	f107 030c 	add.w	r3, r7, #12
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f503 74d8 	add.w	r4, r3, #432	; 0x1b0
		servo2(2, 2, STRHAL_TIM_TIM2, STRHAL_TIM_TIM2_CH4_PA10,{ ADC2, STRHAL_ADC_CHANNEL_13 },{ NULL, STRHAL_ADC_CHANNEL_LAST },{ NULL, 0x3F, STRHAL_GPIO_TYPE_OPP }, 1),
 8000a12:	2301      	movs	r3, #1
 8000a14:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8000a18:	2322      	movs	r3, #34	; 0x22
 8000a1a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		speaker(STRHAL_TIM_TIM8, STRHAL_TIM_TIM8_CH4_PC9)
 8000a1e:	4a95      	ldr	r2, [pc, #596]	; (8000c74 <_ZN5IOBv4C1Emmm+0x3b8>)
 8000a20:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a28:	e883 0003 	stmia.w	r3, {r0, r1}
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	657b      	str	r3, [r7, #84]	; 0x54
 8000a30:	2313      	movs	r3, #19
 8000a32:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
 8000a36:	2300      	movs	r3, #0
 8000a38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000a3a:	233f      	movs	r3, #63	; 0x3f
 8000a3c:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 8000a40:	2300      	movs	r3, #0
 8000a42:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 8000a46:	f107 024a 	add.w	r2, r7, #74	; 0x4a
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	9304      	str	r3, [sp, #16]
 8000a4e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000a52:	9303      	str	r3, [sp, #12]
 8000a54:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a58:	9302      	str	r3, [sp, #8]
 8000a5a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a5e:	9301      	str	r3, [sp, #4]
 8000a60:	f107 034b 	add.w	r3, r7, #75	; 0x4b
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	4613      	mov	r3, r2
 8000a68:	2202      	movs	r2, #2
 8000a6a:	2102      	movs	r1, #2
 8000a6c:	4620      	mov	r0, r4
 8000a6e:	f001 fca9 	bl	80023c4 <_ZN12ServoChannelC1EhhRK20STRHAL_TIM_TimerId_tRK22STRHAL_TIM_ChannelId_tRK20STRHAL_ADC_Channel_tS8_RK13STRHAL_GPIO_tm>
 8000a72:	f107 030c 	add.w	r3, r7, #12
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f503 7406 	add.w	r4, r3, #536	; 0x218
 8000a7c:	4a7e      	ldr	r2, [pc, #504]	; (8000c78 <_ZN5IOBv4C1Emmm+0x3bc>)
 8000a7e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a86:	e883 0003 	stmia.w	r3, {r0, r1}
 8000a8a:	4a7c      	ldr	r2, [pc, #496]	; (8000c7c <_ZN5IOBv4C1Emmm+0x3c0>)
 8000a8c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a94:	e883 0003 	stmia.w	r3, {r0, r1}
 8000a98:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a9c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	9101      	str	r1, [sp, #4]
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	9100      	str	r1, [sp, #0]
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4620      	mov	r0, r4
 8000aac:	f000 fe1e 	bl	80016ec <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>
 8000ab0:	f107 030c 	add.w	r3, r7, #12
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f503 7413 	add.w	r4, r3, #588	; 0x24c
 8000aba:	4a6d      	ldr	r2, [pc, #436]	; (8000c70 <_ZN5IOBv4C1Emmm+0x3b4>)
 8000abc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000ac0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ac4:	e883 0003 	stmia.w	r3, {r0, r1}
 8000ac8:	4a6d      	ldr	r2, [pc, #436]	; (8000c80 <_ZN5IOBv4C1Emmm+0x3c4>)
 8000aca:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000ace:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ad2:	e883 0003 	stmia.w	r3, {r0, r1}
 8000ad6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000ada:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8000ade:	2101      	movs	r1, #1
 8000ae0:	9101      	str	r1, [sp, #4]
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	9100      	str	r1, [sp, #0]
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	4620      	mov	r0, r4
 8000aea:	f000 fdff 	bl	80016ec <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>
 8000aee:	f107 030c 	add.w	r3, r7, #12
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f503 7420 	add.w	r4, r3, #640	; 0x280
 8000af8:	4a5e      	ldr	r2, [pc, #376]	; (8000c74 <_ZN5IOBv4C1Emmm+0x3b8>)
 8000afa:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000afe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b02:	e883 0003 	stmia.w	r3, {r0, r1}
 8000b06:	4a5f      	ldr	r2, [pc, #380]	; (8000c84 <_ZN5IOBv4C1Emmm+0x3c8>)
 8000b08:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000b0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b10:	e883 0003 	stmia.w	r3, {r0, r1}
 8000b14:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000b18:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	9101      	str	r1, [sp, #4]
 8000b20:	2100      	movs	r1, #0
 8000b22:	9100      	str	r1, [sp, #0]
 8000b24:	2102      	movs	r1, #2
 8000b26:	4620      	mov	r0, r4
 8000b28:	f000 fde0 	bl	80016ec <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>
 8000b2c:	f107 030c 	add.w	r3, r7, #12
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f503 742d 	add.w	r4, r3, #692	; 0x2b4
 8000b36:	4a54      	ldr	r2, [pc, #336]	; (8000c88 <_ZN5IOBv4C1Emmm+0x3cc>)
 8000b38:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000b3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b40:	e883 0003 	stmia.w	r3, {r0, r1}
 8000b44:	4a51      	ldr	r2, [pc, #324]	; (8000c8c <_ZN5IOBv4C1Emmm+0x3d0>)
 8000b46:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b4e:	e883 0003 	stmia.w	r3, {r0, r1}
 8000b52:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b56:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	9101      	str	r1, [sp, #4]
 8000b5e:	2100      	movs	r1, #0
 8000b60:	9100      	str	r1, [sp, #0]
 8000b62:	2103      	movs	r1, #3
 8000b64:	4620      	mov	r0, r4
 8000b66:	f000 fdc1 	bl	80016ec <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>
 8000b6a:	f107 030c 	add.w	r3, r7, #12
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f503 743a 	add.w	r4, r3, #744	; 0x2e8
 8000b74:	4a46      	ldr	r2, [pc, #280]	; (8000c90 <_ZN5IOBv4C1Emmm+0x3d4>)
 8000b76:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b7e:	e883 0003 	stmia.w	r3, {r0, r1}
 8000b82:	4a44      	ldr	r2, [pc, #272]	; (8000c94 <_ZN5IOBv4C1Emmm+0x3d8>)
 8000b84:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b8c:	e883 0003 	stmia.w	r3, {r0, r1}
 8000b90:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b94:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8000b98:	2101      	movs	r1, #1
 8000b9a:	9101      	str	r1, [sp, #4]
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	9100      	str	r1, [sp, #0]
 8000ba0:	2104      	movs	r1, #4
 8000ba2:	4620      	mov	r0, r4
 8000ba4:	f000 fda2 	bl	80016ec <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>
 8000ba8:	f107 030c 	add.w	r3, r7, #12
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f503 7447 	add.w	r4, r3, #796	; 0x31c
 8000bb2:	4a39      	ldr	r2, [pc, #228]	; (8000c98 <_ZN5IOBv4C1Emmm+0x3dc>)
 8000bb4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000bb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bbc:	e883 0003 	stmia.w	r3, {r0, r1}
 8000bc0:	4a36      	ldr	r2, [pc, #216]	; (8000c9c <_ZN5IOBv4C1Emmm+0x3e0>)
 8000bc2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000bc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bca:	e883 0003 	stmia.w	r3, {r0, r1}
 8000bce:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000bd2:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	9101      	str	r1, [sp, #4]
 8000bda:	2100      	movs	r1, #0
 8000bdc:	9100      	str	r1, [sp, #0]
 8000bde:	2105      	movs	r1, #5
 8000be0:	4620      	mov	r0, r4
 8000be2:	f000 fd83 	bl	80016ec <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>
 8000be6:	f107 030c 	add.w	r3, r7, #12
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f503 7454 	add.w	r4, r3, #848	; 0x350
 8000bf0:	4a2b      	ldr	r2, [pc, #172]	; (8000ca0 <_ZN5IOBv4C1Emmm+0x3e4>)
 8000bf2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000bf6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bfa:	e883 0003 	stmia.w	r3, {r0, r1}
 8000bfe:	4a29      	ldr	r2, [pc, #164]	; (8000ca4 <_ZN5IOBv4C1Emmm+0x3e8>)
 8000c00:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c08:	e883 0003 	stmia.w	r3, {r0, r1}
 8000c0c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c10:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8000c14:	2101      	movs	r1, #1
 8000c16:	9101      	str	r1, [sp, #4]
 8000c18:	2100      	movs	r1, #0
 8000c1a:	9100      	str	r1, [sp, #0]
 8000c1c:	2106      	movs	r1, #6
 8000c1e:	4620      	mov	r0, r4
 8000c20:	f000 fd64 	bl	80016ec <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>
 8000c24:	f107 030c 	add.w	r3, r7, #12
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f503 7461 	add.w	r4, r3, #900	; 0x384
 8000c2e:	4a1e      	ldr	r2, [pc, #120]	; (8000ca8 <_ZN5IOBv4C1Emmm+0x3ec>)
 8000c30:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000c34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c38:	e883 0003 	stmia.w	r3, {r0, r1}
 8000c3c:	4a1b      	ldr	r2, [pc, #108]	; (8000cac <_ZN5IOBv4C1Emmm+0x3f0>)
 8000c3e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000c42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c46:	e883 0003 	stmia.w	r3, {r0, r1}
 8000c4a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000c4e:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8000c52:	e02d      	b.n	8000cb0 <_ZN5IOBv4C1Emmm+0x3f4>
 8000c54:	08009b64 	.word	0x08009b64
 8000c58:	080099fc 	.word	0x080099fc
 8000c5c:	08009a04 	.word	0x08009a04
 8000c60:	08009a0c 	.word	0x08009a0c
 8000c64:	08009a14 	.word	0x08009a14
 8000c68:	08009a1c 	.word	0x08009a1c
 8000c6c:	08009a24 	.word	0x08009a24
 8000c70:	08009a2c 	.word	0x08009a2c
 8000c74:	08009a34 	.word	0x08009a34
 8000c78:	08009a3c 	.word	0x08009a3c
 8000c7c:	08009a44 	.word	0x08009a44
 8000c80:	08009a4c 	.word	0x08009a4c
 8000c84:	08009a54 	.word	0x08009a54
 8000c88:	08009a5c 	.word	0x08009a5c
 8000c8c:	08009a64 	.word	0x08009a64
 8000c90:	08009a6c 	.word	0x08009a6c
 8000c94:	08009a74 	.word	0x08009a74
 8000c98:	08009a7c 	.word	0x08009a7c
 8000c9c:	08009a84 	.word	0x08009a84
 8000ca0:	08009a8c 	.word	0x08009a8c
 8000ca4:	08009a94 	.word	0x08009a94
 8000ca8:	08009a9c 	.word	0x08009a9c
 8000cac:	08009aa4 	.word	0x08009aa4
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	9101      	str	r1, [sp, #4]
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	9100      	str	r1, [sp, #0]
 8000cb8:	2107      	movs	r1, #7
 8000cba:	4620      	mov	r0, r4
 8000cbc:	f000 fd16 	bl	80016ec <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>
 8000cc0:	f107 030c 	add.w	r3, r7, #12
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f503 746e 	add.w	r4, r3, #952	; 0x3b8
 8000cca:	4aa9      	ldr	r2, [pc, #676]	; (8000f70 <_ZN5IOBv4C1Emmm+0x6b4>)
 8000ccc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000cd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cd4:	e883 0003 	stmia.w	r3, {r0, r1}
 8000cd8:	4aa6      	ldr	r2, [pc, #664]	; (8000f74 <_ZN5IOBv4C1Emmm+0x6b8>)
 8000cda:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000cde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ce2:	e883 0003 	stmia.w	r3, {r0, r1}
 8000ce6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000cea:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8000cee:	2101      	movs	r1, #1
 8000cf0:	9101      	str	r1, [sp, #4]
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	9100      	str	r1, [sp, #0]
 8000cf6:	2108      	movs	r1, #8
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	f000 fcf7 	bl	80016ec <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>
 8000cfe:	f107 030c 	add.w	r3, r7, #12
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f503 747b 	add.w	r4, r3, #1004	; 0x3ec
 8000d08:	4a9b      	ldr	r2, [pc, #620]	; (8000f78 <_ZN5IOBv4C1Emmm+0x6bc>)
 8000d0a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000d0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d12:	e883 0003 	stmia.w	r3, {r0, r1}
 8000d16:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d1a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
 8000d24:	2300      	movs	r3, #0
 8000d26:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
 8000d2a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000d2e:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8000d32:	2101      	movs	r1, #1
 8000d34:	9101      	str	r1, [sp, #4]
 8000d36:	2100      	movs	r1, #0
 8000d38:	9100      	str	r1, [sp, #0]
 8000d3a:	2109      	movs	r1, #9
 8000d3c:	4620      	mov	r0, r4
 8000d3e:	f000 fcd5 	bl	80016ec <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>
 8000d42:	f107 030c 	add.w	r3, r7, #12
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f503 6484 	add.w	r4, r3, #1056	; 0x420
 8000d4c:	4a8b      	ldr	r2, [pc, #556]	; (8000f7c <_ZN5IOBv4C1Emmm+0x6c0>)
 8000d4e:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000d52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d56:	e883 0003 	stmia.w	r3, {r0, r1}
 8000d5a:	4a89      	ldr	r2, [pc, #548]	; (8000f80 <_ZN5IOBv4C1Emmm+0x6c4>)
 8000d5c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000d60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d64:	e883 0003 	stmia.w	r3, {r0, r1}
 8000d68:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000d6c:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8000d70:	2101      	movs	r1, #1
 8000d72:	9101      	str	r1, [sp, #4]
 8000d74:	2100      	movs	r1, #0
 8000d76:	9100      	str	r1, [sp, #0]
 8000d78:	210a      	movs	r1, #10
 8000d7a:	4620      	mov	r0, r4
 8000d7c:	f000 fcb6 	bl	80016ec <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>
 8000d80:	f107 030c 	add.w	r3, r7, #12
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f203 4454 	addw	r4, r3, #1108	; 0x454
 8000d8a:	4a7e      	ldr	r2, [pc, #504]	; (8000f84 <_ZN5IOBv4C1Emmm+0x6c8>)
 8000d8c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000d90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d94:	e883 0003 	stmia.w	r3, {r0, r1}
 8000d98:	4a7b      	ldr	r2, [pc, #492]	; (8000f88 <_ZN5IOBv4C1Emmm+0x6cc>)
 8000d9a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8000d9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000da2:	e883 0003 	stmia.w	r3, {r0, r1}
 8000da6:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8000daa:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8000dae:	2101      	movs	r1, #1
 8000db0:	9101      	str	r1, [sp, #4]
 8000db2:	2100      	movs	r1, #0
 8000db4:	9100      	str	r1, [sp, #0]
 8000db6:	210b      	movs	r1, #11
 8000db8:	4620      	mov	r0, r4
 8000dba:	f000 fc97 	bl	80016ec <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>
 8000dbe:	f107 030c 	add.w	r3, r7, #12
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 8000dc8:	2204      	movs	r2, #4
 8000dca:	f887 2126 	strb.w	r2, [r7, #294]	; 0x126
 8000dce:	2254      	movs	r2, #84	; 0x54
 8000dd0:	f887 2127 	strb.w	r2, [r7, #295]	; 0x127
 8000dd4:	f207 1227 	addw	r2, r7, #295	; 0x127
 8000dd8:	f507 7193 	add.w	r1, r7, #294	; 0x126
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f000 fa08 	bl	80011f2 <_ZN7SpeakerC1ERK20STRHAL_TIM_TimerId_tRK22STRHAL_TIM_ChannelId_t>
{

	/**/registerChannel(&servo0);
 8000de2:	f107 030c 	add.w	r3, r7, #12
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	f107 030c 	add.w	r3, r7, #12
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	33e0      	adds	r3, #224	; 0xe0
 8000df0:	4619      	mov	r1, r3
 8000df2:	4610      	mov	r0, r2
 8000df4:	f001 f98b 	bl	800210e <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&servo1);
 8000df8:	f107 030c 	add.w	r3, r7, #12
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	f107 030c 	add.w	r3, r7, #12
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4610      	mov	r0, r2
 8000e0c:	f001 f97f 	bl	800210e <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&servo2);
 8000e10:	f107 030c 	add.w	r3, r7, #12
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	f107 030c 	add.w	r3, r7, #12
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8000e20:	4619      	mov	r1, r3
 8000e22:	4610      	mov	r0, r2
 8000e24:	f001 f973 	bl	800210e <_ZN14GenericChannel15registerChannelEP15AbstractChannel>

	registerChannel(&channel0);
 8000e28:	f107 030c 	add.w	r3, r7, #12
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	f107 030c 	add.w	r3, r7, #12
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4610      	mov	r0, r2
 8000e3c:	f001 f967 	bl	800210e <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	/**/registerChannel(&channel1);
 8000e40:	f107 030c 	add.w	r3, r7, #12
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	f107 030c 	add.w	r3, r7, #12
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8000e50:	4619      	mov	r1, r3
 8000e52:	4610      	mov	r0, r2
 8000e54:	f001 f95b 	bl	800210e <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	/**/registerChannel(&channel2);
 8000e58:	f107 030c 	add.w	r3, r7, #12
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	f107 030c 	add.w	r3, r7, #12
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4610      	mov	r0, r2
 8000e6c:	f001 f94f 	bl	800210e <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&channel3);
 8000e70:	f107 030c 	add.w	r3, r7, #12
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	f107 030c 	add.w	r3, r7, #12
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8000e80:	4619      	mov	r1, r3
 8000e82:	4610      	mov	r0, r2
 8000e84:	f001 f943 	bl	800210e <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&channel4);
 8000e88:	f107 030c 	add.w	r3, r7, #12
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	f107 030c 	add.w	r3, r7, #12
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4610      	mov	r0, r2
 8000e9c:	f001 f937 	bl	800210e <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&channel5);
 8000ea0:	f107 030c 	add.w	r3, r7, #12
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	f107 030c 	add.w	r3, r7, #12
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4610      	mov	r0, r2
 8000eb4:	f001 f92b 	bl	800210e <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&channel6);
 8000eb8:	f107 030c 	add.w	r3, r7, #12
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	f107 030c 	add.w	r3, r7, #12
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4610      	mov	r0, r2
 8000ecc:	f001 f91f 	bl	800210e <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&channel7);
 8000ed0:	f107 030c 	add.w	r3, r7, #12
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	f107 030c 	add.w	r3, r7, #12
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f503 7361 	add.w	r3, r3, #900	; 0x384
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4610      	mov	r0, r2
 8000ee4:	f001 f913 	bl	800210e <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&channel8);
 8000ee8:	f107 030c 	add.w	r3, r7, #12
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	f107 030c 	add.w	r3, r7, #12
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4610      	mov	r0, r2
 8000efc:	f001 f907 	bl	800210e <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&channel9);
 8000f00:	f107 030c 	add.w	r3, r7, #12
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	f107 030c 	add.w	r3, r7, #12
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 8000f10:	4619      	mov	r1, r3
 8000f12:	4610      	mov	r0, r2
 8000f14:	f001 f8fb 	bl	800210e <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&channel10);
 8000f18:	f107 030c 	add.w	r3, r7, #12
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	f107 030c 	add.w	r3, r7, #12
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4610      	mov	r0, r2
 8000f2c:	f001 f8ef 	bl	800210e <_ZN14GenericChannel15registerChannelEP15AbstractChannel>
	registerChannel(&channel11);
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	f107 030c 	add.w	r3, r7, #12
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f203 4354 	addw	r3, r3, #1108	; 0x454
 8000f40:	4619      	mov	r1, r3
 8000f42:	4610      	mov	r0, r2
 8000f44:	f001 f8e3 	bl	800210e <_ZN14GenericChannel15registerChannelEP15AbstractChannel>

	registerModule(&flash);
 8000f48:	f107 030c 	add.w	r3, r7, #12
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	f107 030c 	add.w	r3, r7, #12
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4610      	mov	r0, r2
 8000f5c:	f001 f8f5 	bl	800214a <_ZN14GenericChannel14registerModuleEP14AbstractModule>

}
 8000f60:	f107 030c 	add.w	r3, r7, #12
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd90      	pop	{r4, r7, pc}
 8000f70:	08009aac 	.word	0x08009aac
 8000f74:	08009ab4 	.word	0x08009ab4
 8000f78:	08009abc 	.word	0x08009abc
 8000f7c:	08009a14 	.word	0x08009a14
 8000f80:	08009ac4 	.word	0x08009ac4
 8000f84:	08009acc 	.word	0x08009acc
 8000f88:	08009ad4 	.word	0x08009ad4

08000f8c <_ZN5IOBv44initEv>:

int IOBv4::init()
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	if (STRHAL_Init(STRHAL_SYSCLK_SRC_EXT, 8000000) != STRHAL_NOICE)
 8000f94:	4933      	ldr	r1, [pc, #204]	; (8001064 <_ZN5IOBv44initEv+0xd8>)
 8000f96:	2002      	movs	r0, #2
 8000f98:	f004 fd58 	bl	8005a4c <STRHAL_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	bf14      	ite	ne
 8000fa2:	2301      	movne	r3, #1
 8000fa4:	2300      	moveq	r3, #0
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d002      	beq.n	8000fb2 <_ZN5IOBv44initEv+0x26>
		return -1;
 8000fac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fb0:	e053      	b.n	800105a <_ZN5IOBv44initEv+0xce>

	// init status LEDs
	STRHAL_GPIO_SingleInit(&led1, STRHAL_GPIO_TYPE_OPP);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	33c8      	adds	r3, #200	; 0xc8
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f006 fb0b 	bl	80075d4 <STRHAL_GPIO_SingleInit>
	STRHAL_GPIO_SingleInit(&led2, STRHAL_GPIO_TYPE_OPP);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	33d0      	adds	r3, #208	; 0xd0
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f006 fb05 	bl	80075d4 <STRHAL_GPIO_SingleInit>
	STRHAL_GPIO_SingleInit(&led_debug, STRHAL_GPIO_TYPE_OPP);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	33d8      	adds	r3, #216	; 0xd8
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f006 faff 	bl	80075d4 <STRHAL_GPIO_SingleInit>




	// init debug uart
	if (STRHAL_UART_Instance_Init(STRHAL_UART_DEBUG) != 0)
 8000fd6:	2002      	movs	r0, #2
 8000fd8:	f008 f902 	bl	80091e0 <STRHAL_UART_Instance_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	bf14      	ite	ne
 8000fe2:	2301      	movne	r3, #1
 8000fe4:	2300      	moveq	r3, #0
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d002      	beq.n	8000ff2 <_ZN5IOBv44initEv+0x66>
		return -1;
 8000fec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ff0:	e033      	b.n	800105a <_ZN5IOBv44initEv+0xce>

	if (can.init(receptor, heartbeatCan, COMMode::STANDARD_COM_MODE) != 0)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	4a1b      	ldr	r2, [pc, #108]	; (8001068 <_ZN5IOBv44initEv+0xdc>)
 8000ffc:	491b      	ldr	r1, [pc, #108]	; (800106c <_ZN5IOBv44initEv+0xe0>)
 8000ffe:	f7ff f97b 	bl	80002f8 <_ZN3Can4initEPFvmPhmEPFvvE7COMMode>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	bf14      	ite	ne
 8001008:	2301      	movne	r3, #1
 800100a:	2300      	moveq	r3, #0
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b00      	cmp	r3, #0
 8001010:	d002      	beq.n	8001018 <_ZN5IOBv44initEv+0x8c>
		return -1;
 8001012:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001016:	e020      	b.n	800105a <_ZN5IOBv44initEv+0xce>

	if (GenericChannel::init() != 0)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4618      	mov	r0, r3
 800101c:	f000 fd5b 	bl	8001ad6 <_ZN14GenericChannel4initEv>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	bf14      	ite	ne
 8001026:	2301      	movne	r3, #1
 8001028:	2300      	moveq	r3, #0
 800102a:	b2db      	uxtb	r3, r3
 800102c:	2b00      	cmp	r3, #0
 800102e:	d002      	beq.n	8001036 <_ZN5IOBv44initEv+0xaa>
		return -1;
 8001030:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001034:	e011      	b.n	800105a <_ZN5IOBv44initEv+0xce>

	speaker.init();
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 800103c:	4618      	mov	r0, r3
 800103e:	f000 f8ed 	bl	800121c <_ZN7Speaker4initEv>
	STRHAL_GPIO_Write(&led_debug, STRHAL_GPIO_VALUE_H);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	33d8      	adds	r3, #216	; 0xd8
 8001046:	2101      	movs	r1, #1
 8001048:	4618      	mov	r0, r3
 800104a:	f006 fb1f 	bl	800768c <STRHAL_GPIO_Write>

	STRHAL_UART_Debug_Write_Blocking("Started\n", 8, 50);
 800104e:	2232      	movs	r2, #50	; 0x32
 8001050:	2108      	movs	r1, #8
 8001052:	4807      	ldr	r0, [pc, #28]	; (8001070 <_ZN5IOBv44initEv+0xe4>)
 8001054:	f008 f9fe 	bl	8009454 <STRHAL_UART_Debug_Write_Blocking>


	return 0;
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	007a1200 	.word	0x007a1200
 8001068:	080022dd 	.word	0x080022dd
 800106c:	080021ad 	.word	0x080021ad
 8001070:	08009adc 	.word	0x08009adc

08001074 <_ZN5IOBv44execEv>:

int IOBv4::exec()
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	STRHAL_OPAMP_Run();
 800107c:	f006 fc9a 	bl	80079b4 <STRHAL_OPAMP_Run>
	STRHAL_ADC_Run();
 8001080:	f005 fbc6 	bl	8006810 <STRHAL_ADC_Run>
	STRHAL_QSPI_Run();
 8001084:	f006 fd84 	bl	8007b90 <STRHAL_QSPI_Run>

	if (can.exec() != 0)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	3304      	adds	r3, #4
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4610      	mov	r0, r2
 800109c:	4798      	blx	r3
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	bf14      	ite	ne
 80010a4:	2301      	movne	r3, #1
 80010a6:	2300      	moveq	r3, #0
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d002      	beq.n	80010b4 <_ZN5IOBv44execEv+0x40>
		return -1;
 80010ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010b2:	e01b      	b.n	80010ec <_ZN5IOBv44execEv+0x78>


	speaker.beep(3, 300, 200);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f503 6091 	add.w	r0, r3, #1160	; 0x488
 80010ba:	23c8      	movs	r3, #200	; 0xc8
 80010bc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010c0:	2103      	movs	r1, #3
 80010c2:	f000 f8e7 	bl	8001294 <_ZN7Speaker4beepEhtt>
	STRHAL_UART_Debug_Write_Blocking("Test\n", 5, 50);
 80010c6:	2232      	movs	r2, #50	; 0x32
 80010c8:	2105      	movs	r1, #5
 80010ca:	480a      	ldr	r0, [pc, #40]	; (80010f4 <_ZN5IOBv44execEv+0x80>)
 80010cc:	f008 f9c2 	bl	8009454 <STRHAL_UART_Debug_Write_Blocking>

	while (1)
	{
		if (GenericChannel::exec() != 0)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 fd57 	bl	8001b86 <_ZN14GenericChannel4execEv>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	bf14      	ite	ne
 80010de:	2301      	movne	r3, #1
 80010e0:	2300      	moveq	r3, #0
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d0f3      	beq.n	80010d0 <_ZN5IOBv44execEv+0x5c>
			return -1;
 80010e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}

	speaker.beep(6, 100, 100);

	return 0;
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	08009ae8 	.word	0x08009ae8

080010f8 <_ZN5IOBv4D1Ev>:
#include <Can.h>
#include <Speaker.h>

#include <STRHAL.h>

class IOBv4: public GenericChannel
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	4a32      	ldr	r2, [pc, #200]	; (80011cc <_ZN5IOBv4D1Ev+0xd4>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f203 4354 	addw	r3, r3, #1108	; 0x454
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fb93 	bl	8000838 <_ZN17DigitalOutChannelD1Ev>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fb8d 	bl	8000838 <_ZN17DigitalOutChannelD1Ev>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff fb87 	bl	8000838 <_ZN17DigitalOutChannelD1Ev>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff fb81 	bl	8000838 <_ZN17DigitalOutChannelD1Ev>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f503 7361 	add.w	r3, r3, #900	; 0x384
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fb7b 	bl	8000838 <_ZN17DigitalOutChannelD1Ev>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff fb75 	bl	8000838 <_ZN17DigitalOutChannelD1Ev>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff fb6f 	bl	8000838 <_ZN17DigitalOutChannelD1Ev>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff fb69 	bl	8000838 <_ZN17DigitalOutChannelD1Ev>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff fb63 	bl	8000838 <_ZN17DigitalOutChannelD1Ev>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff fb5d 	bl	8000838 <_ZN17DigitalOutChannelD1Ev>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff fb57 	bl	8000838 <_ZN17DigitalOutChannelD1Ev>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff fb51 	bl	8000838 <_ZN17DigitalOutChannelD1Ev>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff fb29 	bl	80007f4 <_ZN12ServoChannelD1Ev>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff fb23 	bl	80007f4 <_ZN12ServoChannelD1Ev>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	33e0      	adds	r3, #224	; 0xe0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff fb1e 	bl	80007f4 <_ZN12ServoChannelD1Ev>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff faf8 	bl	80007b0 <_ZN14GenericChannelD1Ev>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	08009b64 	.word	0x08009b64

080011d0 <_ZN5IOBv4D0Ev>:
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ff8d 	bl	80010f8 <_ZN5IOBv4D1Ev>
 80011de:	f44f 6192 	mov.w	r1, #1168	; 0x490
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f008 fae6 	bl	80097b4 <_ZdlPvj>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <_ZN7SpeakerC1ERK20STRHAL_TIM_TimerId_tRK22STRHAL_TIM_ChannelId_t>:
#include "../Inc/Speaker.h"

Speaker::Speaker(const STRHAL_TIM_TimerId_t &pwmTimer, const STRHAL_TIM_ChannelId_t &control) :
 80011f2:	b480      	push	{r7}
 80011f4:	b085      	sub	sp, #20
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	60f8      	str	r0, [r7, #12]
 80011fa:	60b9      	str	r1, [r7, #8]
 80011fc:	607a      	str	r2, [r7, #4]
		pwmTimer(pwmTimer), ctrlChannelId(control)
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	781a      	ldrb	r2, [r3, #0]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	701a      	strb	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	781a      	ldrb	r2, [r3, #0]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	705a      	strb	r2, [r3, #1]
{
}
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	4618      	mov	r0, r3
 8001212:	3714      	adds	r7, #20
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <_ZN7Speaker4initEv>:

int Speaker::init()
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	if (STRHAL_TIM_PWM_Init(pwmTimer, PWM_PSC, PWM_RES) < 0)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800122c:	2158      	movs	r1, #88	; 0x58
 800122e:	4618      	mov	r0, r3
 8001230:	f007 f9f8 	bl	8008624 <STRHAL_TIM_PWM_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	0fdb      	lsrs	r3, r3, #31
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b00      	cmp	r3, #0
 800123c:	d002      	beq.n	8001244 <_ZN7Speaker4initEv+0x28>
		return -1;
 800123e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001242:	e023      	b.n	800128c <_ZN7Speaker4initEv+0x70>

	if (STRHAL_TIM_PWM_AddChannel(&pwmChannel, ctrlChannelId, STRHAL_TIM_PWM_CHANNELTYPE_SO) < 0)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	1c98      	adds	r0, r3, #2
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	785b      	ldrb	r3, [r3, #1]
 800124c:	2200      	movs	r2, #0
 800124e:	4619      	mov	r1, r3
 8001250:	f007 fa7a 	bl	8008748 <STRHAL_TIM_PWM_AddChannel>
 8001254:	4603      	mov	r3, r0
 8001256:	0fdb      	lsrs	r3, r3, #31
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	d002      	beq.n	8001264 <_ZN7Speaker4initEv+0x48>
		return -1;
 800125e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001262:	e013      	b.n	800128c <_ZN7Speaker4initEv+0x70>

	if (STRHAL_TIM_PWM_SetDuty(&pwmChannel, 1800) != 1800)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3302      	adds	r3, #2
 8001268:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 800126c:	4618      	mov	r0, r3
 800126e:	f007 fae1 	bl	8008834 <STRHAL_TIM_PWM_SetDuty>
 8001272:	4603      	mov	r3, r0
 8001274:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001278:	bf14      	ite	ne
 800127a:	2301      	movne	r3, #1
 800127c:	2300      	moveq	r3, #0
 800127e:	b2db      	uxtb	r3, r3
 8001280:	2b00      	cmp	r3, #0
 8001282:	d002      	beq.n	800128a <_ZN7Speaker4initEv+0x6e>
	{
		return -1;
 8001284:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001288:	e000      	b.n	800128c <_ZN7Speaker4initEv+0x70>
	}

	return 0;
 800128a:	2300      	movs	r3, #0
}
 800128c:	4618      	mov	r0, r3
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <_ZN7Speaker4beepEhtt>:
{
	STRHAL_TIM_PWM_Enable(&pwmChannel, ena);
}

void Speaker::beep(uint8_t n, uint16_t tot1, uint16_t tot2)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	4608      	mov	r0, r1
 800129e:	4611      	mov	r1, r2
 80012a0:	461a      	mov	r2, r3
 80012a2:	4603      	mov	r3, r0
 80012a4:	72fb      	strb	r3, [r7, #11]
 80012a6:	460b      	mov	r3, r1
 80012a8:	813b      	strh	r3, [r7, #8]
 80012aa:	4613      	mov	r3, r2
 80012ac:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < n; i++)
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
 80012b2:	7afb      	ldrb	r3, [r7, #11]
 80012b4:	697a      	ldr	r2, [r7, #20]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	da17      	bge.n	80012ea <_ZN7Speaker4beepEhtt+0x56>
	{
		STRHAL_TIM_PWM_Enable(&pwmChannel, true);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	3302      	adds	r3, #2
 80012be:	2101      	movs	r1, #1
 80012c0:	4618      	mov	r0, r3
 80012c2:	f007 fae3 	bl	800888c <STRHAL_TIM_PWM_Enable>
		LL_mDelay(tot1);
 80012c6:	893b      	ldrh	r3, [r7, #8]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f004 f905 	bl	80054d8 <LL_mDelay>
		STRHAL_TIM_PWM_Enable(&pwmChannel, false);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	3302      	adds	r3, #2
 80012d2:	2100      	movs	r1, #0
 80012d4:	4618      	mov	r0, r3
 80012d6:	f007 fad9 	bl	800888c <STRHAL_TIM_PWM_Enable>
		LL_mDelay(tot2);
 80012da:	88fb      	ldrh	r3, [r7, #6]
 80012dc:	4618      	mov	r0, r3
 80012de:	f004 f8fb 	bl	80054d8 <LL_mDelay>
	for (int i = 0; i < n; i++)
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	3301      	adds	r3, #1
 80012e6:	617b      	str	r3, [r7, #20]
 80012e8:	e7e3      	b.n	80012b2 <_ZN7Speaker4beepEhtt+0x1e>
	}
}
 80012ea:	bf00      	nop
 80012ec:	3718      	adds	r7, #24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <main>:
#include "RCU.h"
#include "LCB.h"
#include "git_version.h"

int main(void)
{
 80012f4:	b590      	push	{r4, r7, lr}
 80012f6:	f2ad 4d94 	subw	sp, sp, #1172	; 0x494
 80012fa:	af00      	add	r7, sp, #0
	iob.exec();
#elif defined(IOBv4_BOARD)
#ifdef UART_DEBUG
	IOBv4 iob(10,GIT_COMMIT_HASH_VALUE,100); // TODO disregard node ID and read dipswitches in IOB/LCB class
#else
	IOBv4 iob(10,GIT_COMMIT_HASH_VALUE,1); // TODO disregard node ID and read dipswitches in IOB/LCB class
 80012fc:	4638      	mov	r0, r7
 80012fe:	2301      	movs	r3, #1
 8001300:	4a13      	ldr	r2, [pc, #76]	; (8001350 <main+0x5c>)
 8001302:	210a      	movs	r1, #10
 8001304:	f7ff fada 	bl	80008bc <_ZN5IOBv4C1Emmm>
#endif
	if(iob.init() != 0)
 8001308:	463b      	mov	r3, r7
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fe3e 	bl	8000f8c <_ZN5IOBv44initEv>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	bf14      	ite	ne
 8001316:	2301      	movne	r3, #1
 8001318:	2300      	moveq	r3, #0
 800131a:	b2db      	uxtb	r3, r3
 800131c:	2b00      	cmp	r3, #0
 800131e:	d006      	beq.n	800132e <main+0x3a>
			return -1;
 8001320:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	IOBv4 iob(10,GIT_COMMIT_HASH_VALUE,1); // TODO disregard node ID and read dipswitches in IOB/LCB class
 8001324:	463b      	mov	r3, r7
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff fee6 	bl	80010f8 <_ZN5IOBv4D1Ev>
 800132c:	e009      	b.n	8001342 <main+0x4e>

	STRHAL_UART_Debug_Write_Blocking("IOBv4 STARTED\n", 14, 50);
 800132e:	2232      	movs	r2, #50	; 0x32
 8001330:	210e      	movs	r1, #14
 8001332:	4808      	ldr	r0, [pc, #32]	; (8001354 <main+0x60>)
 8001334:	f008 f88e 	bl	8009454 <STRHAL_UART_Debug_Write_Blocking>
	iob.exec();
 8001338:	463b      	mov	r3, r7
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff fe9a 	bl	8001074 <_ZN5IOBv44execEv>

	STRHAL_UART_Debug_Write_Blocking("LCB STARTED\n", 12, 50);
	lcb.exec();
#endif

	while (1);
 8001340:	e7fe      	b.n	8001340 <main+0x4c>
 8001342:	4623      	mov	r3, r4
}
 8001344:	4618      	mov	r0, r3
 8001346:	f207 4794 	addw	r7, r7, #1172	; 0x494
 800134a:	46bd      	mov	sp, r7
 800134c:	bd90      	pop	{r4, r7, pc}
 800134e:	bf00      	nop
 8001350:	6f843459 	.word	0x6f843459
 8001354:	08009af0 	.word	0x08009af0

08001358 <STRHAL_OofHandler>:

void STRHAL_OofHandler(STRHAL_Oof_t oof, char *msg)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	6039      	str	r1, [r7, #0]
 8001362:	71fb      	strb	r3, [r7, #7]
	do
	{
	} while (0);
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	683a      	ldr	r2, [r7, #0]
 800137e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <NMI_Handler>:
#include "stm32g4xx_it.h"
#include <STRHAL.h>

void NMI_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
	...

0800139c <HardFault_Handler>:

void HardFault_Handler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOD, (1 << 1));
 80013a0:	2102      	movs	r1, #2
 80013a2:	4802      	ldr	r0, [pc, #8]	; (80013ac <HardFault_Handler+0x10>)
 80013a4:	f7ff ffe4 	bl	8001370 <LL_GPIO_ResetOutputPin>
	while (1)
 80013a8:	e7fe      	b.n	80013a8 <HardFault_Handler+0xc>
 80013aa:	bf00      	nop
 80013ac:	48000c00 	.word	0x48000c00

080013b0 <MemManage_Handler>:
	{
	}
}

void MemManage_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
	while (1)
 80013b4:	e7fe      	b.n	80013b4 <MemManage_Handler+0x4>

080013b6 <BusFault_Handler>:
	{
	}
}

void BusFault_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0
	while (1)
 80013ba:	e7fe      	b.n	80013ba <BusFault_Handler+0x4>

080013bc <UsageFault_Handler>:
	{
	}
}

void UsageFault_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
	while (1)
 80013c0:	e7fe      	b.n	80013c0 <UsageFault_Handler+0x4>

080013c2 <SVC_Handler>:
	{
	}
}

void SVC_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0
}
 80013c6:	bf00      	nop
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <DebugMon_Handler>:

void DebugMon_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <PendSV_Handler>:

void PendSV_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0
}
 80013e2:	bf00      	nop
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
	return 1;
 80013f0:	2301      	movs	r3, #1
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <_kill>:

int _kill(int pid, int sig)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001406:	f008 fa03 	bl	8009810 <__errno>
 800140a:	4603      	mov	r3, r0
 800140c:	2216      	movs	r2, #22
 800140e:	601a      	str	r2, [r3, #0]
	return -1;
 8001410:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001414:	4618      	mov	r0, r3
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <_exit>:

void _exit(int status)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001424:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff ffe7 	bl	80013fc <_kill>
	while (1)
 800142e:	e7fe      	b.n	800142e <_exit+0x12>

08001430 <SystemInit>:
 * @param  None
 * @retval None
 */

void SystemInit(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8001434:	4b08      	ldr	r3, [pc, #32]	; (8001458 <SystemInit+0x28>)
 8001436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800143a:	4a07      	ldr	r2, [pc, #28]	; (8001458 <SystemInit+0x28>)
 800143c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001440:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <SystemInit+0x28>)
 8001446:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800144a:	609a      	str	r2, [r3, #8]
#endif
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <_ZN15AbstractChannelC1E12CHANNEL_TYPEhm>:
#include "../Inc/Channels/AbstractChannel.h"

#include <cstring>

AbstractChannel::AbstractChannel(CHANNEL_TYPE type, uint8_t id, uint32_t refreshDivider) :
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	607b      	str	r3, [r7, #4]
 8001466:	460b      	mov	r3, r1
 8001468:	72fb      	strb	r3, [r7, #11]
 800146a:	4613      	mov	r3, r2
 800146c:	72bb      	strb	r3, [r7, #10]
		refreshDivider(refreshDivider), refreshCounter(0), channelType(type), channelId(id), channelStatus(CHANNEL_STATUS_NOICE)
 800146e:	4a0c      	ldr	r2, [pc, #48]	; (80014a0 <_ZN15AbstractChannelC1E12CHANNEL_TYPEhm+0x44>)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	7afa      	ldrb	r2, [r7, #11]
 8001484:	731a      	strb	r2, [r3, #12]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	7aba      	ldrb	r2, [r7, #10]
 800148a:	735a      	strb	r2, [r3, #13]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2200      	movs	r2, #0
 8001490:	739a      	strb	r2, [r3, #14]
{

}
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	4618      	mov	r0, r3
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	08009ba8 	.word	0x08009ba8

080014a4 <_ZNK15AbstractChannel14getChannelTypeEv>:

CHANNEL_TYPE AbstractChannel::getChannelType() const
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
	return channelType;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	7b1b      	ldrb	r3, [r3, #12]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <_ZNK15AbstractChannel16getChannelStatusEv>:

CHANNEL_STATUS AbstractChannel::getChannelStatus() const
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
	return channelStatus;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	7b9b      	ldrb	r3, [r3, #14]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <_ZNK15AbstractChannel12getChannelIdEv>:

uint8_t AbstractChannel::getChannelId() const
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
	return channelId;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	7b5b      	ldrb	r3, [r3, #13]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <_ZNK15AbstractChannel11IsChannelIdEh>:
{
	return type == channelType;
}

bool AbstractChannel::IsChannelId(uint8_t id) const
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	460b      	mov	r3, r1
 80014f6:	70fb      	strb	r3, [r7, #3]
	return channelId == id;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	7b5b      	ldrb	r3, [r3, #13]
 80014fc:	78fa      	ldrb	r2, [r7, #3]
 80014fe:	429a      	cmp	r2, r3
 8001500:	bf0c      	ite	eq
 8001502:	2301      	moveq	r3, #1
 8001504:	2300      	movne	r3, #0
 8001506:	b2db      	uxtb	r3, r3
}
 8001508:	4618      	mov	r0, r3
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <_ZN15AbstractChannel11IsRefreshedEv>:

bool AbstractChannel::IsRefreshed()
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
	if (refreshDivider == 0)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d101      	bne.n	8001528 <_ZN15AbstractChannel11IsRefreshedEv+0x14>
		return false;
 8001524:	2300      	movs	r3, #0
 8001526:	e010      	b.n	800154a <_ZN15AbstractChannel11IsRefreshedEv+0x36>
	refreshCounter++;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	1c5a      	adds	r2, r3, #1
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	609a      	str	r2, [r3, #8]
	if (refreshCounter != refreshDivider)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	689a      	ldr	r2, [r3, #8]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	429a      	cmp	r2, r3
 800153c:	d001      	beq.n	8001542 <_ZN15AbstractChannel11IsRefreshedEv+0x2e>
		return false;
 800153e:	2300      	movs	r3, #0
 8001540:	e003      	b.n	800154a <_ZN15AbstractChannel11IsRefreshedEv+0x36>

	refreshCounter = 0;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
	return true;
 8001548:	2301      	movs	r3, #1
}
 800154a:	4618      	mov	r0, r3
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
	...

08001558 <_ZN15AbstractChannel14processMessageEhPhRh>:

int AbstractChannel::processMessage(uint8_t commandId, uint8_t *returnData, uint8_t &n)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b088      	sub	sp, #32
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	607a      	str	r2, [r7, #4]
 8001562:	603b      	str	r3, [r7, #0]
 8001564:	460b      	mov	r3, r1
 8001566:	72fb      	strb	r3, [r7, #11]
	SetMsg_t *setMsg;
	setMsg = (SetMsg_t*) returnData;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	61fb      	str	r3, [r7, #28]
	int32_t temp = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
	int status = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	61bb      	str	r3, [r7, #24]
	switch (commandId)
 8001574:	7afb      	ldrb	r3, [r7, #11]
 8001576:	2b06      	cmp	r3, #6
 8001578:	d862      	bhi.n	8001640 <_ZN15AbstractChannel14processMessageEhPhRh+0xe8>
 800157a:	a201      	add	r2, pc, #4	; (adr r2, 8001580 <_ZN15AbstractChannel14processMessageEhPhRh+0x28>)
 800157c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001580:	080015cb 	.word	0x080015cb
 8001584:	08001641 	.word	0x08001641
 8001588:	08001637 	.word	0x08001637
 800158c:	08001641 	.word	0x08001641
 8001590:	080015db 	.word	0x080015db
 8001594:	08001641 	.word	0x08001641
 8001598:	0800159d 	.word	0x0800159d
	{
		case COMMON_REQ_GET_VARIABLE:
			status = getVariable(setMsg->variable_id, temp);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	3320      	adds	r3, #32
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	69fa      	ldr	r2, [r7, #28]
 80015a6:	7811      	ldrb	r1, [r2, #0]
 80015a8:	f107 0214 	add.w	r2, r7, #20
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	4798      	blx	r3
 80015b0:	61b8      	str	r0, [r7, #24]
			setMsg->value = temp;
 80015b2:	697a      	ldr	r2, [r7, #20]
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	f8c3 2001 	str.w	r2, [r3, #1]
			n += sizeof(SetMsg_t);
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	3305      	adds	r3, #5
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	701a      	strb	r2, [r3, #0]
			return status;
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	e03c      	b.n	8001644 <_ZN15AbstractChannel14processMessageEhPhRh+0xec>

		case COMMON_REQ_RESET_SETTINGS:
			return reset();
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	330c      	adds	r3, #12
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	68f8      	ldr	r0, [r7, #12]
 80015d4:	4798      	blx	r3
 80015d6:	4603      	mov	r3, r0
 80015d8:	e034      	b.n	8001644 <_ZN15AbstractChannel14processMessageEhPhRh+0xec>

		case COMMON_REQ_SET_VARIABLE:
			if (setVariable(setMsg->variable_id, setMsg->value) == -1)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	331c      	adds	r3, #28
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	69fa      	ldr	r2, [r7, #28]
 80015e4:	7811      	ldrb	r1, [r2, #0]
 80015e6:	69fa      	ldr	r2, [r7, #28]
 80015e8:	f8d2 2001 	ldr.w	r2, [r2, #1]
 80015ec:	68f8      	ldr	r0, [r7, #12]
 80015ee:	4798      	blx	r3
 80015f0:	4603      	mov	r3, r0
 80015f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015f6:	bf0c      	ite	eq
 80015f8:	2301      	moveq	r3, #1
 80015fa:	2300      	movne	r3, #0
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d002      	beq.n	8001608 <_ZN15AbstractChannel14processMessageEhPhRh+0xb0>
				return -1;
 8001602:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001606:	e01d      	b.n	8001644 <_ZN15AbstractChannel14processMessageEhPhRh+0xec>
			status = getVariable(setMsg->variable_id, temp);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	3320      	adds	r3, #32
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	69fa      	ldr	r2, [r7, #28]
 8001612:	7811      	ldrb	r1, [r2, #0]
 8001614:	f107 0214 	add.w	r2, r7, #20
 8001618:	68f8      	ldr	r0, [r7, #12]
 800161a:	4798      	blx	r3
 800161c:	61b8      	str	r0, [r7, #24]
			setMsg->value = temp;
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	f8c3 2001 	str.w	r2, [r3, #1]
			n += sizeof(SetMsg_t);
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	3305      	adds	r3, #5
 800162c:	b2da      	uxtb	r2, r3
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	701a      	strb	r2, [r3, #0]
			return status;
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	e006      	b.n	8001644 <_ZN15AbstractChannel14processMessageEhPhRh+0xec>

		case COMMON_REQ_STATUS:
			return getChannelStatus();
 8001636:	68f8      	ldr	r0, [r7, #12]
 8001638:	f7ff ff40 	bl	80014bc <_ZNK15AbstractChannel16getChannelStatusEv>
 800163c:	4603      	mov	r3, r0
 800163e:	e001      	b.n	8001644 <_ZN15AbstractChannel14processMessageEhPhRh+0xec>

		default:
			return -1;
 8001640:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8001644:	4618      	mov	r0, r3
 8001646:	3720      	adds	r7, #32
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <_ZN15AbstractChannelD1Ev>:

AbstractChannel::~AbstractChannel()
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	4a04      	ldr	r2, [pc, #16]	; (8001668 <_ZN15AbstractChannelD1Ev+0x1c>)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	601a      	str	r2, [r3, #0]
{
}
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4618      	mov	r0, r3
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	08009ba8 	.word	0x08009ba8

0800166c <_ZN27AbstractControlInputChannelC1Ev>:
#include "../Inc/Channels/AbstractControlInputChannel.h"

#include <cstring>

AbstractControlInputChannel::AbstractControlInputChannel()
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	4a04      	ldr	r2, [pc, #16]	; (8001688 <_ZN27AbstractControlInputChannelC1Ev+0x1c>)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	601a      	str	r2, [r3, #0]
{

}
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4618      	mov	r0, r3
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	08009bd4 	.word	0x08009bd4

0800168c <_ZN27AbstractControlInputChannelD1Ev>:
AbstractControlInputChannel::~AbstractControlInputChannel()
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	4a04      	ldr	r2, [pc, #16]	; (80016a8 <_ZN27AbstractControlInputChannelD1Ev+0x1c>)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	601a      	str	r2, [r3, #0]
{
}
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4618      	mov	r0, r3
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	08009bd4 	.word	0x08009bd4

080016ac <_ZN28AbstractControlOutputChannelC1Ev>:
#include "../Inc/Channels/AbstractControlOutputChannel.h"

#include <cstring>

AbstractControlOutputChannel::AbstractControlOutputChannel()
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	4a04      	ldr	r2, [pc, #16]	; (80016c8 <_ZN28AbstractControlOutputChannelC1Ev+0x1c>)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	601a      	str	r2, [r3, #0]
{

}
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4618      	mov	r0, r3
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	08009be8 	.word	0x08009be8

080016cc <_ZN28AbstractControlOutputChannelD1Ev>:
AbstractControlOutputChannel::~AbstractControlOutputChannel()
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	4a04      	ldr	r2, [pc, #16]	; (80016e8 <_ZN28AbstractControlOutputChannelD1Ev+0x1c>)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	601a      	str	r2, [r3, #0]
{
}
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4618      	mov	r0, r3
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	08009be8 	.word	0x08009be8

080016ec <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm>:
#include <Channels/DigitalOutChannel.h>

DigitalOutChannel::DigitalOutChannel(uint8_t id, const STRHAL_ADC_Channel_t &adcChannel, const STRHAL_GPIO_t &cntrlPin, STRHAL_ADC_InType_t adcInType, uint32_t refreshDivider) :
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	607a      	str	r2, [r7, #4]
 80016f6:	603b      	str	r3, [r7, #0]
 80016f8:	460b      	mov	r3, r1
 80016fa:	72fb      	strb	r3, [r7, #11]
		AbstractChannel(CHANNEL_TYPE_DIGITAL_OUT, id, refreshDivider), adcChannel(adcChannel), cntrlPin(cntrlPin), adcInType(adcInType), hasFeedback(true)
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	7afa      	ldrb	r2, [r7, #11]
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	2107      	movs	r1, #7
 8001704:	f7ff feaa 	bl	800145c <_ZN15AbstractChannelC1E12CHANNEL_TYPEhm>
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	3310      	adds	r3, #16
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff ffad 	bl	800166c <_ZN27AbstractControlInputChannelC1Ev>
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	3314      	adds	r3, #20
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff ffc8 	bl	80016ac <_ZN28AbstractControlOutputChannelC1Ev>
 800171c:	4a13      	ldr	r2, [pc, #76]	; (800176c <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm+0x80>)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	4a13      	ldr	r2, [pc, #76]	; (8001770 <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm+0x84>)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	611a      	str	r2, [r3, #16]
 8001728:	4a12      	ldr	r2, [pc, #72]	; (8001774 <_ZN17DigitalOutChannelC1EhRK20STRHAL_ADC_Channel_tRK13STRHAL_GPIO_t19STRHAL_ADC_InType_tm+0x88>)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	615a      	str	r2, [r3, #20]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	331c      	adds	r3, #28
 8001734:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001738:	e883 0003 	stmia.w	r3, {r0, r1}
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2200      	movs	r2, #0
 8001740:	625a      	str	r2, [r3, #36]	; 0x24
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	3328      	adds	r3, #40	; 0x28
 8001748:	e892 0003 	ldmia.w	r2, {r0, r1}
 800174c:	e883 0003 	stmia.w	r3, {r0, r1}
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	7e3a      	ldrb	r2, [r7, #24]
 8001754:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2201      	movs	r2, #1
 800175c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
{
}
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	08009c04 	.word	0x08009c04
 8001770:	08009c40 	.word	0x08009c40
 8001774:	08009c54 	.word	0x08009c54

08001778 <_ZN17DigitalOutChannel4initEv>:
		AbstractChannel(CHANNEL_TYPE_DIGITAL_OUT, id, refreshDivider), cntrlPin(cntrlPin)
{
}

int DigitalOutChannel::init()
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
	STRHAL_GPIO_SingleInit(&cntrlPin, STRHAL_GPIO_TYPE_OPP);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3328      	adds	r3, #40	; 0x28
 8001784:	2100      	movs	r1, #0
 8001786:	4618      	mov	r0, r3
 8001788:	f005 ff24 	bl	80075d4 <STRHAL_GPIO_SingleInit>
	if (hasFeedback)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001792:	2b00      	cmp	r3, #0
 8001794:	d013      	beq.n	80017be <_ZN17DigitalOutChannel4initEv+0x46>
	{
		adcMeasurement = STRHAL_ADC_SubscribeChannel(&adcChannel, adcInType);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f103 021c 	add.w	r2, r3, #28
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017a2:	4619      	mov	r1, r3
 80017a4:	4610      	mov	r0, r2
 80017a6:	f004 feb5 	bl	8006514 <STRHAL_ADC_SubscribeChannel>
 80017aa:	4602      	mov	r2, r0
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	625a      	str	r2, [r3, #36]	; 0x24

		if (adcMeasurement == nullptr)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d102      	bne.n	80017be <_ZN17DigitalOutChannel4initEv+0x46>
			return -1;
 80017b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017bc:	e000      	b.n	80017c0 <_ZN17DigitalOutChannel4initEv+0x48>
	}

	return 0;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <_ZN17DigitalOutChannel4execEv>:

int DigitalOutChannel::exec()
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
	return 0;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <_ZN17DigitalOutChannel5resetEv>:

int DigitalOutChannel::reset()
{
 80017de:	b480      	push	{r7}
 80017e0:	b083      	sub	sp, #12
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
	return 0;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <_ZN17DigitalOutChannel14processMessageEhPhRh>:

int DigitalOutChannel::processMessage(uint8_t commandId, uint8_t *returnData, uint8_t &n)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	607a      	str	r2, [r7, #4]
 80017fe:	603b      	str	r3, [r7, #0]
 8001800:	460b      	mov	r3, r1
 8001802:	72fb      	strb	r3, [r7, #11]
	switch (commandId)
	{
		default:
			return AbstractChannel::processMessage(commandId, returnData, n);
 8001804:	68f8      	ldr	r0, [r7, #12]
 8001806:	7af9      	ldrb	r1, [r7, #11]
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	f7ff fea4 	bl	8001558 <_ZN15AbstractChannel14processMessageEhPhRh>
 8001810:	4603      	mov	r3, r0
	}
}
 8001812:	4618      	mov	r0, r3
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <_ZN17DigitalOutChannel13getSensorDataEPhRh>:

int DigitalOutChannel::getSensorData(uint8_t *data, uint8_t &n)
{
 800181a:	b480      	push	{r7}
 800181c:	b087      	sub	sp, #28
 800181e:	af00      	add	r7, sp, #0
 8001820:	60f8      	str	r0, [r7, #12]
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	607a      	str	r2, [r7, #4]
	uint16_t *out = (uint16_t*) (data + n);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	461a      	mov	r2, r3
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	4413      	add	r3, r2
 8001830:	617b      	str	r3, [r7, #20]
	*out = (hasFeedback) ? (*adcMeasurement << 4) : 0; // shift to 16bit full scale, if no feedback is present return 0
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001838:	2b00      	cmp	r3, #0
 800183a:	d006      	beq.n	800184a <_ZN17DigitalOutChannel13getSensorDataEPhRh+0x30>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001840:	881b      	ldrh	r3, [r3, #0]
 8001842:	b29b      	uxth	r3, r3
 8001844:	011b      	lsls	r3, r3, #4
 8001846:	b29a      	uxth	r2, r3
 8001848:	e000      	b.n	800184c <_ZN17DigitalOutChannel13getSensorDataEPhRh+0x32>
 800184a:	2200      	movs	r2, #0
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	801a      	strh	r2, [r3, #0]

	n += DIGITAL_OUT_DATA_N_BYTES;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	3302      	adds	r3, #2
 8001856:	b2da      	uxtb	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	701a      	strb	r2, [r3, #0]
	return 0;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	371c      	adds	r7, #28
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
	...

0800186c <_ZN17DigitalOutChannel11setVariableEhl>:

int DigitalOutChannel::setVariable(uint8_t variableId, int32_t data)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	460b      	mov	r3, r1
 8001876:	607a      	str	r2, [r7, #4]
 8001878:	72fb      	strb	r3, [r7, #11]
	switch (variableId)
 800187a:	7afb      	ldrb	r3, [r7, #11]
 800187c:	2b04      	cmp	r3, #4
 800187e:	d836      	bhi.n	80018ee <_ZN17DigitalOutChannel11setVariableEhl+0x82>
 8001880:	a201      	add	r2, pc, #4	; (adr r2, 8001888 <_ZN17DigitalOutChannel11setVariableEhl+0x1c>)
 8001882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001886:	bf00      	nop
 8001888:	0800189d 	.word	0x0800189d
 800188c:	080018c7 	.word	0x080018c7
 8001890:	080018d3 	.word	0x080018d3
 8001894:	080018ef 	.word	0x080018ef
 8001898:	080018df 	.word	0x080018df
	{
		case DIGITAL_OUT_STATE:
			if (setState(data) != 0)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	332c      	adds	r3, #44	; 0x2c
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	4611      	mov	r1, r2
 80018a8:	68f8      	ldr	r0, [r7, #12]
 80018aa:	4798      	blx	r3
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	bf14      	ite	ne
 80018b2:	2301      	movne	r3, #1
 80018b4:	2300      	moveq	r3, #0
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d002      	beq.n	80018c2 <_ZN17DigitalOutChannel11setVariableEhl+0x56>
				return -1;
 80018bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018c0:	e017      	b.n	80018f2 <_ZN17DigitalOutChannel11setVariableEhl+0x86>
			return 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	e015      	b.n	80018f2 <_ZN17DigitalOutChannel11setVariableEhl+0x86>
		case DIGITAL_OUT_DUTY_CYCLE:
			dutyCycle = data;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	831a      	strh	r2, [r3, #24]
			return 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	e00f      	b.n	80018f2 <_ZN17DigitalOutChannel11setVariableEhl+0x86>
		case DIGITAL_OUT_FREQUENCY:
			frequency = data;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	835a      	strh	r2, [r3, #26]
			return 0;
 80018da:	2300      	movs	r3, #0
 80018dc:	e009      	b.n	80018f2 <_ZN17DigitalOutChannel11setVariableEhl+0x86>
		case DIGITAL_OUT_SENSOR_REFRESH_DIVIDER:
			refreshDivider = data;
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	605a      	str	r2, [r3, #4]
			refreshCounter = 0;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
			return 0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	e001      	b.n	80018f2 <_ZN17DigitalOutChannel11setVariableEhl+0x86>
		default:
			return -1;
 80018ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop

080018fc <_ZNK17DigitalOutChannel11getVariableEhRl>:

int DigitalOutChannel::getVariable(uint8_t variableId, int32_t &data) const
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	460b      	mov	r3, r1
 8001906:	607a      	str	r2, [r7, #4]
 8001908:	72fb      	strb	r3, [r7, #11]
	switch (variableId)
 800190a:	7afb      	ldrb	r3, [r7, #11]
 800190c:	2b04      	cmp	r3, #4
 800190e:	d82e      	bhi.n	800196e <_ZNK17DigitalOutChannel11getVariableEhRl+0x72>
 8001910:	a201      	add	r2, pc, #4	; (adr r2, 8001918 <_ZNK17DigitalOutChannel11getVariableEhRl+0x1c>)
 8001912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001916:	bf00      	nop
 8001918:	0800192d 	.word	0x0800192d
 800191c:	08001945 	.word	0x08001945
 8001920:	08001953 	.word	0x08001953
 8001924:	0800196f 	.word	0x0800196f
 8001928:	08001961 	.word	0x08001961
	{
		case DIGITAL_OUT_STATE:
			data = getState();
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	3328      	adds	r3, #40	; 0x28
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	68f8      	ldr	r0, [r7, #12]
 8001936:	4798      	blx	r3
 8001938:	4603      	mov	r3, r0
 800193a:	461a      	mov	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	601a      	str	r2, [r3, #0]
			return 0;
 8001940:	2300      	movs	r3, #0
 8001942:	e016      	b.n	8001972 <_ZNK17DigitalOutChannel11getVariableEhRl+0x76>
		case DIGITAL_OUT_DUTY_CYCLE:
			data = dutyCycle;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	8b1b      	ldrh	r3, [r3, #24]
 8001948:	461a      	mov	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	601a      	str	r2, [r3, #0]
			return 0;
 800194e:	2300      	movs	r3, #0
 8001950:	e00f      	b.n	8001972 <_ZNK17DigitalOutChannel11getVariableEhRl+0x76>
		case DIGITAL_OUT_FREQUENCY:
			data = frequency;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	8b5b      	ldrh	r3, [r3, #26]
 8001956:	461a      	mov	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	601a      	str	r2, [r3, #0]
			return 0;
 800195c:	2300      	movs	r3, #0
 800195e:	e008      	b.n	8001972 <_ZNK17DigitalOutChannel11getVariableEhRl+0x76>
		case DIGITAL_OUT_SENSOR_REFRESH_DIVIDER:
			data = (int32_t) refreshDivider;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	461a      	mov	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	601a      	str	r2, [r3, #0]
			return 0;
 800196a:	2300      	movs	r3, #0
 800196c:	e001      	b.n	8001972 <_ZNK17DigitalOutChannel11getVariableEhRl+0x76>
		default:
			return -1;
 800196e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8001972:	4618      	mov	r0, r3
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop

0800197c <_ZNK17DigitalOutChannel8getStateEv>:

uint32_t DigitalOutChannel::getState() const
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
	return (STRHAL_GPIO_ReadOutput(&cntrlPin) == STRHAL_GPIO_VALUE_L) ? 0UL : 1UL;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3328      	adds	r3, #40	; 0x28
 8001988:	4618      	mov	r0, r3
 800198a:	f005 fea8 	bl	80076de <STRHAL_GPIO_ReadOutput>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	bf14      	ite	ne
 8001994:	2301      	movne	r3, #1
 8001996:	2300      	moveq	r3, #0
 8001998:	b2db      	uxtb	r3, r3
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <_ZThn20_NK17DigitalOutChannel8getStateEv>:

		uint16_t getMeasurement() const;

		int processMessage(uint8_t commandI, uint8_t *returnData, uint8_t &n) override;

		uint32_t getState() const;
 80019a2:	f1a0 0014 	sub.w	r0, r0, #20
 80019a6:	f7ff bfe9 	b.w	800197c <_ZNK17DigitalOutChannel8getStateEv>

080019aa <_ZN17DigitalOutChannel8setStateEm>:

int DigitalOutChannel::setState(uint32_t state)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
 80019b2:	6039      	str	r1, [r7, #0]
	if (state == 0)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d106      	bne.n	80019c8 <_ZN17DigitalOutChannel8setStateEm+0x1e>
	{
		STRHAL_GPIO_Write(&cntrlPin, STRHAL_GPIO_VALUE_L);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3328      	adds	r3, #40	; 0x28
 80019be:	2100      	movs	r1, #0
 80019c0:	4618      	mov	r0, r3
 80019c2:	f005 fe63 	bl	800768c <STRHAL_GPIO_Write>
 80019c6:	e005      	b.n	80019d4 <_ZN17DigitalOutChannel8setStateEm+0x2a>
	}
	else
	{
		STRHAL_GPIO_Write(&cntrlPin, STRHAL_GPIO_VALUE_H);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3328      	adds	r3, #40	; 0x28
 80019cc:	2101      	movs	r1, #1
 80019ce:	4618      	mov	r0, r3
 80019d0:	f005 fe5c 	bl	800768c <STRHAL_GPIO_Write>
	}
	return 0;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <_ZThn20_N17DigitalOutChannel8setStateEm>:
		int setState(uint32_t state);
 80019de:	f1a0 0014 	sub.w	r0, r0, #20
 80019e2:	f7ff bfe2 	b.w	80019aa <_ZN17DigitalOutChannel8setStateEm>

080019e6 <_ZN17DigitalOutChannel8isAnalogEv>:


bool DigitalOutChannel::isAnalog()
{
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
	return false;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <_ZThn20_N17DigitalOutChannel8isAnalogEv>:
		bool isAnalog();
 80019fc:	f1a0 0014 	sub.w	r0, r0, #20
 8001a00:	f7ff bff1 	b.w	80019e6 <_ZN17DigitalOutChannel8isAnalogEv>

08001a04 <_ZNK17DigitalOutChannel14getMeasurementEv>:

uint16_t DigitalOutChannel::getMeasurement() const
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
	return *adcMeasurement;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a10:	881b      	ldrh	r3, [r3, #0]
 8001a12:	b29b      	uxth	r3, r3
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <_ZThn16_NK17DigitalOutChannel14getMeasurementEv>:
		uint16_t getMeasurement() const;
 8001a20:	f1a0 0010 	sub.w	r0, r0, #16
 8001a24:	f7ff bfee 	b.w	8001a04 <_ZNK17DigitalOutChannel14getMeasurementEv>

08001a28 <_ZN14GenericChannelC1Emmm>:
#include <git_version.h>

GenericChannel* GenericChannel::gcPtr = nullptr; // necessary for static callbacks
bool GenericChannel::loraActive = false;

GenericChannel::GenericChannel(uint32_t nodeId, uint32_t firmwareVersion, uint32_t refreshDivider) :
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
 8001a34:	603b      	str	r3, [r7, #0]
		AbstractChannel(CHANNEL_TYPE_NODE_GENERIC, GENERIC_CHANNEL_ID, refreshDivider), can(Can::instance(nodeId)), flash(W25Qxx_Flash::instance()), nodeId(nodeId), firmwareVersion(GIT_COMMIT_HASH_VALUE)
 8001a36:	68f8      	ldr	r0, [r7, #12]
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	223f      	movs	r2, #63	; 0x3f
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	f7ff fd0d 	bl	800145c <_ZN15AbstractChannelC1E12CHANNEL_TYPEhm>
 8001a42:	4a1b      	ldr	r2, [pc, #108]	; (8001ab0 <_ZN14GenericChannelC1Emmm+0x88>)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	3310      	adds	r3, #16
 8001a4c:	2280      	movs	r2, #128	; 0x80
 8001a4e:	2100      	movs	r1, #0
 8001a50:	4618      	mov	r0, r3
 8001a52:	f007 ff1d 	bl	8009890 <memset>
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	3390      	adds	r3, #144	; 0x90
 8001a5a:	2220      	movs	r2, #32
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f007 ff16 	bl	8009890 <memset>
 8001a64:	68b8      	ldr	r0, [r7, #8]
 8001a66:	f7fe fbff 	bl	8000268 <_ZN3Can8instanceEm>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001a72:	f001 f9ef 	bl	8002e54 <_ZN12W25Qxx_Flash8instanceEv>
 8001a76:	4602      	mov	r2, r0
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	68ba      	ldr	r2, [r7, #8]
 8001a82:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	4a0a      	ldr	r2, [pc, #40]	; (8001ab4 <_ZN14GenericChannelC1Emmm+0x8c>)
 8001a8a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
{
	gcPtr = this;
 8001a9e:	4a06      	ldr	r2, [pc, #24]	; (8001ab8 <_ZN14GenericChannelC1Emmm+0x90>)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6013      	str	r3, [r2, #0]
}
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	08009c70 	.word	0x08009c70
 8001ab4:	6f843459 	.word	0x6f843459
 8001ab8:	20000818 	.word	0x20000818

08001abc <_ZNK14GenericChannel9getNodeIdEv>:

uint32_t GenericChannel::getNodeId() const
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
	return nodeId;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <_ZN14GenericChannel4initEv>:

int GenericChannel::init()
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b08a      	sub	sp, #40	; 0x28
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
	for (AbstractModule *module : modules)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	3390      	adds	r3, #144	; 0x90
 8001ae2:	61fb      	str	r3, [r7, #28]
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	3320      	adds	r3, #32
 8001aec:	61bb      	str	r3, [r7, #24]
 8001aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d01a      	beq.n	8001b2c <_ZN14GenericChannel4initEv+0x56>
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	617b      	str	r3, [r7, #20]
	{
		if (module == nullptr)
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d00f      	beq.n	8001b22 <_ZN14GenericChannel4initEv+0x4c>
			continue;
		if (module->init() != 0)
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6978      	ldr	r0, [r7, #20]
 8001b0a:	4798      	blx	r3
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	bf14      	ite	ne
 8001b12:	2301      	movne	r3, #1
 8001b14:	2300      	moveq	r3, #0
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d003      	beq.n	8001b24 <_ZN14GenericChannel4initEv+0x4e>
			return -1;
 8001b1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b20:	e02d      	b.n	8001b7e <_ZN14GenericChannel4initEv+0xa8>
			continue;
 8001b22:	bf00      	nop
	for (AbstractModule *module : modules)
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b26:	3304      	adds	r3, #4
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
 8001b2a:	e7e0      	b.n	8001aee <_ZN14GenericChannel4initEv+0x18>
	}

	for (AbstractChannel *channel : channels)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3310      	adds	r3, #16
 8001b30:	613b      	str	r3, [r7, #16]
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	623b      	str	r3, [r7, #32]
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	3380      	adds	r3, #128	; 0x80
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	6a3a      	ldr	r2, [r7, #32]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d01b      	beq.n	8001b7c <_ZN14GenericChannel4initEv+0xa6>
 8001b44:	6a3b      	ldr	r3, [r7, #32]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	60bb      	str	r3, [r7, #8]
	{
		if (channel == nullptr)
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d010      	beq.n	8001b72 <_ZN14GenericChannel4initEv+0x9c>
			continue;
		if (channel->init() != 0)
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	3308      	adds	r3, #8
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	68b8      	ldr	r0, [r7, #8]
 8001b5a:	4798      	blx	r3
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	bf14      	ite	ne
 8001b62:	2301      	movne	r3, #1
 8001b64:	2300      	moveq	r3, #0
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d003      	beq.n	8001b74 <_ZN14GenericChannel4initEv+0x9e>
		{
			return -1;
 8001b6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b70:	e005      	b.n	8001b7e <_ZN14GenericChannel4initEv+0xa8>
			continue;
 8001b72:	bf00      	nop
	for (AbstractChannel *channel : channels)
 8001b74:	6a3b      	ldr	r3, [r7, #32]
 8001b76:	3304      	adds	r3, #4
 8001b78:	623b      	str	r3, [r7, #32]
 8001b7a:	e7df      	b.n	8001b3c <_ZN14GenericChannel4initEv+0x66>
		}
	}

	return 0;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3728      	adds	r7, #40	; 0x28
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <_ZN14GenericChannel4execEv>:

int GenericChannel::exec()
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b08a      	sub	sp, #40	; 0x28
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
	for (AbstractModule *module : modules)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	3390      	adds	r3, #144	; 0x90
 8001b92:	61fb      	str	r3, [r7, #28]
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	3320      	adds	r3, #32
 8001b9c:	61bb      	str	r3, [r7, #24]
 8001b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d01b      	beq.n	8001bde <_ZN14GenericChannel4execEv+0x58>
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	617b      	str	r3, [r7, #20]
	{
		if (module == nullptr)
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d010      	beq.n	8001bd4 <_ZN14GenericChannel4execEv+0x4e>
			continue;
		if (module->exec() != 0)
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	3308      	adds	r3, #8
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6978      	ldr	r0, [r7, #20]
 8001bbc:	4798      	blx	r3
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	bf14      	ite	ne
 8001bc4:	2301      	movne	r3, #1
 8001bc6:	2300      	moveq	r3, #0
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <_ZN14GenericChannel4execEv+0x50>
			return -1;
 8001bce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bd2:	e02d      	b.n	8001c30 <_ZN14GenericChannel4execEv+0xaa>
			continue;
 8001bd4:	bf00      	nop
	for (AbstractModule *module : modules)
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd8:	3304      	adds	r3, #4
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24
 8001bdc:	e7df      	b.n	8001b9e <_ZN14GenericChannel4execEv+0x18>
	}

	for (AbstractChannel *channel : channels)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3310      	adds	r3, #16
 8001be2:	613b      	str	r3, [r7, #16]
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	623b      	str	r3, [r7, #32]
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	3380      	adds	r3, #128	; 0x80
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	6a3a      	ldr	r2, [r7, #32]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d01b      	beq.n	8001c2e <_ZN14GenericChannel4execEv+0xa8>
 8001bf6:	6a3b      	ldr	r3, [r7, #32]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	60bb      	str	r3, [r7, #8]
	{
		if (channel == nullptr)
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d010      	beq.n	8001c24 <_ZN14GenericChannel4execEv+0x9e>
			continue;
		if (channel->exec() != 0)
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	3310      	adds	r3, #16
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68b8      	ldr	r0, [r7, #8]
 8001c0c:	4798      	blx	r3
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	bf14      	ite	ne
 8001c14:	2301      	movne	r3, #1
 8001c16:	2300      	moveq	r3, #0
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <_ZN14GenericChannel4execEv+0xa0>
			return -1;
 8001c1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c22:	e005      	b.n	8001c30 <_ZN14GenericChannel4execEv+0xaa>
			continue;
 8001c24:	bf00      	nop
	for (AbstractChannel *channel : channels)
 8001c26:	6a3b      	ldr	r3, [r7, #32]
 8001c28:	3304      	adds	r3, #4
 8001c2a:	623b      	str	r3, [r7, #32]
 8001c2c:	e7df      	b.n	8001bee <_ZN14GenericChannel4execEv+0x68>
	}
	return 0;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3728      	adds	r7, #40	; 0x28
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <_ZN14GenericChannel5resetEv>:

int GenericChannel::reset()
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
	(void) flash.reset();
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	3304      	adds	r3, #4
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4610      	mov	r0, r2
 8001c54:	4798      	blx	r3
	return 0;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <_ZN14GenericChannel14processMessageEhPhRh>:

int GenericChannel::processMessage(uint8_t commandId, uint8_t *returnData, uint8_t &n)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b088      	sub	sp, #32
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	607a      	str	r2, [r7, #4]
 8001c6a:	603b      	str	r3, [r7, #0]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	72fb      	strb	r3, [r7, #11]
	switch (commandId)
 8001c70:	7afb      	ldrb	r3, [r7, #11]
 8001c72:	2b12      	cmp	r3, #18
 8001c74:	d86d      	bhi.n	8001d52 <_ZN14GenericChannel14processMessageEhPhRh+0xf2>
 8001c76:	a201      	add	r2, pc, #4	; (adr r2, 8001c7c <_ZN14GenericChannel14processMessageEhPhRh+0x1c>)
 8001c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c7c:	08001ceb 	.word	0x08001ceb
 8001c80:	08001d53 	.word	0x08001d53
 8001c84:	08001d53 	.word	0x08001d53
 8001c88:	08001d53 	.word	0x08001d53
 8001c8c:	08001d53 	.word	0x08001d53
 8001c90:	08001d53 	.word	0x08001d53
 8001c94:	08001d53 	.word	0x08001d53
 8001c98:	08001d53 	.word	0x08001d53
 8001c9c:	08001d53 	.word	0x08001d53
 8001ca0:	08001d53 	.word	0x08001d53
 8001ca4:	08001cd7 	.word	0x08001cd7
 8001ca8:	08001d53 	.word	0x08001d53
 8001cac:	08001cc9 	.word	0x08001cc9
 8001cb0:	08001d53 	.word	0x08001d53
 8001cb4:	08001d53 	.word	0x08001d53
 8001cb8:	08001d53 	.word	0x08001d53
 8001cbc:	08001d53 	.word	0x08001d53
 8001cc0:	08001d53 	.word	0x08001d53
 8001cc4:	08001d37 	.word	0x08001d37
	{
		case GENERIC_REQ_NODE_INFO:
			//LL_mDelay(100*this->nodeId);
			return this->getNodeInfo(returnData, n);
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	68f8      	ldr	r0, [r7, #12]
 8001cce:	f000 f9c1 	bl	8002054 <_ZN14GenericChannel11getNodeInfoEPhRh>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	e045      	b.n	8001d62 <_ZN14GenericChannel14processMessageEhPhRh+0x102>
		case GENERIC_REQ_DATA:
			return this->getSensorData(returnData, n);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	3318      	adds	r3, #24
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	6879      	ldr	r1, [r7, #4]
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	4798      	blx	r3
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	e03b      	b.n	8001d62 <_ZN14GenericChannel14processMessageEhPhRh+0x102>
		case GENERIC_REQ_RESET_ALL_SETTINGS:
			(void) flash.configReset();
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f001 fdb1 	bl	8003858 <_ZN12W25Qxx_Flash11configResetEv>
			for (AbstractChannel *channel : channels)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	3310      	adds	r3, #16
 8001cfa:	61bb      	str	r3, [r7, #24]
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	61fb      	str	r3, [r7, #28]
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	3380      	adds	r3, #128	; 0x80
 8001d04:	617b      	str	r3, [r7, #20]
 8001d06:	69fa      	ldr	r2, [r7, #28]
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d011      	beq.n	8001d32 <_ZN14GenericChannel14processMessageEhPhRh+0xd2>
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	613b      	str	r3, [r7, #16]
			{
				if (channel == nullptr)
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d006      	beq.n	8001d28 <_ZN14GenericChannel14processMessageEhPhRh+0xc8>
					continue;

				channel->reset(); // TODO implement good reset for every channel
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	330c      	adds	r3, #12
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6938      	ldr	r0, [r7, #16]
 8001d24:	4798      	blx	r3
 8001d26:	e000      	b.n	8001d2a <_ZN14GenericChannel14processMessageEhPhRh+0xca>
					continue;
 8001d28:	bf00      	nop
			for (AbstractChannel *channel : channels)
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	61fb      	str	r3, [r7, #28]
 8001d30:	e7e9      	b.n	8001d06 <_ZN14GenericChannel14processMessageEhPhRh+0xa6>
			}
			return 0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	e015      	b.n	8001d62 <_ZN14GenericChannel14processMessageEhPhRh+0x102>
		case GENERIC_REQ_FLASH_CLEAR:
			(void) flash.setState(FlashState::CLEARING);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f001 fa64 	bl	800320c <_ZN12W25Qxx_Flash8setStateE10FlashState>
			return this->getFlashClearInfo(returnData, n);
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	68f8      	ldr	r0, [r7, #12]
 8001d4a:	f000 f958 	bl	8001ffe <_ZN14GenericChannel17getFlashClearInfoEPhRh>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	e007      	b.n	8001d62 <_ZN14GenericChannel14processMessageEhPhRh+0x102>
		default:
			return AbstractChannel::processMessage(commandId, returnData, n);
 8001d52:	68f8      	ldr	r0, [r7, #12]
 8001d54:	7af9      	ldrb	r1, [r7, #11]
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	f7ff fbfd 	bl	8001558 <_ZN15AbstractChannel14processMessageEhPhRh>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	bf00      	nop
	}
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3720      	adds	r7, #32
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop

08001d6c <_ZN14GenericChannel14processMessageEhPhRhh>:

int GenericChannel::processMessage(uint8_t commandId, uint8_t *returnData, uint8_t &n, uint8_t channelId)
{
 8001d6c:	b590      	push	{r4, r7, lr}
 8001d6e:	b089      	sub	sp, #36	; 0x24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	607a      	str	r2, [r7, #4]
 8001d76:	603b      	str	r3, [r7, #0]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	72fb      	strb	r3, [r7, #11]
	for (AbstractChannel *channel : channels)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	3310      	adds	r3, #16
 8001d80:	61bb      	str	r3, [r7, #24]
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	61fb      	str	r3, [r7, #28]
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	3380      	adds	r3, #128	; 0x80
 8001d8a:	617b      	str	r3, [r7, #20]
 8001d8c:	69fa      	ldr	r2, [r7, #28]
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d029      	beq.n	8001de8 <_ZN14GenericChannel14processMessageEhPhRhh+0x7c>
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	613b      	str	r3, [r7, #16]
	{
		if (channel->IsChannelId(channelId))
 8001d9a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001d9e:	4619      	mov	r1, r3
 8001da0:	6938      	ldr	r0, [r7, #16]
 8001da2:	f7ff fba3 	bl	80014ec <_ZNK15AbstractChannel11IsChannelIdEh>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d019      	beq.n	8001de0 <_ZN14GenericChannel14processMessageEhPhRhh+0x74>
		{
			if (channel == nullptr)
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d015      	beq.n	8001dde <_ZN14GenericChannel14processMessageEhPhRhh+0x72>
				continue;

			if (channel->processMessage(commandId, returnData, n) != 0)
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	3314      	adds	r3, #20
 8001db8:	681c      	ldr	r4, [r3, #0]
 8001dba:	7af9      	ldrb	r1, [r7, #11]
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	6938      	ldr	r0, [r7, #16]
 8001dc2:	47a0      	blx	r4
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	bf14      	ite	ne
 8001dca:	2301      	movne	r3, #1
 8001dcc:	2300      	moveq	r3, #0
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d002      	beq.n	8001dda <_ZN14GenericChannel14processMessageEhPhRhh+0x6e>
				return -1;
 8001dd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dd8:	e008      	b.n	8001dec <_ZN14GenericChannel14processMessageEhPhRhh+0x80>
			return 0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	e006      	b.n	8001dec <_ZN14GenericChannel14processMessageEhPhRhh+0x80>
				continue;
 8001dde:	bf00      	nop
	for (AbstractChannel *channel : channels)
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	3304      	adds	r3, #4
 8001de4:	61fb      	str	r3, [r7, #28]
 8001de6:	e7d1      	b.n	8001d8c <_ZN14GenericChannel14processMessageEhPhRhh+0x20>
		}

	}
	return -1;
 8001de8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3724      	adds	r7, #36	; 0x24
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd90      	pop	{r4, r7, pc}

08001df4 <_ZN14GenericChannel11setVariableEhl>:

int GenericChannel::setVariable(uint8_t variableId, int32_t data)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	607a      	str	r2, [r7, #4]
 8001e00:	72fb      	strb	r3, [r7, #11]
	switch (variableId)
 8001e02:	7afb      	ldrb	r3, [r7, #11]
 8001e04:	2b08      	cmp	r3, #8
 8001e06:	d029      	beq.n	8001e5c <_ZN14GenericChannel11setVariableEhl+0x68>
 8001e08:	2b08      	cmp	r3, #8
 8001e0a:	dc33      	bgt.n	8001e74 <_ZN14GenericChannel11setVariableEhl+0x80>
 8001e0c:	2b05      	cmp	r3, #5
 8001e0e:	d002      	beq.n	8001e16 <_ZN14GenericChannel11setVariableEhl+0x22>
 8001e10:	2b07      	cmp	r3, #7
 8001e12:	d008      	beq.n	8001e26 <_ZN14GenericChannel11setVariableEhl+0x32>
 8001e14:	e02e      	b.n	8001e74 <_ZN14GenericChannel11setVariableEhl+0x80>
	{
		case GENERIC_REFRESH_DIVIDER:
			refreshDivider = data;
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	605a      	str	r2, [r3, #4]
			refreshCounter = 0;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	609a      	str	r2, [r3, #8]
			return 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	e028      	b.n	8001e78 <_ZN14GenericChannel11setVariableEhl+0x84>
		case GENERIC_LOGGING_ENABLED:
			loggingEnabled = data;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
			if (loggingEnabled == 0)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d107      	bne.n	8001e4a <_ZN14GenericChannel11setVariableEhl+0x56>
			{
				flash.setState(FlashState::IDLE);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001e40:	2100      	movs	r1, #0
 8001e42:	4618      	mov	r0, r3
 8001e44:	f001 f9e2 	bl	800320c <_ZN12W25Qxx_Flash8setStateE10FlashState>
 8001e48:	e006      	b.n	8001e58 <_ZN14GenericChannel11setVariableEhl+0x64>
			}
			else
			{
				flash.setState(FlashState::LOGGING);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001e50:	2103      	movs	r1, #3
 8001e52:	4618      	mov	r0, r3
 8001e54:	f001 f9da 	bl	800320c <_ZN12W25Qxx_Flash8setStateE10FlashState>
			}
			return 0;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	e00d      	b.n	8001e78 <_ZN14GenericChannel11setVariableEhl+0x84>
		case GENERIC_LORA_ENABLED:
			if (data == 0)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d103      	bne.n	8001e6a <_ZN14GenericChannel11setVariableEhl+0x76>
			{
				setLoraActive(false);
 8001e62:	2000      	movs	r0, #0
 8001e64:	f000 f992 	bl	800218c <_ZN14GenericChannel13setLoraActiveEb>
 8001e68:	e002      	b.n	8001e70 <_ZN14GenericChannel11setVariableEhl+0x7c>
			}
			else
			{
				setLoraActive(true);
 8001e6a:	2001      	movs	r0, #1
 8001e6c:	f000 f98e 	bl	800218c <_ZN14GenericChannel13setLoraActiveEb>
			}
			return 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	e001      	b.n	8001e78 <_ZN14GenericChannel11setVariableEhl+0x84>
		default:
			return -1;
 8001e74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <_ZNK14GenericChannel11getVariableEhRl>:

int GenericChannel::getVariable(uint8_t variableId, int32_t &data) const
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	607a      	str	r2, [r7, #4]
 8001e8c:	72fb      	strb	r3, [r7, #11]
	switch (variableId)
 8001e8e:	7afb      	ldrb	r3, [r7, #11]
 8001e90:	2b08      	cmp	r3, #8
 8001e92:	d015      	beq.n	8001ec0 <_ZNK14GenericChannel11getVariableEhRl+0x40>
 8001e94:	2b08      	cmp	r3, #8
 8001e96:	dc20      	bgt.n	8001eda <_ZNK14GenericChannel11getVariableEhRl+0x5a>
 8001e98:	2b05      	cmp	r3, #5
 8001e9a:	d002      	beq.n	8001ea2 <_ZNK14GenericChannel11getVariableEhRl+0x22>
 8001e9c:	2b07      	cmp	r3, #7
 8001e9e:	d007      	beq.n	8001eb0 <_ZNK14GenericChannel11getVariableEhRl+0x30>
 8001ea0:	e01b      	b.n	8001eda <_ZNK14GenericChannel11getVariableEhRl+0x5a>
	{
		case GENERIC_REFRESH_DIVIDER:
			data = (int32_t) refreshDivider;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	601a      	str	r2, [r3, #0]
			return 0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	e016      	b.n	8001ede <_ZNK14GenericChannel11getVariableEhRl+0x5e>
		case GENERIC_LOGGING_ENABLED:
			data = (int32_t) loggingEnabled;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	601a      	str	r2, [r3, #0]
			return 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	e00e      	b.n	8001ede <_ZNK14GenericChannel11getVariableEhRl+0x5e>
		case GENERIC_LORA_ENABLED:
			if (loraActive)
 8001ec0:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <_ZNK14GenericChannel11getVariableEhRl+0x6c>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d003      	beq.n	8001ed0 <_ZNK14GenericChannel11getVariableEhRl+0x50>
				data = 1;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	e002      	b.n	8001ed6 <_ZNK14GenericChannel11getVariableEhRl+0x56>
			else
				data = 0;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
			return 0;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	e001      	b.n	8001ede <_ZNK14GenericChannel11getVariableEhRl+0x5e>
		default:
			return -1;
 8001eda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	2000081c 	.word	0x2000081c

08001ef0 <_ZN14GenericChannel13getSensorDataEPhRh>:
	n = sizeof(FlashStatusMsg_t);
	return 0;
}

int GenericChannel::getSensorData(uint8_t *data, uint8_t &n)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08a      	sub	sp, #40	; 0x28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
	if (!IsRefreshed())
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff fb08 	bl	8001514 <_ZN15AbstractChannel11IsRefreshedEv>
 8001f04:	4603      	mov	r3, r0
 8001f06:	f083 0301 	eor.w	r3, r3, #1
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d002      	beq.n	8001f16 <_ZN14GenericChannel13getSensorDataEPhRh+0x26>
		return -1;
 8001f10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f14:	e06f      	b.n	8001ff6 <_ZN14GenericChannel13getSensorDataEPhRh+0x106>

	DataMsg_t *dataMsg = (DataMsg_t*) data;
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	623b      	str	r3, [r7, #32]
	dataMsg->channel_mask = 0;
 8001f1a:	6a3b      	ldr	r3, [r7, #32]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	701a      	strb	r2, [r3, #0]
 8001f20:	2200      	movs	r2, #0
 8001f22:	705a      	strb	r2, [r3, #1]
 8001f24:	2200      	movs	r2, #0
 8001f26:	709a      	strb	r2, [r3, #2]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	70da      	strb	r2, [r3, #3]
	for (AbstractChannel *channel : channels)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	3310      	adds	r3, #16
 8001f30:	61fb      	str	r3, [r7, #28]
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3380      	adds	r3, #128	; 0x80
 8001f3a:	61bb      	str	r3, [r7, #24]
 8001f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d03a      	beq.n	8001fba <_ZN14GenericChannel13getSensorDataEPhRh+0xca>
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	617b      	str	r3, [r7, #20]
	{
		if (channel == nullptr || !channel->IsRefreshed())
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d008      	beq.n	8001f62 <_ZN14GenericChannel13getSensorDataEPhRh+0x72>
 8001f50:	6978      	ldr	r0, [r7, #20]
 8001f52:	f7ff fadf 	bl	8001514 <_ZN15AbstractChannel11IsRefreshedEv>
 8001f56:	4603      	mov	r3, r0
 8001f58:	f083 0301 	eor.w	r3, r3, #1
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <_ZN14GenericChannel13getSensorDataEPhRh+0x76>
 8001f62:	2301      	movs	r3, #1
 8001f64:	e000      	b.n	8001f68 <_ZN14GenericChannel13getSensorDataEPhRh+0x78>
 8001f66:	2300      	movs	r3, #0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d11f      	bne.n	8001fac <_ZN14GenericChannel13getSensorDataEPhRh+0xbc>
			continue;
		if (channel->getSensorData(&dataMsg->uint8[0], n) == -1)
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	3318      	adds	r3, #24
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6a3a      	ldr	r2, [r7, #32]
 8001f76:	1d11      	adds	r1, r2, #4
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6978      	ldr	r0, [r7, #20]
 8001f7c:	4798      	blx	r3
 8001f7e:	4603      	mov	r3, r0
 8001f80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f84:	bf0c      	ite	eq
 8001f86:	2301      	moveq	r3, #1
 8001f88:	2300      	movne	r3, #0
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d10f      	bne.n	8001fb0 <_ZN14GenericChannel13getSensorDataEPhRh+0xc0>
			continue;
		dataMsg->channel_mask |= 1 << channel->getChannelId();
 8001f90:	6978      	ldr	r0, [r7, #20]
 8001f92:	f7ff fa9f 	bl	80014d4 <_ZNK15AbstractChannel12getChannelIdEv>
 8001f96:	4603      	mov	r3, r0
 8001f98:	461a      	mov	r2, r3
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	fa03 f202 	lsl.w	r2, r3, r2
 8001fa0:	6a3b      	ldr	r3, [r7, #32]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	431a      	orrs	r2, r3
 8001fa6:	6a3b      	ldr	r3, [r7, #32]
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	e002      	b.n	8001fb2 <_ZN14GenericChannel13getSensorDataEPhRh+0xc2>
			continue;
 8001fac:	bf00      	nop
 8001fae:	e000      	b.n	8001fb2 <_ZN14GenericChannel13getSensorDataEPhRh+0xc2>
			continue;
 8001fb0:	bf00      	nop
	for (AbstractChannel *channel : channels)
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	3304      	adds	r3, #4
 8001fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb8:	e7c0      	b.n	8001f3c <_ZN14GenericChannel13getSensorDataEPhRh+0x4c>
	}
	n += 1 * sizeof(uint32_t);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	3304      	adds	r3, #4
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	701a      	strb	r2, [r3, #0]

	if (loggingEnabled && !flash.lock)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d011      	beq.n	8001ff4 <_ZN14GenericChannel13getSensorDataEPhRh+0x104>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001fd6:	791b      	ldrb	r3, [r3, #4]
 8001fd8:	f083 0301 	eor.w	r3, r3, #1
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d008      	beq.n	8001ff4 <_ZN14GenericChannel13getSensorDataEPhRh+0x104>
		flash.addLog(data, n);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	461a      	mov	r2, r3
 8001fee:	68b9      	ldr	r1, [r7, #8]
 8001ff0:	f001 f99f 	bl	8003332 <_ZN12W25Qxx_Flash6addLogEPhh>
	return 0;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3728      	adds	r7, #40	; 0x28
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <_ZN14GenericChannel17getFlashClearInfoEPhRh>:

int GenericChannel::getFlashClearInfo(uint8_t *data, uint8_t &n)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b086      	sub	sp, #24
 8002002:	af00      	add	r7, sp, #0
 8002004:	60f8      	str	r0, [r7, #12]
 8002006:	60b9      	str	r1, [r7, #8]
 8002008:	607a      	str	r2, [r7, #4]

	FlashStatusMsg_t *info = (FlashStatusMsg_t*) data;
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	617b      	str	r3, [r7, #20]

	FlashState flashState = flash.getState();
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002014:	4618      	mov	r0, r3
 8002016:	f001 f908 	bl	800322a <_ZN12W25Qxx_Flash8getStateEv>
 800201a:	6138      	str	r0, [r7, #16]
	if (flashState == FlashState::IDLE || flashState == FlashState::CLEARING)
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d002      	beq.n	8002028 <_ZN14GenericChannel17getFlashClearInfoEPhRh+0x2a>
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d103      	bne.n	8002030 <_ZN14GenericChannel17getFlashClearInfoEPhRh+0x32>
	{ //TODO actually check if clearing has initiated
		info->status = INITIATED;
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	2200      	movs	r2, #0
 800202c:	701a      	strb	r2, [r3, #0]
 800202e:	e009      	b.n	8002044 <_ZN14GenericChannel17getFlashClearInfoEPhRh+0x46>
	}
	else if (flashState == FlashState::READY)
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	2b02      	cmp	r3, #2
 8002034:	d103      	bne.n	800203e <_ZN14GenericChannel17getFlashClearInfoEPhRh+0x40>
	{
		info->status = COMPLETED;
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	2201      	movs	r2, #1
 800203a:	701a      	strb	r2, [r3, #0]
 800203c:	e002      	b.n	8002044 <_ZN14GenericChannel17getFlashClearInfoEPhRh+0x46>
	}
	else
	{
		info->status = INITIATED;
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	2200      	movs	r2, #0
 8002042:	701a      	strb	r2, [r3, #0]
	}

	n = sizeof(FlashStatusMsg_t);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	701a      	strb	r2, [r3, #0]
	return 0;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <_ZN14GenericChannel11getNodeInfoEPhRh>:

int GenericChannel::getNodeInfo(uint8_t *data, uint8_t &n)
{
 8002054:	b590      	push	{r4, r7, lr}
 8002056:	b08d      	sub	sp, #52	; 0x34
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
	NodeInfoMsg_t *info = (NodeInfoMsg_t*) data;
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	623b      	str	r3, [r7, #32]

	info->firmware_version = firmwareVersion;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800206a:	6a3b      	ldr	r3, [r7, #32]
 800206c:	601a      	str	r2, [r3, #0]

	info->channel_mask = 0x00000000;
 800206e:	6a3b      	ldr	r3, [r7, #32]
 8002070:	2200      	movs	r2, #0
 8002072:	711a      	strb	r2, [r3, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	715a      	strb	r2, [r3, #5]
 8002078:	2200      	movs	r2, #0
 800207a:	719a      	strb	r2, [r3, #6]
 800207c:	2200      	movs	r2, #0
 800207e:	71da      	strb	r2, [r3, #7]
	uint32_t length = 0;
 8002080:	2300      	movs	r3, #0
 8002082:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t i = 0;
 8002084:	2300      	movs	r3, #0
 8002086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	for (AbstractChannel *channel : channels)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	3310      	adds	r3, #16
 800208e:	61fb      	str	r3, [r7, #28]
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	627b      	str	r3, [r7, #36]	; 0x24
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	3380      	adds	r3, #128	; 0x80
 8002098:	61bb      	str	r3, [r7, #24]
 800209a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d02a      	beq.n	80020f8 <_ZN14GenericChannel11getNodeInfoEPhRh+0xa4>
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	617b      	str	r3, [r7, #20]
	{
		if (channel == nullptr)
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d01f      	beq.n	80020ee <_ZN14GenericChannel11getNodeInfoEPhRh+0x9a>
			continue;

		info->channel_type[i] = channel->getChannelType();
 80020ae:	f897 402b 	ldrb.w	r4, [r7, #43]	; 0x2b
 80020b2:	6978      	ldr	r0, [r7, #20]
 80020b4:	f7ff f9f6 	bl	80014a4 <_ZNK15AbstractChannel14getChannelTypeEv>
 80020b8:	4603      	mov	r3, r0
 80020ba:	461a      	mov	r2, r3
 80020bc:	6a3b      	ldr	r3, [r7, #32]
 80020be:	4423      	add	r3, r4
 80020c0:	721a      	strb	r2, [r3, #8]
		info->channel_mask |= 1 << channel->getChannelId();
 80020c2:	6978      	ldr	r0, [r7, #20]
 80020c4:	f7ff fa06 	bl	80014d4 <_ZNK15AbstractChannel12getChannelIdEv>
 80020c8:	4603      	mov	r3, r0
 80020ca:	461a      	mov	r2, r3
 80020cc:	2301      	movs	r3, #1
 80020ce:	fa03 f202 	lsl.w	r2, r3, r2
 80020d2:	6a3b      	ldr	r3, [r7, #32]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	431a      	orrs	r2, r3
 80020d8:	6a3b      	ldr	r3, [r7, #32]
 80020da:	605a      	str	r2, [r3, #4]
		length++;
 80020dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020de:	3301      	adds	r3, #1
 80020e0:	62fb      	str	r3, [r7, #44]	; 0x2c
		i++;
 80020e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80020e6:	3301      	adds	r3, #1
 80020e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80020ec:	e000      	b.n	80020f0 <_ZN14GenericChannel11getNodeInfoEPhRh+0x9c>
			continue;
 80020ee:	bf00      	nop
	for (AbstractChannel *channel : channels)
 80020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f2:	3304      	adds	r3, #4
 80020f4:	627b      	str	r3, [r7, #36]	; 0x24
 80020f6:	e7d0      	b.n	800209a <_ZN14GenericChannel11getNodeInfoEPhRh+0x46>
	}
	n = length + 2 * sizeof(uint32_t);
 80020f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	3308      	adds	r3, #8
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	701a      	strb	r2, [r3, #0]
	return 0;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3734      	adds	r7, #52	; 0x34
 800210a:	46bd      	mov	sp, r7
 800210c:	bd90      	pop	{r4, r7, pc}

0800210e <_ZN14GenericChannel15registerChannelEP15AbstractChannel>:

void GenericChannel::registerChannel(AbstractChannel *channel)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b082      	sub	sp, #8
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
 8002116:	6039      	str	r1, [r7, #0]
	if (channel->getChannelId() < MAX_CHANNELS)
 8002118:	6838      	ldr	r0, [r7, #0]
 800211a:	f7ff f9db 	bl	80014d4 <_ZNK15AbstractChannel12getChannelIdEv>
 800211e:	4603      	mov	r3, r0
 8002120:	2b1f      	cmp	r3, #31
 8002122:	bf94      	ite	ls
 8002124:	2301      	movls	r3, #1
 8002126:	2300      	movhi	r3, #0
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d009      	beq.n	8002142 <_ZN14GenericChannel15registerChannelEP15AbstractChannel+0x34>
		channels[channel->getChannelId()] = channel;
 800212e:	6838      	ldr	r0, [r7, #0]
 8002130:	f7ff f9d0 	bl	80014d4 <_ZNK15AbstractChannel12getChannelIdEv>
 8002134:	4603      	mov	r3, r0
 8002136:	461a      	mov	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3204      	adds	r2, #4
 800213c:	6839      	ldr	r1, [r7, #0]
 800213e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <_ZN14GenericChannel14registerModuleEP14AbstractModule>:
		registerChannel(channels[i]);
	}
}

void GenericChannel::registerModule(AbstractModule *module)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	6039      	str	r1, [r7, #0]
	if (moduleIndex < MAX_MODULES)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 800215a:	2b07      	cmp	r3, #7
 800215c:	d810      	bhi.n	8002180 <_ZN14GenericChannel14registerModuleEP14AbstractModule+0x36>
	{
		modules[moduleIndex] = module;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 8002164:	461a      	mov	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	3224      	adds	r2, #36	; 0x24
 800216a:	6839      	ldr	r1, [r7, #0]
 800216c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		moduleIndex++;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 8002176:	3301      	adds	r3, #1
 8002178:	b2da      	uxtb	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
	}
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <_ZN14GenericChannel13setLoraActiveEb>:
	{
		printLog();
	}
}

void GenericChannel::setLoraActive(bool enable) {
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	4603      	mov	r3, r0
 8002194:	71fb      	strb	r3, [r7, #7]
	loraActive = enable;
 8002196:	4a04      	ldr	r2, [pc, #16]	; (80021a8 <_ZN14GenericChannel13setLoraActiveEb+0x1c>)
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	7013      	strb	r3, [r2, #0]
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	2000081c 	.word	0x2000081c

080021ac <_ZN14GenericChannel8receptorEmPhm>:

	(void) STRHAL_CAN_Send(STRHAL_FDCAN1, msgId.uint32, msgData.uint8, CAN_MSG_LENGTH(ret_n));
}

void GenericChannel::receptor(uint32_t id, uint8_t *data, uint32_t n)
{
 80021ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ae:	b09b      	sub	sp, #108	; 0x6c
 80021b0:	af02      	add	r7, sp, #8
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
	Can_MessageId_t msgId =
 80021b8:	2300      	movs	r3, #0
 80021ba:	65bb      	str	r3, [r7, #88]	; 0x58
	{ 0 };
	Can_MessageData_t msgData =
 80021bc:	f107 0314 	add.w	r3, r7, #20
 80021c0:	2242      	movs	r2, #66	; 0x42
 80021c2:	2100      	movs	r1, #0
 80021c4:	4618      	mov	r0, r3
 80021c6:	f007 fb63 	bl	8009890 <memset>
	{ 0 };

	msgId.uint32 = id;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	65bb      	str	r3, [r7, #88]	; 0x58
	memcpy(msgData.uint8, data, 64); //TODO only copy n bytes
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	461c      	mov	r4, r3
 80021d2:	f107 0614 	add.w	r6, r7, #20
 80021d6:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 80021da:	4635      	mov	r5, r6
 80021dc:	4623      	mov	r3, r4
 80021de:	6818      	ldr	r0, [r3, #0]
 80021e0:	6859      	ldr	r1, [r3, #4]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021e8:	3410      	adds	r4, #16
 80021ea:	3610      	adds	r6, #16
 80021ec:	4564      	cmp	r4, ip
 80021ee:	d1f4      	bne.n	80021da <_ZN14GenericChannel8receptorEmPhm+0x2e>
	uint8_t commandId = msgData.bit.cmd_id;
 80021f0:	7d7b      	ldrb	r3, [r7, #21]
 80021f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t channelId = msgData.bit.info.channel_id;
 80021f6:	7d3b      	ldrb	r3, [r7, #20]
 80021f8:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ret_n = 0;
 8002202:	2300      	movs	r3, #0
 8002204:	74fb      	strb	r3, [r7, #19]

	if (channelId == GENERIC_CHANNEL_ID)
 8002206:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800220a:	2b3f      	cmp	r3, #63	; 0x3f
 800220c:	d118      	bne.n	8002240 <_ZN14GenericChannel8receptorEmPhm+0x94>
	{
		if (gcPtr->processMessage(commandId, msgData.bit.data.uint8, ret_n) != 0)
 800220e:	4b32      	ldr	r3, [pc, #200]	; (80022d8 <_ZN14GenericChannel8receptorEmPhm+0x12c>)
 8002210:	6818      	ldr	r0, [r3, #0]
 8002212:	4b31      	ldr	r3, [pc, #196]	; (80022d8 <_ZN14GenericChannel8receptorEmPhm+0x12c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	3314      	adds	r3, #20
 800221a:	681c      	ldr	r4, [r3, #0]
 800221c:	f107 0513 	add.w	r5, r7, #19
 8002220:	f107 0314 	add.w	r3, r7, #20
 8002224:	1c9a      	adds	r2, r3, #2
 8002226:	f897 105f 	ldrb.w	r1, [r7, #95]	; 0x5f
 800222a:	462b      	mov	r3, r5
 800222c:	47a0      	blx	r4
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	bf14      	ite	ne
 8002234:	2301      	movne	r3, #1
 8002236:	2300      	moveq	r3, #0
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d017      	beq.n	800226e <_ZN14GenericChannel8receptorEmPhm+0xc2>
			return;
 800223e:	e047      	b.n	80022d0 <_ZN14GenericChannel8receptorEmPhm+0x124>
	}
	else
	{
		if (gcPtr->processMessage(commandId, msgData.bit.data.uint8, ret_n, channelId) != 0)
 8002240:	4b25      	ldr	r3, [pc, #148]	; (80022d8 <_ZN14GenericChannel8receptorEmPhm+0x12c>)
 8002242:	6818      	ldr	r0, [r3, #0]
 8002244:	f107 0413 	add.w	r4, r7, #19
 8002248:	f107 0314 	add.w	r3, r7, #20
 800224c:	1c9a      	adds	r2, r3, #2
 800224e:	f897 105f 	ldrb.w	r1, [r7, #95]	; 0x5f
 8002252:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	4623      	mov	r3, r4
 800225a:	f7ff fd87 	bl	8001d6c <_ZN14GenericChannel14processMessageEhPhRhh>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	bf14      	ite	ne
 8002264:	2301      	movne	r3, #1
 8002266:	2300      	moveq	r3, #0
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d12f      	bne.n	80022ce <_ZN14GenericChannel8receptorEmPhm+0x122>
			return;
	}

	msgId.info.direction = NODE2MASTER_DIRECTION;
 800226e:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8002272:	f043 0301 	orr.w	r3, r3, #1
 8002276:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	msgId.info.node_id = gcPtr->getNodeId();
 800227a:	4b17      	ldr	r3, [pc, #92]	; (80022d8 <_ZN14GenericChannel8receptorEmPhm+0x12c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff fc1c 	bl	8001abc <_ZNK14GenericChannel9getNodeIdEv>
 8002284:	4603      	mov	r3, r0
 8002286:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800228a:	b2da      	uxtb	r2, r3
 800228c:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8002290:	f362 0346 	bfi	r3, r2, #1, #6
 8002294:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	msgId.info.special_cmd = STANDARD_SPECIAL_CMD;
 8002298:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800229c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80022a0:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	msgId.info.priority = STANDARD_PRIORITY;
 80022a4:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 80022a8:	2202      	movs	r2, #2
 80022aa:	f362 0342 	bfi	r3, r2, #1, #2
 80022ae:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	msgData.bit.cmd_id = commandId + 1;
 80022b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80022b6:	3301      	adds	r3, #1
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	757b      	strb	r3, [r7, #21]
	memcpy(&msgBuf[2], msgData.uint8, CAN_MSG_LENGTH(ret_n));
	msgBuf[CAN_MSG_LENGTH(ret_n) + 2] = 0x0A;
	STRHAL_UART_Debug_Write_DMA((char *) msgBuf, CAN_MSG_LENGTH(ret_n) + 3);
#endif

	(void) STRHAL_CAN_Send(STRHAL_FDCAN1, msgId.uint32, msgData.uint8, CAN_MSG_LENGTH(ret_n));
 80022bc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80022be:	7cfb      	ldrb	r3, [r7, #19]
 80022c0:	3302      	adds	r3, #2
 80022c2:	f107 0214 	add.w	r2, r7, #20
 80022c6:	2000      	movs	r0, #0
 80022c8:	f004 fe6c 	bl	8006fa4 <STRHAL_CAN_Send>
 80022cc:	e000      	b.n	80022d0 <_ZN14GenericChannel8receptorEmPhm+0x124>
			return;
 80022ce:	bf00      	nop
}
 80022d0:	3764      	adds	r7, #100	; 0x64
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000818 	.word	0x20000818

080022dc <_ZN14GenericChannel12heartbeatCanEv>:

void GenericChannel::heartbeatCan()
{
 80022dc:	b590      	push	{r4, r7, lr}
 80022de:	b095      	sub	sp, #84	; 0x54
 80022e0:	af00      	add	r7, sp, #0
	Can_MessageId_t msgId =
 80022e2:	2300      	movs	r3, #0
 80022e4:	64fb      	str	r3, [r7, #76]	; 0x4c
	{ 0 };
	msgId.info.special_cmd = STANDARD_SPECIAL_CMD;
 80022e6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80022ea:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80022ee:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	msgId.info.direction = NODE2MASTER_DIRECTION;
 80022f2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80022f6:	f043 0301 	orr.w	r3, r3, #1
 80022fa:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	msgId.info.node_id = gcPtr->getNodeId();
 80022fe:	4b2d      	ldr	r3, [pc, #180]	; (80023b4 <_ZN14GenericChannel12heartbeatCanEv+0xd8>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff fbda 	bl	8001abc <_ZNK14GenericChannel9getNodeIdEv>
 8002308:	4603      	mov	r3, r0
 800230a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800230e:	b2da      	uxtb	r2, r3
 8002310:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002314:	f362 0346 	bfi	r3, r2, #1, #6
 8002318:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	msgId.info.priority = STANDARD_PRIORITY;
 800231c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002320:	2202      	movs	r2, #2
 8002322:	f362 0342 	bfi	r3, r2, #1, #2
 8002326:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	Can_MessageData_t msgData =
 800232a:	f107 0308 	add.w	r3, r7, #8
 800232e:	2242      	movs	r2, #66	; 0x42
 8002330:	2100      	movs	r1, #0
 8002332:	4618      	mov	r0, r3
 8002334:	f007 faac 	bl	8009890 <memset>
	{ 0 };
	msgData.bit.cmd_id = GENERIC_RES_DATA;
 8002338:	230b      	movs	r3, #11
 800233a:	727b      	strb	r3, [r7, #9]
	msgData.bit.info.channel_id = GENERIC_CHANNEL_ID;
 800233c:	7a3b      	ldrb	r3, [r7, #8]
 800233e:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8002342:	723b      	strb	r3, [r7, #8]
	msgData.bit.info.buffer = DIRECT_BUFFER;
 8002344:	7a3b      	ldrb	r3, [r7, #8]
 8002346:	f36f 1387 	bfc	r3, #6, #2
 800234a:	723b      	strb	r3, [r7, #8]

	uint8_t n = 0;
 800234c:	2300      	movs	r3, #0
 800234e:	71fb      	strb	r3, [r7, #7]
	if (gcPtr->getSensorData(&msgData.bit.data.uint8[0], n) != 0)
 8002350:	4b18      	ldr	r3, [pc, #96]	; (80023b4 <_ZN14GenericChannel12heartbeatCanEv+0xd8>)
 8002352:	6818      	ldr	r0, [r3, #0]
 8002354:	4b17      	ldr	r3, [pc, #92]	; (80023b4 <_ZN14GenericChannel12heartbeatCanEv+0xd8>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	3318      	adds	r3, #24
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	1dfc      	adds	r4, r7, #7
 8002360:	f107 0208 	add.w	r2, r7, #8
 8002364:	1c91      	adds	r1, r2, #2
 8002366:	4622      	mov	r2, r4
 8002368:	4798      	blx	r3
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	bf14      	ite	ne
 8002370:	2301      	movne	r3, #1
 8002372:	2300      	moveq	r3, #0
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d118      	bne.n	80023ac <_ZN14GenericChannel12heartbeatCanEv+0xd0>
	{ // Sensor Data collection failed, or Refresh Divider not yet met
		return;
	}

	if (loraActive)
 800237a:	4b0f      	ldr	r3, [pc, #60]	; (80023b8 <_ZN14GenericChannel12heartbeatCanEv+0xdc>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00c      	beq.n	800239c <_ZN14GenericChannel12heartbeatCanEv+0xc0>
	{
		Radio::msgArray[Radio::RCU_START_ADDR] = 1;
 8002382:	4b0e      	ldr	r3, [pc, #56]	; (80023bc <_ZN14GenericChannel12heartbeatCanEv+0xe0>)
 8002384:	2201      	movs	r2, #1
 8002386:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		memcpy(&Radio::msgArray[Radio::RCU_START_ADDR + 1], msgData.bit.data.uint8, n);
 800238a:	79fb      	ldrb	r3, [r7, #7]
 800238c:	461a      	mov	r2, r3
 800238e:	f107 0308 	add.w	r3, r7, #8
 8002392:	3302      	adds	r3, #2
 8002394:	4619      	mov	r1, r3
 8002396:	480a      	ldr	r0, [pc, #40]	; (80023c0 <_ZN14GenericChannel12heartbeatCanEv+0xe4>)
 8002398:	f007 fa6c 	bl	8009874 <memcpy>
	memcpy(&msgBuf[2], msgData.uint8, CAN_MSG_LENGTH(n));
	msgBuf[CAN_MSG_LENGTH(n) + 2] = 0x0A;
	STRHAL_UART_Debug_Write_DMA((char *) msgBuf, CAN_MSG_LENGTH(n) + 3);
#endif

	(void) STRHAL_CAN_Send(STRHAL_FDCAN1, msgId.uint32, msgData.uint8, n);
 800239c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	f107 0208 	add.w	r2, r7, #8
 80023a4:	2000      	movs	r0, #0
 80023a6:	f004 fdfd 	bl	8006fa4 <STRHAL_CAN_Send>
 80023aa:	e000      	b.n	80023ae <_ZN14GenericChannel12heartbeatCanEv+0xd2>
		return;
 80023ac:	bf00      	nop
}
 80023ae:	3754      	adds	r7, #84	; 0x54
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd90      	pop	{r4, r7, pc}
 80023b4:	20000818 	.word	0x20000818
 80023b8:	2000081c 	.word	0x2000081c
 80023bc:	200007b8 	.word	0x200007b8
 80023c0:	200007f0 	.word	0x200007f0

080023c4 <_ZN12ServoChannelC1EhhRK20STRHAL_TIM_TimerId_tRK22STRHAL_TIM_ChannelId_tRK20STRHAL_ADC_Channel_tS8_RK13STRHAL_GPIO_tm>:

constexpr ServoRefPos ServoChannel::com0Ref;
constexpr ServoRefPos ServoChannel::pwm0Ref;
constexpr ServoRefPos ServoChannel::adc0Ref;

ServoChannel::ServoChannel(uint8_t id, uint8_t servoId, const STRHAL_TIM_TimerId_t &pwmTimer, const STRHAL_TIM_ChannelId_t &control, const STRHAL_ADC_Channel_t &feedbackChannel, const STRHAL_ADC_Channel_t &currentChannel, const STRHAL_GPIO_t &led, uint32_t refreshDivider) :
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	607b      	str	r3, [r7, #4]
 80023ce:	460b      	mov	r3, r1
 80023d0:	72fb      	strb	r3, [r7, #11]
 80023d2:	4613      	mov	r3, r2
 80023d4:	72bb      	strb	r3, [r7, #10]
		AbstractChannel(CHANNEL_TYPE_SERVO, id, refreshDivider), servoId(servoId), pwmTimer(pwmTimer), ctrlChannelId(control), feedbackChannel(feedbackChannel), currentChannel(currentChannel), led(led), flash(W25Qxx_Flash::instance()), servoState(ServoState::IDLE), reqCalib(false)
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	7afa      	ldrb	r2, [r7, #11]
 80023da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023dc:	2108      	movs	r1, #8
 80023de:	f7ff f83d 	bl	800145c <_ZN15AbstractChannelC1E12CHANNEL_TYPEhm>
 80023e2:	4a35      	ldr	r2, [pc, #212]	; (80024b8 <_ZN12ServoChannelC1EhhRK20STRHAL_TIM_TimerId_tRK22STRHAL_TIM_ChannelId_tRK20STRHAL_ADC_Channel_tS8_RK13STRHAL_GPIO_tm+0xf4>)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	7aba      	ldrb	r2, [r7, #10]
 80023ec:	73da      	strb	r2, [r3, #15]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	781a      	ldrb	r2, [r3, #0]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	741a      	strb	r2, [r3, #16]
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	781a      	ldrb	r2, [r3, #0]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	745a      	strb	r2, [r3, #17]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	615a      	str	r2, [r3, #20]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	619a      	str	r2, [r3, #24]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	69fa      	ldr	r2, [r7, #28]
 800240e:	331c      	adds	r3, #28
 8002410:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002414:	e883 0003 	stmia.w	r3, {r0, r1}
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6a3a      	ldr	r2, [r7, #32]
 800241c:	3324      	adds	r3, #36	; 0x24
 800241e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002422:	e883 0003 	stmia.w	r3, {r0, r1}
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800242a:	332c      	adds	r3, #44	; 0x2c
 800242c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002430:	e883 0003 	stmia.w	r3, {r0, r1}
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	869a      	strh	r2, [r3, #52]	; 0x34
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	871a      	strh	r2, [r3, #56]	; 0x38
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	875a      	strh	r2, [r3, #58]	; 0x3a
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	879a      	strh	r2, [r3, #60]	; 0x3c
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002458:	87da      	strh	r2, [r3, #62]	; 0x3e
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	4a17      	ldr	r2, [pc, #92]	; (80024bc <_ZN12ServoChannelC1EhhRK20STRHAL_TIM_TimerId_tRK22STRHAL_TIM_ChannelId_tRK20STRHAL_ADC_Channel_tS8_RK13STRHAL_GPIO_tm+0xf8>)
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	641a      	str	r2, [r3, #64]	; 0x40
 8002462:	f000 fcf7 	bl	8002e54 <_ZN12W25Qxx_Flash8instanceEv>
 8002466:	4602      	mov	r2, r0
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	645a      	str	r2, [r3, #68]	; 0x44
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	649a      	str	r2, [r3, #72]	; 0x48
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8002492:	68f9      	ldr	r1, [r7, #12]
 8002494:	f04f 0200 	mov.w	r2, #0
 8002498:	f04f 0300 	mov.w	r3, #0
 800249c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 80024a0:	68f9      	ldr	r1, [r7, #12]
 80024a2:	f04f 0200 	mov.w	r2, #0
 80024a6:	f04f 0300 	mov.w	r3, #0
 80024aa:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
{
}
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	4618      	mov	r0, r3
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	08009ca0 	.word	0x08009ca0
 80024bc:	08009c94 	.word	0x08009c94

080024c0 <_ZN12ServoChannel4initEv>:

int ServoChannel::init()
{
 80024c0:	b590      	push	{r4, r7, lr}
 80024c2:	b089      	sub	sp, #36	; 0x24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
	STRHAL_GPIO_SingleInit(&led, STRHAL_GPIO_TYPE_OPP);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	332c      	adds	r3, #44	; 0x2c
 80024cc:	2100      	movs	r1, #0
 80024ce:	4618      	mov	r0, r3
 80024d0:	f005 f880 	bl	80075d4 <STRHAL_GPIO_SingleInit>

	if (STRHAL_TIM_PWM_Init(pwmTimer, PWM_PSC, PWM_RES) < 0)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	7c1b      	ldrb	r3, [r3, #16]
 80024d8:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 80024dc:	2158      	movs	r1, #88	; 0x58
 80024de:	4618      	mov	r0, r3
 80024e0:	f006 f8a0 	bl	8008624 <STRHAL_TIM_PWM_Init>
 80024e4:	4603      	mov	r3, r0
 80024e6:	0fdb      	lsrs	r3, r3, #31
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d002      	beq.n	80024f4 <_ZN12ServoChannel4initEv+0x34>
		return -1;
 80024ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024f2:	e0a7      	b.n	8002644 <_ZN12ServoChannel4initEv+0x184>

	if (STRHAL_TIM_PWM_AddChannel(&pwmChannel, ctrlChannelId, STRHAL_TIM_PWM_CHANNELTYPE_SO) < 0)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f103 0012 	add.w	r0, r3, #18
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	7c5b      	ldrb	r3, [r3, #17]
 80024fe:	2200      	movs	r2, #0
 8002500:	4619      	mov	r1, r3
 8002502:	f006 f921 	bl	8008748 <STRHAL_TIM_PWM_AddChannel>
 8002506:	4603      	mov	r3, r0
 8002508:	0fdb      	lsrs	r3, r3, #31
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b00      	cmp	r3, #0
 800250e:	d002      	beq.n	8002516 <_ZN12ServoChannel4initEv+0x56>
		return -1;
 8002510:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002514:	e096      	b.n	8002644 <_ZN12ServoChannel4initEv+0x184>


	feedbackMeasurement = STRHAL_ADC_SubscribeChannel(&feedbackChannel, STRHAL_ADC_INTYPE_REGULAR);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	331c      	adds	r3, #28
 800251a:	2100      	movs	r1, #0
 800251c:	4618      	mov	r0, r3
 800251e:	f003 fff9 	bl	8006514 <STRHAL_ADC_SubscribeChannel>
 8002522:	4602      	mov	r2, r0
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	615a      	str	r2, [r3, #20]
	if(currentChannel.ADCx)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252c:	2b00      	cmp	r3, #0
 800252e:	d008      	beq.n	8002542 <_ZN12ServoChannel4initEv+0x82>
	currentMeasurement = STRHAL_ADC_SubscribeChannel(&currentChannel, STRHAL_ADC_INTYPE_REGULAR);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3324      	adds	r3, #36	; 0x24
 8002534:	2100      	movs	r1, #0
 8002536:	4618      	mov	r0, r3
 8002538:	f003 ffec 	bl	8006514 <STRHAL_ADC_SubscribeChannel>
 800253c:	4602      	mov	r2, r0
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	619a      	str	r2, [r3, #24]

	// Load and assign config
	if (!flash.readConfig())
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002546:	4618      	mov	r0, r3
 8002548:	f001 f950 	bl	80037ec <_ZN12W25Qxx_Flash10readConfigEv>
 800254c:	4603      	mov	r3, r0
 800254e:	f083 0301 	eor.w	r3, r3, #1
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b00      	cmp	r3, #0
 8002556:	d002      	beq.n	800255e <_ZN12ServoChannel4initEv+0x9e>
		return -1;
 8002558:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800255c:	e072      	b.n	8002644 <_ZN12ServoChannel4initEv+0x184>

	// Read config values starting from the servos config register start address
	uint32_t configAddrStart = SERVOCONFIG_OFFSET + servoId * SERVOCONFIG_N_EACH;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	7bdb      	ldrb	r3, [r3, #15]
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	61fb      	str	r3, [r7, #28]
	adcRef.start = flash.readConfigReg(configAddrStart);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256a:	69f9      	ldr	r1, [r7, #28]
 800256c:	4618      	mov	r0, r3
 800256e:	f001 f955 	bl	800381c <_ZN12W25Qxx_Flash13readConfigRegEm>
 8002572:	4603      	mov	r3, r0
 8002574:	b29a      	uxth	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	879a      	strh	r2, [r3, #60]	; 0x3c
	adcRef.end = flash.readConfigReg(configAddrStart + 1);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	3301      	adds	r3, #1
 8002582:	4619      	mov	r1, r3
 8002584:	4610      	mov	r0, r2
 8002586:	f001 f949 	bl	800381c <_ZN12W25Qxx_Flash13readConfigRegEm>
 800258a:	4603      	mov	r3, r0
 800258c:	b29a      	uxth	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	87da      	strh	r2, [r3, #62]	; 0x3e
	pwmRef.start = flash.readConfigReg(configAddrStart + 2);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	3302      	adds	r3, #2
 800259a:	4619      	mov	r1, r3
 800259c:	4610      	mov	r0, r2
 800259e:	f001 f93d 	bl	800381c <_ZN12W25Qxx_Flash13readConfigRegEm>
 80025a2:	4603      	mov	r3, r0
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pwmRef.end = flash.readConfigReg(configAddrStart + 3);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	3303      	adds	r3, #3
 80025b4:	4619      	mov	r1, r3
 80025b6:	4610      	mov	r0, r2
 80025b8:	f001 f930 	bl	800381c <_ZN12W25Qxx_Flash13readConfigRegEm>
 80025bc:	4603      	mov	r3, r0
 80025be:	b29a      	uxth	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	if (pwmRef.start == 0 && pwmRef.end == 0) // flash never written -> init default
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d12e      	bne.n	800262e <_ZN12ServoChannel4initEv+0x16e>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d129      	bne.n	800262e <_ZN12ServoChannel4initEv+0x16e>
	{
		uint32_t vals[4] =
 80025da:	4b1c      	ldr	r3, [pc, #112]	; (800264c <_ZN12ServoChannel4initEv+0x18c>)
 80025dc:	f107 040c 	add.w	r4, r7, #12
 80025e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		{ (uint32_t) adc0Ref.start, (uint32_t) adc0Ref.end, (uint32_t) pwm0Ref.start, (uint32_t) pwm0Ref.end };
		flash.writeConfigRegsFromAddr(SERVOCONFIG_OFFSET + servoId * SERVOCONFIG_N_EACH, vals, 4);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	7bdb      	ldrb	r3, [r3, #15]
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4619      	mov	r1, r3
 80025f2:	f107 020c 	add.w	r2, r7, #12
 80025f6:	2304      	movs	r3, #4
 80025f8:	f001 f8b0 	bl	800375c <_ZN12W25Qxx_Flash23writeConfigRegsFromAddrEmPmt>
		adcRef = adc0Ref;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	879a      	strh	r2, [r3, #60]	; 0x3c
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002608:	87da      	strh	r2, [r3, #62]	; 0x3e
		pwmRef = pwm0Ref;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a10      	ldr	r2, [pc, #64]	; (8002650 <_ZN12ServoChannel4initEv+0x190>)
 800260e:	6812      	ldr	r2, [r2, #0]
 8002610:	641a      	str	r2, [r3, #64]	; 0x40

		if(!flash.writeTempConfig())
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002616:	4618      	mov	r0, r3
 8002618:	f001 f83e 	bl	8003698 <_ZN12W25Qxx_Flash15writeTempConfigEv>
 800261c:	4603      	mov	r3, r0
 800261e:	f083 0301 	eor.w	r3, r3, #1
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b00      	cmp	r3, #0
 8002626:	d002      	beq.n	800262e <_ZN12ServoChannel4initEv+0x16e>
			return -1;;
 8002628:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800262c:	e00a      	b.n	8002644 <_ZN12ServoChannel4initEv+0x184>
	}

	if (feedbackMeasurement == nullptr)// || currentMeasurement == nullptr)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d102      	bne.n	800263c <_ZN12ServoChannel4initEv+0x17c>
		return -1;
 8002636:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800263a:	e003      	b.n	8002644 <_ZN12ServoChannel4initEv+0x184>

	servoState = ServoState::READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	649a      	str	r2, [r3, #72]	; 0x48
	return 0;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3724      	adds	r7, #36	; 0x24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd90      	pop	{r4, r7, pc}
 800264c:	08009b00 	.word	0x08009b00
 8002650:	08009c94 	.word	0x08009c94

08002654 <_ZN12ServoChannel4execEv>:

int ServoChannel::exec()
{
 8002654:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002658:	b08f      	sub	sp, #60	; 0x3c
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
	uint64_t time = STRHAL_Systick_GetTick();
 800265e:	f005 fd4d 	bl	80080fc <STRHAL_Systick_GetTick>
 8002662:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
	if ((time - timeLastSample) < EXEC_SAMPLE_TICKS)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800266c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002670:	ebb0 0802 	subs.w	r8, r0, r2
 8002674:	eb61 0903 	sbc.w	r9, r1, r3
 8002678:	f1b9 0f00 	cmp.w	r9, #0
 800267c:	bf08      	it	eq
 800267e:	f1b8 0f05 	cmpeq.w	r8, #5
 8002682:	d201      	bcs.n	8002688 <_ZN12ServoChannel4execEv+0x34>
		return 0;
 8002684:	2300      	movs	r3, #0
 8002686:	e151      	b.n	800292c <_ZN12ServoChannel4execEv+0x2d8>

	timeLastSample = time;
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800268e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

	feedbackPositionLast = feedbackPosition;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	feedbackPosition = tPosToCanonic(*feedbackMeasurement, adcRef);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	333c      	adds	r3, #60	; 0x3c
 80026a8:	4619      	mov	r1, r3
 80026aa:	4610      	mov	r0, r2
 80026ac:	f000 fac1 	bl	8002c32 <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos>
 80026b0:	4603      	mov	r3, r0
 80026b2:	461a      	mov	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	86da      	strh	r2, [r3, #54]	; 0x36
	if (step != 0)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d033      	beq.n	800272a <_ZN12ServoChannel4execEv+0xd6>
	{
		if (finalPosition != targetPosition)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d02a      	beq.n	8002724 <_ZN12ServoChannel4execEv+0xd0>
		{
			targetPosition += step;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 80026d8:	b29b      	uxth	r3, r3
 80026da:	4413      	add	r3, r2
 80026dc:	b29a      	uxth	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	869a      	strh	r2, [r3, #52]	; 0x34
			if (step > 0)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	dd0d      	ble.n	8002708 <_ZN12ServoChannel4execEv+0xb4>
				targetPosition = (targetPosition > finalPosition) ? finalPosition : targetPosition;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d902      	bls.n	80026fe <_ZN12ServoChannel4execEv+0xaa>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80026fc:	e001      	b.n	8002702 <_ZN12ServoChannel4execEv+0xae>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	8693      	strh	r3, [r2, #52]	; 0x34
 8002706:	e010      	b.n	800272a <_ZN12ServoChannel4execEv+0xd6>
			else
				targetPosition = (targetPosition < finalPosition) ? finalPosition : targetPosition;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002710:	429a      	cmp	r2, r3
 8002712:	d202      	bcs.n	800271a <_ZN12ServoChannel4execEv+0xc6>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002718:	e001      	b.n	800271e <_ZN12ServoChannel4execEv+0xca>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	8693      	strh	r3, [r2, #52]	; 0x34
 8002722:	e002      	b.n	800272a <_ZN12ServoChannel4execEv+0xd6>
		}
		else
		{
			step = 0;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	875a      	strh	r2, [r3, #58]	; 0x3a
		}
	}
	if (targetPosition != targetPositionLast)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8002734:	429a      	cmp	r2, r3
 8002736:	d034      	beq.n	80027a2 <_ZN12ServoChannel4execEv+0x14e>
	{

		STRHAL_TIM_PWM_SetDuty(&pwmChannel, tPosFromCanonic(targetPosition, pwmRef));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f103 0612 	add.w	r6, r3, #18
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3340      	adds	r3, #64	; 0x40
 8002746:	4619      	mov	r1, r3
 8002748:	4610      	mov	r0, r2
 800274a:	f000 fad4 	bl	8002cf6 <_ZN12ServoChannel15tPosFromCanonicEtRK11ServoRefPos>
 800274e:	4603      	mov	r3, r0
 8002750:	4619      	mov	r1, r3
 8002752:	4630      	mov	r0, r6
 8002754:	f006 f86e 	bl	8008834 <STRHAL_TIM_PWM_SetDuty>
		STRHAL_TIM_PWM_Enable(&pwmChannel, true);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3312      	adds	r3, #18
 800275c:	2101      	movs	r1, #1
 800275e:	4618      	mov	r0, r3
 8002760:	f006 f894 	bl	800888c <STRHAL_TIM_PWM_Enable>
		STRHAL_GPIO_Write(&led, STRHAL_GPIO_VALUE_H);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	332c      	adds	r3, #44	; 0x2c
 8002768:	2101      	movs	r1, #1
 800276a:	4618      	mov	r0, r3
 800276c:	f004 ff8e 	bl	800768c <STRHAL_GPIO_Write>
		targetPositionLast = targetPosition;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
		targetHitCount = 0;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		timeLastCommand = time;
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002788:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		servoState = ServoState::MOVIN;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2203      	movs	r2, #3
 8002790:	649a      	str	r2, [r3, #72]	; 0x48

		if (reqCalib)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002798:	2b00      	cmp	r3, #0
 800279a:	d002      	beq.n	80027a2 <_ZN12ServoChannel4execEv+0x14e>
		{
			servoState = ServoState::CALIB;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2204      	movs	r2, #4
 80027a0:	649a      	str	r2, [r3, #72]	; 0x48
			//reqCalib = false;
		}
	}

	switch (servoState)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027a6:	2b04      	cmp	r3, #4
 80027a8:	d04b      	beq.n	8002842 <_ZN12ServoChannel4execEv+0x1ee>
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	f300 80b7 	bgt.w	800291e <_ZN12ServoChannel4execEv+0x2ca>
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	dc02      	bgt.n	80027ba <_ZN12ServoChannel4execEv+0x166>
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	da03      	bge.n	80027c0 <_ZN12ServoChannel4execEv+0x16c>
 80027b8:	e0b1      	b.n	800291e <_ZN12ServoChannel4execEv+0x2ca>
 80027ba:	2b03      	cmp	r3, #3
 80027bc:	d00d      	beq.n	80027da <_ZN12ServoChannel4execEv+0x186>
 80027be:	e0ae      	b.n	800291e <_ZN12ServoChannel4execEv+0x2ca>
	{
		case ServoState::IDLE:
		case ServoState::READY:
			STRHAL_TIM_PWM_Enable(&pwmChannel, false);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3312      	adds	r3, #18
 80027c4:	2100      	movs	r1, #0
 80027c6:	4618      	mov	r0, r3
 80027c8:	f006 f860 	bl	800888c <STRHAL_TIM_PWM_Enable>
			STRHAL_GPIO_Write(&led, STRHAL_GPIO_VALUE_L);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	332c      	adds	r3, #44	; 0x2c
 80027d0:	2100      	movs	r1, #0
 80027d2:	4618      	mov	r0, r3
 80027d4:	f004 ff5a 	bl	800768c <STRHAL_GPIO_Write>
			break;
 80027d8:	e0a7      	b.n	800292a <_ZN12ServoChannel4execEv+0x2d6>

		case ServoState::MOVIN:
			if (distPos(targetPosition, feedbackPosition) < POS_DEV)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027e2:	4619      	mov	r1, r3
 80027e4:	4610      	mov	r0, r2
 80027e6:	f000 fac9 	bl	8002d7c <_ZN12ServoChannel7distPosEtt>
 80027ea:	4603      	mov	r3, r0
 80027ec:	461a      	mov	r2, r3
 80027ee:	f240 136b 	movw	r3, #363	; 0x16b
 80027f2:	429a      	cmp	r2, r3
 80027f4:	bf94      	ite	ls
 80027f6:	2301      	movls	r3, #1
 80027f8:	2300      	movhi	r3, #0
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d007      	beq.n	8002810 <_ZN12ServoChannel4execEv+0x1bc>
			{
				targetHitCount++;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002806:	3301      	adds	r3, #1
 8002808:	b29a      	uxth	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
			}

			if (targetHitCount >= TARG_HIT_MIN || time - timeLastCommand > 800)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002816:	2b13      	cmp	r3, #19
 8002818:	d80f      	bhi.n	800283a <_ZN12ServoChannel4execEv+0x1e6>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002820:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002824:	1a84      	subs	r4, r0, r2
 8002826:	eb61 0503 	sbc.w	r5, r1, r3
 800282a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800282e:	f04f 0300 	mov.w	r3, #0
 8002832:	42ab      	cmp	r3, r5
 8002834:	bf08      	it	eq
 8002836:	42a2      	cmpeq	r2, r4
 8002838:	d274      	bcs.n	8002924 <_ZN12ServoChannel4execEv+0x2d0>
			{
				servoState = ServoState::IDLE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	649a      	str	r2, [r3, #72]	; 0x48
			}
			break;
 8002840:	e070      	b.n	8002924 <_ZN12ServoChannel4execEv+0x2d0>

		case ServoState::CALIB: //TODO make config load/save more efficient
			if (distPos(feedbackPosition, feedbackPositionLast) < POS_DEV)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800284c:	4619      	mov	r1, r3
 800284e:	4610      	mov	r0, r2
 8002850:	f000 fa94 	bl	8002d7c <_ZN12ServoChannel7distPosEtt>
 8002854:	4603      	mov	r3, r0
 8002856:	461a      	mov	r2, r3
 8002858:	f240 136b 	movw	r3, #363	; 0x16b
 800285c:	429a      	cmp	r2, r3
 800285e:	bf94      	ite	ls
 8002860:	2301      	movls	r3, #1
 8002862:	2300      	movhi	r3, #0
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d008      	beq.n	800287c <_ZN12ServoChannel4execEv+0x228>
			{
				targetHitCount++;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002870:	3301      	adds	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800287a:	e003      	b.n	8002884 <_ZN12ServoChannel4execEv+0x230>
			}
			else
			{
				targetHitCount = 0;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
			}

			if (targetHitCount >= CALIB_HIT_MIN)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800288a:	2bfe      	cmp	r3, #254	; 0xfe
 800288c:	d94c      	bls.n	8002928 <_ZN12ServoChannel4execEv+0x2d4>
			{
				uint32_t configAddrStart = SERVOCONFIG_OFFSET + servoId * SERVOCONFIG_N_EACH;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	7bdb      	ldrb	r3, [r3, #15]
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	62fb      	str	r3, [r7, #44]	; 0x2c

				if (targetPosition == 0)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800289a:	2b00      	cmp	r3, #0
 800289c:	d11b      	bne.n	80028d6 <_ZN12ServoChannel4execEv+0x282>
				{
					adcRef.start = *feedbackMeasurement;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	881b      	ldrh	r3, [r3, #0]
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	879a      	strh	r2, [r3, #60]	; 0x3c
					Config regs[2] =
					{ static_cast<Config>(configAddrStart), static_cast<Config>(configAddrStart + 2) };
 80028aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ac:	627b      	str	r3, [r7, #36]	; 0x24
 80028ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b0:	3302      	adds	r3, #2
 80028b2:	62bb      	str	r3, [r7, #40]	; 0x28
					uint32_t vals[2] =
					{ (uint32_t) adcRef.start, (uint32_t) pwmRef.start };
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80028b8:	61fb      	str	r3, [r7, #28]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80028c0:	623b      	str	r3, [r7, #32]
					flash.writeConfigRegs(regs, vals, 2);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80028c6:	f107 021c 	add.w	r2, r7, #28
 80028ca:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80028ce:	2302      	movs	r3, #2
 80028d0:	f000 fefa 	bl	80036c8 <_ZN12W25Qxx_Flash15writeConfigRegsEP6ConfigPmt>
 80028d4:	e01b      	b.n	800290e <_ZN12ServoChannel4execEv+0x2ba>
				}
				else
				{
					adcRef.end = *feedbackMeasurement;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	881b      	ldrh	r3, [r3, #0]
 80028dc:	b29a      	uxth	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	87da      	strh	r2, [r3, #62]	; 0x3e
					Config regs[2] =
					{ static_cast<Config>(configAddrStart + 1), static_cast<Config>(configAddrStart + 3) };
 80028e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e4:	3301      	adds	r3, #1
 80028e6:	617b      	str	r3, [r7, #20]
 80028e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ea:	3303      	adds	r3, #3
 80028ec:	61bb      	str	r3, [r7, #24]
					uint32_t vals[2] =
					{ (uint32_t) adcRef.end, (uint32_t) pwmRef.end };
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80028fa:	613b      	str	r3, [r7, #16]
					flash.writeConfigRegs(regs, vals, 2);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8002900:	f107 020c 	add.w	r2, r7, #12
 8002904:	f107 0114 	add.w	r1, r7, #20
 8002908:	2302      	movs	r3, #2
 800290a:	f000 fedd 	bl	80036c8 <_ZN12W25Qxx_Flash15writeConfigRegsEP6ConfigPmt>
				}
				servoState = ServoState::IDLE;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	649a      	str	r2, [r3, #72]	; 0x48
				reqCalib = false;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			}
			break;
 800291c:	e004      	b.n	8002928 <_ZN12ServoChannel4execEv+0x2d4>
		default:
			return -1;
 800291e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002922:	e003      	b.n	800292c <_ZN12ServoChannel4execEv+0x2d8>
			break;
 8002924:	bf00      	nop
 8002926:	e000      	b.n	800292a <_ZN12ServoChannel4execEv+0x2d6>
			break;
 8002928:	bf00      	nop
	}
	return 0;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	373c      	adds	r7, #60	; 0x3c
 8002930:	46bd      	mov	sp, r7
 8002932:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002936 <_ZN12ServoChannel5resetEv>:

int ServoChannel::reset()
{
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
	return 0;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <_ZN12ServoChannel14processMessageEhPhRh>:

int ServoChannel::processMessage(uint8_t cmd_id, uint8_t *ret_data, uint8_t &ret_n)
{
 800294c:	b590      	push	{r4, r7, lr}
 800294e:	b089      	sub	sp, #36	; 0x24
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	607a      	str	r2, [r7, #4]
 8002956:	603b      	str	r3, [r7, #0]
 8002958:	460b      	mov	r3, r1
 800295a:	72fb      	strb	r3, [r7, #11]
	switch (cmd_id)
 800295c:	7afb      	ldrb	r3, [r7, #11]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d11d      	bne.n	800299e <_ZN12ServoChannel14processMessageEhPhRh+0x52>
	{
		case SERVO_REQ_RESET_SETTINGS:
		{
			uint32_t vals[4] =
 8002962:	4b15      	ldr	r3, [pc, #84]	; (80029b8 <_ZN12ServoChannel14processMessageEhPhRh+0x6c>)
 8002964:	f107 0410 	add.w	r4, r7, #16
 8002968:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800296a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{ (uint32_t) adc0Ref.start, (uint32_t) adc0Ref.end, (uint32_t) pwm0Ref.start, (uint32_t) pwm0Ref.end };
			flash.writeConfigRegsFromAddr(SERVOCONFIG_OFFSET + servoId * SERVOCONFIG_N_EACH, vals, 4);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	7bdb      	ldrb	r3, [r3, #15]
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4619      	mov	r1, r3
 800297a:	f107 0210 	add.w	r2, r7, #16
 800297e:	2304      	movs	r3, #4
 8002980:	f000 feec 	bl	800375c <_ZN12W25Qxx_Flash23writeConfigRegsFromAddrEmPmt>
			adcRef = adc0Ref;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	879a      	strh	r2, [r3, #60]	; 0x3c
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002990:	87da      	strh	r2, [r3, #62]	; 0x3e
			pwmRef = pwm0Ref;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	4a09      	ldr	r2, [pc, #36]	; (80029bc <_ZN12ServoChannel14processMessageEhPhRh+0x70>)
 8002996:	6812      	ldr	r2, [r2, #0]
 8002998:	641a      	str	r2, [r3, #64]	; 0x40
			return 0;
 800299a:	2300      	movs	r3, #0
 800299c:	e007      	b.n	80029ae <_ZN12ServoChannel14processMessageEhPhRh+0x62>
		}
		default:
			return AbstractChannel::processMessage(cmd_id, ret_data, ret_n);
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	7af9      	ldrb	r1, [r7, #11]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	f7fe fdd7 	bl	8001558 <_ZN15AbstractChannel14processMessageEhPhRh>
 80029aa:	4603      	mov	r3, r0
 80029ac:	bf00      	nop
	}
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3724      	adds	r7, #36	; 0x24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd90      	pop	{r4, r7, pc}
 80029b6:	bf00      	nop
 80029b8:	08009b00 	.word	0x08009b00
 80029bc:	08009c94 	.word	0x08009c94

080029c0 <_ZN12ServoChannel13getSensorDataEPhRh>:



int ServoChannel::getSensorData(uint8_t *data, uint8_t &n)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
	uint32_t *out = (uint32_t*) (data + n);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	461a      	mov	r2, r3
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	4413      	add	r3, r2
 80029d6:	617b      	str	r3, [r7, #20]
	*out = (uint32_t) getPos();
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f000 f917 	bl	8002c0c <_ZNK12ServoChannel6getPosEv>
 80029de:	4603      	mov	r3, r0
 80029e0:	461a      	mov	r2, r3
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	601a      	str	r2, [r3, #0]

	n += SERVO_DATA_N_BYTES;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	3304      	adds	r3, #4
 80029ec:	b2da      	uxtb	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	701a      	strb	r2, [r3, #0]
	return 0;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3718      	adds	r7, #24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <_ZN12ServoChannel11setVariableEhl>:
{
	return true;
}

int ServoChannel::setVariable(uint8_t variable_id, int32_t data)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	460b      	mov	r3, r1
 8002a06:	607a      	str	r2, [r7, #4]
 8002a08:	72fb      	strb	r3, [r7, #11]
	uint16_t pos_data;
	switch (variable_id)
 8002a0a:	7afb      	ldrb	r3, [r7, #11]
 8002a0c:	2b18      	cmp	r3, #24
 8002a0e:	d874      	bhi.n	8002afa <_ZN12ServoChannel11setVariableEhl+0xfe>
 8002a10:	a201      	add	r2, pc, #4	; (adr r2, 8002a18 <_ZN12ServoChannel11setVariableEhl+0x1c>)
 8002a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a16:	bf00      	nop
 8002a18:	08002adf 	.word	0x08002adf
 8002a1c:	08002a7d 	.word	0x08002a7d
 8002a20:	08002afb 	.word	0x08002afb
 8002a24:	08002afb 	.word	0x08002afb
 8002a28:	08002afb 	.word	0x08002afb
 8002a2c:	08002afb 	.word	0x08002afb
 8002a30:	08002afb 	.word	0x08002afb
 8002a34:	08002afb 	.word	0x08002afb
 8002a38:	08002afb 	.word	0x08002afb
 8002a3c:	08002afb 	.word	0x08002afb
 8002a40:	08002a89 	.word	0x08002a89
 8002a44:	08002ab3 	.word	0x08002ab3
 8002a48:	08002afb 	.word	0x08002afb
 8002a4c:	08002aeb 	.word	0x08002aeb
 8002a50:	08002afb 	.word	0x08002afb
 8002a54:	08002afb 	.word	0x08002afb
 8002a58:	08002afb 	.word	0x08002afb
 8002a5c:	08002afb 	.word	0x08002afb
 8002a60:	08002afb 	.word	0x08002afb
 8002a64:	08002afb 	.word	0x08002afb
 8002a68:	08002afb 	.word	0x08002afb
 8002a6c:	08002afb 	.word	0x08002afb
 8002a70:	08002afb 	.word	0x08002afb
 8002a74:	08002afb 	.word	0x08002afb
 8002a78:	08002ae5 	.word	0x08002ae5
	{
		case SERVO_TARGET_POSITION:
			targetPosition = (uint16_t) (data & 0xFFFF);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	869a      	strh	r2, [r3, #52]	; 0x34
			return 0;
 8002a84:	2300      	movs	r3, #0
 8002a86:	e03a      	b.n	8002afe <_ZN12ServoChannel11setVariableEhl+0x102>

		case SERVO_POSITION_STARTPOINT:
			pos_data = (uint16_t) (data & 0xFFFF);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	82fb      	strh	r3, [r7, #22]
			pwmRef.start = tPosFromCanonic(pos_data, pwm0Ref);
 8002a8c:	8afb      	ldrh	r3, [r7, #22]
 8002a8e:	491e      	ldr	r1, [pc, #120]	; (8002b08 <_ZN12ServoChannel11setVariableEhl+0x10c>)
 8002a90:	4618      	mov	r0, r3
 8002a92:	f000 f930 	bl	8002cf6 <_ZN12ServoChannel15tPosFromCanonicEtRK11ServoRefPos>
 8002a96:	4603      	mov	r3, r0
 8002a98:	461a      	mov	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			targetPosition = 0;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	869a      	strh	r2, [r3, #52]	; 0x34
			reqCalib = true;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

			return 0;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	e025      	b.n	8002afe <_ZN12ServoChannel11setVariableEhl+0x102>

		case SERVO_POSITION_ENDPOINT:
			pos_data = (uint16_t) (data & 0xFFFF);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	82fb      	strh	r3, [r7, #22]
			pwmRef.end = tPosFromCanonic(pos_data, pwm0Ref);
 8002ab6:	8afb      	ldrh	r3, [r7, #22]
 8002ab8:	4913      	ldr	r1, [pc, #76]	; (8002b08 <_ZN12ServoChannel11setVariableEhl+0x10c>)
 8002aba:	4618      	mov	r0, r3
 8002abc:	f000 f91b 	bl	8002cf6 <_ZN12ServoChannel15tPosFromCanonicEtRK11ServoRefPos>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			targetPosition = UINT16_MAX;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ad0:	869a      	strh	r2, [r3, #52]	; 0x34
			reqCalib = true;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

			return 0;
 8002ada:	2300      	movs	r3, #0
 8002adc:	e00f      	b.n	8002afe <_ZN12ServoChannel11setVariableEhl+0x102>

		case SERVO_POSITION:
			return -2;
 8002ade:	f06f 0301 	mvn.w	r3, #1
 8002ae2:	e00c      	b.n	8002afe <_ZN12ServoChannel11setVariableEhl+0x102>

		case SERVO_POSITION_RAW:
			return -2;
 8002ae4:	f06f 0301 	mvn.w	r3, #1
 8002ae8:	e009      	b.n	8002afe <_ZN12ServoChannel11setVariableEhl+0x102>

		case SERVO_SENSOR_REFRESH_DIVIDER:
			refreshDivider = data;
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	605a      	str	r2, [r3, #4]
			refreshCounter = 0;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	609a      	str	r2, [r3, #8]
			return 0;
 8002af6:	2300      	movs	r3, #0
 8002af8:	e001      	b.n	8002afe <_ZN12ServoChannel11setVariableEhl+0x102>

		default:
			return -1;
 8002afa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3718      	adds	r7, #24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	08009c94 	.word	0x08009c94

08002b0c <_ZNK12ServoChannel11getVariableEhRl>:

int ServoChannel::getVariable(uint8_t variable_id, int32_t &data) const
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	460b      	mov	r3, r1
 8002b16:	607a      	str	r2, [r7, #4]
 8002b18:	72fb      	strb	r3, [r7, #11]
	switch (variable_id)
 8002b1a:	7afb      	ldrb	r3, [r7, #11]
 8002b1c:	2b18      	cmp	r3, #24
 8002b1e:	d86d      	bhi.n	8002bfc <_ZNK12ServoChannel11getVariableEhRl+0xf0>
 8002b20:	a201      	add	r2, pc, #4	; (adr r2, 8002b28 <_ZNK12ServoChannel11getVariableEhRl+0x1c>)
 8002b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b26:	bf00      	nop
 8002b28:	08002b8d 	.word	0x08002b8d
 8002b2c:	08002bad 	.word	0x08002bad
 8002b30:	08002bfd 	.word	0x08002bfd
 8002b34:	08002bfd 	.word	0x08002bfd
 8002b38:	08002bfd 	.word	0x08002bfd
 8002b3c:	08002bfd 	.word	0x08002bfd
 8002b40:	08002bfd 	.word	0x08002bfd
 8002b44:	08002bfd 	.word	0x08002bfd
 8002b48:	08002bfd 	.word	0x08002bfd
 8002b4c:	08002bfd 	.word	0x08002bfd
 8002b50:	08002bbb 	.word	0x08002bbb
 8002b54:	08002bd5 	.word	0x08002bd5
 8002b58:	08002bfd 	.word	0x08002bfd
 8002b5c:	08002bef 	.word	0x08002bef
 8002b60:	08002bfd 	.word	0x08002bfd
 8002b64:	08002bfd 	.word	0x08002bfd
 8002b68:	08002bfd 	.word	0x08002bfd
 8002b6c:	08002bfd 	.word	0x08002bfd
 8002b70:	08002bfd 	.word	0x08002bfd
 8002b74:	08002bfd 	.word	0x08002bfd
 8002b78:	08002bfd 	.word	0x08002bfd
 8002b7c:	08002bfd 	.word	0x08002bfd
 8002b80:	08002bfd 	.word	0x08002bfd
 8002b84:	08002bfd 	.word	0x08002bfd
 8002b88:	08002b9b 	.word	0x08002b9b
	{
		case SERVO_POSITION:
			data = feedbackPosition;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b90:	461a      	mov	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	601a      	str	r2, [r3, #0]
			return 0;
 8002b96:	2300      	movs	r3, #0
 8002b98:	e032      	b.n	8002c00 <_ZNK12ServoChannel11getVariableEhRl+0xf4>

		case SERVO_POSITION_RAW:
			data = *feedbackMeasurement << 4;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	881b      	ldrh	r3, [r3, #0]
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	011a      	lsls	r2, r3, #4
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	601a      	str	r2, [r3, #0]
			return 0;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	e029      	b.n	8002c00 <_ZNK12ServoChannel11getVariableEhRl+0xf4>

		case SERVO_TARGET_POSITION:
			data = targetPosition;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	601a      	str	r2, [r3, #0]
			return 0;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	e022      	b.n	8002c00 <_ZNK12ServoChannel11getVariableEhRl+0xf4>

		case SERVO_POSITION_STARTPOINT:
			data = tPosToCanonic(pwmRef.start, pwm0Ref);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002bc0:	4911      	ldr	r1, [pc, #68]	; (8002c08 <_ZNK12ServoChannel11getVariableEhRl+0xfc>)
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f000 f835 	bl	8002c32 <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	461a      	mov	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	601a      	str	r2, [r3, #0]
			return 0;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	e015      	b.n	8002c00 <_ZNK12ServoChannel11getVariableEhRl+0xf4>

		case SERVO_POSITION_ENDPOINT:
			data = tPosToCanonic(pwmRef.end, pwm0Ref);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8002bda:	490b      	ldr	r1, [pc, #44]	; (8002c08 <_ZNK12ServoChannel11getVariableEhRl+0xfc>)
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 f828 	bl	8002c32 <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos>
 8002be2:	4603      	mov	r3, r0
 8002be4:	461a      	mov	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	601a      	str	r2, [r3, #0]
			return 0;
 8002bea:	2300      	movs	r3, #0
 8002bec:	e008      	b.n	8002c00 <_ZNK12ServoChannel11getVariableEhRl+0xf4>

		case SERVO_SENSOR_REFRESH_DIVIDER:
			data = (int32_t) refreshDivider;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	601a      	str	r2, [r3, #0]
			return 0;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	e001      	b.n	8002c00 <_ZNK12ServoChannel11getVariableEhRl+0xf4>

		default:
			return -1;
 8002bfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	08009c94 	.word	0x08009c94

08002c0c <_ZNK12ServoChannel6getPosEv>:
{
	return targetPosition;
}

uint16_t ServoChannel::getPos() const
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
	return tPosToCanonic(*feedbackMeasurement, adcRef);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	881b      	ldrh	r3, [r3, #0]
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	333c      	adds	r3, #60	; 0x3c
 8002c20:	4619      	mov	r1, r3
 8002c22:	4610      	mov	r0, r2
 8002c24:	f000 f805 	bl	8002c32 <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos>
 8002c28:	4603      	mov	r3, r0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos>:
{
	return *currentMeasurement;
}

uint16_t ServoChannel::tPosToCanonic(uint16_t pos, const ServoRefPos &frame)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	4603      	mov	r3, r0
 8002c3a:	6039      	str	r1, [r7, #0]
 8002c3c:	80fb      	strh	r3, [r7, #6]
	if (frame.end == frame.start)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	885a      	ldrh	r2, [r3, #2]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	881b      	ldrh	r3, [r3, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d102      	bne.n	8002c50 <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos+0x1e>
	{
		return UINT16_MAX;
 8002c4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c4e:	e04c      	b.n	8002cea <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos+0xb8>
	}
	else if (frame.end < frame.start)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	885a      	ldrh	r2, [r3, #2]
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	881b      	ldrh	r3, [r3, #0]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d224      	bcs.n	8002ca6 <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos+0x74>
	{ // reversed servo
		// check if out of bounds
		if (pos <= frame.end)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	885b      	ldrh	r3, [r3, #2]
 8002c60:	88fa      	ldrh	r2, [r7, #6]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d802      	bhi.n	8002c6c <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos+0x3a>
		{
			return UINT16_MAX;
 8002c66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c6a:	e03e      	b.n	8002cea <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos+0xb8>
		}
		else if (pos >= frame.start)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	881b      	ldrh	r3, [r3, #0]
 8002c70:	88fa      	ldrh	r2, [r7, #6]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d301      	bcc.n	8002c7a <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos+0x48>
		{
			return 0;
 8002c76:	2300      	movs	r3, #0
 8002c78:	e037      	b.n	8002cea <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos+0xb8>
		}
		return UINT16_MAX - ((pos - frame.end) * (UINT16_MAX / (frame.start - frame.end)));
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	885b      	ldrh	r3, [r3, #2]
 8002c7e:	88fa      	ldrh	r2, [r7, #6]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	881b      	ldrh	r3, [r3, #0]
 8002c88:	4619      	mov	r1, r3
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	885b      	ldrh	r3, [r3, #2]
 8002c8e:	1acb      	subs	r3, r1, r3
 8002c90:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002c94:	fb91 f3f3 	sdiv	r3, r1, r3
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	fb12 f303 	smulbb	r3, r2, r3
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	e021      	b.n	8002cea <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos+0xb8>
	}

	// check if out of bounds
	if (pos <= frame.start)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	881b      	ldrh	r3, [r3, #0]
 8002caa:	88fa      	ldrh	r2, [r7, #6]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d801      	bhi.n	8002cb4 <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos+0x82>
	{
		return 0;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	e01a      	b.n	8002cea <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos+0xb8>
	}
	else if (pos >= frame.end)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	885b      	ldrh	r3, [r3, #2]
 8002cb8:	88fa      	ldrh	r2, [r7, #6]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d302      	bcc.n	8002cc4 <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos+0x92>
	{
		return UINT16_MAX;
 8002cbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cc2:	e012      	b.n	8002cea <_ZN12ServoChannel13tPosToCanonicEtRK11ServoRefPos+0xb8>
	}

	return (pos - frame.start) * (UINT16_MAX / (frame.end - frame.start));
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	881b      	ldrh	r3, [r3, #0]
 8002cc8:	88fa      	ldrh	r2, [r7, #6]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	885b      	ldrh	r3, [r3, #2]
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	881b      	ldrh	r3, [r3, #0]
 8002cd8:	1acb      	subs	r3, r1, r3
 8002cda:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002cde:	fb91 f3f3 	sdiv	r3, r1, r3
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	fb12 f303 	smulbb	r3, r2, r3
 8002ce8:	b29b      	uxth	r3, r3
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <_ZN12ServoChannel15tPosFromCanonicEtRK11ServoRefPos>:

uint16_t ServoChannel::tPosFromCanonic(uint16_t pos, const ServoRefPos &frame)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b085      	sub	sp, #20
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	6039      	str	r1, [r7, #0]
 8002d00:	80fb      	strh	r3, [r7, #6]
	if (frame.end == frame.start)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	885a      	ldrh	r2, [r3, #2]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	881b      	ldrh	r3, [r3, #0]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d102      	bne.n	8002d14 <_ZN12ServoChannel15tPosFromCanonicEtRK11ServoRefPos+0x1e>
	{
		return frame.end;
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	885b      	ldrh	r3, [r3, #2]
 8002d12:	e02d      	b.n	8002d70 <_ZN12ServoChannel15tPosFromCanonicEtRK11ServoRefPos+0x7a>
	}
	else if (frame.end < frame.start)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	885a      	ldrh	r2, [r3, #2]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	881b      	ldrh	r3, [r3, #0]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d215      	bcs.n	8002d4c <_ZN12ServoChannel15tPosFromCanonicEtRK11ServoRefPos+0x56>
	{ // reversed servo
		uint16_t reversedPosition = UINT16_MAX - pos;
 8002d20:	88fb      	ldrh	r3, [r7, #6]
 8002d22:	43db      	mvns	r3, r3
 8002d24:	81fb      	strh	r3, [r7, #14]
		return (reversedPosition / (UINT16_MAX / (frame.start - frame.end))) + frame.end;
 8002d26:	89fa      	ldrh	r2, [r7, #14]
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	881b      	ldrh	r3, [r3, #0]
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	885b      	ldrh	r3, [r3, #2]
 8002d32:	1acb      	subs	r3, r1, r3
 8002d34:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002d38:	fb91 f3f3 	sdiv	r3, r1, r3
 8002d3c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	885b      	ldrh	r3, [r3, #2]
 8002d46:	4413      	add	r3, r2
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	e011      	b.n	8002d70 <_ZN12ServoChannel15tPosFromCanonicEtRK11ServoRefPos+0x7a>
	}

	return (pos / (UINT16_MAX / (frame.end - frame.start))) + frame.start;
 8002d4c:	88fa      	ldrh	r2, [r7, #6]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	885b      	ldrh	r3, [r3, #2]
 8002d52:	4619      	mov	r1, r3
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	881b      	ldrh	r3, [r3, #0]
 8002d58:	1acb      	subs	r3, r1, r3
 8002d5a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002d5e:	fb91 f3f3 	sdiv	r3, r1, r3
 8002d62:	fb92 f3f3 	sdiv	r3, r2, r3
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	881b      	ldrh	r3, [r3, #0]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	b29b      	uxth	r3, r3
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3714      	adds	r7, #20
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <_ZN12ServoChannel7distPosEtt>:

uint16_t ServoChannel::distPos(uint16_t pos1, uint16_t pos2)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	460a      	mov	r2, r1
 8002d86:	80fb      	strh	r3, [r7, #6]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	80bb      	strh	r3, [r7, #4]
	return pos1 < pos2 ? pos2 - pos1 : pos1 - pos2;
 8002d8c:	88fa      	ldrh	r2, [r7, #6]
 8002d8e:	88bb      	ldrh	r3, [r7, #4]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d204      	bcs.n	8002d9e <_ZN12ServoChannel7distPosEtt+0x22>
 8002d94:	88ba      	ldrh	r2, [r7, #4]
 8002d96:	88fb      	ldrh	r3, [r7, #6]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	e003      	b.n	8002da6 <_ZN12ServoChannel7distPosEtt+0x2a>
 8002d9e:	88fa      	ldrh	r2, [r7, #6]
 8002da0:	88bb      	ldrh	r3, [r7, #4]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	b29b      	uxth	r3, r3
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
	...

08002db4 <_ZN14AbstractModuleC1Ev>:
#ifndef ABSTRACTMODULE_H
#define ABSTRACTMODULE_H

class AbstractModule
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	4a04      	ldr	r2, [pc, #16]	; (8002dd0 <_ZN14AbstractModuleC1Ev+0x1c>)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	08009ccc 	.word	0x08009ccc

08002dd4 <_ZN12W25Qxx_FlashC1Ev>:
#include <STRHAL.h>
#include <channels/generic_channel_def.h>

#include <cstring>

W25Qxx_Flash::W25Qxx_Flash() :
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
		state(FlashState::IDLE), pageCount(0), sectorCount(0), can(Can::instance())
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff ffe8 	bl	8002db4 <_ZN14AbstractModuleC1Ev>
 8002de4:	4a1a      	ldr	r2, [pc, #104]	; (8002e50 <_ZN12W25Qxx_FlashC1Ev+0x7c>)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	711a      	strb	r2, [r3, #4]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	609a      	str	r2, [r3, #8]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	60da      	str	r2, [r3, #12]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	611a      	str	r2, [r3, #16]
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	f04f 0200 	mov.w	r2, #0
 8002e08:	f04f 0300 	mov.w	r3, #0
 8002e0c:	e9c1 2346 	strd	r2, r3, [r1, #280]	; 0x118
 8002e10:	6879      	ldr	r1, [r7, #4]
 8002e12:	f04f 0200 	mov.w	r2, #0
 8002e16:	f04f 0300 	mov.w	r3, #0
 8002e1a:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
 8002e36:	2000      	movs	r0, #0
 8002e38:	f7fd fa16 	bl	8000268 <_ZN3Can8instanceEm>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
{
}
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4618      	mov	r0, r3
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	08009ce0 	.word	0x08009ce0

08002e54 <_ZN12W25Qxx_Flash8instanceEv>:

W25Qxx_Flash& W25Qxx_Flash::instance()
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
	static W25Qxx_Flash instance;
 8002e58:	4b10      	ldr	r3, [pc, #64]	; (8002e9c <_ZN12W25Qxx_Flash8instanceEv+0x48>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	f3bf 8f5b 	dmb	ish
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	bf0c      	ite	eq
 8002e6a:	2301      	moveq	r3, #1
 8002e6c:	2300      	movne	r3, #0
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d010      	beq.n	8002e96 <_ZN12W25Qxx_Flash8instanceEv+0x42>
 8002e74:	4809      	ldr	r0, [pc, #36]	; (8002e9c <_ZN12W25Qxx_Flash8instanceEv+0x48>)
 8002e76:	f006 fc9f 	bl	80097b8 <__cxa_guard_acquire>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	bf14      	ite	ne
 8002e80:	2301      	movne	r3, #1
 8002e82:	2300      	moveq	r3, #0
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d005      	beq.n	8002e96 <_ZN12W25Qxx_Flash8instanceEv+0x42>
 8002e8a:	4805      	ldr	r0, [pc, #20]	; (8002ea0 <_ZN12W25Qxx_Flash8instanceEv+0x4c>)
 8002e8c:	f7ff ffa2 	bl	8002dd4 <_ZN12W25Qxx_FlashC1Ev>
 8002e90:	4802      	ldr	r0, [pc, #8]	; (8002e9c <_ZN12W25Qxx_Flash8instanceEv+0x48>)
 8002e92:	f006 fc9d 	bl	80097d0 <__cxa_guard_release>

	return instance;
 8002e96:	4b02      	ldr	r3, [pc, #8]	; (8002ea0 <_ZN12W25Qxx_Flash8instanceEv+0x4c>)
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	20000a58 	.word	0x20000a58
 8002ea0:	20000820 	.word	0x20000820

08002ea4 <_ZN12W25Qxx_Flash4initEv>:

int W25Qxx_Flash::init()
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
	memset(loggingBuffer, 0, 256);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8002eb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f006 fce9 	bl	8009890 <memset>

	STRHAL_QSPI_Config_t qspi_conf;
	qspi_conf.clk_level = 0x0;
 8002ebe:	7bbb      	ldrb	r3, [r7, #14]
 8002ec0:	f36f 0300 	bfc	r3, #0, #1
 8002ec4:	73bb      	strb	r3, [r7, #14]
	qspi_conf.flash_size = SIZE_2N;
 8002ec6:	7b7b      	ldrb	r3, [r7, #13]
 8002ec8:	f043 031f 	orr.w	r3, r3, #31
 8002ecc:	737b      	strb	r3, [r7, #13]
	qspi_conf.ncs_high_time = 0x7;
 8002ece:	7b7b      	ldrb	r3, [r7, #13]
 8002ed0:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8002ed4:	737b      	strb	r3, [r7, #13]
	qspi_conf.psc = 19;
 8002ed6:	7b3b      	ldrb	r3, [r7, #12]
 8002ed8:	2213      	movs	r2, #19
 8002eda:	f362 0304 	bfi	r3, r2, #0, #5
 8002ede:	733b      	strb	r3, [r7, #12]

	if (STRHAL_QSPI_Flash_Init(&qspi_conf) < 0)
 8002ee0:	f107 030c 	add.w	r3, r7, #12
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f004 fde1 	bl	8007aac <STRHAL_QSPI_Flash_Init>
 8002eea:	4603      	mov	r3, r0
 8002eec:	0fdb      	lsrs	r3, r3, #31
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d002      	beq.n	8002efa <_ZN12W25Qxx_Flash4initEv+0x56>
		return -1;
 8002ef4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ef8:	e029      	b.n	8002f4e <_ZN12W25Qxx_Flash4initEv+0xaa>

	STRHAL_QSPI_Run();
 8002efa:	f004 fe49 	bl	8007b90 <STRHAL_QSPI_Run>

	if (!enter4ByteAddrMode())
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 fad8 	bl	80034b4 <_ZN12W25Qxx_Flash18enter4ByteAddrModeEv>
 8002f04:	4603      	mov	r3, r0
 8002f06:	f083 0301 	eor.w	r3, r3, #1
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d002      	beq.n	8002f16 <_ZN12W25Qxx_Flash4initEv+0x72>
	{
		return -1;
 8002f10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f14:	e01b      	b.n	8002f4e <_ZN12W25Qxx_Flash4initEv+0xaa>
	}

	if (!writeEnable())
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 fa5f 	bl	80033da <_ZN12W25Qxx_Flash11writeEnableEv>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	f083 0301 	eor.w	r3, r3, #1
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d002      	beq.n	8002f2e <_ZN12W25Qxx_Flash4initEv+0x8a>
	{
		return -1;
 8002f28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f2c:	e00f      	b.n	8002f4e <_ZN12W25Qxx_Flash4initEv+0xaa>
	}

	if (!disableWPS())
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 fa7f 	bl	8003432 <_ZN12W25Qxx_Flash10disableWPSEv>
 8002f34:	4603      	mov	r3, r0
 8002f36:	f083 0301 	eor.w	r3, r3, #1
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d002      	beq.n	8002f46 <_ZN12W25Qxx_Flash4initEv+0xa2>
	{
		return -1;
 8002f40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f44:	e003      	b.n	8002f4e <_ZN12W25Qxx_Flash4initEv+0xaa>
	}

	LL_mDelay(10);
 8002f46:	200a      	movs	r0, #10
 8002f48:	f002 fac6 	bl	80054d8 <LL_mDelay>

	return 0;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <_ZN12W25Qxx_Flash4execEv>:

int W25Qxx_Flash::exec()
{
 8002f56:	b5b0      	push	{r4, r5, r7, lr}
 8002f58:	b086      	sub	sp, #24
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
	uint64_t time = STRHAL_Systick_GetTick();
 8002f5e:	f005 f8cd 	bl	80080fc <STRHAL_Systick_GetTick>
 8002f62:	e9c7 0102 	strd	r0, r1, [r7, #8]
	if ((time - timeLastSample) < EXEC_SAMPLE_TICKS)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	; 0x118
 8002f6c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f70:	1a84      	subs	r4, r0, r2
 8002f72:	eb61 0503 	sbc.w	r5, r1, r3
 8002f76:	2d00      	cmp	r5, #0
 8002f78:	bf08      	it	eq
 8002f7a:	2c0a      	cmpeq	r4, #10
 8002f7c:	d201      	bcs.n	8002f82 <_ZN12W25Qxx_Flash4execEv+0x2c>
		return 0;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	e039      	b.n	8002ff6 <_ZN12W25Qxx_Flash4execEv+0xa0>

	timeLastSample = time;
 8002f82:	6879      	ldr	r1, [r7, #4]
 8002f84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f88:	e9c1 2346 	strd	r2, r3, [r1, #280]	; 0x118

	// Current State Logic - executes state logic, also returns new state if transition conditions are met
	internalNextState = currentStateLogic(time);
 8002f8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 f849 	bl	8003028 <_ZN12W25Qxx_Flash17currentStateLogicEy>
 8002f96:	4602      	mov	r2, r0
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	FlashState nextState = state;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	617b      	str	r3, [r7, #20]

	if (externalNextState != state)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d004      	beq.n	8002fbc <_ZN12W25Qxx_Flash4execEv+0x66>
	{ // Prioritize external event - there has to be some kind of priority, because internal could be different to external -> external means CAN -> either Sequence or Abort
		nextState = externalNextState;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8002fb8:	617b      	str	r3, [r7, #20]
 8002fba:	e010      	b.n	8002fde <_ZN12W25Qxx_Flash4execEv+0x88>
	}
	else if (internalNextState != state)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d009      	beq.n	8002fde <_ZN12W25Qxx_Flash4execEv+0x88>
	{
		externalNextState = internalNextState; // Incase an internal state change happens, the external state, which is from some previous change would block it, so it is updated here
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
		nextState = internalNextState;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8002fdc:	617b      	str	r3, [r7, #20]
	}

	// Next State Logic
	if (nextState != state)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d005      	beq.n	8002ff4 <_ZN12W25Qxx_Flash4execEv+0x9e>
	{
		nextStateLogic(nextState, time);
 8002fe8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fec:	6979      	ldr	r1, [r7, #20]
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f86c 	bl	80030cc <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey>
	}

	return 0;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3718      	adds	r7, #24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bdb0      	pop	{r4, r5, r7, pc}

08002ffe <_ZN12W25Qxx_Flash5resetEv>:

int W25Qxx_Flash::reset()
{
 8002ffe:	b480      	push	{r7}
 8003000:	b083      	sub	sp, #12
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
	state = FlashState::IDLE;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	609a      	str	r2, [r3, #8]
	pageCount = 0;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	60da      	str	r2, [r3, #12]
	sectorCount = 0;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	611a      	str	r2, [r3, #16]
	return 0;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
	...

08003028 <_ZN12W25Qxx_Flash17currentStateLogicEy>:

FlashState W25Qxx_Flash::currentStateLogic(uint64_t time)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	e9c7 2300 	strd	r2, r3, [r7]
	switch (state)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	2b04      	cmp	r3, #4
 800303a:	d839      	bhi.n	80030b0 <_ZN12W25Qxx_Flash17currentStateLogicEy+0x88>
 800303c:	a201      	add	r2, pc, #4	; (adr r2, 8003044 <_ZN12W25Qxx_Flash17currentStateLogicEy+0x1c>)
 800303e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003042:	bf00      	nop
 8003044:	080030b1 	.word	0x080030b1
 8003048:	08003059 	.word	0x08003059
 800304c:	080030b1 	.word	0x080030b1
 8003050:	0800307f 	.word	0x0800307f
 8003054:	080030b1 	.word	0x080030b1
		case FlashState::IDLE:
			break;
		case FlashState::CLEARING:
		{
			uint8_t sreg1;
			if (!readSREG1(sreg1))
 8003058:	f107 0317 	add.w	r3, r7, #23
 800305c:	4619      	mov	r1, r3
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 f996 	bl	8003390 <_ZNK12W25Qxx_Flash9readSREG1ERh>
 8003064:	4603      	mov	r3, r0
 8003066:	f083 0301 	eor.w	r3, r3, #1
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b00      	cmp	r3, #0
 800306e:	d121      	bne.n	80030b4 <_ZN12W25Qxx_Flash17currentStateLogicEy+0x8c>
				break;
			if (!(sreg1 & 0x01))
 8003070:	7dfb      	ldrb	r3, [r7, #23]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d11e      	bne.n	80030b8 <_ZN12W25Qxx_Flash17currentStateLogicEy+0x90>
				return FlashState::READY;
 800307a:	2302      	movs	r3, #2
 800307c:	e021      	b.n	80030c2 <_ZN12W25Qxx_Flash17currentStateLogicEy+0x9a>
			break;
		}
		case FlashState::READY:
			break;
		case FlashState::LOGGING:
			if (loggingIndex + 64 >= 256)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 8003084:	2bbf      	cmp	r3, #191	; 0xbf
 8003086:	d919      	bls.n	80030bc <_ZN12W25Qxx_Flash17currentStateLogicEy+0x94>
			{
				lock = true;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2201      	movs	r2, #1
 800308c:	711a      	strb	r2, [r3, #4]
				writeNextPage(loggingBuffer, 256);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8003094:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003098:	4619      	mov	r1, r3
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 fa30 	bl	8003500 <_ZN12W25Qxx_Flash13writeNextPageEPKhm>
				loggingIndex = 0;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
				lock = false;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	711a      	strb	r2, [r3, #4]
			}
			break;
 80030ae:	e005      	b.n	80030bc <_ZN12W25Qxx_Flash17currentStateLogicEy+0x94>
		case FlashState::FULL:
			break;
		default:
			break;
 80030b0:	bf00      	nop
 80030b2:	e004      	b.n	80030be <_ZN12W25Qxx_Flash17currentStateLogicEy+0x96>
				break;
 80030b4:	bf00      	nop
 80030b6:	e002      	b.n	80030be <_ZN12W25Qxx_Flash17currentStateLogicEy+0x96>
			break;
 80030b8:	bf00      	nop
 80030ba:	e000      	b.n	80030be <_ZN12W25Qxx_Flash17currentStateLogicEy+0x96>
			break;
 80030bc:	bf00      	nop
	}
	return state;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	689b      	ldr	r3, [r3, #8]
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3718      	adds	r7, #24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop

080030cc <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey>:

void W25Qxx_Flash::nextStateLogic(FlashState nextState, uint64_t time)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	e9c7 2300 	strd	r2, r3, [r7]
	timeLastTransition = time;
 80030da:	68f9      	ldr	r1, [r7, #12]
 80030dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030e0:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	d86f      	bhi.n	80031ca <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0xfe>
 80030ea:	a201      	add	r2, pc, #4	; (adr r2, 80030f0 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x24>)
 80030ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f0:	08003105 	.word	0x08003105
 80030f4:	0800311b 	.word	0x0800311b
 80030f8:	08003167 	.word	0x08003167
 80030fc:	080031a1 	.word	0x080031a1
 8003100:	080031b7 	.word	0x080031b7
	switch (nextState)
	{
		case FlashState::IDLE:
			if (state != FlashState::LOGGING)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	2b03      	cmp	r3, #3
 800310a:	d167      	bne.n	80031dc <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x110>
			{
				return;
			}
			pageCount = 0;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	60da      	str	r2, [r3, #12]
			sectorCount = 0;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	611a      	str	r2, [r3, #16]
			break;
 8003118:	e05c      	b.n	80031d4 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x108>
		case FlashState::CLEARING:
			if (state != FlashState::IDLE)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d15e      	bne.n	80031e0 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x114>
			{
				return;
			}
			STRHAL_UART_Write_Blocking(STRHAL_UART_DEBUG, "CLEARING!\n", 10, 100);
 8003122:	2364      	movs	r3, #100	; 0x64
 8003124:	220a      	movs	r2, #10
 8003126:	4936      	ldr	r1, [pc, #216]	; (8003200 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x134>)
 8003128:	2002      	movs	r0, #2
 800312a:	f006 f9a5 	bl	8009478 <STRHAL_UART_Write_Blocking>
			if (!sendClearInitiated())
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f000 f887 	bl	8003242 <_ZN12W25Qxx_Flash18sendClearInitiatedEv>
 8003134:	4603      	mov	r3, r0
 8003136:	f083 0301 	eor.w	r3, r3, #1
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	d151      	bne.n	80031e4 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x118>
				return;
			if (!readConfig())
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f000 fb53 	bl	80037ec <_ZN12W25Qxx_Flash10readConfigEv>
 8003146:	4603      	mov	r3, r0
 8003148:	f083 0301 	eor.w	r3, r3, #1
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d14a      	bne.n	80031e8 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x11c>
				return;

			if (!chipErase())
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 fbfc 	bl	8003950 <_ZN12W25Qxx_Flash9chipEraseEv>
 8003158:	4603      	mov	r3, r0
 800315a:	f083 0301 	eor.w	r3, r3, #1
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	d034      	beq.n	80031ce <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x102>
				return;
 8003164:	e049      	b.n	80031fa <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>
			break;
		case FlashState::READY:
			STRHAL_UART_Write_Blocking(STRHAL_UART_DEBUG, "READY!\n", 7, 100);
 8003166:	2364      	movs	r3, #100	; 0x64
 8003168:	2207      	movs	r2, #7
 800316a:	4926      	ldr	r1, [pc, #152]	; (8003204 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x138>)
 800316c:	2002      	movs	r0, #2
 800316e:	f006 f983 	bl	8009478 <STRHAL_UART_Write_Blocking>
			if (state != FlashState::CLEARING)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d138      	bne.n	80031ec <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x120>
			{
				return;
			}
			if (!writeTempConfig())
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f000 fa8c 	bl	8003698 <_ZN12W25Qxx_Flash15writeTempConfigEv>
 8003180:	4603      	mov	r3, r0
 8003182:	f083 0301 	eor.w	r3, r3, #1
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	d131      	bne.n	80031f0 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x124>
				return;
			if (!sendClearDone())
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f000 f880 	bl	8003292 <_ZN12W25Qxx_Flash13sendClearDoneEv>
 8003192:	4603      	mov	r3, r0
 8003194:	f083 0301 	eor.w	r3, r3, #1
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d019      	beq.n	80031d2 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x106>
				return;
 800319e:	e02c      	b.n	80031fa <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>

			break;
		case FlashState::LOGGING:
			if (state != FlashState::READY)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d125      	bne.n	80031f4 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x128>
			{
				return;
			}
			STRHAL_UART_Write_Blocking(STRHAL_UART_DEBUG, "LOGGING!\n", 9, 100);
 80031a8:	2364      	movs	r3, #100	; 0x64
 80031aa:	2209      	movs	r2, #9
 80031ac:	4916      	ldr	r1, [pc, #88]	; (8003208 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x13c>)
 80031ae:	2002      	movs	r0, #2
 80031b0:	f006 f962 	bl	8009478 <STRHAL_UART_Write_Blocking>
			break;
 80031b4:	e00e      	b.n	80031d4 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x108>
		case FlashState::FULL:
			if (!sendFull())
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 f893 	bl	80032e2 <_ZN12W25Qxx_Flash8sendFullEv>
 80031bc:	4603      	mov	r3, r0
 80031be:	f083 0301 	eor.w	r3, r3, #1
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d117      	bne.n	80031f8 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12c>
				return;
			break;
 80031c8:	e004      	b.n	80031d4 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x108>
		default:
			break;
 80031ca:	bf00      	nop
 80031cc:	e002      	b.n	80031d4 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x108>
			break;
 80031ce:	bf00      	nop
 80031d0:	e000      	b.n	80031d4 <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x108>
			break;
 80031d2:	bf00      	nop
	}
	state = nextState;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	68ba      	ldr	r2, [r7, #8]
 80031d8:	609a      	str	r2, [r3, #8]
	return;
 80031da:	e00e      	b.n	80031fa <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>
				return;
 80031dc:	bf00      	nop
 80031de:	e00c      	b.n	80031fa <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>
				return;
 80031e0:	bf00      	nop
 80031e2:	e00a      	b.n	80031fa <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>
				return;
 80031e4:	bf00      	nop
 80031e6:	e008      	b.n	80031fa <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>
				return;
 80031e8:	bf00      	nop
 80031ea:	e006      	b.n	80031fa <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>
				return;
 80031ec:	bf00      	nop
 80031ee:	e004      	b.n	80031fa <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>
				return;
 80031f0:	bf00      	nop
 80031f2:	e002      	b.n	80031fa <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>
				return;
 80031f4:	bf00      	nop
 80031f6:	e000      	b.n	80031fa <_ZN12W25Qxx_Flash14nextStateLogicE10FlashStatey+0x12e>
				return;
 80031f8:	bf00      	nop
}
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	08009b10 	.word	0x08009b10
 8003204:	08009b1c 	.word	0x08009b1c
 8003208:	08009b24 	.word	0x08009b24

0800320c <_ZN12W25Qxx_Flash8setStateE10FlashState>:

void W25Qxx_Flash::setState(FlashState nextState)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
	externalNextState = nextState;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
}
 800321e:	bf00      	nop
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr

0800322a <_ZN12W25Qxx_Flash8getStateEv>:

FlashState W25Qxx_Flash::getState()
{
 800322a:	b480      	push	{r7}
 800322c:	b083      	sub	sp, #12
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
	return state;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	689b      	ldr	r3, [r3, #8]
}
 8003236:	4618      	mov	r0, r3
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr

08003242 <_ZN12W25Qxx_Flash18sendClearInitiatedEv>:

bool W25Qxx_Flash::sendClearInitiated()
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b094      	sub	sp, #80	; 0x50
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
	Can_MessageData_t msgData =
 800324a:	f107 030c 	add.w	r3, r7, #12
 800324e:	2242      	movs	r2, #66	; 0x42
 8003250:	2100      	movs	r1, #0
 8003252:	4618      	mov	r0, r3
 8003254:	f006 fb1c 	bl	8009890 <memset>
	{ 0 };
	msgData.bit.cmd_id = GENERIC_RES_FLASH_STATUS;
 8003258:	2313      	movs	r3, #19
 800325a:	737b      	strb	r3, [r7, #13]
	msgData.bit.info.channel_id = GENERIC_CHANNEL_ID;
 800325c:	7b3b      	ldrb	r3, [r7, #12]
 800325e:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8003262:	733b      	strb	r3, [r7, #12]
	msgData.bit.info.buffer = DIRECT_BUFFER;
 8003264:	7b3b      	ldrb	r3, [r7, #12]
 8003266:	f36f 1387 	bfc	r3, #6, #2
 800326a:	733b      	strb	r3, [r7, #12]
	msgData.bit.data.uint8[0] = INITIATED;
 800326c:	2300      	movs	r3, #0
 800326e:	73bb      	strb	r3, [r7, #14]

	return (can.send(0, (uint8_t*) &msgData, 1 + sizeof(uint32_t)) == 0) ? true : false;
 8003270:	f107 030c 	add.w	r3, r7, #12
 8003274:	2205      	movs	r2, #5
 8003276:	4619      	mov	r1, r3
 8003278:	2000      	movs	r0, #0
 800327a:	f7fd f9eb 	bl	8000654 <_ZN3Can4sendEmPhh>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	bf0c      	ite	eq
 8003284:	2301      	moveq	r3, #1
 8003286:	2300      	movne	r3, #0
 8003288:	b2db      	uxtb	r3, r3
}
 800328a:	4618      	mov	r0, r3
 800328c:	3750      	adds	r7, #80	; 0x50
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <_ZN12W25Qxx_Flash13sendClearDoneEv>:

bool W25Qxx_Flash::sendClearDone()
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b094      	sub	sp, #80	; 0x50
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
	Can_MessageData_t msgData =
 800329a:	f107 030c 	add.w	r3, r7, #12
 800329e:	2242      	movs	r2, #66	; 0x42
 80032a0:	2100      	movs	r1, #0
 80032a2:	4618      	mov	r0, r3
 80032a4:	f006 faf4 	bl	8009890 <memset>
	{ 0 };
	msgData.bit.cmd_id = GENERIC_RES_FLASH_STATUS;
 80032a8:	2313      	movs	r3, #19
 80032aa:	737b      	strb	r3, [r7, #13]
	msgData.bit.info.channel_id = GENERIC_CHANNEL_ID;
 80032ac:	7b3b      	ldrb	r3, [r7, #12]
 80032ae:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 80032b2:	733b      	strb	r3, [r7, #12]
	msgData.bit.info.buffer = DIRECT_BUFFER;
 80032b4:	7b3b      	ldrb	r3, [r7, #12]
 80032b6:	f36f 1387 	bfc	r3, #6, #2
 80032ba:	733b      	strb	r3, [r7, #12]
	msgData.bit.data.uint8[0] = COMPLETED;
 80032bc:	2301      	movs	r3, #1
 80032be:	73bb      	strb	r3, [r7, #14]

	return (can.send(0, (uint8_t*) &msgData, 1 + sizeof(uint32_t)) == 0) ? true : false;
 80032c0:	f107 030c 	add.w	r3, r7, #12
 80032c4:	2205      	movs	r2, #5
 80032c6:	4619      	mov	r1, r3
 80032c8:	2000      	movs	r0, #0
 80032ca:	f7fd f9c3 	bl	8000654 <_ZN3Can4sendEmPhh>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	bf0c      	ite	eq
 80032d4:	2301      	moveq	r3, #1
 80032d6:	2300      	movne	r3, #0
 80032d8:	b2db      	uxtb	r3, r3
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3750      	adds	r7, #80	; 0x50
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <_ZN12W25Qxx_Flash8sendFullEv>:

bool W25Qxx_Flash::sendFull()
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b094      	sub	sp, #80	; 0x50
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
	Can_MessageData_t msgData =
 80032ea:	f107 030c 	add.w	r3, r7, #12
 80032ee:	2242      	movs	r2, #66	; 0x42
 80032f0:	2100      	movs	r1, #0
 80032f2:	4618      	mov	r0, r3
 80032f4:	f006 facc 	bl	8009890 <memset>
	{ 0 };
	msgData.bit.cmd_id = GENERIC_RES_FLASH_STATUS;
 80032f8:	2313      	movs	r3, #19
 80032fa:	737b      	strb	r3, [r7, #13]
	msgData.bit.info.channel_id = GENERIC_CHANNEL_ID;
 80032fc:	7b3b      	ldrb	r3, [r7, #12]
 80032fe:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8003302:	733b      	strb	r3, [r7, #12]
	msgData.bit.info.buffer = DIRECT_BUFFER;
 8003304:	7b3b      	ldrb	r3, [r7, #12]
 8003306:	f36f 1387 	bfc	r3, #6, #2
 800330a:	733b      	strb	r3, [r7, #12]
	msgData.bit.data.uint8[0] = FULL;
 800330c:	2302      	movs	r3, #2
 800330e:	73bb      	strb	r3, [r7, #14]

	return (can.send(0, (uint8_t*) &msgData, 1 + sizeof(uint32_t)) == 0) ? true : false;
 8003310:	f107 030c 	add.w	r3, r7, #12
 8003314:	2205      	movs	r2, #5
 8003316:	4619      	mov	r1, r3
 8003318:	2000      	movs	r0, #0
 800331a:	f7fd f99b 	bl	8000654 <_ZN3Can4sendEmPhh>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	bf0c      	ite	eq
 8003324:	2301      	moveq	r3, #1
 8003326:	2300      	movne	r3, #0
 8003328:	b2db      	uxtb	r3, r3
}
 800332a:	4618      	mov	r0, r3
 800332c:	3750      	adds	r7, #80	; 0x50
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <_ZN12W25Qxx_Flash6addLogEPhh>:

void W25Qxx_Flash::addLog(uint8_t *data, uint8_t n)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b084      	sub	sp, #16
 8003336:	af00      	add	r7, sp, #0
 8003338:	60f8      	str	r0, [r7, #12]
 800333a:	60b9      	str	r1, [r7, #8]
 800333c:	4613      	mov	r3, r2
 800333e:	71fb      	strb	r3, [r7, #7]
	if (state != FlashState::LOGGING)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	2b03      	cmp	r3, #3
 8003346:	d11d      	bne.n	8003384 <_ZN12W25Qxx_Flash6addLogEPhh+0x52>
		return;
	if (loggingIndex + n >= 256)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 800334e:	461a      	mov	r2, r3
 8003350:	79fb      	ldrb	r3, [r7, #7]
 8003352:	4413      	add	r3, r2
 8003354:	2bff      	cmp	r3, #255	; 0xff
 8003356:	dc17      	bgt.n	8003388 <_ZN12W25Qxx_Flash6addLogEPhh+0x56>
		return;
	memcpy(&loggingBuffer[loggingIndex], data, n);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 800335e:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	4413      	add	r3, r2
 8003366:	79fa      	ldrb	r2, [r7, #7]
 8003368:	68b9      	ldr	r1, [r7, #8]
 800336a:	4618      	mov	r0, r3
 800336c:	f006 fa82 	bl	8009874 <memcpy>
	loggingIndex += n;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f893 2230 	ldrb.w	r2, [r3, #560]	; 0x230
 8003376:	79fb      	ldrb	r3, [r7, #7]
 8003378:	4413      	add	r3, r2
 800337a:	b2da      	uxtb	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
 8003382:	e002      	b.n	800338a <_ZN12W25Qxx_Flash6addLogEPhh+0x58>
		return;
 8003384:	bf00      	nop
 8003386:	e000      	b.n	800338a <_ZN12W25Qxx_Flash6addLogEPhh+0x58>
		return;
 8003388:	bf00      	nop
}
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <_ZNK12W25Qxx_Flash9readSREG1ERh>:

bool W25Qxx_Flash::readSREG1(uint8_t &sreg1) const
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b088      	sub	sp, #32
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
	STRHAL_QSPI_Command_t cmd;
	cmd.instruction_size = 1;
 800339a:	2301      	movs	r3, #1
 800339c:	737b      	strb	r3, [r7, #13]
	cmd.addr_size = 0;
 800339e:	2300      	movs	r3, #0
 80033a0:	753b      	strb	r3, [r7, #20]
	cmd.alt_size = 0;
 80033a2:	2300      	movs	r3, #0
 80033a4:	757b      	strb	r3, [r7, #21]
	cmd.dummy_size = 0;
 80033a6:	2300      	movs	r3, #0
 80033a8:	773b      	strb	r3, [r7, #28]

	cmd.instruction = 0x05;
 80033aa:	2305      	movs	r3, #5
 80033ac:	733b      	strb	r3, [r7, #12]
	if (STRHAL_QSPI_Indirect_Read(&cmd, &sreg1, 1, 100) != 1)
 80033ae:	f107 000c 	add.w	r0, r7, #12
 80033b2:	2364      	movs	r3, #100	; 0x64
 80033b4:	2201      	movs	r2, #1
 80033b6:	6839      	ldr	r1, [r7, #0]
 80033b8:	f004 fcb4 	bl	8007d24 <STRHAL_QSPI_Indirect_Read>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b01      	cmp	r3, #1
 80033c0:	bf14      	ite	ne
 80033c2:	2301      	movne	r3, #1
 80033c4:	2300      	moveq	r3, #0
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <_ZNK12W25Qxx_Flash9readSREG1ERh+0x40>
		return false;
 80033cc:	2300      	movs	r3, #0
 80033ce:	e000      	b.n	80033d2 <_ZNK12W25Qxx_Flash9readSREG1ERh+0x42>

	return true;
 80033d0:	2301      	movs	r3, #1
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3720      	adds	r7, #32
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <_ZN12W25Qxx_Flash11writeEnableEv>:
{
	return readSREG1(sreg1) && readSREG2(sreg2) && readSREG3(sreg3);
}

bool W25Qxx_Flash::writeEnable()
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b088      	sub	sp, #32
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
	STRHAL_QSPI_Command_t cmd;
	cmd.instruction = 0x06;
 80033e2:	2306      	movs	r3, #6
 80033e4:	733b      	strb	r3, [r7, #12]
	cmd.instruction_size = 1;
 80033e6:	2301      	movs	r3, #1
 80033e8:	737b      	strb	r3, [r7, #13]
	cmd.addr_size = 0;
 80033ea:	2300      	movs	r3, #0
 80033ec:	753b      	strb	r3, [r7, #20]
	cmd.alt_size = 0;
 80033ee:	2300      	movs	r3, #0
 80033f0:	757b      	strb	r3, [r7, #21]
	cmd.dummy_size = 0;
 80033f2:	2300      	movs	r3, #0
 80033f4:	773b      	strb	r3, [r7, #28]

	if (waitForSREGFlag(0x01, false, 100) < 0)
 80033f6:	2364      	movs	r3, #100	; 0x64
 80033f8:	2200      	movs	r2, #0
 80033fa:	2101      	movs	r1, #1
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 fae5 	bl	80039cc <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt>
 8003402:	4603      	mov	r3, r0
 8003404:	0fdb      	lsrs	r3, r3, #31
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <_ZN12W25Qxx_Flash11writeEnableEv+0x36>
		return false;
 800340c:	2300      	movs	r3, #0
 800340e:	e00c      	b.n	800342a <_ZN12W25Qxx_Flash11writeEnableEv+0x50>

	return STRHAL_QSPI_Indirect_Write(&cmd, nullptr, 0, 100) == 0;
 8003410:	f107 000c 	add.w	r0, r7, #12
 8003414:	2364      	movs	r3, #100	; 0x64
 8003416:	2200      	movs	r2, #0
 8003418:	2100      	movs	r1, #0
 800341a:	f004 fbc9 	bl	8007bb0 <STRHAL_QSPI_Indirect_Write>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	bf0c      	ite	eq
 8003424:	2301      	moveq	r3, #1
 8003426:	2300      	movne	r3, #0
 8003428:	b2db      	uxtb	r3, r3
}
 800342a:	4618      	mov	r0, r3
 800342c:	3720      	adds	r7, #32
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <_ZN12W25Qxx_Flash10disableWPSEv>:

	return true;
}

bool W25Qxx_Flash::disableWPS()
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b088      	sub	sp, #32
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
	STRHAL_QSPI_Command_t cmd;
	cmd.instruction = 0x11;
 800343a:	2311      	movs	r3, #17
 800343c:	733b      	strb	r3, [r7, #12]
	//cmd.instruction = 0x98;
	cmd.instruction_size = 1;
 800343e:	2301      	movs	r3, #1
 8003440:	737b      	strb	r3, [r7, #13]
	cmd.addr = 0;
 8003442:	2300      	movs	r3, #0
 8003444:	613b      	str	r3, [r7, #16]
	cmd.addr_size = 0;
 8003446:	2300      	movs	r3, #0
 8003448:	753b      	strb	r3, [r7, #20]
	cmd.alt_size = 0;
 800344a:	2300      	movs	r3, #0
 800344c:	757b      	strb	r3, [r7, #21]
	cmd.dummy_size = 0;
 800344e:	2300      	movs	r3, #0
 8003450:	773b      	strb	r3, [r7, #28]

	uint8_t value = 0xFB;
 8003452:	23fb      	movs	r3, #251	; 0xfb
 8003454:	72fb      	strb	r3, [r7, #11]

	if (waitForSREGFlag(0x01, false, 10) < 0)
 8003456:	230a      	movs	r3, #10
 8003458:	2200      	movs	r2, #0
 800345a:	2101      	movs	r1, #1
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 fab5 	bl	80039cc <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt>
 8003462:	4603      	mov	r3, r0
 8003464:	0fdb      	lsrs	r3, r3, #31
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <_ZN12W25Qxx_Flash10disableWPSEv+0x3e>
		return false;
 800346c:	2300      	movs	r3, #0
 800346e:	e01d      	b.n	80034ac <_ZN12W25Qxx_Flash10disableWPSEv+0x7a>

	if (!writeEnable())
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f7ff ffb2 	bl	80033da <_ZN12W25Qxx_Flash11writeEnableEv>
 8003476:	4603      	mov	r3, r0
 8003478:	f083 0301 	eor.w	r3, r3, #1
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <_ZN12W25Qxx_Flash10disableWPSEv+0x54>
		return false;
 8003482:	2300      	movs	r3, #0
 8003484:	e012      	b.n	80034ac <_ZN12W25Qxx_Flash10disableWPSEv+0x7a>

	if (STRHAL_QSPI_Indirect_Write(&cmd, &value, 1, 100) != 1)
 8003486:	f107 010b 	add.w	r1, r7, #11
 800348a:	f107 000c 	add.w	r0, r7, #12
 800348e:	2364      	movs	r3, #100	; 0x64
 8003490:	2201      	movs	r2, #1
 8003492:	f004 fb8d 	bl	8007bb0 <STRHAL_QSPI_Indirect_Write>
 8003496:	4603      	mov	r3, r0
 8003498:	2b01      	cmp	r3, #1
 800349a:	bf14      	ite	ne
 800349c:	2301      	movne	r3, #1
 800349e:	2300      	moveq	r3, #0
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <_ZN12W25Qxx_Flash10disableWPSEv+0x78>
		return false;
 80034a6:	2300      	movs	r3, #0
 80034a8:	e000      	b.n	80034ac <_ZN12W25Qxx_Flash10disableWPSEv+0x7a>

	return true;
 80034aa:	2301      	movs	r3, #1
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3720      	adds	r7, #32
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <_ZN12W25Qxx_Flash18enter4ByteAddrModeEv>:

bool W25Qxx_Flash::enter4ByteAddrMode()
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b088      	sub	sp, #32
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
	STRHAL_QSPI_Command_t cmd;
	cmd.instruction = 0xB7;
 80034bc:	23b7      	movs	r3, #183	; 0xb7
 80034be:	733b      	strb	r3, [r7, #12]
	cmd.instruction_size = 1;
 80034c0:	2301      	movs	r3, #1
 80034c2:	737b      	strb	r3, [r7, #13]
	cmd.addr_size = 0;
 80034c4:	2300      	movs	r3, #0
 80034c6:	753b      	strb	r3, [r7, #20]
	cmd.addr = 0x000000;
 80034c8:	2300      	movs	r3, #0
 80034ca:	613b      	str	r3, [r7, #16]
	cmd.alt_size = 0;
 80034cc:	2300      	movs	r3, #0
 80034ce:	757b      	strb	r3, [r7, #21]
	cmd.dummy_size = 0;
 80034d0:	2300      	movs	r3, #0
 80034d2:	773b      	strb	r3, [r7, #28]

	if (STRHAL_QSPI_Indirect_Write(&cmd, nullptr, 0, 100) != 0)
 80034d4:	f107 000c 	add.w	r0, r7, #12
 80034d8:	2364      	movs	r3, #100	; 0x64
 80034da:	2200      	movs	r2, #0
 80034dc:	2100      	movs	r1, #0
 80034de:	f004 fb67 	bl	8007bb0 <STRHAL_QSPI_Indirect_Write>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	bf14      	ite	ne
 80034e8:	2301      	movne	r3, #1
 80034ea:	2300      	moveq	r3, #0
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <_ZN12W25Qxx_Flash18enter4ByteAddrModeEv+0x42>
		return false;
 80034f2:	2300      	movs	r3, #0
 80034f4:	e000      	b.n	80034f8 <_ZN12W25Qxx_Flash18enter4ByteAddrModeEv+0x44>

	return true;
 80034f6:	2301      	movs	r3, #1
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3720      	adds	r7, #32
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <_ZN12W25Qxx_Flash13writeNextPageEPKhm>:

	return true;
}

uint32_t W25Qxx_Flash::writeNextPage(const uint8_t *data, uint32_t n)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
	if (sectorCount == 8192 - 1)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8003514:	4293      	cmp	r3, r2
 8003516:	d101      	bne.n	800351c <_ZN12W25Qxx_Flash13writeNextPageEPKhm+0x1c>
	{
		return 0;
 8003518:	2300      	movs	r3, #0
 800351a:	e020      	b.n	800355e <_ZN12W25Qxx_Flash13writeNextPageEPKhm+0x5e>
	 return 0;
	 if(!sectorErase(sectorCount))
	 return 0;
	 }*/

	uint32_t numWritten = write((pageCount << 8) | (sectorCount << 12), data, n);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	021a      	lsls	r2, r3, #8
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	031b      	lsls	r3, r3, #12
 8003528:	ea42 0103 	orr.w	r1, r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f000 f818 	bl	8003566 <_ZN12W25Qxx_Flash5writeEmPKhm>
 8003536:	6178      	str	r0, [r7, #20]
	(void) numWritten;
	/*if(numWritten == n)
	 return 0;*/

	if (pageCount == 15)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	2b0f      	cmp	r3, #15
 800353e:	d108      	bne.n	8003552 <_ZN12W25Qxx_Flash13writeNextPageEPKhm+0x52>
	{
		pageCount = 0;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	60da      	str	r2, [r3, #12]
		sectorCount++;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	1c5a      	adds	r2, r3, #1
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	611a      	str	r2, [r3, #16]
 8003550:	e004      	b.n	800355c <_ZN12W25Qxx_Flash13writeNextPageEPKhm+0x5c>
	}
	else
	{
		pageCount++;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	1c5a      	adds	r2, r3, #1
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	60da      	str	r2, [r3, #12]
	}

	return n;
 800355c:	687b      	ldr	r3, [r7, #4]
}
 800355e:	4618      	mov	r0, r3
 8003560:	3718      	adds	r7, #24
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <_ZN12W25Qxx_Flash5writeEmPKhm>:

uint32_t W25Qxx_Flash::write(uint32_t address, const uint8_t *data, uint32_t n)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b08a      	sub	sp, #40	; 0x28
 800356a:	af00      	add	r7, sp, #0
 800356c:	60f8      	str	r0, [r7, #12]
 800356e:	60b9      	str	r1, [r7, #8]
 8003570:	607a      	str	r2, [r7, #4]
 8003572:	603b      	str	r3, [r7, #0]
	STRHAL_QSPI_Command_t cmd;
	cmd.instruction = 0x12;
 8003574:	2312      	movs	r3, #18
 8003576:	753b      	strb	r3, [r7, #20]
	cmd.instruction_size = 1;
 8003578:	2301      	movs	r3, #1
 800357a:	757b      	strb	r3, [r7, #21]
	cmd.addr = address;
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	61bb      	str	r3, [r7, #24]
	cmd.addr_size = 4;
 8003580:	2304      	movs	r3, #4
 8003582:	773b      	strb	r3, [r7, #28]
	cmd.alt_size = 0;
 8003584:	2300      	movs	r3, #0
 8003586:	777b      	strb	r3, [r7, #29]
	cmd.dummy_size = 0;
 8003588:	2300      	movs	r3, #0
 800358a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	if (waitForSREGFlag(0x01, false, 100) < 0)
 800358e:	2364      	movs	r3, #100	; 0x64
 8003590:	2200      	movs	r2, #0
 8003592:	2101      	movs	r1, #1
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f000 fa19 	bl	80039cc <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt>
 800359a:	4603      	mov	r3, r0
 800359c:	0fdb      	lsrs	r3, r3, #31
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <_ZN12W25Qxx_Flash5writeEmPKhm+0x42>
		return 0;
 80035a4:	2300      	movs	r3, #0
 80035a6:	e024      	b.n	80035f2 <_ZN12W25Qxx_Flash5writeEmPKhm+0x8c>

	if (!writeEnable())
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f7ff ff16 	bl	80033da <_ZN12W25Qxx_Flash11writeEnableEv>
 80035ae:	4603      	mov	r3, r0
 80035b0:	f083 0301 	eor.w	r3, r3, #1
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <_ZN12W25Qxx_Flash5writeEmPKhm+0x58>
		return 0;
 80035ba:	2300      	movs	r3, #0
 80035bc:	e019      	b.n	80035f2 <_ZN12W25Qxx_Flash5writeEmPKhm+0x8c>

	if (n > PAGE_SIZE)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035c4:	d902      	bls.n	80035cc <_ZN12W25Qxx_Flash5writeEmPKhm+0x66>
		n = PAGE_SIZE;
 80035c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035ca:	603b      	str	r3, [r7, #0]

	if (STRHAL_QSPI_Indirect_Write(&cmd, data, n, 100) != n)
 80035cc:	f107 0014 	add.w	r0, r7, #20
 80035d0:	2364      	movs	r3, #100	; 0x64
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	f004 faeb 	bl	8007bb0 <STRHAL_QSPI_Indirect_Write>
 80035da:	4602      	mov	r2, r0
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	4293      	cmp	r3, r2
 80035e0:	bf14      	ite	ne
 80035e2:	2301      	movne	r3, #1
 80035e4:	2300      	moveq	r3, #0
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <_ZN12W25Qxx_Flash5writeEmPKhm+0x8a>
		return 0;
 80035ec:	2300      	movs	r3, #0
 80035ee:	e000      	b.n	80035f2 <_ZN12W25Qxx_Flash5writeEmPKhm+0x8c>

	return n;
 80035f0:	683b      	ldr	r3, [r7, #0]
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3728      	adds	r7, #40	; 0x28
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <_ZN12W25Qxx_Flash4readEmPhm>:

uint32_t W25Qxx_Flash::read(uint32_t address, uint8_t *data, uint32_t n)
{
 80035fa:	b5b0      	push	{r4, r5, r7, lr}
 80035fc:	b08a      	sub	sp, #40	; 0x28
 80035fe:	af00      	add	r7, sp, #0
 8003600:	60f8      	str	r0, [r7, #12]
 8003602:	60b9      	str	r1, [r7, #8]
 8003604:	607a      	str	r2, [r7, #4]
 8003606:	603b      	str	r3, [r7, #0]
	STRHAL_QSPI_Command_t cmd;
	cmd.instruction = 0x13;
 8003608:	2313      	movs	r3, #19
 800360a:	753b      	strb	r3, [r7, #20]
	cmd.instruction_size = 1;
 800360c:	2301      	movs	r3, #1
 800360e:	757b      	strb	r3, [r7, #21]
	cmd.addr = address;
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	61bb      	str	r3, [r7, #24]
	cmd.addr_size = 4;
 8003614:	2304      	movs	r3, #4
 8003616:	773b      	strb	r3, [r7, #28]
	cmd.alt_size = 0;
 8003618:	2300      	movs	r3, #0
 800361a:	777b      	strb	r3, [r7, #29]
	cmd.dummy_size = 0;
 800361c:	2300      	movs	r3, #0
 800361e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	if ((uint64_t) address + n > (uint64_t) (1 << SIZE_2N))
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	4618      	mov	r0, r3
 8003626:	f04f 0100 	mov.w	r1, #0
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	461a      	mov	r2, r3
 800362e:	f04f 0300 	mov.w	r3, #0
 8003632:	1884      	adds	r4, r0, r2
 8003634:	eb41 0503 	adc.w	r5, r1, r3
 8003638:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800363c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003640:	42ab      	cmp	r3, r5
 8003642:	bf08      	it	eq
 8003644:	42a2      	cmpeq	r2, r4
 8003646:	d202      	bcs.n	800364e <_ZN12W25Qxx_Flash4readEmPhm+0x54>
		n = 0xFFFFFFFF - address;
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	43db      	mvns	r3, r3
 800364c:	603b      	str	r3, [r7, #0]

	if (waitForSREGFlag(0x01, false, 100) < 0)
 800364e:	2364      	movs	r3, #100	; 0x64
 8003650:	2200      	movs	r2, #0
 8003652:	2101      	movs	r1, #1
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f000 f9b9 	bl	80039cc <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt>
 800365a:	4603      	mov	r3, r0
 800365c:	0fdb      	lsrs	r3, r3, #31
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <_ZN12W25Qxx_Flash4readEmPhm+0x6e>
		return 0;
 8003664:	2300      	movs	r3, #0
 8003666:	e013      	b.n	8003690 <_ZN12W25Qxx_Flash4readEmPhm+0x96>

	if (STRHAL_QSPI_Indirect_Read(&cmd, data, n, 1000) != n)
 8003668:	f107 0014 	add.w	r0, r7, #20
 800366c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	f004 fb56 	bl	8007d24 <STRHAL_QSPI_Indirect_Read>
 8003678:	4602      	mov	r2, r0
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	4293      	cmp	r3, r2
 800367e:	bf14      	ite	ne
 8003680:	2301      	movne	r3, #1
 8003682:	2300      	moveq	r3, #0
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <_ZN12W25Qxx_Flash4readEmPhm+0x94>
		return 0;
 800368a:	2300      	movs	r3, #0
 800368c:	e000      	b.n	8003690 <_ZN12W25Qxx_Flash4readEmPhm+0x96>

	return n;
 800368e:	683b      	ldr	r3, [r7, #0]
}
 8003690:	4618      	mov	r0, r3
 8003692:	3728      	adds	r7, #40	; 0x28
 8003694:	46bd      	mov	sp, r7
 8003696:	bdb0      	pop	{r4, r5, r7, pc}

08003698 <_ZN12W25Qxx_Flash15writeTempConfigEv>:

	return write(CONFIG_BASE, config.bytes, sizeof(config.bytes)) == sizeof(config.bytes);
}

bool W25Qxx_Flash::writeTempConfig()
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
	return write(CONFIG_BASE, config.bytes, sizeof(config.bytes)) == sizeof(config.bytes);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f103 0214 	add.w	r2, r3, #20
 80036a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036aa:	2100      	movs	r1, #0
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f7ff ff5a 	bl	8003566 <_ZN12W25Qxx_Flash5writeEmPKhm>
 80036b2:	4603      	mov	r3, r0
 80036b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036b8:	bf0c      	ite	eq
 80036ba:	2301      	moveq	r3, #1
 80036bc:	2300      	movne	r3, #0
 80036be:	b2db      	uxtb	r3, r3
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3708      	adds	r7, #8
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <_ZN12W25Qxx_Flash15writeConfigRegsEP6ConfigPmt>:
{
	return writeConfigRegs(&reg, &val, 1);
}

bool W25Qxx_Flash::writeConfigRegs(Config *reg, uint32_t *val, uint16_t n)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
 80036d4:	807b      	strh	r3, [r7, #2]
	if (!readConfig())
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 f888 	bl	80037ec <_ZN12W25Qxx_Flash10readConfigEv>
 80036dc:	4603      	mov	r3, r0
 80036de:	f083 0301 	eor.w	r3, r3, #1
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <_ZN12W25Qxx_Flash15writeConfigRegsEP6ConfigPmt+0x24>
		return false;
 80036e8:	2300      	movs	r3, #0
 80036ea:	e033      	b.n	8003754 <_ZN12W25Qxx_Flash15writeConfigRegsEP6ConfigPmt+0x8c>

	for (int i = 0; i < n; i++)
 80036ec:	2300      	movs	r3, #0
 80036ee:	617b      	str	r3, [r7, #20]
 80036f0:	887b      	ldrh	r3, [r7, #2]
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	da12      	bge.n	800371e <_ZN12W25Qxx_Flash15writeConfigRegsEP6ConfigPmt+0x56>
	{
		config.reg[static_cast<int>(reg[i])] = val[i];
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	441a      	add	r2, r3
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	68b9      	ldr	r1, [r7, #8]
 8003706:	440b      	add	r3, r1
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	6812      	ldr	r2, [r2, #0]
 800370c:	68f9      	ldr	r1, [r7, #12]
 800370e:	3304      	adds	r3, #4
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	440b      	add	r3, r1
 8003714:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < n; i++)
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	3301      	adds	r3, #1
 800371a:	617b      	str	r3, [r7, #20]
 800371c:	e7e8      	b.n	80036f0 <_ZN12W25Qxx_Flash15writeConfigRegsEP6ConfigPmt+0x28>
	}

	if (!configErase())
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 f88d 	bl	800383e <_ZN12W25Qxx_Flash11configEraseEv>
 8003724:	4603      	mov	r3, r0
 8003726:	f083 0301 	eor.w	r3, r3, #1
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <_ZN12W25Qxx_Flash15writeConfigRegsEP6ConfigPmt+0x6c>
	{
		return false;
 8003730:	2300      	movs	r3, #0
 8003732:	e00f      	b.n	8003754 <_ZN12W25Qxx_Flash15writeConfigRegsEP6ConfigPmt+0x8c>
	}

	return write(CONFIG_BASE, config.bytes, sizeof(config.bytes)) == sizeof(config.bytes);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f103 0214 	add.w	r2, r3, #20
 800373a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800373e:	2100      	movs	r1, #0
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f7ff ff10 	bl	8003566 <_ZN12W25Qxx_Flash5writeEmPKhm>
 8003746:	4603      	mov	r3, r0
 8003748:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800374c:	bf0c      	ite	eq
 800374e:	2301      	moveq	r3, #1
 8003750:	2300      	movne	r3, #0
 8003752:	b2db      	uxtb	r3, r3

}
 8003754:	4618      	mov	r0, r3
 8003756:	3718      	adds	r7, #24
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <_ZN12W25Qxx_Flash23writeConfigRegsFromAddrEmPmt>:

bool W25Qxx_Flash::writeConfigRegsFromAddr(uint32_t startAddress, uint32_t *val, uint16_t n)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
 8003768:	807b      	strh	r3, [r7, #2]
	if (!readConfig())
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f000 f83e 	bl	80037ec <_ZN12W25Qxx_Flash10readConfigEv>
 8003770:	4603      	mov	r3, r0
 8003772:	f083 0301 	eor.w	r3, r3, #1
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <_ZN12W25Qxx_Flash23writeConfigRegsFromAddrEmPmt+0x24>
		return false;
 800377c:	2300      	movs	r3, #0
 800377e:	e031      	b.n	80037e4 <_ZN12W25Qxx_Flash23writeConfigRegsFromAddrEmPmt+0x88>

	for (int i = 0; i < n; i++)
 8003780:	2300      	movs	r3, #0
 8003782:	617b      	str	r3, [r7, #20]
 8003784:	887b      	ldrh	r3, [r7, #2]
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	429a      	cmp	r2, r3
 800378a:	da10      	bge.n	80037ae <_ZN12W25Qxx_Flash23writeConfigRegsFromAddrEmPmt+0x52>
	{
		config.reg[startAddress + i] = val[i];  //TODO maybe a bug
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	441a      	add	r2, r3
 8003794:	6979      	ldr	r1, [r7, #20]
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	440b      	add	r3, r1
 800379a:	6812      	ldr	r2, [r2, #0]
 800379c:	68f9      	ldr	r1, [r7, #12]
 800379e:	3304      	adds	r3, #4
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	440b      	add	r3, r1
 80037a4:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < n; i++)
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	3301      	adds	r3, #1
 80037aa:	617b      	str	r3, [r7, #20]
 80037ac:	e7ea      	b.n	8003784 <_ZN12W25Qxx_Flash23writeConfigRegsFromAddrEmPmt+0x28>
	}

	if (!configErase())
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f000 f845 	bl	800383e <_ZN12W25Qxx_Flash11configEraseEv>
 80037b4:	4603      	mov	r3, r0
 80037b6:	f083 0301 	eor.w	r3, r3, #1
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <_ZN12W25Qxx_Flash23writeConfigRegsFromAddrEmPmt+0x68>
	{
		return false;
 80037c0:	2300      	movs	r3, #0
 80037c2:	e00f      	b.n	80037e4 <_ZN12W25Qxx_Flash23writeConfigRegsFromAddrEmPmt+0x88>
	}

	return write(CONFIG_BASE, config.bytes, sizeof(config.bytes)) == sizeof(config.bytes);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f103 0214 	add.w	r2, r3, #20
 80037ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037ce:	2100      	movs	r1, #0
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f7ff fec8 	bl	8003566 <_ZN12W25Qxx_Flash5writeEmPKhm>
 80037d6:	4603      	mov	r3, r0
 80037d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037dc:	bf0c      	ite	eq
 80037de:	2301      	moveq	r3, #1
 80037e0:	2300      	movne	r3, #0
 80037e2:	b2db      	uxtb	r3, r3
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3718      	adds	r7, #24
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <_ZN12W25Qxx_Flash10readConfigEv>:

bool W25Qxx_Flash::readConfig()
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
	return read(CONFIG_BASE, config.bytes, sizeof(config.bytes)) == sizeof(config.bytes);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f103 0214 	add.w	r2, r3, #20
 80037fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037fe:	2100      	movs	r1, #0
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f7ff fefa 	bl	80035fa <_ZN12W25Qxx_Flash4readEmPhm>
 8003806:	4603      	mov	r3, r0
 8003808:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800380c:	bf0c      	ite	eq
 800380e:	2301      	moveq	r3, #1
 8003810:	2300      	movne	r3, #0
 8003812:	b2db      	uxtb	r3, r3
}
 8003814:	4618      	mov	r0, r3
 8003816:	3708      	adds	r7, #8
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <_ZN12W25Qxx_Flash13readConfigRegEm>:
	return config.reg[static_cast<int>(reg)];
}

// Update Config by calling readConfig() prior to this!
uint32_t W25Qxx_Flash::readConfigReg(uint32_t regAddr)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
	return config.reg[regAddr];
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	3304      	adds	r3, #4
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4413      	add	r3, r2
 8003830:	685b      	ldr	r3, [r3, #4]
}
 8003832:	4618      	mov	r0, r3
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <_ZN12W25Qxx_Flash11configEraseEv>:

// Erase config, i.e. sets all config registers to 0xFFFF
bool W25Qxx_Flash::configErase()
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b082      	sub	sp, #8
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
	return sectorErase(CONFIG_BASE >> 12);
 8003846:	2100      	movs	r1, #0
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 f834 	bl	80038b6 <_ZN12W25Qxx_Flash11sectorEraseEm>
 800384e:	4603      	mov	r3, r0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <_ZN12W25Qxx_Flash11configResetEv>:

// Resets config, i.e. sets all config registers to 0x000
bool W25Qxx_Flash::configReset()
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < PAGE_SIZE / 4; i++)
 8003860:	2300      	movs	r3, #0
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2b3f      	cmp	r3, #63	; 0x3f
 8003868:	dc0a      	bgt.n	8003880 <_ZN12W25Qxx_Flash11configResetEv+0x28>
	{
		config.reg[i] = 0;
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	3304      	adds	r3, #4
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4413      	add	r3, r2
 8003874:	2200      	movs	r2, #0
 8003876:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < PAGE_SIZE / 4; i++)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	3301      	adds	r3, #1
 800387c:	60fb      	str	r3, [r7, #12]
 800387e:	e7f1      	b.n	8003864 <_ZN12W25Qxx_Flash11configResetEv+0xc>
	}
	return sectorErase(CONFIG_BASE >> 12) && write(CONFIG_BASE, config.bytes, sizeof(config.bytes)) == sizeof(config.bytes);
 8003880:	2100      	movs	r1, #0
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f817 	bl	80038b6 <_ZN12W25Qxx_Flash11sectorEraseEm>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00e      	beq.n	80038ac <_ZN12W25Qxx_Flash11configResetEv+0x54>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f103 0214 	add.w	r2, r3, #20
 8003894:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003898:	2100      	movs	r1, #0
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7ff fe63 	bl	8003566 <_ZN12W25Qxx_Flash5writeEmPKhm>
 80038a0:	4603      	mov	r3, r0
 80038a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038a6:	d101      	bne.n	80038ac <_ZN12W25Qxx_Flash11configResetEv+0x54>
 80038a8:	2301      	movs	r3, #1
 80038aa:	e000      	b.n	80038ae <_ZN12W25Qxx_Flash11configResetEv+0x56>
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <_ZN12W25Qxx_Flash11sectorEraseEm>:

bool W25Qxx_Flash::sectorErase(uint32_t sector)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b088      	sub	sp, #32
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
 80038be:	6039      	str	r1, [r7, #0]
	STRHAL_QSPI_Command_t cmd;
	cmd.instruction = 0x21;
 80038c0:	2321      	movs	r3, #33	; 0x21
 80038c2:	733b      	strb	r3, [r7, #12]
	cmd.instruction_size = 1;
 80038c4:	2301      	movs	r3, #1
 80038c6:	737b      	strb	r3, [r7, #13]
	cmd.addr_size = 4;
 80038c8:	2304      	movs	r3, #4
 80038ca:	753b      	strb	r3, [r7, #20]
	cmd.addr = sector << 12;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	031b      	lsls	r3, r3, #12
 80038d0:	613b      	str	r3, [r7, #16]
	cmd.alt_size = 0;
 80038d2:	2300      	movs	r3, #0
 80038d4:	757b      	strb	r3, [r7, #21]
	cmd.dummy_size = 0;
 80038d6:	2300      	movs	r3, #0
 80038d8:	773b      	strb	r3, [r7, #28]

	if (waitForSREGFlag(0x01, false, 100) < 0)
 80038da:	2364      	movs	r3, #100	; 0x64
 80038dc:	2200      	movs	r2, #0
 80038de:	2101      	movs	r1, #1
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 f873 	bl	80039cc <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt>
 80038e6:	4603      	mov	r3, r0
 80038e8:	0fdb      	lsrs	r3, r3, #31
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <_ZN12W25Qxx_Flash11sectorEraseEm+0x3e>
		return false;
 80038f0:	2300      	movs	r3, #0
 80038f2:	e029      	b.n	8003948 <_ZN12W25Qxx_Flash11sectorEraseEm+0x92>

	if (!writeEnable())
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f7ff fd70 	bl	80033da <_ZN12W25Qxx_Flash11writeEnableEv>
 80038fa:	4603      	mov	r3, r0
 80038fc:	f083 0301 	eor.w	r3, r3, #1
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <_ZN12W25Qxx_Flash11sectorEraseEm+0x54>
		return false;
 8003906:	2300      	movs	r3, #0
 8003908:	e01e      	b.n	8003948 <_ZN12W25Qxx_Flash11sectorEraseEm+0x92>

	if (STRHAL_QSPI_Indirect_Write(&cmd, nullptr, 0, 100) != 0)
 800390a:	f107 000c 	add.w	r0, r7, #12
 800390e:	2364      	movs	r3, #100	; 0x64
 8003910:	2200      	movs	r2, #0
 8003912:	2100      	movs	r1, #0
 8003914:	f004 f94c 	bl	8007bb0 <STRHAL_QSPI_Indirect_Write>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	bf14      	ite	ne
 800391e:	2301      	movne	r3, #1
 8003920:	2300      	moveq	r3, #0
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <_ZN12W25Qxx_Flash11sectorEraseEm+0x76>
		return false;
 8003928:	2300      	movs	r3, #0
 800392a:	e00d      	b.n	8003948 <_ZN12W25Qxx_Flash11sectorEraseEm+0x92>

	if (waitForSREGFlag(0x01, false, 100) < 0)
 800392c:	2364      	movs	r3, #100	; 0x64
 800392e:	2200      	movs	r2, #0
 8003930:	2101      	movs	r1, #1
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f84a 	bl	80039cc <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt>
 8003938:	4603      	mov	r3, r0
 800393a:	0fdb      	lsrs	r3, r3, #31
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <_ZN12W25Qxx_Flash11sectorEraseEm+0x90>
		return false;
 8003942:	2300      	movs	r3, #0
 8003944:	e000      	b.n	8003948 <_ZN12W25Qxx_Flash11sectorEraseEm+0x92>

	return true;
 8003946:	2301      	movs	r3, #1
}
 8003948:	4618      	mov	r0, r3
 800394a:	3720      	adds	r7, #32
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <_ZN12W25Qxx_Flash9chipEraseEv>:

bool W25Qxx_Flash::chipErase()
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b088      	sub	sp, #32
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
	STRHAL_QSPI_Command_t cmd;
	cmd.instruction = 0xC7;
 8003958:	23c7      	movs	r3, #199	; 0xc7
 800395a:	733b      	strb	r3, [r7, #12]
	cmd.instruction_size = 1;
 800395c:	2301      	movs	r3, #1
 800395e:	737b      	strb	r3, [r7, #13]
	cmd.addr_size = 0;
 8003960:	2300      	movs	r3, #0
 8003962:	753b      	strb	r3, [r7, #20]
	cmd.addr = 0;
 8003964:	2300      	movs	r3, #0
 8003966:	613b      	str	r3, [r7, #16]
	cmd.alt_size = 0;
 8003968:	2300      	movs	r3, #0
 800396a:	757b      	strb	r3, [r7, #21]
	cmd.dummy_size = 0;
 800396c:	2300      	movs	r3, #0
 800396e:	773b      	strb	r3, [r7, #28]

	if (waitForSREGFlag(0x01, false, 100) < 0)
 8003970:	2364      	movs	r3, #100	; 0x64
 8003972:	2200      	movs	r2, #0
 8003974:	2101      	movs	r1, #1
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f828 	bl	80039cc <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt>
 800397c:	4603      	mov	r3, r0
 800397e:	0fdb      	lsrs	r3, r3, #31
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <_ZN12W25Qxx_Flash9chipEraseEv+0x3a>
		return false;
 8003986:	2300      	movs	r3, #0
 8003988:	e01c      	b.n	80039c4 <_ZN12W25Qxx_Flash9chipEraseEv+0x74>

	if (!writeEnable())
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7ff fd25 	bl	80033da <_ZN12W25Qxx_Flash11writeEnableEv>
 8003990:	4603      	mov	r3, r0
 8003992:	f083 0301 	eor.w	r3, r3, #1
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <_ZN12W25Qxx_Flash9chipEraseEv+0x50>
		return false;
 800399c:	2300      	movs	r3, #0
 800399e:	e011      	b.n	80039c4 <_ZN12W25Qxx_Flash9chipEraseEv+0x74>

	if (STRHAL_QSPI_Indirect_Write(&cmd, nullptr, 0, 100) != 0)
 80039a0:	f107 000c 	add.w	r0, r7, #12
 80039a4:	2364      	movs	r3, #100	; 0x64
 80039a6:	2200      	movs	r2, #0
 80039a8:	2100      	movs	r1, #0
 80039aa:	f004 f901 	bl	8007bb0 <STRHAL_QSPI_Indirect_Write>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	bf14      	ite	ne
 80039b4:	2301      	movne	r3, #1
 80039b6:	2300      	moveq	r3, #0
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <_ZN12W25Qxx_Flash9chipEraseEv+0x72>
		return false;
 80039be:	2300      	movs	r3, #0
 80039c0:	e000      	b.n	80039c4 <_ZN12W25Qxx_Flash9chipEraseEv+0x74>

	//if(waitForSREGFlag(0x01, false, 100) < 0)
	//return false;

	return true;
 80039c2:	2301      	movs	r3, #1
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3720      	adds	r7, #32
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt>:

int W25Qxx_Flash::waitForSREGFlag(uint8_t flag, bool state, uint16_t tot)
{
 80039cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80039d0:	b086      	sub	sp, #24
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
 80039d6:	4608      	mov	r0, r1
 80039d8:	4611      	mov	r1, r2
 80039da:	461a      	mov	r2, r3
 80039dc:	4603      	mov	r3, r0
 80039de:	70fb      	strb	r3, [r7, #3]
 80039e0:	460b      	mov	r3, r1
 80039e2:	70bb      	strb	r3, [r7, #2]
 80039e4:	4613      	mov	r3, r2
 80039e6:	803b      	strh	r3, [r7, #0]
	uint64_t start = STRHAL_Systick_GetTick();
 80039e8:	f004 fb88 	bl	80080fc <STRHAL_Systick_GetTick>
 80039ec:	e9c7 0104 	strd	r0, r1, [r7, #16]
	uint8_t sreg1;

	if (state)
 80039f0:	78bb      	ldrb	r3, [r7, #2]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d02b      	beq.n	8003a4e <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0x82>
	{
		do
		{
			if (!readSREG1(sreg1))
 80039f6:	f107 030f 	add.w	r3, r7, #15
 80039fa:	4619      	mov	r1, r3
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f7ff fcc7 	bl	8003390 <_ZNK12W25Qxx_Flash9readSREG1ERh>
 8003a02:	4603      	mov	r3, r0
 8003a04:	f083 0301 	eor.w	r3, r3, #1
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d002      	beq.n	8003a14 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0x48>
				return -1;
 8003a0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a12:	e046      	b.n	8003aa2 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0xd6>

			if (STRHAL_Systick_GetTick() - start > 100)
 8003a14:	f004 fb72 	bl	80080fc <STRHAL_Systick_GetTick>
 8003a18:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003a1c:	ebb0 0802 	subs.w	r8, r0, r2
 8003a20:	eb61 0903 	sbc.w	r9, r1, r3
 8003a24:	f1b9 0f00 	cmp.w	r9, #0
 8003a28:	bf08      	it	eq
 8003a2a:	f1b8 0f65 	cmpeq.w	r8, #101	; 0x65
 8003a2e:	bf2c      	ite	cs
 8003a30:	2301      	movcs	r3, #1
 8003a32:	2300      	movcc	r3, #0
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d002      	beq.n	8003a40 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0x74>
				return -1;
 8003a3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a3e:	e030      	b.n	8003aa2 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0xd6>
		} while (!(sreg1 & flag));
 8003a40:	7bfa      	ldrb	r2, [r7, #15]
 8003a42:	78fb      	ldrb	r3, [r7, #3]
 8003a44:	4013      	ands	r3, r2
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d129      	bne.n	8003aa0 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0xd4>
		do
 8003a4c:	e7d3      	b.n	80039f6 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0x2a>
	}
	else
	{
		do
		{
			if (!readSREG1(sreg1))
 8003a4e:	f107 030f 	add.w	r3, r7, #15
 8003a52:	4619      	mov	r1, r3
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f7ff fc9b 	bl	8003390 <_ZNK12W25Qxx_Flash9readSREG1ERh>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	f083 0301 	eor.w	r3, r3, #1
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d002      	beq.n	8003a6c <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0xa0>
				return -1;
 8003a66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a6a:	e01a      	b.n	8003aa2 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0xd6>

			if (STRHAL_Systick_GetTick() - start > 100)
 8003a6c:	f004 fb46 	bl	80080fc <STRHAL_Systick_GetTick>
 8003a70:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003a74:	1a84      	subs	r4, r0, r2
 8003a76:	eb61 0503 	sbc.w	r5, r1, r3
 8003a7a:	2d00      	cmp	r5, #0
 8003a7c:	bf08      	it	eq
 8003a7e:	2c65      	cmpeq	r4, #101	; 0x65
 8003a80:	bf2c      	ite	cs
 8003a82:	2301      	movcs	r3, #1
 8003a84:	2300      	movcc	r3, #0
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d002      	beq.n	8003a92 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0xc6>
				return -1;
 8003a8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a90:	e007      	b.n	8003aa2 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0xd6>
		} while (sreg1 & flag);
 8003a92:	7bfa      	ldrb	r2, [r7, #15]
 8003a94:	78fb      	ldrb	r3, [r7, #3]
 8003a96:	4013      	ands	r3, r2
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d000      	beq.n	8003aa0 <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0xd4>
		do
 8003a9e:	e7d6      	b.n	8003a4e <_ZN12W25Qxx_Flash15waitForSREGFlagEhbt+0x82>
	}

	return 0;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3718      	adds	r7, #24
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08003aac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003aac:	480d      	ldr	r0, [pc, #52]	; (8003ae4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003aae:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ab0:	480d      	ldr	r0, [pc, #52]	; (8003ae8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003ab2:	490e      	ldr	r1, [pc, #56]	; (8003aec <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ab4:	4a0e      	ldr	r2, [pc, #56]	; (8003af0 <LoopForever+0xe>)
  movs r3, #0
 8003ab6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003ab8:	e002      	b.n	8003ac0 <LoopCopyDataInit>

08003aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003abe:	3304      	adds	r3, #4

08003ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ac4:	d3f9      	bcc.n	8003aba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ac6:	4a0b      	ldr	r2, [pc, #44]	; (8003af4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ac8:	4c0b      	ldr	r4, [pc, #44]	; (8003af8 <LoopForever+0x16>)
  movs r3, #0
 8003aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003acc:	e001      	b.n	8003ad2 <LoopFillZerobss>

08003ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ad0:	3204      	adds	r2, #4

08003ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ad4:	d3fb      	bcc.n	8003ace <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003ad6:	f7fd fcab 	bl	8001430 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ada:	f005 fe9f 	bl	800981c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003ade:	f7fd fc09 	bl	80012f4 <main>

08003ae2 <LoopForever>:

LoopForever:
    b LoopForever
 8003ae2:	e7fe      	b.n	8003ae2 <LoopForever>
  ldr   r0, =_estack
 8003ae4:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8003ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003aec:	20000784 	.word	0x20000784
  ldr r2, =_sidata
 8003af0:	0800ad60 	.word	0x0800ad60
  ldr r2, =_sbss
 8003af4:	20000788 	.word	0x20000788
  ldr r4, =_ebss
 8003af8:	20000b74 	.word	0x20000b74

08003afc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003afc:	e7fe      	b.n	8003afc <ADC1_2_IRQHandler>

08003afe <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 8003afe:	b480      	push	{r7}
 8003b00:	b083      	sub	sp, #12
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
 8003b06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0c:	f023 020f 	bic.w	r2, r3, #15
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	431a      	orrs	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d101      	bne.n	8003b3c <LL_ADC_IsEnabled+0x18>
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e000      	b.n	8003b3e <LL_ADC_IsEnabled+0x1a>
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
	...

08003b4c <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8003b4c:	b590      	push	{r4, r7, lr}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003b56:	2300      	movs	r3, #0
 8003b58:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a27      	ldr	r2, [pc, #156]	; (8003bfc <LL_ADC_CommonInit+0xb0>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d10f      	bne.n	8003b82 <LL_ADC_CommonInit+0x36>
 8003b62:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003b66:	f7ff ffdd 	bl	8003b24 <LL_ADC_IsEnabled>
 8003b6a:	4604      	mov	r4, r0
 8003b6c:	4824      	ldr	r0, [pc, #144]	; (8003c00 <LL_ADC_CommonInit+0xb4>)
 8003b6e:	f7ff ffd9 	bl	8003b24 <LL_ADC_IsEnabled>
 8003b72:	4603      	mov	r3, r0
 8003b74:	4323      	orrs	r3, r4
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	bf0c      	ite	eq
 8003b7a:	2301      	moveq	r3, #1
 8003b7c:	2300      	movne	r3, #0
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	e012      	b.n	8003ba8 <LL_ADC_CommonInit+0x5c>
 8003b82:	4820      	ldr	r0, [pc, #128]	; (8003c04 <LL_ADC_CommonInit+0xb8>)
 8003b84:	f7ff ffce 	bl	8003b24 <LL_ADC_IsEnabled>
 8003b88:	4604      	mov	r4, r0
 8003b8a:	481f      	ldr	r0, [pc, #124]	; (8003c08 <LL_ADC_CommonInit+0xbc>)
 8003b8c:	f7ff ffca 	bl	8003b24 <LL_ADC_IsEnabled>
 8003b90:	4603      	mov	r3, r0
 8003b92:	431c      	orrs	r4, r3
 8003b94:	481d      	ldr	r0, [pc, #116]	; (8003c0c <LL_ADC_CommonInit+0xc0>)
 8003b96:	f7ff ffc5 	bl	8003b24 <LL_ADC_IsEnabled>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	4323      	orrs	r3, r4
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	bf0c      	ite	eq
 8003ba2:	2301      	moveq	r3, #1
 8003ba4:	2300      	movne	r3, #0
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d020      	beq.n	8003bee <LL_ADC_CommonInit+0xa2>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d012      	beq.n	8003bda <LL_ADC_CommonInit+0x8e>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689a      	ldr	r2, [r3, #8]
 8003bb8:	4b15      	ldr	r3, [pc, #84]	; (8003c10 <LL_ADC_CommonInit+0xc4>)
 8003bba:	4013      	ands	r3, r2
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	6811      	ldr	r1, [r2, #0]
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	6852      	ldr	r2, [r2, #4]
 8003bc4:	4311      	orrs	r1, r2
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	6892      	ldr	r2, [r2, #8]
 8003bca:	4311      	orrs	r1, r2
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	68d2      	ldr	r2, [r2, #12]
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	609a      	str	r2, [r3, #8]
 8003bd8:	e00b      	b.n	8003bf2 <LL_ADC_CommonInit+0xa6>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	689a      	ldr	r2, [r3, #8]
 8003bde:	4b0c      	ldr	r3, [pc, #48]	; (8003c10 <LL_ADC_CommonInit+0xc4>)
 8003be0:	4013      	ands	r3, r2
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	6812      	ldr	r2, [r2, #0]
 8003be6:	431a      	orrs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	609a      	str	r2, [r3, #8]
 8003bec:	e001      	b.n	8003bf2 <LL_ADC_CommonInit+0xa6>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd90      	pop	{r4, r7, pc}
 8003bfc:	50000300 	.word	0x50000300
 8003c00:	50000100 	.word	0x50000100
 8003c04:	50000400 	.word	0x50000400
 8003c08:	50000500 	.word	0x50000500
 8003c0c:	50000600 	.word	0x50000600
 8003c10:	ffc030e0 	.word	0xffc030e0

08003c14 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7ff ff7e 	bl	8003b24 <LL_ADC_IsEnabled>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d111      	bne.n	8003c52 <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003c36:	f023 0318 	bic.w	r3, r3, #24
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	6811      	ldr	r1, [r2, #0]
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	6852      	ldr	r2, [r2, #4]
 8003c42:	4311      	orrs	r1, r2
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	6892      	ldr	r2, [r2, #8]
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	60da      	str	r2, [r3, #12]
 8003c50:	e001      	b.n	8003c56 <LL_ADC_Init+0x42>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7ff ff58 	bl	8003b24 <LL_ADC_IsEnabled>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d132      	bne.n	8003ce0 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d015      	beq.n	8003cae <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68da      	ldr	r2, [r3, #12]
 8003c86:	4b1a      	ldr	r3, [pc, #104]	; (8003cf0 <LL_ADC_REG_Init+0x90>)
 8003c88:	4013      	ands	r3, r2
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	6811      	ldr	r1, [r2, #0]
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	6892      	ldr	r2, [r2, #8]
 8003c92:	4311      	orrs	r1, r2
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	68d2      	ldr	r2, [r2, #12]
 8003c98:	4311      	orrs	r1, r2
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	6912      	ldr	r2, [r2, #16]
 8003c9e:	4311      	orrs	r1, r2
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	6952      	ldr	r2, [r2, #20]
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	60da      	str	r2, [r3, #12]
 8003cac:	e011      	b.n	8003cd2 <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68da      	ldr	r2, [r3, #12]
 8003cb2:	4b0f      	ldr	r3, [pc, #60]	; (8003cf0 <LL_ADC_REG_Init+0x90>)
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	683a      	ldr	r2, [r7, #0]
 8003cb8:	6811      	ldr	r1, [r2, #0]
 8003cba:	683a      	ldr	r2, [r7, #0]
 8003cbc:	68d2      	ldr	r2, [r2, #12]
 8003cbe:	4311      	orrs	r1, r2
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	6912      	ldr	r2, [r2, #16]
 8003cc4:	4311      	orrs	r1, r2
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	6952      	ldr	r2, [r2, #20]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f7ff ff10 	bl	8003afe <LL_ADC_REG_SetSequencerLength>
 8003cde:	e001      	b.n	8003ce4 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8003ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	fff0c01c 	.word	0xfff0c01c

08003cf4 <LL_DMA_ConfigTransfer>:
  *         @arg @ref LL_DMA_MDATAALIGN_BYTE or @ref LL_DMA_MDATAALIGN_HALFWORD or @ref LL_DMA_MDATAALIGN_WORD
  *         @arg @ref LL_DMA_PRIORITY_LOW or @ref LL_DMA_PRIORITY_MEDIUM or @ref LL_DMA_PRIORITY_HIGH or @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigTransfer(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Configuration)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b087      	sub	sp, #28
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8003d04:	4a0e      	ldr	r2, [pc, #56]	; (8003d40 <LL_DMA_ConfigTransfer+0x4c>)
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	4413      	add	r3, r2
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	4413      	add	r3, r2
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003d18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d1c:	4908      	ldr	r1, [pc, #32]	; (8003d40 <LL_DMA_ConfigTransfer+0x4c>)
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	440a      	add	r2, r1
 8003d22:	7812      	ldrb	r2, [r2, #0]
 8003d24:	4611      	mov	r1, r2
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	440a      	add	r2, r1
 8003d2a:	4611      	mov	r1, r2
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM | DMA_CCR_CIRC | DMA_CCR_PINC | DMA_CCR_MINC | DMA_CCR_PSIZE | DMA_CCR_MSIZE | DMA_CCR_PL,
             Configuration);
}
 8003d32:	bf00      	nop
 8003d34:	371c      	adds	r7, #28
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	08009cec 	.word	0x08009cec

08003d44 <LL_DMA_SetDataLength>:
  *         (*) Not on all G4 devices
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b087      	sub	sp, #28
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 8003d54:	4a0d      	ldr	r2, [pc, #52]	; (8003d8c <LL_DMA_SetDataLength+0x48>)
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	4413      	add	r3, r2
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	4413      	add	r3, r2
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	0c1b      	lsrs	r3, r3, #16
 8003d66:	041b      	lsls	r3, r3, #16
 8003d68:	4908      	ldr	r1, [pc, #32]	; (8003d8c <LL_DMA_SetDataLength+0x48>)
 8003d6a:	68ba      	ldr	r2, [r7, #8]
 8003d6c:	440a      	add	r2, r1
 8003d6e:	7812      	ldrb	r2, [r2, #0]
 8003d70:	4611      	mov	r1, r2
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	440a      	add	r2, r1
 8003d76:	4611      	mov	r1, r2
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 8003d7e:	bf00      	nop
 8003d80:	371c      	adds	r7, #28
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	08009cec 	.word	0x08009cec

08003d90 <LL_DMA_SetMemoryAddress>:
  *         (*) Not on all G4 devices
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b087      	sub	sp, #28
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 8003da0:	4a07      	ldr	r2, [pc, #28]	; (8003dc0 <LL_DMA_SetMemoryAddress+0x30>)
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	4413      	add	r3, r2
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	461a      	mov	r2, r3
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	4413      	add	r3, r2
 8003dae:	461a      	mov	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	60d3      	str	r3, [r2, #12]
}
 8003db4:	bf00      	nop
 8003db6:	371c      	adds	r7, #28
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	08009cec 	.word	0x08009cec

08003dc4 <LL_DMA_SetPeriphAddress>:
  *         (*) Not on all G4 devices
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b087      	sub	sp, #28
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 8003dd4:	4a07      	ldr	r2, [pc, #28]	; (8003df4 <LL_DMA_SetPeriphAddress+0x30>)
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	4413      	add	r3, r2
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	461a      	mov	r2, r3
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	4413      	add	r3, r2
 8003de2:	461a      	mov	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6093      	str	r3, [r2, #8]
}
 8003de8:	bf00      	nop
 8003dea:	371c      	adds	r7, #28
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr
 8003df4:	08009cec 	.word	0x08009cec

08003df8 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD1_TX
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b087      	sub	sp, #28
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	0a9b      	lsrs	r3, r3, #10
 8003e08:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8003e0c:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 8003e10:	00db      	lsls	r3, r3, #3
 8003e12:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 8003e14:	68ba      	ldr	r2, [r7, #8]
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	4413      	add	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003e20:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e2a:	68ba      	ldr	r2, [r7, #8]
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	4413      	add	r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003e36:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	601a      	str	r2, [r3, #0]
}
 8003e40:	bf00      	nop
 8003e42:	371c      	adds	r7, #28
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <LL_DMA_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
   * - MemoryOrM2MDstIncMode:  DMA_CCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_CCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_CCR_MSIZE[1:0] bits
   * - Priority:               DMA_CCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689a      	ldr	r2, [r3, #8]
                        DMA_InitStruct->Mode                   | \
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68db      	ldr	r3, [r3, #12]
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 8003e60:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	691b      	ldr	r3, [r3, #16]
                        DMA_InitStruct->Mode                   | \
 8003e66:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	695b      	ldr	r3, [r3, #20]
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 8003e6c:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699b      	ldr	r3, [r3, #24]
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 8003e72:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstDataSize | \
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	69db      	ldr	r3, [r3, #28]
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 8003e78:	431a      	orrs	r2, r3
                        DMA_InitStruct->Priority);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	461a      	mov	r2, r3
 8003e82:	68b9      	ldr	r1, [r7, #8]
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f7ff ff35 	bl	8003cf4 <LL_DMA_ConfigTransfer>

  /*-------------------------- DMAx CMAR Configuration -------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress: DMA_CMAR_MA[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Channel, DMA_InitStruct->MemoryOrM2MDstAddress);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	68b9      	ldr	r1, [r7, #8]
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f7ff ff7c 	bl	8003d90 <LL_DMA_SetMemoryAddress>

  /*-------------------------- DMAx CPAR Configuration -------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress: DMA_CPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Channel, DMA_InitStruct->PeriphOrM2MSrcAddress);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	68b9      	ldr	r1, [r7, #8]
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f7ff ff8f 	bl	8003dc4 <LL_DMA_SetPeriphAddress>

  /*--------------------------- DMAx CNDTR Configuration -----------------------
   * Configure the peripheral base address with parameter :
   * - NbData: DMA_CNDTR_NDT[15:0] bits
   */
  LL_DMA_SetDataLength(DMAx, Channel, DMA_InitStruct->NbData);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	68b9      	ldr	r1, [r7, #8]
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f7ff ff48 	bl	8003d44 <LL_DMA_SetDataLength>

  /*--------------------------- DMAMUXx CCR Configuration ----------------------
   * Configure the DMA request for DMA Channels on DMAMUX Channel x with parameter :
   * - PeriphRequest: DMA_CxCR[7:0] bits
   */
  LL_DMA_SetPeriphRequest(DMAx, Channel, DMA_InitStruct->PeriphRequest);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb8:	461a      	mov	r2, r3
 8003eba:	68b9      	ldr	r1, [r7, #8]
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f7ff ff9b 	bl	8003df8 <LL_DMA_SetPeriphRequest>

  return (uint32_t)SUCCESS;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <LL_GPIO_SetPinMode>:
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b08b      	sub	sp, #44	; 0x2c
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	fa93 f3a3 	rbit	r3, r3
 8003ee6:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8003ef2:	2320      	movs	r3, #32
 8003ef4:	e003      	b.n	8003efe <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	fab3 f383 	clz	r3, r3
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	005b      	lsls	r3, r3, #1
 8003f00:	2103      	movs	r1, #3
 8003f02:	fa01 f303 	lsl.w	r3, r1, r3
 8003f06:	43db      	mvns	r3, r3
 8003f08:	401a      	ands	r2, r3
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0e:	6a3b      	ldr	r3, [r7, #32]
 8003f10:	fa93 f3a3 	rbit	r3, r3
 8003f14:	61fb      	str	r3, [r7, #28]
  return result;
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d101      	bne.n	8003f24 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8003f20:	2320      	movs	r3, #32
 8003f22:	e003      	b.n	8003f2c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8003f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f26:	fab3 f383 	clz	r3, r3
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	6879      	ldr	r1, [r7, #4]
 8003f30:	fa01 f303 	lsl.w	r3, r1, r3
 8003f34:	431a      	orrs	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	601a      	str	r2, [r3, #0]
}
 8003f3a:	bf00      	nop
 8003f3c:	372c      	adds	r7, #44	; 0x2c
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr

08003f46 <LL_GPIO_SetPinOutputType>:
{
 8003f46:	b480      	push	{r7}
 8003f48:	b085      	sub	sp, #20
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	60f8      	str	r0, [r7, #12]
 8003f4e:	60b9      	str	r1, [r7, #8]
 8003f50:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	43db      	mvns	r3, r3
 8003f5a:	401a      	ands	r2, r3
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	6879      	ldr	r1, [r7, #4]
 8003f60:	fb01 f303 	mul.w	r3, r1, r3
 8003f64:	431a      	orrs	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	605a      	str	r2, [r3, #4]
}
 8003f6a:	bf00      	nop
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <LL_GPIO_SetPinSpeed>:
{
 8003f76:	b480      	push	{r7}
 8003f78:	b08b      	sub	sp, #44	; 0x2c
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	60f8      	str	r0, [r7, #12]
 8003f7e:	60b9      	str	r1, [r7, #8]
 8003f80:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	689a      	ldr	r2, [r3, #8]
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	fa93 f3a3 	rbit	r3, r3
 8003f90:	613b      	str	r3, [r7, #16]
  return result;
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8003f9c:	2320      	movs	r3, #32
 8003f9e:	e003      	b.n	8003fa8 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	fab3 f383 	clz	r3, r3
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	2103      	movs	r1, #3
 8003fac:	fa01 f303 	lsl.w	r3, r1, r3
 8003fb0:	43db      	mvns	r3, r3
 8003fb2:	401a      	ands	r2, r3
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb8:	6a3b      	ldr	r3, [r7, #32]
 8003fba:	fa93 f3a3 	rbit	r3, r3
 8003fbe:	61fb      	str	r3, [r7, #28]
  return result;
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8003fca:	2320      	movs	r3, #32
 8003fcc:	e003      	b.n	8003fd6 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8003fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd0:	fab3 f383 	clz	r3, r3
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	005b      	lsls	r3, r3, #1
 8003fd8:	6879      	ldr	r1, [r7, #4]
 8003fda:	fa01 f303 	lsl.w	r3, r1, r3
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	609a      	str	r2, [r3, #8]
}
 8003fe4:	bf00      	nop
 8003fe6:	372c      	adds	r7, #44	; 0x2c
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <LL_GPIO_SetPinPull>:
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b08b      	sub	sp, #44	; 0x2c
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	68da      	ldr	r2, [r3, #12]
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	fa93 f3a3 	rbit	r3, r3
 800400a:	613b      	str	r3, [r7, #16]
  return result;
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8004016:	2320      	movs	r3, #32
 8004018:	e003      	b.n	8004022 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	fab3 f383 	clz	r3, r3
 8004020:	b2db      	uxtb	r3, r3
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	2103      	movs	r1, #3
 8004026:	fa01 f303 	lsl.w	r3, r1, r3
 800402a:	43db      	mvns	r3, r3
 800402c:	401a      	ands	r2, r3
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004032:	6a3b      	ldr	r3, [r7, #32]
 8004034:	fa93 f3a3 	rbit	r3, r3
 8004038:	61fb      	str	r3, [r7, #28]
  return result;
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	2b00      	cmp	r3, #0
 8004042:	d101      	bne.n	8004048 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8004044:	2320      	movs	r3, #32
 8004046:	e003      	b.n	8004050 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8004048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404a:	fab3 f383 	clz	r3, r3
 800404e:	b2db      	uxtb	r3, r3
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	6879      	ldr	r1, [r7, #4]
 8004054:	fa01 f303 	lsl.w	r3, r1, r3
 8004058:	431a      	orrs	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	60da      	str	r2, [r3, #12]
}
 800405e:	bf00      	nop
 8004060:	372c      	adds	r7, #44	; 0x2c
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <LL_GPIO_SetAFPin_0_7>:
{
 800406a:	b480      	push	{r7}
 800406c:	b08b      	sub	sp, #44	; 0x2c
 800406e:	af00      	add	r7, sp, #0
 8004070:	60f8      	str	r0, [r7, #12]
 8004072:	60b9      	str	r1, [r7, #8]
 8004074:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6a1a      	ldr	r2, [r3, #32]
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	fa93 f3a3 	rbit	r3, r3
 8004084:	613b      	str	r3, [r7, #16]
  return result;
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8004090:	2320      	movs	r3, #32
 8004092:	e003      	b.n	800409c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	fab3 f383 	clz	r3, r3
 800409a:	b2db      	uxtb	r3, r3
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	210f      	movs	r1, #15
 80040a0:	fa01 f303 	lsl.w	r3, r1, r3
 80040a4:	43db      	mvns	r3, r3
 80040a6:	401a      	ands	r2, r3
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ac:	6a3b      	ldr	r3, [r7, #32]
 80040ae:	fa93 f3a3 	rbit	r3, r3
 80040b2:	61fb      	str	r3, [r7, #28]
  return result;
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80040b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80040be:	2320      	movs	r3, #32
 80040c0:	e003      	b.n	80040ca <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c4:	fab3 f383 	clz	r3, r3
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	6879      	ldr	r1, [r7, #4]
 80040ce:	fa01 f303 	lsl.w	r3, r1, r3
 80040d2:	431a      	orrs	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	621a      	str	r2, [r3, #32]
}
 80040d8:	bf00      	nop
 80040da:	372c      	adds	r7, #44	; 0x2c
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <LL_GPIO_SetAFPin_8_15>:
{
 80040e4:	b480      	push	{r7}
 80040e6:	b08b      	sub	sp, #44	; 0x2c
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	0a1b      	lsrs	r3, r3, #8
 80040f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	fa93 f3a3 	rbit	r3, r3
 8004100:	613b      	str	r3, [r7, #16]
  return result;
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d101      	bne.n	8004110 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800410c:	2320      	movs	r3, #32
 800410e:	e003      	b.n	8004118 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	fab3 f383 	clz	r3, r3
 8004116:	b2db      	uxtb	r3, r3
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	210f      	movs	r1, #15
 800411c:	fa01 f303 	lsl.w	r3, r1, r3
 8004120:	43db      	mvns	r3, r3
 8004122:	401a      	ands	r2, r3
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	0a1b      	lsrs	r3, r3, #8
 8004128:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	fa93 f3a3 	rbit	r3, r3
 8004130:	61fb      	str	r3, [r7, #28]
  return result;
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	2b00      	cmp	r3, #0
 800413a:	d101      	bne.n	8004140 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800413c:	2320      	movs	r3, #32
 800413e:	e003      	b.n	8004148 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8004140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004142:	fab3 f383 	clz	r3, r3
 8004146:	b2db      	uxtb	r3, r3
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	6879      	ldr	r1, [r7, #4]
 800414c:	fa01 f303 	lsl.w	r3, r1, r3
 8004150:	431a      	orrs	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004156:	bf00      	nop
 8004158:	372c      	adds	r7, #44	; 0x2c
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b088      	sub	sp, #32
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
 800416a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	fa93 f3a3 	rbit	r3, r3
 8004178:	60fb      	str	r3, [r7, #12]
  return result;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d101      	bne.n	8004188 <LL_GPIO_Init+0x26>
    return 32U;
 8004184:	2320      	movs	r3, #32
 8004186:	e003      	b.n	8004190 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	fab3 f383 	clz	r3, r3
 800418e:	b2db      	uxtb	r3, r3
 8004190:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004192:	e048      	b.n	8004226 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	2101      	movs	r1, #1
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	fa01 f303 	lsl.w	r3, r1, r3
 80041a0:	4013      	ands	r3, r2
 80041a2:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d03a      	beq.n	8004220 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d003      	beq.n	80041ba <LL_GPIO_Init+0x58>
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d10e      	bne.n	80041d8 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	461a      	mov	r2, r3
 80041c0:	69b9      	ldr	r1, [r7, #24]
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7ff fed7 	bl	8003f76 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	6819      	ldr	r1, [r3, #0]
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	461a      	mov	r2, r3
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f7ff feb7 	bl	8003f46 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	461a      	mov	r2, r3
 80041de:	69b9      	ldr	r1, [r7, #24]
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f7ff ff05 	bl	8003ff0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d111      	bne.n	8004212 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	2bff      	cmp	r3, #255	; 0xff
 80041f2:	d807      	bhi.n	8004204 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	461a      	mov	r2, r3
 80041fa:	69b9      	ldr	r1, [r7, #24]
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f7ff ff34 	bl	800406a <LL_GPIO_SetAFPin_0_7>
 8004202:	e006      	b.n	8004212 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	461a      	mov	r2, r3
 800420a:	69b9      	ldr	r1, [r7, #24]
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f7ff ff69 	bl	80040e4 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	461a      	mov	r2, r3
 8004218:	69b9      	ldr	r1, [r7, #24]
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f7ff fe56 	bl	8003ecc <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	3301      	adds	r3, #1
 8004224:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	fa22 f303 	lsr.w	r3, r2, r3
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1af      	bne.n	8004194 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3720      	adds	r7, #32
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
	...

08004240 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004244:	4b07      	ldr	r3, [pc, #28]	; (8004264 <LL_RCC_HSI_IsReady+0x24>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800424c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004250:	d101      	bne.n	8004256 <LL_RCC_HSI_IsReady+0x16>
 8004252:	2301      	movs	r3, #1
 8004254:	e000      	b.n	8004258 <LL_RCC_HSI_IsReady+0x18>
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	40021000 	.word	0x40021000

08004268 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800426c:	4b07      	ldr	r3, [pc, #28]	; (800428c <LL_RCC_LSE_IsReady+0x24>)
 800426e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b02      	cmp	r3, #2
 8004278:	d101      	bne.n	800427e <LL_RCC_LSE_IsReady+0x16>
 800427a:	2301      	movs	r3, #1
 800427c:	e000      	b.n	8004280 <LL_RCC_LSE_IsReady+0x18>
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	40021000 	.word	0x40021000

08004290 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004294:	4b04      	ldr	r3, [pc, #16]	; (80042a8 <LL_RCC_GetSysClkSource+0x18>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f003 030c 	and.w	r3, r3, #12
}
 800429c:	4618      	mov	r0, r3
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	40021000 	.word	0x40021000

080042ac <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80042b0:	4b04      	ldr	r3, [pc, #16]	; (80042c4 <LL_RCC_GetAHBPrescaler+0x18>)
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	40021000 	.word	0x40021000

080042c8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80042cc:	4b04      	ldr	r3, [pc, #16]	; (80042e0 <LL_RCC_GetAPB1Prescaler+0x18>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	40021000 	.word	0x40021000

080042e4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80042e4:	b480      	push	{r7}
 80042e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80042e8:	4b04      	ldr	r3, [pc, #16]	; (80042fc <LL_RCC_GetAPB2Prescaler+0x18>)
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	40021000 	.word	0x40021000

08004300 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8004308:	4b06      	ldr	r3, [pc, #24]	; (8004324 <LL_RCC_GetUSARTClockSource+0x24>)
 800430a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	401a      	ands	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	041b      	lsls	r3, r3, #16
 8004316:	4313      	orrs	r3, r2
}
 8004318:	4618      	mov	r0, r3
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr
 8004324:	40021000 	.word	0x40021000

08004328 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8004330:	4b06      	ldr	r3, [pc, #24]	; (800434c <LL_RCC_GetUARTClockSource+0x24>)
 8004332:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	401a      	ands	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	041b      	lsls	r3, r3, #16
 800433e:	4313      	orrs	r3, r2
}
 8004340:	4618      	mov	r0, r3
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr
 800434c:	40021000 	.word	0x40021000

08004350 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004350:	b480      	push	{r7}
 8004352:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004354:	4b04      	ldr	r3, [pc, #16]	; (8004368 <LL_RCC_PLL_GetMainSource+0x18>)
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	f003 0303 	and.w	r3, r3, #3
}
 800435c:	4618      	mov	r0, r3
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	40021000 	.word	0x40021000

0800436c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between Min_Data = 8 and Max_Data = 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004370:	4b04      	ldr	r3, [pc, #16]	; (8004384 <LL_RCC_PLL_GetN+0x18>)
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	0a1b      	lsrs	r3, r3, #8
 8004376:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800437a:	4618      	mov	r0, r3
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr
 8004384:	40021000 	.word	0x40021000

08004388 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800438c:	4b04      	ldr	r3, [pc, #16]	; (80043a0 <LL_RCC_PLL_GetR+0x18>)
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8004394:	4618      	mov	r0, r3
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	40021000 	.word	0x40021000

080043a4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_14
  *         @arg @ref LL_RCC_PLLM_DIV_15
  *         @arg @ref LL_RCC_PLLM_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80043a4:	b480      	push	{r7}
 80043a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80043a8:	4b04      	ldr	r3, [pc, #16]	; (80043bc <LL_RCC_PLL_GetDivider+0x18>)
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	40021000 	.word	0x40021000

080043c0 <LL_RCC_GetUSARTClockFreq>:
  *
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80043c8:	2300      	movs	r3, #0
 80043ca:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b03      	cmp	r3, #3
 80043d0:	d132      	bne.n	8004438 <LL_RCC_GetUSARTClockFreq+0x78>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7ff ff94 	bl	8004300 <LL_RCC_GetUSARTClockSource>
 80043d8:	4603      	mov	r3, r0
 80043da:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 80043de:	d016      	beq.n	800440e <LL_RCC_GetUSARTClockFreq+0x4e>
 80043e0:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 80043e4:	d81c      	bhi.n	8004420 <LL_RCC_GetUSARTClockFreq+0x60>
 80043e6:	4a52      	ldr	r2, [pc, #328]	; (8004530 <LL_RCC_GetUSARTClockFreq+0x170>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d003      	beq.n	80043f4 <LL_RCC_GetUSARTClockFreq+0x34>
 80043ec:	4a51      	ldr	r2, [pc, #324]	; (8004534 <LL_RCC_GetUSARTClockFreq+0x174>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d004      	beq.n	80043fc <LL_RCC_GetUSARTClockFreq+0x3c>
 80043f2:	e015      	b.n	8004420 <LL_RCC_GetUSARTClockFreq+0x60>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80043f4:	f000 f934 	bl	8004660 <RCC_GetSystemClockFreq>
 80043f8:	60f8      	str	r0, [r7, #12]
        break;
 80043fa:	e094      	b.n	8004526 <LL_RCC_GetUSARTClockFreq+0x166>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80043fc:	f7ff ff20 	bl	8004240 <LL_RCC_HSI_IsReady>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	f000 8082 	beq.w	800450c <LL_RCC_GetUSARTClockFreq+0x14c>
        {
          usart_frequency = HSI_VALUE;
 8004408:	4b4b      	ldr	r3, [pc, #300]	; (8004538 <LL_RCC_GetUSARTClockFreq+0x178>)
 800440a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800440c:	e07e      	b.n	800450c <LL_RCC_GetUSARTClockFreq+0x14c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800440e:	f7ff ff2b 	bl	8004268 <LL_RCC_LSE_IsReady>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d07b      	beq.n	8004510 <LL_RCC_GetUSARTClockFreq+0x150>
        {
          usart_frequency = LSE_VALUE;
 8004418:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800441c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800441e:	e077      	b.n	8004510 <LL_RCC_GetUSARTClockFreq+0x150>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004420:	f000 f91e 	bl	8004660 <RCC_GetSystemClockFreq>
 8004424:	4603      	mov	r3, r0
 8004426:	4618      	mov	r0, r3
 8004428:	f000 f940 	bl	80046ac <RCC_GetHCLKClockFreq>
 800442c:	4603      	mov	r3, r0
 800442e:	4618      	mov	r0, r3
 8004430:	f000 f96a 	bl	8004708 <RCC_GetPCLK2ClockFreq>
 8004434:	60f8      	str	r0, [r7, #12]
        break;
 8004436:	e076      	b.n	8004526 <LL_RCC_GetUSARTClockFreq+0x166>
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b0c      	cmp	r3, #12
 800443c:	d131      	bne.n	80044a2 <LL_RCC_GetUSARTClockFreq+0xe2>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7ff ff5e 	bl	8004300 <LL_RCC_GetUSARTClockSource>
 8004444:	4603      	mov	r3, r0
 8004446:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 800444a:	d015      	beq.n	8004478 <LL_RCC_GetUSARTClockFreq+0xb8>
 800444c:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 8004450:	d81b      	bhi.n	800448a <LL_RCC_GetUSARTClockFreq+0xca>
 8004452:	4a3a      	ldr	r2, [pc, #232]	; (800453c <LL_RCC_GetUSARTClockFreq+0x17c>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d003      	beq.n	8004460 <LL_RCC_GetUSARTClockFreq+0xa0>
 8004458:	4a39      	ldr	r2, [pc, #228]	; (8004540 <LL_RCC_GetUSARTClockFreq+0x180>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d004      	beq.n	8004468 <LL_RCC_GetUSARTClockFreq+0xa8>
 800445e:	e014      	b.n	800448a <LL_RCC_GetUSARTClockFreq+0xca>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8004460:	f000 f8fe 	bl	8004660 <RCC_GetSystemClockFreq>
 8004464:	60f8      	str	r0, [r7, #12]
        break;
 8004466:	e05e      	b.n	8004526 <LL_RCC_GetUSARTClockFreq+0x166>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8004468:	f7ff feea 	bl	8004240 <LL_RCC_HSI_IsReady>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d050      	beq.n	8004514 <LL_RCC_GetUSARTClockFreq+0x154>
        {
          usart_frequency = HSI_VALUE;
 8004472:	4b31      	ldr	r3, [pc, #196]	; (8004538 <LL_RCC_GetUSARTClockFreq+0x178>)
 8004474:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004476:	e04d      	b.n	8004514 <LL_RCC_GetUSARTClockFreq+0x154>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8004478:	f7ff fef6 	bl	8004268 <LL_RCC_LSE_IsReady>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d04a      	beq.n	8004518 <LL_RCC_GetUSARTClockFreq+0x158>
        {
          usart_frequency = LSE_VALUE;
 8004482:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004486:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004488:	e046      	b.n	8004518 <LL_RCC_GetUSARTClockFreq+0x158>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800448a:	f000 f8e9 	bl	8004660 <RCC_GetSystemClockFreq>
 800448e:	4603      	mov	r3, r0
 8004490:	4618      	mov	r0, r3
 8004492:	f000 f90b 	bl	80046ac <RCC_GetHCLKClockFreq>
 8004496:	4603      	mov	r3, r0
 8004498:	4618      	mov	r0, r3
 800449a:	f000 f91f 	bl	80046dc <RCC_GetPCLK1ClockFreq>
 800449e:	60f8      	str	r0, [r7, #12]
        break;
 80044a0:	e041      	b.n	8004526 <LL_RCC_GetUSARTClockFreq+0x166>
    }
  }
  else
  {
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b30      	cmp	r3, #48	; 0x30
 80044a6:	d139      	bne.n	800451c <LL_RCC_GetUSARTClockFreq+0x15c>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f7ff ff29 	bl	8004300 <LL_RCC_GetUSARTClockSource>
 80044ae:	4603      	mov	r3, r0
 80044b0:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80044b4:	d015      	beq.n	80044e2 <LL_RCC_GetUSARTClockFreq+0x122>
 80044b6:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80044ba:	d81b      	bhi.n	80044f4 <LL_RCC_GetUSARTClockFreq+0x134>
 80044bc:	4a21      	ldr	r2, [pc, #132]	; (8004544 <LL_RCC_GetUSARTClockFreq+0x184>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d003      	beq.n	80044ca <LL_RCC_GetUSARTClockFreq+0x10a>
 80044c2:	4a21      	ldr	r2, [pc, #132]	; (8004548 <LL_RCC_GetUSARTClockFreq+0x188>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d004      	beq.n	80044d2 <LL_RCC_GetUSARTClockFreq+0x112>
 80044c8:	e014      	b.n	80044f4 <LL_RCC_GetUSARTClockFreq+0x134>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 80044ca:	f000 f8c9 	bl	8004660 <RCC_GetSystemClockFreq>
 80044ce:	60f8      	str	r0, [r7, #12]
          break;
 80044d0:	e029      	b.n	8004526 <LL_RCC_GetUSARTClockFreq+0x166>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 80044d2:	f7ff feb5 	bl	8004240 <LL_RCC_HSI_IsReady>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d021      	beq.n	8004520 <LL_RCC_GetUSARTClockFreq+0x160>
          {
            usart_frequency = HSI_VALUE;
 80044dc:	4b16      	ldr	r3, [pc, #88]	; (8004538 <LL_RCC_GetUSARTClockFreq+0x178>)
 80044de:	60fb      	str	r3, [r7, #12]
          }
          break;
 80044e0:	e01e      	b.n	8004520 <LL_RCC_GetUSARTClockFreq+0x160>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 80044e2:	f7ff fec1 	bl	8004268 <LL_RCC_LSE_IsReady>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d01b      	beq.n	8004524 <LL_RCC_GetUSARTClockFreq+0x164>
          {
            usart_frequency = LSE_VALUE;
 80044ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044f0:	60fb      	str	r3, [r7, #12]
          }
          break;
 80044f2:	e017      	b.n	8004524 <LL_RCC_GetUSARTClockFreq+0x164>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
        default:
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80044f4:	f000 f8b4 	bl	8004660 <RCC_GetSystemClockFreq>
 80044f8:	4603      	mov	r3, r0
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 f8d6 	bl	80046ac <RCC_GetHCLKClockFreq>
 8004500:	4603      	mov	r3, r0
 8004502:	4618      	mov	r0, r3
 8004504:	f000 f8ea 	bl	80046dc <RCC_GetPCLK1ClockFreq>
 8004508:	60f8      	str	r0, [r7, #12]
          break;
 800450a:	e00c      	b.n	8004526 <LL_RCC_GetUSARTClockFreq+0x166>
        break;
 800450c:	bf00      	nop
 800450e:	e00a      	b.n	8004526 <LL_RCC_GetUSARTClockFreq+0x166>
        break;
 8004510:	bf00      	nop
 8004512:	e008      	b.n	8004526 <LL_RCC_GetUSARTClockFreq+0x166>
        break;
 8004514:	bf00      	nop
 8004516:	e006      	b.n	8004526 <LL_RCC_GetUSARTClockFreq+0x166>
        break;
 8004518:	bf00      	nop
 800451a:	e004      	b.n	8004526 <LL_RCC_GetUSARTClockFreq+0x166>
      }
    }
 800451c:	bf00      	nop
 800451e:	e002      	b.n	8004526 <LL_RCC_GetUSARTClockFreq+0x166>
          break;
 8004520:	bf00      	nop
 8004522:	e000      	b.n	8004526 <LL_RCC_GetUSARTClockFreq+0x166>
          break;
 8004524:	bf00      	nop
  }
  return usart_frequency;
 8004526:	68fb      	ldr	r3, [r7, #12]
}
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	00030001 	.word	0x00030001
 8004534:	00030002 	.word	0x00030002
 8004538:	00f42400 	.word	0x00f42400
 800453c:	000c0004 	.word	0x000c0004
 8004540:	000c0008 	.word	0x000c0008
 8004544:	00300010 	.word	0x00300010
 8004548:	00300020 	.word	0x00300020

0800454c <LL_RCC_GetUARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004554:	2300      	movs	r3, #0
 8004556:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2bc0      	cmp	r3, #192	; 0xc0
 800455c:	d131      	bne.n	80045c2 <LL_RCC_GetUARTClockFreq+0x76>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7ff fee2 	bl	8004328 <LL_RCC_GetUARTClockSource>
 8004564:	4603      	mov	r3, r0
 8004566:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 800456a:	d015      	beq.n	8004598 <LL_RCC_GetUARTClockFreq+0x4c>
 800456c:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8004570:	d81b      	bhi.n	80045aa <LL_RCC_GetUARTClockFreq+0x5e>
 8004572:	4a36      	ldr	r2, [pc, #216]	; (800464c <LL_RCC_GetUARTClockFreq+0x100>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d003      	beq.n	8004580 <LL_RCC_GetUARTClockFreq+0x34>
 8004578:	4a35      	ldr	r2, [pc, #212]	; (8004650 <LL_RCC_GetUARTClockFreq+0x104>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d004      	beq.n	8004588 <LL_RCC_GetUARTClockFreq+0x3c>
 800457e:	e014      	b.n	80045aa <LL_RCC_GetUARTClockFreq+0x5e>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8004580:	f000 f86e 	bl	8004660 <RCC_GetSystemClockFreq>
 8004584:	60f8      	str	r0, [r7, #12]
        break;
 8004586:	e021      	b.n	80045cc <LL_RCC_GetUARTClockFreq+0x80>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8004588:	f7ff fe5a 	bl	8004240 <LL_RCC_HSI_IsReady>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d019      	beq.n	80045c6 <LL_RCC_GetUARTClockFreq+0x7a>
        {
          uart_frequency = HSI_VALUE;
 8004592:	4b30      	ldr	r3, [pc, #192]	; (8004654 <LL_RCC_GetUARTClockFreq+0x108>)
 8004594:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004596:	e016      	b.n	80045c6 <LL_RCC_GetUARTClockFreq+0x7a>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8004598:	f7ff fe66 	bl	8004268 <LL_RCC_LSE_IsReady>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d013      	beq.n	80045ca <LL_RCC_GetUARTClockFreq+0x7e>
        {
          uart_frequency = LSE_VALUE;
 80045a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045a6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80045a8:	e00f      	b.n	80045ca <LL_RCC_GetUARTClockFreq+0x7e>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80045aa:	f000 f859 	bl	8004660 <RCC_GetSystemClockFreq>
 80045ae:	4603      	mov	r3, r0
 80045b0:	4618      	mov	r0, r3
 80045b2:	f000 f87b 	bl	80046ac <RCC_GetHCLKClockFreq>
 80045b6:	4603      	mov	r3, r0
 80045b8:	4618      	mov	r0, r3
 80045ba:	f000 f88f 	bl	80046dc <RCC_GetPCLK1ClockFreq>
 80045be:	60f8      	str	r0, [r7, #12]
        break;
 80045c0:	e004      	b.n	80045cc <LL_RCC_GetUARTClockFreq+0x80>
    }
  }
 80045c2:	bf00      	nop
 80045c4:	e002      	b.n	80045cc <LL_RCC_GetUARTClockFreq+0x80>
        break;
 80045c6:	bf00      	nop
 80045c8:	e000      	b.n	80045cc <LL_RCC_GetUARTClockFreq+0x80>
        break;
 80045ca:	bf00      	nop

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045d2:	d131      	bne.n	8004638 <LL_RCC_GetUARTClockFreq+0xec>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f7ff fea7 	bl	8004328 <LL_RCC_GetUARTClockSource>
 80045da:	4603      	mov	r3, r0
 80045dc:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 80045e0:	d015      	beq.n	800460e <LL_RCC_GetUARTClockFreq+0xc2>
 80045e2:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 80045e6:	d81b      	bhi.n	8004620 <LL_RCC_GetUARTClockFreq+0xd4>
 80045e8:	4a1b      	ldr	r2, [pc, #108]	; (8004658 <LL_RCC_GetUARTClockFreq+0x10c>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d003      	beq.n	80045f6 <LL_RCC_GetUARTClockFreq+0xaa>
 80045ee:	4a1b      	ldr	r2, [pc, #108]	; (800465c <LL_RCC_GetUARTClockFreq+0x110>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d004      	beq.n	80045fe <LL_RCC_GetUARTClockFreq+0xb2>
 80045f4:	e014      	b.n	8004620 <LL_RCC_GetUARTClockFreq+0xd4>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 80045f6:	f000 f833 	bl	8004660 <RCC_GetSystemClockFreq>
 80045fa:	60f8      	str	r0, [r7, #12]
        break;
 80045fc:	e021      	b.n	8004642 <LL_RCC_GetUARTClockFreq+0xf6>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80045fe:	f7ff fe1f 	bl	8004240 <LL_RCC_HSI_IsReady>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d019      	beq.n	800463c <LL_RCC_GetUARTClockFreq+0xf0>
        {
          uart_frequency = HSI_VALUE;
 8004608:	4b12      	ldr	r3, [pc, #72]	; (8004654 <LL_RCC_GetUARTClockFreq+0x108>)
 800460a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800460c:	e016      	b.n	800463c <LL_RCC_GetUARTClockFreq+0xf0>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800460e:	f7ff fe2b 	bl	8004268 <LL_RCC_LSE_IsReady>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d013      	beq.n	8004640 <LL_RCC_GetUARTClockFreq+0xf4>
        {
          uart_frequency = LSE_VALUE;
 8004618:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800461c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800461e:	e00f      	b.n	8004640 <LL_RCC_GetUARTClockFreq+0xf4>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004620:	f000 f81e 	bl	8004660 <RCC_GetSystemClockFreq>
 8004624:	4603      	mov	r3, r0
 8004626:	4618      	mov	r0, r3
 8004628:	f000 f840 	bl	80046ac <RCC_GetHCLKClockFreq>
 800462c:	4603      	mov	r3, r0
 800462e:	4618      	mov	r0, r3
 8004630:	f000 f854 	bl	80046dc <RCC_GetPCLK1ClockFreq>
 8004634:	60f8      	str	r0, [r7, #12]
        break;
 8004636:	e004      	b.n	8004642 <LL_RCC_GetUARTClockFreq+0xf6>
    }
  }
 8004638:	bf00      	nop
 800463a:	e002      	b.n	8004642 <LL_RCC_GetUARTClockFreq+0xf6>
        break;
 800463c:	bf00      	nop
 800463e:	e000      	b.n	8004642 <LL_RCC_GetUARTClockFreq+0xf6>
        break;
 8004640:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8004642:	68fb      	ldr	r3, [r7, #12]
}
 8004644:	4618      	mov	r0, r3
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	00c00040 	.word	0x00c00040
 8004650:	00c00080 	.word	0x00c00080
 8004654:	00f42400 	.word	0x00f42400
 8004658:	03000100 	.word	0x03000100
 800465c:	03000200 	.word	0x03000200

08004660 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8004666:	f7ff fe13 	bl	8004290 <LL_RCC_GetSysClkSource>
 800466a:	4603      	mov	r3, r0
 800466c:	2b0c      	cmp	r3, #12
 800466e:	d00c      	beq.n	800468a <RCC_GetSystemClockFreq+0x2a>
 8004670:	2b0c      	cmp	r3, #12
 8004672:	d80e      	bhi.n	8004692 <RCC_GetSystemClockFreq+0x32>
 8004674:	2b04      	cmp	r3, #4
 8004676:	d002      	beq.n	800467e <RCC_GetSystemClockFreq+0x1e>
 8004678:	2b08      	cmp	r3, #8
 800467a:	d003      	beq.n	8004684 <RCC_GetSystemClockFreq+0x24>
 800467c:	e009      	b.n	8004692 <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800467e:	4b09      	ldr	r3, [pc, #36]	; (80046a4 <RCC_GetSystemClockFreq+0x44>)
 8004680:	607b      	str	r3, [r7, #4]
      break;
 8004682:	e009      	b.n	8004698 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8004684:	4b08      	ldr	r3, [pc, #32]	; (80046a8 <RCC_GetSystemClockFreq+0x48>)
 8004686:	607b      	str	r3, [r7, #4]
      break;
 8004688:	e006      	b.n	8004698 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800468a:	f000 f853 	bl	8004734 <RCC_PLL_GetFreqDomain_SYS>
 800468e:	6078      	str	r0, [r7, #4]
      break;
 8004690:	e002      	b.n	8004698 <RCC_GetSystemClockFreq+0x38>

    default:
      frequency = HSI_VALUE;
 8004692:	4b04      	ldr	r3, [pc, #16]	; (80046a4 <RCC_GetSystemClockFreq+0x44>)
 8004694:	607b      	str	r3, [r7, #4]
      break;
 8004696:	bf00      	nop
  }

  return frequency;
 8004698:	687b      	ldr	r3, [r7, #4]
}
 800469a:	4618      	mov	r0, r3
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	00f42400 	.word	0x00f42400
 80046a8:	007a1200 	.word	0x007a1200

080046ac <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80046b4:	f7ff fdfa 	bl	80042ac <LL_RCC_GetAHBPrescaler>
 80046b8:	4603      	mov	r3, r0
 80046ba:	091b      	lsrs	r3, r3, #4
 80046bc:	f003 030f 	and.w	r3, r3, #15
 80046c0:	4a05      	ldr	r2, [pc, #20]	; (80046d8 <RCC_GetHCLKClockFreq+0x2c>)
 80046c2:	5cd3      	ldrb	r3, [r2, r3]
 80046c4:	f003 031f 	and.w	r3, r3, #31
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3708      	adds	r7, #8
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	08009b88 	.word	0x08009b88

080046dc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80046e4:	f7ff fdf0 	bl	80042c8 <LL_RCC_GetAPB1Prescaler>
 80046e8:	4603      	mov	r3, r0
 80046ea:	0a1b      	lsrs	r3, r3, #8
 80046ec:	4a05      	ldr	r2, [pc, #20]	; (8004704 <RCC_GetPCLK1ClockFreq+0x28>)
 80046ee:	5cd3      	ldrb	r3, [r2, r3]
 80046f0:	f003 031f 	and.w	r3, r3, #31
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	08009b98 	.word	0x08009b98

08004708 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004710:	f7ff fde8 	bl	80042e4 <LL_RCC_GetAPB2Prescaler>
 8004714:	4603      	mov	r3, r0
 8004716:	0adb      	lsrs	r3, r3, #11
 8004718:	4a05      	ldr	r2, [pc, #20]	; (8004730 <RCC_GetPCLK2ClockFreq+0x28>)
 800471a:	5cd3      	ldrb	r3, [r2, r3]
 800471c:	f003 031f 	and.w	r3, r3, #31
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004726:	4618      	mov	r0, r3
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	08009b98 	.word	0x08009b98

08004734 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8004734:	b590      	push	{r4, r7, lr}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800473a:	f7ff fe09 	bl	8004350 <LL_RCC_PLL_GetMainSource>
 800473e:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	2b02      	cmp	r3, #2
 8004744:	d003      	beq.n	800474e <RCC_PLL_GetFreqDomain_SYS+0x1a>
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	2b03      	cmp	r3, #3
 800474a:	d003      	beq.n	8004754 <RCC_PLL_GetFreqDomain_SYS+0x20>
 800474c:	e005      	b.n	800475a <RCC_PLL_GetFreqDomain_SYS+0x26>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800474e:	4b11      	ldr	r3, [pc, #68]	; (8004794 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8004750:	607b      	str	r3, [r7, #4]
      break;
 8004752:	e005      	b.n	8004760 <RCC_PLL_GetFreqDomain_SYS+0x2c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8004754:	4b10      	ldr	r3, [pc, #64]	; (8004798 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8004756:	607b      	str	r3, [r7, #4]
      break;
 8004758:	e002      	b.n	8004760 <RCC_PLL_GetFreqDomain_SYS+0x2c>

    default:
      pllinputfreq = HSI_VALUE;
 800475a:	4b0e      	ldr	r3, [pc, #56]	; (8004794 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 800475c:	607b      	str	r3, [r7, #4]
      break;
 800475e:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004760:	f7ff fe04 	bl	800436c <LL_RCC_PLL_GetN>
 8004764:	4602      	mov	r2, r0
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	fb03 f402 	mul.w	r4, r3, r2
 800476c:	f7ff fe1a 	bl	80043a4 <LL_RCC_PLL_GetDivider>
 8004770:	4603      	mov	r3, r0
 8004772:	091b      	lsrs	r3, r3, #4
 8004774:	3301      	adds	r3, #1
 8004776:	fbb4 f4f3 	udiv	r4, r4, r3
 800477a:	f7ff fe05 	bl	8004388 <LL_RCC_PLL_GetR>
 800477e:	4603      	mov	r3, r0
 8004780:	0e5b      	lsrs	r3, r3, #25
 8004782:	3301      	adds	r3, #1
 8004784:	005b      	lsls	r3, r3, #1
 8004786:	fbb4 f3f3 	udiv	r3, r4, r3
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800478a:	4618      	mov	r0, r3
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	bd90      	pop	{r4, r7, pc}
 8004792:	bf00      	nop
 8004794:	00f42400 	.word	0x00f42400
 8004798:	007a1200 	.word	0x007a1200

0800479c <LL_APB1_GRP1_ForceReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_ForceReset(uint32_t Periphs)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 80047a4:	4b05      	ldr	r3, [pc, #20]	; (80047bc <LL_APB1_GRP1_ForceReset+0x20>)
 80047a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047a8:	4904      	ldr	r1, [pc, #16]	; (80047bc <LL_APB1_GRP1_ForceReset+0x20>)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	638b      	str	r3, [r1, #56]	; 0x38
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr
 80047bc:	40021000 	.word	0x40021000

080047c0 <LL_APB1_GRP1_ReleaseReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_ReleaseReset(uint32_t Periphs)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 80047c8:	4b06      	ldr	r3, [pc, #24]	; (80047e4 <LL_APB1_GRP1_ReleaseReset+0x24>)
 80047ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	43db      	mvns	r3, r3
 80047d0:	4904      	ldr	r1, [pc, #16]	; (80047e4 <LL_APB1_GRP1_ReleaseReset+0x24>)
 80047d2:	4013      	ands	r3, r2
 80047d4:	638b      	str	r3, [r1, #56]	; 0x38
}
 80047d6:	bf00      	nop
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	40021000 	.word	0x40021000

080047e8 <LL_APB2_GRP1_ForceReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 80047f0:	4b05      	ldr	r3, [pc, #20]	; (8004808 <LL_APB2_GRP1_ForceReset+0x20>)
 80047f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047f4:	4904      	ldr	r1, [pc, #16]	; (8004808 <LL_APB2_GRP1_ForceReset+0x20>)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	640b      	str	r3, [r1, #64]	; 0x40
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr
 8004808:	40021000 	.word	0x40021000

0800480c <LL_APB2_GRP1_ReleaseReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8004814:	4b06      	ldr	r3, [pc, #24]	; (8004830 <LL_APB2_GRP1_ReleaseReset+0x24>)
 8004816:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	43db      	mvns	r3, r3
 800481c:	4904      	ldr	r1, [pc, #16]	; (8004830 <LL_APB2_GRP1_ReleaseReset+0x24>)
 800481e:	4013      	ands	r3, r2
 8004820:	640b      	str	r3, [r1, #64]	; 0x40
}
 8004822:	bf00      	nop
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	40021000 	.word	0x40021000

08004834 <LL_SPI_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: SPI registers are de-initialized
  *          - ERROR: SPI registers are not de-initialized
  */
ErrorStatus LL_SPI_DeInit(SPI_TypeDef *SPIx)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(SPIx));

#if defined(SPI1)
  if (SPIx == SPI1)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a1e      	ldr	r2, [pc, #120]	; (80048bc <LL_SPI_DeInit+0x88>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d109      	bne.n	800485c <LL_SPI_DeInit+0x28>
  {
    /* Force reset of SPI clock */
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_SPI1);
 8004848:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800484c:	f7ff ffcc 	bl	80047e8 <LL_APB2_GRP1_ForceReset>

    /* Release reset of SPI clock */
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_SPI1);
 8004850:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004854:	f7ff ffda 	bl	800480c <LL_APB2_GRP1_ReleaseReset>

    status = SUCCESS;
 8004858:	2300      	movs	r3, #0
 800485a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* SPI1 */
#if defined(SPI2)
  if (SPIx == SPI2)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a18      	ldr	r2, [pc, #96]	; (80048c0 <LL_SPI_DeInit+0x8c>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d109      	bne.n	8004878 <LL_SPI_DeInit+0x44>
  {
    /* Force reset of SPI clock */
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_SPI2);
 8004864:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004868:	f7ff ff98 	bl	800479c <LL_APB1_GRP1_ForceReset>

    /* Release reset of SPI clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_SPI2);
 800486c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004870:	f7ff ffa6 	bl	80047c0 <LL_APB1_GRP1_ReleaseReset>

    status = SUCCESS;
 8004874:	2300      	movs	r3, #0
 8004876:	73fb      	strb	r3, [r7, #15]
  }
#endif /* SPI2 */
#if defined(SPI3)
  if (SPIx == SPI3)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a12      	ldr	r2, [pc, #72]	; (80048c4 <LL_SPI_DeInit+0x90>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d109      	bne.n	8004894 <LL_SPI_DeInit+0x60>
  {
    /* Force reset of SPI clock */
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_SPI3);
 8004880:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004884:	f7ff ff8a 	bl	800479c <LL_APB1_GRP1_ForceReset>

    /* Release reset of SPI clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_SPI3);
 8004888:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800488c:	f7ff ff98 	bl	80047c0 <LL_APB1_GRP1_ReleaseReset>

    status = SUCCESS;
 8004890:	2300      	movs	r3, #0
 8004892:	73fb      	strb	r3, [r7, #15]
  }
#endif /* SPI3 */
#if defined(SPI4)
  if (SPIx == SPI4)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a0c      	ldr	r2, [pc, #48]	; (80048c8 <LL_SPI_DeInit+0x94>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d109      	bne.n	80048b0 <LL_SPI_DeInit+0x7c>
  {
    /* Force reset of SPI clock */
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_SPI4);
 800489c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80048a0:	f7ff ffa2 	bl	80047e8 <LL_APB2_GRP1_ForceReset>

    /* Release reset of SPI clock */
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_SPI4);
 80048a4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80048a8:	f7ff ffb0 	bl	800480c <LL_APB2_GRP1_ReleaseReset>

    status = SUCCESS;
 80048ac:	2300      	movs	r3, #0
 80048ae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* SPI4 */

  return status;
 80048b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	40013000 	.word	0x40013000
 80048c0:	40003800 	.word	0x40003800
 80048c4:	40003c00 	.word	0x40003c00
 80048c8:	40013c00 	.word	0x40013c00

080048cc <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	683a      	ldr	r2, [r7, #0]
 80048f6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255 or 65535 for advanced timer.
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <LL_TIM_OC_SetCompareCH5>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	649a      	str	r2, [r3, #72]	; 0x48
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <LL_TIM_OC_SetCompareCH6>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	f043 0201 	orr.w	r2, r3, #1
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	615a      	str	r2, [r3, #20]
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a43      	ldr	r2, [pc, #268]	; (8004b0c <LL_TIM_Init+0x120>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d017      	beq.n	8004a34 <LL_TIM_Init+0x48>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a0a:	d013      	beq.n	8004a34 <LL_TIM_Init+0x48>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a40      	ldr	r2, [pc, #256]	; (8004b10 <LL_TIM_Init+0x124>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d00f      	beq.n	8004a34 <LL_TIM_Init+0x48>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a3f      	ldr	r2, [pc, #252]	; (8004b14 <LL_TIM_Init+0x128>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d00b      	beq.n	8004a34 <LL_TIM_Init+0x48>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a3e      	ldr	r2, [pc, #248]	; (8004b18 <LL_TIM_Init+0x12c>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d007      	beq.n	8004a34 <LL_TIM_Init+0x48>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a3d      	ldr	r2, [pc, #244]	; (8004b1c <LL_TIM_Init+0x130>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d003      	beq.n	8004a34 <LL_TIM_Init+0x48>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a3c      	ldr	r2, [pc, #240]	; (8004b20 <LL_TIM_Init+0x134>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d106      	bne.n	8004a42 <LL_TIM_Init+0x56>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a31      	ldr	r2, [pc, #196]	; (8004b0c <LL_TIM_Init+0x120>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d023      	beq.n	8004a92 <LL_TIM_Init+0xa6>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a50:	d01f      	beq.n	8004a92 <LL_TIM_Init+0xa6>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a2e      	ldr	r2, [pc, #184]	; (8004b10 <LL_TIM_Init+0x124>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d01b      	beq.n	8004a92 <LL_TIM_Init+0xa6>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a2d      	ldr	r2, [pc, #180]	; (8004b14 <LL_TIM_Init+0x128>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d017      	beq.n	8004a92 <LL_TIM_Init+0xa6>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a2c      	ldr	r2, [pc, #176]	; (8004b18 <LL_TIM_Init+0x12c>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d013      	beq.n	8004a92 <LL_TIM_Init+0xa6>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a2b      	ldr	r2, [pc, #172]	; (8004b1c <LL_TIM_Init+0x130>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d00f      	beq.n	8004a92 <LL_TIM_Init+0xa6>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a2b      	ldr	r2, [pc, #172]	; (8004b24 <LL_TIM_Init+0x138>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d00b      	beq.n	8004a92 <LL_TIM_Init+0xa6>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a2a      	ldr	r2, [pc, #168]	; (8004b28 <LL_TIM_Init+0x13c>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d007      	beq.n	8004a92 <LL_TIM_Init+0xa6>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a29      	ldr	r2, [pc, #164]	; (8004b2c <LL_TIM_Init+0x140>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d003      	beq.n	8004a92 <LL_TIM_Init+0xa6>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a24      	ldr	r2, [pc, #144]	; (8004b20 <LL_TIM_Init+0x134>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d106      	bne.n	8004aa0 <LL_TIM_Init+0xb4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	4619      	mov	r1, r3
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f7ff ff1b 	bl	80048e8 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	881b      	ldrh	r3, [r3, #0]
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f7ff ff07 	bl	80048cc <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a12      	ldr	r2, [pc, #72]	; (8004b0c <LL_TIM_Init+0x120>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d013      	beq.n	8004aee <LL_TIM_Init+0x102>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a14      	ldr	r2, [pc, #80]	; (8004b1c <LL_TIM_Init+0x130>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d00f      	beq.n	8004aee <LL_TIM_Init+0x102>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a14      	ldr	r2, [pc, #80]	; (8004b24 <LL_TIM_Init+0x138>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d00b      	beq.n	8004aee <LL_TIM_Init+0x102>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a13      	ldr	r2, [pc, #76]	; (8004b28 <LL_TIM_Init+0x13c>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d007      	beq.n	8004aee <LL_TIM_Init+0x102>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a12      	ldr	r2, [pc, #72]	; (8004b2c <LL_TIM_Init+0x140>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d003      	beq.n	8004aee <LL_TIM_Init+0x102>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a0d      	ldr	r2, [pc, #52]	; (8004b20 <LL_TIM_Init+0x134>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d105      	bne.n	8004afa <LL_TIM_Init+0x10e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	4619      	mov	r1, r3
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f7ff ff05 	bl	8004904 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7ff ff66 	bl	80049cc <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	40012c00 	.word	0x40012c00
 8004b10:	40000400 	.word	0x40000400
 8004b14:	40000800 	.word	0x40000800
 8004b18:	40000c00 	.word	0x40000c00
 8004b1c:	40013400 	.word	0x40013400
 8004b20:	40015000 	.word	0x40015000
 8004b24:	40014000 	.word	0x40014000
 8004b28:	40014400 	.word	0x40014400
 8004b2c:	40014800 	.word	0x40014800

08004b30 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b46:	d045      	beq.n	8004bd4 <LL_TIM_OC_Init+0xa4>
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b4e:	d848      	bhi.n	8004be2 <LL_TIM_OC_Init+0xb2>
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b56:	d036      	beq.n	8004bc6 <LL_TIM_OC_Init+0x96>
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b5e:	d840      	bhi.n	8004be2 <LL_TIM_OC_Init+0xb2>
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b66:	d027      	beq.n	8004bb8 <LL_TIM_OC_Init+0x88>
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b6e:	d838      	bhi.n	8004be2 <LL_TIM_OC_Init+0xb2>
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b76:	d018      	beq.n	8004baa <LL_TIM_OC_Init+0x7a>
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b7e:	d830      	bhi.n	8004be2 <LL_TIM_OC_Init+0xb2>
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d003      	beq.n	8004b8e <LL_TIM_OC_Init+0x5e>
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	2b10      	cmp	r3, #16
 8004b8a:	d007      	beq.n	8004b9c <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8004b8c:	e029      	b.n	8004be2 <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8004b8e:	6879      	ldr	r1, [r7, #4]
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	f000 f82d 	bl	8004bf0 <OC1Config>
 8004b96:	4603      	mov	r3, r0
 8004b98:	75fb      	strb	r3, [r7, #23]
      break;
 8004b9a:	e023      	b.n	8004be4 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8004b9c:	6879      	ldr	r1, [r7, #4]
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f000 f8ac 	bl	8004cfc <OC2Config>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ba8:	e01c      	b.n	8004be4 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8004baa:	6879      	ldr	r1, [r7, #4]
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f000 f92f 	bl	8004e10 <OC3Config>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	75fb      	strb	r3, [r7, #23]
      break;
 8004bb6:	e015      	b.n	8004be4 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8004bb8:	6879      	ldr	r1, [r7, #4]
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f000 f9b2 	bl	8004f24 <OC4Config>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	75fb      	strb	r3, [r7, #23]
      break;
 8004bc4:	e00e      	b.n	8004be4 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8004bc6:	6879      	ldr	r1, [r7, #4]
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f000 fa35 	bl	8005038 <OC5Config>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	75fb      	strb	r3, [r7, #23]
      break;
 8004bd2:	e007      	b.n	8004be4 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8004bd4:	6879      	ldr	r1, [r7, #4]
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f000 fa98 	bl	800510c <OC6Config>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	75fb      	strb	r3, [r7, #23]
      break;
 8004be0:	e000      	b.n	8004be4 <LL_TIM_OC_Init+0xb4>
      break;
 8004be2:	bf00      	nop
  }

  return result;
 8004be4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3718      	adds	r7, #24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
	...

08004bf0 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	f023 0201 	bic.w	r2, r3, #1
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f023 0303 	bic.w	r3, r3, #3
 8004c1e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	6812      	ldr	r2, [r2, #0]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	f023 0202 	bic.w	r2, r3, #2
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	f023 0201 	bic.w	r2, r3, #1
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a24      	ldr	r2, [pc, #144]	; (8004ce4 <OC1Config+0xf4>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d013      	beq.n	8004c7e <OC1Config+0x8e>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a23      	ldr	r2, [pc, #140]	; (8004ce8 <OC1Config+0xf8>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d00f      	beq.n	8004c7e <OC1Config+0x8e>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a22      	ldr	r2, [pc, #136]	; (8004cec <OC1Config+0xfc>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d00b      	beq.n	8004c7e <OC1Config+0x8e>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a21      	ldr	r2, [pc, #132]	; (8004cf0 <OC1Config+0x100>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d007      	beq.n	8004c7e <OC1Config+0x8e>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a20      	ldr	r2, [pc, #128]	; (8004cf4 <OC1Config+0x104>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d003      	beq.n	8004c7e <OC1Config+0x8e>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a1f      	ldr	r2, [pc, #124]	; (8004cf8 <OC1Config+0x108>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d11e      	bne.n	8004cbc <OC1Config+0xcc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	f023 0208 	bic.w	r2, r3, #8
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f023 0204 	bic.w	r2, r3, #4
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	69db      	ldr	r3, [r3, #28]
 8004cb6:	005b      	lsls	r3, r3, #1
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	4619      	mov	r1, r3
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f7ff fe26 	bl	8004920 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3718      	adds	r7, #24
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	40012c00 	.word	0x40012c00
 8004ce8:	40013400 	.word	0x40013400
 8004cec:	40014000 	.word	0x40014000
 8004cf0:	40014400 	.word	0x40014400
 8004cf4:	40014800 	.word	0x40014800
 8004cf8:	40015000 	.word	0x40015000

08004cfc <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	f023 0210 	bic.w	r2, r3, #16
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d36:	683a      	ldr	r2, [r7, #0]
 8004d38:	6812      	ldr	r2, [r2, #0]
 8004d3a:	0212      	lsls	r2, r2, #8
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	f023 0220 	bic.w	r2, r3, #32
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	011b      	lsls	r3, r3, #4
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	f023 0210 	bic.w	r2, r3, #16
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	011b      	lsls	r3, r3, #4
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a25      	ldr	r2, [pc, #148]	; (8004df8 <OC2Config+0xfc>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d013      	beq.n	8004d90 <OC2Config+0x94>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a24      	ldr	r2, [pc, #144]	; (8004dfc <OC2Config+0x100>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d00f      	beq.n	8004d90 <OC2Config+0x94>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a23      	ldr	r2, [pc, #140]	; (8004e00 <OC2Config+0x104>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d00b      	beq.n	8004d90 <OC2Config+0x94>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a22      	ldr	r2, [pc, #136]	; (8004e04 <OC2Config+0x108>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d007      	beq.n	8004d90 <OC2Config+0x94>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a21      	ldr	r2, [pc, #132]	; (8004e08 <OC2Config+0x10c>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d003      	beq.n	8004d90 <OC2Config+0x94>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a20      	ldr	r2, [pc, #128]	; (8004e0c <OC2Config+0x110>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d11f      	bne.n	8004dd0 <OC2Config+0xd4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	019b      	lsls	r3, r3, #6
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	019b      	lsls	r3, r3, #6
 8004dac:	4313      	orrs	r3, r2
 8004dae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	69db      	ldr	r3, [r3, #28]
 8004dca:	00db      	lsls	r3, r3, #3
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	4619      	mov	r1, r3
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f7ff fdaa 	bl	800493c <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	40012c00 	.word	0x40012c00
 8004dfc:	40013400 	.word	0x40013400
 8004e00:	40014000 	.word	0x40014000
 8004e04:	40014400 	.word	0x40014400
 8004e08:	40014800 	.word	0x40014800
 8004e0c:	40015000 	.word	0x40015000

08004e10 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b086      	sub	sp, #24
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f023 0303 	bic.w	r3, r3, #3
 8004e3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	6812      	ldr	r2, [r2, #0]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	021b      	lsls	r3, r3, #8
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	021b      	lsls	r3, r3, #8
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a25      	ldr	r2, [pc, #148]	; (8004f0c <OC3Config+0xfc>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d013      	beq.n	8004ea2 <OC3Config+0x92>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a24      	ldr	r2, [pc, #144]	; (8004f10 <OC3Config+0x100>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d00f      	beq.n	8004ea2 <OC3Config+0x92>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a23      	ldr	r2, [pc, #140]	; (8004f14 <OC3Config+0x104>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d00b      	beq.n	8004ea2 <OC3Config+0x92>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a22      	ldr	r2, [pc, #136]	; (8004f18 <OC3Config+0x108>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d007      	beq.n	8004ea2 <OC3Config+0x92>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a21      	ldr	r2, [pc, #132]	; (8004f1c <OC3Config+0x10c>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d003      	beq.n	8004ea2 <OC3Config+0x92>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a20      	ldr	r2, [pc, #128]	; (8004f20 <OC3Config+0x110>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d11f      	bne.n	8004ee2 <OC3Config+0xd2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	029b      	lsls	r3, r3, #10
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	029b      	lsls	r3, r3, #10
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	011b      	lsls	r3, r3, #4
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	69db      	ldr	r3, [r3, #28]
 8004edc:	015b      	lsls	r3, r3, #5
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	693a      	ldr	r2, [r7, #16]
 8004ee6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f7ff fd2f 	bl	8004958 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	697a      	ldr	r2, [r7, #20]
 8004efe:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3718      	adds	r7, #24
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	40012c00 	.word	0x40012c00
 8004f10:	40013400 	.word	0x40013400
 8004f14:	40014000 	.word	0x40014000
 8004f18:	40014400 	.word	0x40014400
 8004f1c:	40014800 	.word	0x40014800
 8004f20:	40015000 	.word	0x40015000

08004f24 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	69db      	ldr	r3, [r3, #28]
 8004f4a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f5e:	683a      	ldr	r2, [r7, #0]
 8004f60:	6812      	ldr	r2, [r2, #0]
 8004f62:	0212      	lsls	r2, r2, #8
 8004f64:	4313      	orrs	r3, r2
 8004f66:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	031b      	lsls	r3, r3, #12
 8004f74:	4313      	orrs	r3, r2
 8004f76:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	031b      	lsls	r3, r3, #12
 8004f84:	4313      	orrs	r3, r2
 8004f86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a25      	ldr	r2, [pc, #148]	; (8005020 <OC4Config+0xfc>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d013      	beq.n	8004fb8 <OC4Config+0x94>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a24      	ldr	r2, [pc, #144]	; (8005024 <OC4Config+0x100>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d00f      	beq.n	8004fb8 <OC4Config+0x94>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a23      	ldr	r2, [pc, #140]	; (8005028 <OC4Config+0x104>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d00b      	beq.n	8004fb8 <OC4Config+0x94>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a22      	ldr	r2, [pc, #136]	; (800502c <OC4Config+0x108>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d007      	beq.n	8004fb8 <OC4Config+0x94>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a21      	ldr	r2, [pc, #132]	; (8005030 <OC4Config+0x10c>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d003      	beq.n	8004fb8 <OC4Config+0x94>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a20      	ldr	r2, [pc, #128]	; (8005034 <OC4Config+0x110>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d11f      	bne.n	8004ff8 <OC4Config+0xd4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC4NP, TIM_OCInitStruct->OCNPolarity << 14U);
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	039b      	lsls	r3, r3, #14
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC4NE, TIM_OCInitStruct->OCNState << 14U);
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	039b      	lsls	r3, r3, #14
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	019b      	lsls	r3, r3, #6
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4N, TIM_OCInitStruct->OCNIdleState << 7U);
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	69db      	ldr	r3, [r3, #28]
 8004ff2:	01db      	lsls	r3, r3, #7
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	4619      	mov	r1, r3
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f7ff fcb2 	bl	8004974 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3718      	adds	r7, #24
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	40012c00 	.word	0x40012c00
 8005024:	40013400 	.word	0x40013400
 8005028:	40014000 	.word	0x40014000
 800502c:	40014400 	.word	0x40014400
 8005030:	40014800 	.word	0x40014800
 8005034:	40015000 	.word	0x40015000

08005038 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a1b      	ldr	r3, [r3, #32]
 8005046:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005058:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005060:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005064:	683a      	ldr	r2, [r7, #0]
 8005066:	6812      	ldr	r2, [r2, #0]
 8005068:	4313      	orrs	r3, r2
 800506a:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	041b      	lsls	r3, r3, #16
 8005078:	4313      	orrs	r3, r2
 800507a:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	041b      	lsls	r3, r3, #16
 8005088:	4313      	orrs	r3, r2
 800508a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a19      	ldr	r2, [pc, #100]	; (80050f4 <OC5Config+0xbc>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d013      	beq.n	80050bc <OC5Config+0x84>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a18      	ldr	r2, [pc, #96]	; (80050f8 <OC5Config+0xc0>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d00f      	beq.n	80050bc <OC5Config+0x84>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a17      	ldr	r2, [pc, #92]	; (80050fc <OC5Config+0xc4>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d00b      	beq.n	80050bc <OC5Config+0x84>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a16      	ldr	r2, [pc, #88]	; (8005100 <OC5Config+0xc8>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d007      	beq.n	80050bc <OC5Config+0x84>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a15      	ldr	r2, [pc, #84]	; (8005104 <OC5Config+0xcc>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d003      	beq.n	80050bc <OC5Config+0x84>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a14      	ldr	r2, [pc, #80]	; (8005108 <OC5Config+0xd0>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d109      	bne.n	80050d0 <OC5Config+0x98>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	021b      	lsls	r3, r3, #8
 80050ca:	431a      	orrs	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	4619      	mov	r1, r3
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f7ff fc57 	bl	8004990 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	40012c00 	.word	0x40012c00
 80050f8:	40013400 	.word	0x40013400
 80050fc:	40014000 	.word	0x40014000
 8005100:	40014400 	.word	0x40014400
 8005104:	40014800 	.word	0x40014800
 8005108:	40015000 	.word	0x40015000

0800510c <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a1b      	ldr	r3, [r3, #32]
 800511a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800512c:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005134:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005138:	683a      	ldr	r2, [r7, #0]
 800513a:	6812      	ldr	r2, [r2, #0]
 800513c:	0212      	lsls	r2, r2, #8
 800513e:	4313      	orrs	r3, r2
 8005140:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	051b      	lsls	r3, r3, #20
 800514e:	4313      	orrs	r3, r2
 8005150:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	051b      	lsls	r3, r3, #20
 800515e:	4313      	orrs	r3, r2
 8005160:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a18      	ldr	r2, [pc, #96]	; (80051c8 <OC6Config+0xbc>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d013      	beq.n	8005192 <OC6Config+0x86>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a17      	ldr	r2, [pc, #92]	; (80051cc <OC6Config+0xc0>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d00f      	beq.n	8005192 <OC6Config+0x86>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a16      	ldr	r2, [pc, #88]	; (80051d0 <OC6Config+0xc4>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d00b      	beq.n	8005192 <OC6Config+0x86>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a15      	ldr	r2, [pc, #84]	; (80051d4 <OC6Config+0xc8>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d007      	beq.n	8005192 <OC6Config+0x86>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a14      	ldr	r2, [pc, #80]	; (80051d8 <OC6Config+0xcc>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d003      	beq.n	8005192 <OC6Config+0x86>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a13      	ldr	r2, [pc, #76]	; (80051dc <OC6Config+0xd0>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d109      	bne.n	80051a6 <OC6Config+0x9a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	029b      	lsls	r3, r3, #10
 80051a0:	431a      	orrs	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	4619      	mov	r1, r3
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f7ff fbfc 	bl	80049b0 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	40012c00 	.word	0x40012c00
 80051cc:	40013400 	.word	0x40013400
 80051d0:	40014000 	.word	0x40014000
 80051d4:	40014400 	.word	0x40014400
 80051d8:	40014800 	.word	0x40014800
 80051dc:	40015000 	.word	0x40015000

080051e0 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0301 	and.w	r3, r3, #1
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d101      	bne.n	80051f8 <LL_USART_IsEnabled+0x18>
 80051f4:	2301      	movs	r3, #1
 80051f6:	e000      	b.n	80051fa <LL_USART_IsEnabled+0x1a>
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	370c      	adds	r7, #12
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr

08005206 <LL_USART_SetPrescaler>:
  *         @arg @ref LL_USART_PRESCALER_DIV128
  *         @arg @ref LL_USART_PRESCALER_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetPrescaler(USART_TypeDef *USARTx, uint32_t PrescalerValue)
{
 8005206:	b480      	push	{r7}
 8005208:	b083      	sub	sp, #12
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
 800520e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005214:	f023 030f 	bic.w	r3, r3, #15
 8005218:	683a      	ldr	r2, [r7, #0]
 800521a:	b292      	uxth	r2, r2
 800521c:	431a      	orrs	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005222:	bf00      	nop
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr

0800522e <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 800522e:	b480      	push	{r7}
 8005230:	b083      	sub	sp, #12
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
 8005236:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	431a      	orrs	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	605a      	str	r2, [r3, #4]
}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	431a      	orrs	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	609a      	str	r2, [r3, #8]
}
 800526e:	bf00      	nop
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
	...

0800527c <LL_USART_SetBaudRate>:
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t PrescalerValue,
                                          uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 800527c:	b480      	push	{r7}
 800527e:	b087      	sub	sp, #28
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
 8005288:	603b      	str	r3, [r7, #0]
  uint32_t usartdiv;
  uint32_t brrtemp;

  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2b0b      	cmp	r3, #11
 800528e:	d83c      	bhi.n	800530a <LL_USART_SetBaudRate+0x8e>
  {
    /* Do not overstep the size of USART_PRESCALER_TAB */
  }
  else if (BaudRate == 0U)
 8005290:	6a3b      	ldr	r3, [r7, #32]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d039      	beq.n	800530a <LL_USART_SetBaudRate+0x8e>
  {
    /* Can Not divide per 0 */
  }
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800529c:	d122      	bne.n	80052e4 <LL_USART_SetBaudRate+0x68>
  {
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	461a      	mov	r2, r3
 80052a4:	4b1c      	ldr	r3, [pc, #112]	; (8005318 <LL_USART_SetBaudRate+0x9c>)
 80052a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052aa:	68ba      	ldr	r2, [r7, #8]
 80052ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b0:	005a      	lsls	r2, r3, #1
 80052b2:	6a3b      	ldr	r3, [r7, #32]
 80052b4:	085b      	lsrs	r3, r3, #1
 80052b6:	441a      	add	r2, r3
 80052b8:	6a3b      	ldr	r3, [r7, #32]
 80052ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80052be:	b29b      	uxth	r3, r3
 80052c0:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80052c8:	4013      	ands	r3, r2
 80052ca:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	085b      	lsrs	r3, r3, #1
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	f003 0307 	and.w	r3, r3, #7
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	4313      	orrs	r3, r2
 80052da:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
  }
}
 80052e2:	e012      	b.n	800530a <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	461a      	mov	r2, r3
 80052ea:	4b0b      	ldr	r3, [pc, #44]	; (8005318 <LL_USART_SetBaudRate+0x9c>)
 80052ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052f0:	68ba      	ldr	r2, [r7, #8]
 80052f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80052f6:	6a3b      	ldr	r3, [r7, #32]
 80052f8:	085b      	lsrs	r3, r3, #1
 80052fa:	441a      	add	r2, r3
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005302:	b29b      	uxth	r3, r3
 8005304:	461a      	mov	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	60da      	str	r2, [r3, #12]
}
 800530a:	bf00      	nop
 800530c:	371c      	adds	r7, #28
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	08009cf4 	.word	0x08009cf4

0800531c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af02      	add	r7, sp, #8
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800532a:	2300      	movs	r3, #0
 800532c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f7ff ff56 	bl	80051e0 <LL_USART_IsEnabled>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d165      	bne.n	8005406 <LL_USART_Init+0xea>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	4b34      	ldr	r3, [pc, #208]	; (8005410 <LL_USART_Init+0xf4>)
 8005340:	4013      	ands	r3, r2
 8005342:	683a      	ldr	r2, [r7, #0]
 8005344:	6891      	ldr	r1, [r2, #8]
 8005346:	683a      	ldr	r2, [r7, #0]
 8005348:	6912      	ldr	r2, [r2, #16]
 800534a:	4311      	orrs	r1, r2
 800534c:	683a      	ldr	r2, [r7, #0]
 800534e:	6952      	ldr	r2, [r2, #20]
 8005350:	4311      	orrs	r1, r2
 8005352:	683a      	ldr	r2, [r7, #0]
 8005354:	69d2      	ldr	r2, [r2, #28]
 8005356:	430a      	orrs	r2, r1
 8005358:	431a      	orrs	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	4619      	mov	r1, r3
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f7ff ff62 	bl	800522e <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	4619      	mov	r1, r3
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f7ff ff6f 	bl	8005254 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a26      	ldr	r2, [pc, #152]	; (8005414 <LL_USART_Init+0xf8>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d104      	bne.n	8005388 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800537e:	2003      	movs	r0, #3
 8005380:	f7ff f81e 	bl	80043c0 <LL_RCC_GetUSARTClockFreq>
 8005384:	60b8      	str	r0, [r7, #8]
 8005386:	e023      	b.n	80053d0 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a23      	ldr	r2, [pc, #140]	; (8005418 <LL_USART_Init+0xfc>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d104      	bne.n	800539a <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8005390:	200c      	movs	r0, #12
 8005392:	f7ff f815 	bl	80043c0 <LL_RCC_GetUSARTClockFreq>
 8005396:	60b8      	str	r0, [r7, #8]
 8005398:	e01a      	b.n	80053d0 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART3)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a1f      	ldr	r2, [pc, #124]	; (800541c <LL_USART_Init+0x100>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d104      	bne.n	80053ac <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 80053a2:	2030      	movs	r0, #48	; 0x30
 80053a4:	f7ff f80c 	bl	80043c0 <LL_RCC_GetUSARTClockFreq>
 80053a8:	60b8      	str	r0, [r7, #8]
 80053aa:	e011      	b.n	80053d0 <LL_USART_Init+0xb4>
    }
#if defined(UART4)
    else if (USARTx == UART4)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a1c      	ldr	r2, [pc, #112]	; (8005420 <LL_USART_Init+0x104>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d104      	bne.n	80053be <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 80053b4:	20c0      	movs	r0, #192	; 0xc0
 80053b6:	f7ff f8c9 	bl	800454c <LL_RCC_GetUARTClockFreq>
 80053ba:	60b8      	str	r0, [r7, #8]
 80053bc:	e008      	b.n	80053d0 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a18      	ldr	r2, [pc, #96]	; (8005424 <LL_USART_Init+0x108>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d104      	bne.n	80053d0 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 80053c6:	f44f 7040 	mov.w	r0, #768	; 0x300
 80053ca:	f7ff f8bf 	bl	800454c <LL_RCC_GetUARTClockFreq>
 80053ce:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d011      	beq.n	80053fa <LL_USART_Init+0xde>
        && (USART_InitStruct->BaudRate != 0U))
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00d      	beq.n	80053fa <LL_USART_Init+0xde>
    {
      status = SUCCESS;
 80053de:	2300      	movs	r3, #0
 80053e0:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	69d9      	ldr	r1, [r3, #28]
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	9300      	str	r3, [sp, #0]
 80053f0:	460b      	mov	r3, r1
 80053f2:	68b9      	ldr	r1, [r7, #8]
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f7ff ff41 	bl	800527c <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4619      	mov	r1, r3
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f7ff ff00 	bl	8005206 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8005406:	7bfb      	ldrb	r3, [r7, #15]
}
 8005408:	4618      	mov	r0, r3
 800540a:	3710      	adds	r7, #16
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	efff69f3 	.word	0xefff69f3
 8005414:	40013800 	.word	0x40013800
 8005418:	40004400 	.word	0x40004400
 800541c:	40004800 	.word	0x40004800
 8005420:	40004c00 	.word	0x40004c00
 8005424:	40005000 	.word	0x40005000

08005428 <LL_PWR_GetRegulVoltageScaling>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
 8005428:	b480      	push	{r7}
 800542a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_VOS));
 800542c:	4b04      	ldr	r3, [pc, #16]	; (8005440 <LL_PWR_GetRegulVoltageScaling+0x18>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005434:	4618      	mov	r0, r3
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	40007000 	.word	0x40007000

08005444 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800544c:	4b06      	ldr	r3, [pc, #24]	; (8005468 <LL_FLASH_SetLatency+0x24>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f023 020f 	bic.w	r2, r3, #15
 8005454:	4904      	ldr	r1, [pc, #16]	; (8005468 <LL_FLASH_SetLatency+0x24>)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4313      	orrs	r3, r2
 800545a:	600b      	str	r3, [r1, #0]
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr
 8005468:	40022000 	.word	0x40022000

0800546c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800546c:	b480      	push	{r7}
 800546e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8005470:	4b04      	ldr	r3, [pc, #16]	; (8005484 <LL_FLASH_GetLatency+0x18>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 030f 	and.w	r3, r3, #15
}
 8005478:	4618      	mov	r0, r3
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	40022000 	.word	0x40022000

08005488 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	fbb2 f3f3 	udiv	r3, r2, r3
 800549a:	4a07      	ldr	r2, [pc, #28]	; (80054b8 <LL_InitTick+0x30>)
 800549c:	3b01      	subs	r3, #1
 800549e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80054a0:	4b05      	ldr	r3, [pc, #20]	; (80054b8 <LL_InitTick+0x30>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80054a6:	4b04      	ldr	r3, [pc, #16]	; (80054b8 <LL_InitTick+0x30>)
 80054a8:	2205      	movs	r2, #5
 80054aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr
 80054b8:	e000e010 	.word	0xe000e010

080054bc <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80054c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f7ff ffdd 	bl	8005488 <LL_InitTick>
}
 80054ce:	bf00      	nop
 80054d0:	3708      	adds	r7, #8
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
	...

080054d8 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80054e0:	4b10      	ldr	r3, [pc, #64]	; (8005524 <LL_mDelay+0x4c>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay; /* MISRAC2012-Rule-17.8 */
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80054e6:	68bb      	ldr	r3, [r7, #8]
  tmpDelay = Delay;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	60fb      	str	r3, [r7, #12]
  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054f2:	d00c      	beq.n	800550e <LL_mDelay+0x36>
  {
    tmpDelay++;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	3301      	adds	r3, #1
 80054f8:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 80054fa:	e008      	b.n	800550e <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80054fc:	4b09      	ldr	r3, [pc, #36]	; (8005524 <LL_mDelay+0x4c>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005504:	2b00      	cmp	r3, #0
 8005506:	d002      	beq.n	800550e <LL_mDelay+0x36>
    {
      tmpDelay--;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	3b01      	subs	r3, #1
 800550c:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1f3      	bne.n	80054fc <LL_mDelay+0x24>
    }
  }
}
 8005514:	bf00      	nop
 8005516:	bf00      	nop
 8005518:	3714      	adds	r7, #20
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	e000e010 	.word	0xe000e010

08005528 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8005530:	4a04      	ldr	r2, [pc, #16]	; (8005544 <LL_SetSystemCoreClock+0x1c>)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6013      	str	r3, [r2, #0]
}
 8005536:	bf00      	nop
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	20000000 	.word	0x20000000

08005548 <LL_SetFlashLatency>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Latency has been modified
  *          - ERROR: Latency cannot be modified
  */
ErrorStatus LL_SetFlashLatency(uint32_t HCLKFrequency)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b086      	sub	sp, #24
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t timeout;
  uint32_t getlatency;
  ErrorStatus status = SUCCESS;
 8005550:	2300      	movs	r3, #0
 8005552:	74fb      	strb	r3, [r7, #19]

  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8005554:	2300      	movs	r3, #0
 8005556:	60fb      	str	r3, [r7, #12]

  /* Frequency cannot be equal to 0 or greater than max clock */
  if((HCLKFrequency == 0U) || (HCLKFrequency > UTILS_SCALE1_LATENCY9_FREQ))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d003      	beq.n	8005566 <LL_SetFlashLatency+0x1e>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a38      	ldr	r2, [pc, #224]	; (8005644 <LL_SetFlashLatency+0xfc>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d902      	bls.n	800556c <LL_SetFlashLatency+0x24>
  {
    status = ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	74fb      	strb	r3, [r7, #19]
 800556a:	e065      	b.n	8005638 <LL_SetFlashLatency+0xf0>
  }
  else
  {
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 800556c:	f7ff ff5c 	bl	8005428 <LL_PWR_GetRegulVoltageScaling>
 8005570:	4603      	mov	r3, r0
 8005572:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005576:	d137      	bne.n	80055e8 <LL_SetFlashLatency+0xa0>
    {
      if(HCLKFrequency > UTILS_SCALE1_LATENCY8_FREQ)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a33      	ldr	r2, [pc, #204]	; (8005648 <LL_SetFlashLatency+0x100>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d902      	bls.n	8005586 <LL_SetFlashLatency+0x3e>
      {
        /* 160 < HCLK <= 170 => 8WS (9 CPU cycles) */
        latency = LL_FLASH_LATENCY_8;
 8005580:	2308      	movs	r3, #8
 8005582:	60fb      	str	r3, [r7, #12]
 8005584:	e03d      	b.n	8005602 <LL_SetFlashLatency+0xba>
      }
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY7_FREQ)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a30      	ldr	r2, [pc, #192]	; (800564c <LL_SetFlashLatency+0x104>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d902      	bls.n	8005594 <LL_SetFlashLatency+0x4c>
      {
        /* 140 < HCLK <= 160 => 7WS (8 CPU cycles) */
        latency = LL_FLASH_LATENCY_7;
 800558e:	2307      	movs	r3, #7
 8005590:	60fb      	str	r3, [r7, #12]
 8005592:	e036      	b.n	8005602 <LL_SetFlashLatency+0xba>
      }
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY6_FREQ)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a2e      	ldr	r2, [pc, #184]	; (8005650 <LL_SetFlashLatency+0x108>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d902      	bls.n	80055a2 <LL_SetFlashLatency+0x5a>
      {
        /* 120 < HCLK <= 140 => 6WS (7 CPU cycles) */
        latency = LL_FLASH_LATENCY_6;
 800559c:	2306      	movs	r3, #6
 800559e:	60fb      	str	r3, [r7, #12]
 80055a0:	e02f      	b.n	8005602 <LL_SetFlashLatency+0xba>
      }
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY5_FREQ)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a2b      	ldr	r2, [pc, #172]	; (8005654 <LL_SetFlashLatency+0x10c>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d902      	bls.n	80055b0 <LL_SetFlashLatency+0x68>
      {
        /* 100 < HCLK <= 120 => 5WS (6 CPU cycles) */
        latency = LL_FLASH_LATENCY_5;
 80055aa:	2305      	movs	r3, #5
 80055ac:	60fb      	str	r3, [r7, #12]
 80055ae:	e028      	b.n	8005602 <LL_SetFlashLatency+0xba>
      }
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY4_FREQ)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a29      	ldr	r2, [pc, #164]	; (8005658 <LL_SetFlashLatency+0x110>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d902      	bls.n	80055be <LL_SetFlashLatency+0x76>
      {
        /* 80 < HCLK <= 100 => 4WS (5 CPU cycles) */
        latency = LL_FLASH_LATENCY_4;
 80055b8:	2304      	movs	r3, #4
 80055ba:	60fb      	str	r3, [r7, #12]
 80055bc:	e021      	b.n	8005602 <LL_SetFlashLatency+0xba>
      }
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY3_FREQ)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a26      	ldr	r2, [pc, #152]	; (800565c <LL_SetFlashLatency+0x114>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d902      	bls.n	80055cc <LL_SetFlashLatency+0x84>
      {
        /* 60 < HCLK <= 80 => 3WS (4 CPU cycles) */
        latency = LL_FLASH_LATENCY_3;
 80055c6:	2303      	movs	r3, #3
 80055c8:	60fb      	str	r3, [r7, #12]
 80055ca:	e01a      	b.n	8005602 <LL_SetFlashLatency+0xba>
      }
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY2_FREQ)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a24      	ldr	r2, [pc, #144]	; (8005660 <LL_SetFlashLatency+0x118>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d902      	bls.n	80055da <LL_SetFlashLatency+0x92>
      {
        /* 40 < HCLK <= 60 => 2WS (3 CPU cycles) */
        latency = LL_FLASH_LATENCY_2;
 80055d4:	2302      	movs	r3, #2
 80055d6:	60fb      	str	r3, [r7, #12]
 80055d8:	e013      	b.n	8005602 <LL_SetFlashLatency+0xba>
      }
      else
      {
        if(HCLKFrequency > UTILS_SCALE1_LATENCY1_FREQ)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a21      	ldr	r2, [pc, #132]	; (8005664 <LL_SetFlashLatency+0x11c>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d90f      	bls.n	8005602 <LL_SetFlashLatency+0xba>
        {
          /* 20 < HCLK <= 40 => 1WS (2 CPU cycles) */
          latency = LL_FLASH_LATENCY_1;
 80055e2:	2301      	movs	r3, #1
 80055e4:	60fb      	str	r3, [r7, #12]
 80055e6:	e00c      	b.n	8005602 <LL_SetFlashLatency+0xba>
        /* else HCLKFrequency <= 10MHz default LL_FLASH_LATENCY_0 0WS */
      }
    }
    else /* SCALE2 */
    {
      if(HCLKFrequency > UTILS_SCALE2_LATENCY2_FREQ)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a1f      	ldr	r2, [pc, #124]	; (8005668 <LL_SetFlashLatency+0x120>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d902      	bls.n	80055f6 <LL_SetFlashLatency+0xae>
      {
        /* 16 < HCLK <= 26 => 2WS (3 CPU cycles) */
        latency = LL_FLASH_LATENCY_2;
 80055f0:	2302      	movs	r3, #2
 80055f2:	60fb      	str	r3, [r7, #12]
 80055f4:	e005      	b.n	8005602 <LL_SetFlashLatency+0xba>
      }
      else
      {
        if(HCLKFrequency > UTILS_SCALE2_LATENCY1_FREQ)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a1c      	ldr	r2, [pc, #112]	; (800566c <LL_SetFlashLatency+0x124>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d901      	bls.n	8005602 <LL_SetFlashLatency+0xba>
        {
          /* 8 < HCLK <= 16 => 1WS (2 CPU cycles) */
          latency = LL_FLASH_LATENCY_1;
 80055fe:	2301      	movs	r3, #1
 8005600:	60fb      	str	r3, [r7, #12]
        }
        /* else HCLKFrequency <= 8MHz default LL_FLASH_LATENCY_0 0WS */
      }
    }

    if (status != ERROR)
 8005602:	7cfb      	ldrb	r3, [r7, #19]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d017      	beq.n	8005638 <LL_SetFlashLatency+0xf0>
    {
      LL_FLASH_SetLatency(latency);
 8005608:	68f8      	ldr	r0, [r7, #12]
 800560a:	f7ff ff1b 	bl	8005444 <LL_FLASH_SetLatency>

      /* Check that the new number of wait states is taken into account to access the Flash
         memory by reading the FLASH_ACR register */
      timeout = 2U;
 800560e:	2302      	movs	r3, #2
 8005610:	617b      	str	r3, [r7, #20]
      do
      {
        /* Wait for Flash latency to be updated */
        getlatency = LL_FLASH_GetLatency();
 8005612:	f7ff ff2b 	bl	800546c <LL_FLASH_GetLatency>
 8005616:	60b8      	str	r0, [r7, #8]
        timeout--;
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	3b01      	subs	r3, #1
 800561c:	617b      	str	r3, [r7, #20]
      } while ((getlatency != latency) && (timeout > 0U));
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	429a      	cmp	r2, r3
 8005624:	d002      	beq.n	800562c <LL_SetFlashLatency+0xe4>
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1f2      	bne.n	8005612 <LL_SetFlashLatency+0xca>

      if(getlatency != latency)
 800562c:	68ba      	ldr	r2, [r7, #8]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	429a      	cmp	r2, r3
 8005632:	d001      	beq.n	8005638 <LL_SetFlashLatency+0xf0>
      {
        status = ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	74fb      	strb	r3, [r7, #19]
      }
    }
  }

  return status;
 8005638:	7cfb      	ldrb	r3, [r7, #19]
}
 800563a:	4618      	mov	r0, r3
 800563c:	3718      	adds	r7, #24
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	0a21fe80 	.word	0x0a21fe80
 8005648:	09896800 	.word	0x09896800
 800564c:	08583b00 	.word	0x08583b00
 8005650:	07270e00 	.word	0x07270e00
 8005654:	05f5e100 	.word	0x05f5e100
 8005658:	04c4b400 	.word	0x04c4b400
 800565c:	03938700 	.word	0x03938700
 8005660:	02625a00 	.word	0x02625a00
 8005664:	01312d00 	.word	0x01312d00
 8005668:	00f42400 	.word	0x00f42400
 800566c:	007a1200 	.word	0x007a1200

08005670 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f003 0307 	and.w	r3, r3, #7
 800567e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005680:	4b0c      	ldr	r3, [pc, #48]	; (80056b4 <__NVIC_SetPriorityGrouping+0x44>)
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005686:	68ba      	ldr	r2, [r7, #8]
 8005688:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800568c:	4013      	ands	r3, r2
 800568e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005698:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800569c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056a2:	4a04      	ldr	r2, [pc, #16]	; (80056b4 <__NVIC_SetPriorityGrouping+0x44>)
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	60d3      	str	r3, [r2, #12]
}
 80056a8:	bf00      	nop
 80056aa:	3714      	adds	r7, #20
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr
 80056b4:	e000ed00 	.word	0xe000ed00

080056b8 <LL_RCC_HSE_EnableBypass>:
{
 80056b8:	b480      	push	{r7}
 80056ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 80056bc:	4b05      	ldr	r3, [pc, #20]	; (80056d4 <LL_RCC_HSE_EnableBypass+0x1c>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a04      	ldr	r2, [pc, #16]	; (80056d4 <LL_RCC_HSE_EnableBypass+0x1c>)
 80056c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056c6:	6013      	str	r3, [r2, #0]
}
 80056c8:	bf00      	nop
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	40021000 	.word	0x40021000

080056d8 <LL_RCC_HSE_Enable>:
{
 80056d8:	b480      	push	{r7}
 80056da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80056dc:	4b05      	ldr	r3, [pc, #20]	; (80056f4 <LL_RCC_HSE_Enable+0x1c>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a04      	ldr	r2, [pc, #16]	; (80056f4 <LL_RCC_HSE_Enable+0x1c>)
 80056e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056e6:	6013      	str	r3, [r2, #0]
}
 80056e8:	bf00      	nop
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	40021000 	.word	0x40021000

080056f8 <LL_RCC_HSE_Disable>:
{
 80056f8:	b480      	push	{r7}
 80056fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80056fc:	4b05      	ldr	r3, [pc, #20]	; (8005714 <LL_RCC_HSE_Disable+0x1c>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a04      	ldr	r2, [pc, #16]	; (8005714 <LL_RCC_HSE_Disable+0x1c>)
 8005702:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005706:	6013      	str	r3, [r2, #0]
}
 8005708:	bf00      	nop
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	40021000 	.word	0x40021000

08005718 <LL_RCC_HSE_IsReady>:
{
 8005718:	b480      	push	{r7}
 800571a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800571c:	4b07      	ldr	r3, [pc, #28]	; (800573c <LL_RCC_HSE_IsReady+0x24>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005724:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005728:	d101      	bne.n	800572e <LL_RCC_HSE_IsReady+0x16>
 800572a:	2301      	movs	r3, #1
 800572c:	e000      	b.n	8005730 <LL_RCC_HSE_IsReady+0x18>
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	40021000 	.word	0x40021000

08005740 <LL_RCC_HSI_Enable>:
{
 8005740:	b480      	push	{r7}
 8005742:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005744:	4b05      	ldr	r3, [pc, #20]	; (800575c <LL_RCC_HSI_Enable+0x1c>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a04      	ldr	r2, [pc, #16]	; (800575c <LL_RCC_HSI_Enable+0x1c>)
 800574a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800574e:	6013      	str	r3, [r2, #0]
}
 8005750:	bf00      	nop
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	40021000 	.word	0x40021000

08005760 <LL_RCC_HSI_IsReady>:
{
 8005760:	b480      	push	{r7}
 8005762:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005764:	4b07      	ldr	r3, [pc, #28]	; (8005784 <LL_RCC_HSI_IsReady+0x24>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800576c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005770:	d101      	bne.n	8005776 <LL_RCC_HSI_IsReady+0x16>
 8005772:	2301      	movs	r3, #1
 8005774:	e000      	b.n	8005778 <LL_RCC_HSI_IsReady+0x18>
 8005776:	2300      	movs	r3, #0
}
 8005778:	4618      	mov	r0, r3
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	40021000 	.word	0x40021000

08005788 <LL_RCC_HSI_SetCalibTrimming>:
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005790:	4b07      	ldr	r3, [pc, #28]	; (80057b0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	061b      	lsls	r3, r3, #24
 800579c:	4904      	ldr	r1, [pc, #16]	; (80057b0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	604b      	str	r3, [r1, #4]
}
 80057a2:	bf00      	nop
 80057a4:	370c      	adds	r7, #12
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	40021000 	.word	0x40021000

080057b4 <LL_RCC_SetSysClkSource>:
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80057bc:	4b06      	ldr	r3, [pc, #24]	; (80057d8 <LL_RCC_SetSysClkSource+0x24>)
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	f023 0203 	bic.w	r2, r3, #3
 80057c4:	4904      	ldr	r1, [pc, #16]	; (80057d8 <LL_RCC_SetSysClkSource+0x24>)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	608b      	str	r3, [r1, #8]
}
 80057cc:	bf00      	nop
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr
 80057d8:	40021000 	.word	0x40021000

080057dc <LL_RCC_GetSysClkSource>:
{
 80057dc:	b480      	push	{r7}
 80057de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80057e0:	4b04      	ldr	r3, [pc, #16]	; (80057f4 <LL_RCC_GetSysClkSource+0x18>)
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f003 030c 	and.w	r3, r3, #12
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	40021000 	.word	0x40021000

080057f8 <LL_RCC_SetAHBPrescaler>:
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005800:	4b06      	ldr	r3, [pc, #24]	; (800581c <LL_RCC_SetAHBPrescaler+0x24>)
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005808:	4904      	ldr	r1, [pc, #16]	; (800581c <LL_RCC_SetAHBPrescaler+0x24>)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4313      	orrs	r3, r2
 800580e:	608b      	str	r3, [r1, #8]
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr
 800581c:	40021000 	.word	0x40021000

08005820 <LL_RCC_SetAPB1Prescaler>:
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005828:	4b06      	ldr	r3, [pc, #24]	; (8005844 <LL_RCC_SetAPB1Prescaler+0x24>)
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005830:	4904      	ldr	r1, [pc, #16]	; (8005844 <LL_RCC_SetAPB1Prescaler+0x24>)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4313      	orrs	r3, r2
 8005836:	608b      	str	r3, [r1, #8]
}
 8005838:	bf00      	nop
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr
 8005844:	40021000 	.word	0x40021000

08005848 <LL_RCC_SetAPB2Prescaler>:
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005850:	4b06      	ldr	r3, [pc, #24]	; (800586c <LL_RCC_SetAPB2Prescaler+0x24>)
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005858:	4904      	ldr	r1, [pc, #16]	; (800586c <LL_RCC_SetAPB2Prescaler+0x24>)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4313      	orrs	r3, r2
 800585e:	608b      	str	r3, [r1, #8]
}
 8005860:	bf00      	nop
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr
 800586c:	40021000 	.word	0x40021000

08005870 <LL_RCC_PLL_Enable>:
{
 8005870:	b480      	push	{r7}
 8005872:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005874:	4b05      	ldr	r3, [pc, #20]	; (800588c <LL_RCC_PLL_Enable+0x1c>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a04      	ldr	r2, [pc, #16]	; (800588c <LL_RCC_PLL_Enable+0x1c>)
 800587a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800587e:	6013      	str	r3, [r2, #0]
}
 8005880:	bf00      	nop
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	40021000 	.word	0x40021000

08005890 <LL_RCC_PLL_Disable>:
{
 8005890:	b480      	push	{r7}
 8005892:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005894:	4b05      	ldr	r3, [pc, #20]	; (80058ac <LL_RCC_PLL_Disable+0x1c>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a04      	ldr	r2, [pc, #16]	; (80058ac <LL_RCC_PLL_Disable+0x1c>)
 800589a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800589e:	6013      	str	r3, [r2, #0]
}
 80058a0:	bf00      	nop
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	40021000 	.word	0x40021000

080058b0 <LL_RCC_PLL_IsReady>:
{
 80058b0:	b480      	push	{r7}
 80058b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80058b4:	4b07      	ldr	r3, [pc, #28]	; (80058d4 <LL_RCC_PLL_IsReady+0x24>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058c0:	d101      	bne.n	80058c6 <LL_RCC_PLL_IsReady+0x16>
 80058c2:	2301      	movs	r3, #1
 80058c4:	e000      	b.n	80058c8 <LL_RCC_PLL_IsReady+0x18>
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	40021000 	.word	0x40021000

080058d8 <LL_RCC_PLL_ConfigDomain_SYS>:
{
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]
 80058e4:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80058e6:	4b0a      	ldr	r3, [pc, #40]	; (8005910 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80058e8:	68da      	ldr	r2, [r3, #12]
 80058ea:	4b0a      	ldr	r3, [pc, #40]	; (8005914 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80058ec:	4013      	ands	r3, r2
 80058ee:	68f9      	ldr	r1, [r7, #12]
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	4311      	orrs	r1, r2
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	0212      	lsls	r2, r2, #8
 80058f8:	4311      	orrs	r1, r2
 80058fa:	683a      	ldr	r2, [r7, #0]
 80058fc:	430a      	orrs	r2, r1
 80058fe:	4904      	ldr	r1, [pc, #16]	; (8005910 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8005900:	4313      	orrs	r3, r2
 8005902:	60cb      	str	r3, [r1, #12]
}
 8005904:	bf00      	nop
 8005906:	3714      	adds	r7, #20
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr
 8005910:	40021000 	.word	0x40021000
 8005914:	f9ff800c 	.word	0xf9ff800c

08005918 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8005918:	b480      	push	{r7}
 800591a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 800591c:	4b05      	ldr	r3, [pc, #20]	; (8005934 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	4a04      	ldr	r2, [pc, #16]	; (8005934 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8005922:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005926:	60d3      	str	r3, [r2, #12]
}
 8005928:	bf00      	nop
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	40021000 	.word	0x40021000

08005938 <LL_APB1_GRP1_EnableClock>:
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8005940:	4b08      	ldr	r3, [pc, #32]	; (8005964 <LL_APB1_GRP1_EnableClock+0x2c>)
 8005942:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005944:	4907      	ldr	r1, [pc, #28]	; (8005964 <LL_APB1_GRP1_EnableClock+0x2c>)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4313      	orrs	r3, r2
 800594a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800594c:	4b05      	ldr	r3, [pc, #20]	; (8005964 <LL_APB1_GRP1_EnableClock+0x2c>)
 800594e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4013      	ands	r3, r2
 8005954:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005956:	68fb      	ldr	r3, [r7, #12]
}
 8005958:	bf00      	nop
 800595a:	3714      	adds	r7, #20
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr
 8005964:	40021000 	.word	0x40021000

08005968 <LL_APB2_GRP1_EnableClock>:
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8005970:	4b08      	ldr	r3, [pc, #32]	; (8005994 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005972:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005974:	4907      	ldr	r1, [pc, #28]	; (8005994 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4313      	orrs	r3, r2
 800597a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800597c:	4b05      	ldr	r3, [pc, #20]	; (8005994 <LL_APB2_GRP1_EnableClock+0x2c>)
 800597e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4013      	ands	r3, r2
 8005984:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005986:	68fb      	ldr	r3, [r7, #12]
}
 8005988:	bf00      	nop
 800598a:	3714      	adds	r7, #20
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr
 8005994:	40021000 	.word	0x40021000

08005998 <LL_PWR_SetRegulVoltageScaling>:
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80059a0:	4b06      	ldr	r3, [pc, #24]	; (80059bc <LL_PWR_SetRegulVoltageScaling+0x24>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80059a8:	4904      	ldr	r1, [pc, #16]	; (80059bc <LL_PWR_SetRegulVoltageScaling+0x24>)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	600b      	str	r3, [r1, #0]
}
 80059b0:	bf00      	nop
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr
 80059bc:	40007000 	.word	0x40007000

080059c0 <LL_PWR_EnableRange1BoostMode>:
  * @brief  Enable main regulator voltage range 1 boost mode
  * @rmtoll CR5          R1MODE        LL_PWR_EnableRange1BoostMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableRange1BoostMode(void)
{
 80059c0:	b480      	push	{r7}
 80059c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80059c4:	4b06      	ldr	r3, [pc, #24]	; (80059e0 <LL_PWR_EnableRange1BoostMode+0x20>)
 80059c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059ca:	4a05      	ldr	r2, [pc, #20]	; (80059e0 <LL_PWR_EnableRange1BoostMode+0x20>)
 80059cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 80059d4:	bf00      	nop
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	40007000 	.word	0x40007000

080059e4 <LL_PWR_DisableRange1BoostMode>:
  * @brief  Disable main regulator voltage range 1 boost mode
  * @rmtoll CR5          R1MODE        LL_PWR_DisableRange1BoostMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableRange1BoostMode(void)
{
 80059e4:	b480      	push	{r7}
 80059e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80059e8:	4b06      	ldr	r3, [pc, #24]	; (8005a04 <LL_PWR_DisableRange1BoostMode+0x20>)
 80059ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059ee:	4a05      	ldr	r2, [pc, #20]	; (8005a04 <LL_PWR_DisableRange1BoostMode+0x20>)
 80059f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 80059f8:	bf00      	nop
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	40007000 	.word	0x40007000

08005a08 <LL_FLASH_SetLatency>:
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8005a10:	4b06      	ldr	r3, [pc, #24]	; (8005a2c <LL_FLASH_SetLatency+0x24>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f023 020f 	bic.w	r2, r3, #15
 8005a18:	4904      	ldr	r1, [pc, #16]	; (8005a2c <LL_FLASH_SetLatency+0x24>)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	600b      	str	r3, [r1, #0]
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr
 8005a2c:	40022000 	.word	0x40022000

08005a30 <LL_FLASH_GetLatency>:
{
 8005a30:	b480      	push	{r7}
 8005a32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8005a34:	4b04      	ldr	r3, [pc, #16]	; (8005a48 <LL_FLASH_GetLatency+0x18>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 030f 	and.w	r3, r3, #15
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	40022000 	.word	0x40022000

08005a4c <STRHAL_Init>:

static inline STRHAL_SysClk_Src_t _SysClk_Init(STRHAL_SysClk_Src_t src, uint32_t freq);
static inline STRHAL_SysClk_Src_t _SysClk_Backup();

STRHAL_Oof_t STRHAL_Init(STRHAL_SysClk_Src_t src, uint32_t freq)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	4603      	mov	r3, r0
 8005a54:	6039      	str	r1, [r7, #0]
 8005a56:	71fb      	strb	r3, [r7, #7]
	if (_INITIALIZED)
 8005a58:	4b21      	ldr	r3, [pc, #132]	; (8005ae0 <STRHAL_Init+0x94>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d002      	beq.n	8005a66 <STRHAL_Init+0x1a>
		return _status;
 8005a60:	4b20      	ldr	r3, [pc, #128]	; (8005ae4 <STRHAL_Init+0x98>)
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	e037      	b.n	8005ad6 <STRHAL_Init+0x8a>

	_status = STRHAL_NOICE;
 8005a66:	4b1f      	ldr	r3, [pc, #124]	; (8005ae4 <STRHAL_Init+0x98>)
 8005a68:	2200      	movs	r2, #0
 8005a6a:	701a      	strb	r2, [r3, #0]

	NVIC_SetPriorityGrouping(0x03);
 8005a6c:	2003      	movs	r0, #3
 8005a6e:	f7ff fdff 	bl	8005670 <__NVIC_SetPriorityGrouping>
	if (_SysClk_Init(src, freq) != src)
 8005a72:	79fb      	ldrb	r3, [r7, #7]
 8005a74:	6839      	ldr	r1, [r7, #0]
 8005a76:	4618      	mov	r0, r3
 8005a78:	f000 f836 	bl	8005ae8 <_SysClk_Init>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	461a      	mov	r2, r3
 8005a80:	79fb      	ldrb	r3, [r7, #7]
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d006      	beq.n	8005a94 <STRHAL_Init+0x48>
		_status |= STRHAL_OOF_SYSCLK;
 8005a86:	4b17      	ldr	r3, [pc, #92]	; (8005ae4 <STRHAL_Init+0x98>)
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	f043 0301 	orr.w	r3, r3, #1
 8005a8e:	b2da      	uxtb	r2, r3
 8005a90:	4b14      	ldr	r3, [pc, #80]	; (8005ae4 <STRHAL_Init+0x98>)
 8005a92:	701a      	strb	r2, [r3, #0]

	STRHAL_Clock_Init();
 8005a94:	f001 fd40 	bl	8007518 <STRHAL_Clock_Init>
	STRHAL_SysTick_Init();
 8005a98:	f002 fb20 	bl	80080dc <STRHAL_SysTick_Init>
	STRHAL_GPIO_Init();
 8005a9c:	f001 fd84 	bl	80075a8 <STRHAL_GPIO_Init>
	STRHAL_OPAMP_Init();
 8005aa0:	f001 ff32 	bl	8007908 <STRHAL_OPAMP_Init>
	STRHAL_UART_Init();
 8005aa4:	f003 fb6c 	bl	8009180 <STRHAL_UART_Init>
	STRHAL_ADC_Init();
 8005aa8:	f000 fc84 	bl	80063b4 <STRHAL_ADC_Init>
	STRHAL_TIM_Init();
 8005aac:	f002 fd6d 	bl	800858a <STRHAL_TIM_Init>
	STRHAL_SPI_Init();
 8005ab0:	f002 fabe 	bl	8008030 <STRHAL_SPI_Init>
	_status |= STRHAL_CAN_Init();
 8005ab4:	f001 fa6a 	bl	8006f8c <STRHAL_CAN_Init>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	461a      	mov	r2, r3
 8005abc:	4b09      	ldr	r3, [pc, #36]	; (8005ae4 <STRHAL_Init+0x98>)
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	b2da      	uxtb	r2, r3
 8005ac4:	4b07      	ldr	r3, [pc, #28]	; (8005ae4 <STRHAL_Init+0x98>)
 8005ac6:	701a      	strb	r2, [r3, #0]
	STRHAL_QSPI_Init();
 8005ac8:	f001 ffe8 	bl	8007a9c <STRHAL_QSPI_Init>

	_INITIALIZED = 1;
 8005acc:	4b04      	ldr	r3, [pc, #16]	; (8005ae0 <STRHAL_Init+0x94>)
 8005ace:	2201      	movs	r2, #1
 8005ad0:	601a      	str	r2, [r3, #0]

	return _status;
 8005ad2:	4b04      	ldr	r3, [pc, #16]	; (8005ae4 <STRHAL_Init+0x98>)
 8005ad4:	781b      	ldrb	r3, [r3, #0]
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3708      	adds	r7, #8
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	20000a60 	.word	0x20000a60
 8005ae4:	20000a64 	.word	0x20000a64

08005ae8 <_SysClk_Init>:

inline STRHAL_SysClk_Src_t _SysClk_Init(STRHAL_SysClk_Src_t src, uint32_t freq)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	4603      	mov	r3, r0
 8005af0:	6039      	str	r1, [r7, #0]
 8005af2:	71fb      	strb	r3, [r7, #7]
	uint32_t tot;
	if (src == STRHAL_SYSCLK_SRC_INT)
 8005af4:	79fb      	ldrb	r3, [r7, #7]
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d164      	bne.n	8005bc4 <_SysClk_Init+0xdc>
	{
		if (LL_SetFlashLatency(STRHAL_SYSCLK_FREQ) != SUCCESS)
 8005afa:	487c      	ldr	r0, [pc, #496]	; (8005cec <_SysClk_Init+0x204>)
 8005afc:	f7ff fd24 	bl	8005548 <LL_SetFlashLatency>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d003      	beq.n	8005b0e <_SysClk_Init+0x26>
			return _SysClk_Backup();
 8005b06:	f000 f8f9 	bl	8005cfc <_SysClk_Backup>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	e0ea      	b.n	8005ce4 <_SysClk_Init+0x1fc>

		LL_PWR_EnableRange1BoostMode();
 8005b0e:	f7ff ff57 	bl	80059c0 <LL_PWR_EnableRange1BoostMode>

		LL_RCC_PLL_Disable();
 8005b12:	f7ff febd 	bl	8005890 <LL_RCC_PLL_Disable>
		LL_RCC_HSI_Enable();
 8005b16:	f7ff fe13 	bl	8005740 <LL_RCC_HSI_Enable>

		for (tot = 0; LL_RCC_PLL_IsReady() && !LL_RCC_HSI_IsReady(); ++tot)
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	60fb      	str	r3, [r7, #12]
 8005b1e:	e00a      	b.n	8005b36 <_SysClk_Init+0x4e>
		{
			if (tot > STRHAL_SYSCLK_START_TOT)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	4a73      	ldr	r2, [pc, #460]	; (8005cf0 <_SysClk_Init+0x208>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d903      	bls.n	8005b30 <_SysClk_Init+0x48>
				return _SysClk_Backup();
 8005b28:	f000 f8e8 	bl	8005cfc <_SysClk_Backup>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	e0d9      	b.n	8005ce4 <_SysClk_Init+0x1fc>
		for (tot = 0; LL_RCC_PLL_IsReady() && !LL_RCC_HSI_IsReady(); ++tot)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	3301      	adds	r3, #1
 8005b34:	60fb      	str	r3, [r7, #12]
 8005b36:	f7ff febb 	bl	80058b0 <LL_RCC_PLL_IsReady>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d004      	beq.n	8005b4a <_SysClk_Init+0x62>
 8005b40:	f7ff fe0e 	bl	8005760 <LL_RCC_HSI_IsReady>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d0ea      	beq.n	8005b20 <_SysClk_Init+0x38>
		}

		LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI,
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	2228      	movs	r2, #40	; 0x28
 8005b4e:	2110      	movs	r1, #16
 8005b50:	2002      	movs	r0, #2
 8005b52:	f7ff fec1 	bl	80058d8 <LL_RCC_PLL_ConfigDomain_SYS>
		STRHAL_SYSCLK_INT_PLL_M, 4 * STRHAL_SYSCLK_FREQ / HSI_VALUE,
		STRHAL_SYSCLK_INT_PLL_R);

		LL_RCC_PLL_EnableDomain_SYS();
 8005b56:	f7ff fedf 	bl	8005918 <LL_RCC_PLL_EnableDomain_SYS>
		LL_RCC_PLL_Enable();
 8005b5a:	f7ff fe89 	bl	8005870 <LL_RCC_PLL_Enable>

		for (tot = 0; !LL_RCC_PLL_IsReady(); ++tot)
 8005b5e:	2300      	movs	r3, #0
 8005b60:	60fb      	str	r3, [r7, #12]
 8005b62:	e00a      	b.n	8005b7a <_SysClk_Init+0x92>
		{
			if (tot > STRHAL_SYSCLK_START_TOT)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	4a62      	ldr	r2, [pc, #392]	; (8005cf0 <_SysClk_Init+0x208>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d903      	bls.n	8005b74 <_SysClk_Init+0x8c>
				return _SysClk_Backup();
 8005b6c:	f000 f8c6 	bl	8005cfc <_SysClk_Backup>
 8005b70:	4603      	mov	r3, r0
 8005b72:	e0b7      	b.n	8005ce4 <_SysClk_Init+0x1fc>
		for (tot = 0; !LL_RCC_PLL_IsReady(); ++tot)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	3301      	adds	r3, #1
 8005b78:	60fb      	str	r3, [r7, #12]
 8005b7a:	f7ff fe99 	bl	80058b0 <LL_RCC_PLL_IsReady>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d0ef      	beq.n	8005b64 <_SysClk_Init+0x7c>
		}
		LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8005b84:	2003      	movs	r0, #3
 8005b86:	f7ff fe15 	bl	80057b4 <LL_RCC_SetSysClkSource>

		for (tot = 0; LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL; ++tot)
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60fb      	str	r3, [r7, #12]
 8005b8e:	e00a      	b.n	8005ba6 <_SysClk_Init+0xbe>
		{
			if (tot > STRHAL_SYSCLK_START_TOT)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	4a57      	ldr	r2, [pc, #348]	; (8005cf0 <_SysClk_Init+0x208>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d903      	bls.n	8005ba0 <_SysClk_Init+0xb8>
				return _SysClk_Backup();
 8005b98:	f000 f8b0 	bl	8005cfc <_SysClk_Backup>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	e0a1      	b.n	8005ce4 <_SysClk_Init+0x1fc>
		for (tot = 0; LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL; ++tot)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	60fb      	str	r3, [r7, #12]
 8005ba6:	f7ff fe19 	bl	80057dc <LL_RCC_GetSysClkSource>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b0c      	cmp	r3, #12
 8005bae:	d1ef      	bne.n	8005b90 <_SysClk_Init+0xa8>
		}

		LL_Init1msTick(STRHAL_SYSCLK_FREQ);
 8005bb0:	484e      	ldr	r0, [pc, #312]	; (8005cec <_SysClk_Init+0x204>)
 8005bb2:	f7ff fc83 	bl	80054bc <LL_Init1msTick>
		LL_SetSystemCoreClock(STRHAL_SYSCLK_FREQ);
 8005bb6:	484d      	ldr	r0, [pc, #308]	; (8005cec <_SysClk_Init+0x204>)
 8005bb8:	f7ff fcb6 	bl	8005528 <LL_SetSystemCoreClock>
		_SysClk_Src = STRHAL_SYSCLK_SRC_INT;
 8005bbc:	4b4d      	ldr	r3, [pc, #308]	; (8005cf4 <_SysClk_Init+0x20c>)
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	701a      	strb	r2, [r3, #0]
 8005bc2:	e084      	b.n	8005cce <_SysClk_Init+0x1e6>
	}
	else if (src == STRHAL_SYSCLK_SRC_EXT)
 8005bc4:	79fb      	ldrb	r3, [r7, #7]
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	f040 8081 	bne.w	8005cce <_SysClk_Init+0x1e6>
	{
		if (LL_SetFlashLatency(STRHAL_SYSCLK_FREQ) != SUCCESS)
 8005bcc:	4847      	ldr	r0, [pc, #284]	; (8005cec <_SysClk_Init+0x204>)
 8005bce:	f7ff fcbb 	bl	8005548 <LL_SetFlashLatency>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d003      	beq.n	8005be0 <_SysClk_Init+0xf8>
			return _SysClk_Backup();
 8005bd8:	f000 f890 	bl	8005cfc <_SysClk_Backup>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	e081      	b.n	8005ce4 <_SysClk_Init+0x1fc>

		LL_RCC_PLL_Disable();
 8005be0:	f7ff fe56 	bl	8005890 <LL_RCC_PLL_Disable>
		if (LL_RCC_HSE_IsReady())
 8005be4:	f7ff fd98 	bl	8005718 <LL_RCC_HSE_IsReady>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d014      	beq.n	8005c18 <_SysClk_Init+0x130>
		{
			LL_RCC_HSE_Disable();
 8005bee:	f7ff fd83 	bl	80056f8 <LL_RCC_HSE_Disable>

			for (tot = 0; LL_RCC_HSE_IsReady(); ++tot)
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	60fb      	str	r3, [r7, #12]
 8005bf6:	e00a      	b.n	8005c0e <_SysClk_Init+0x126>
			{
				if (tot > STRHAL_SYSCLK_START_TOT)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	4a3d      	ldr	r2, [pc, #244]	; (8005cf0 <_SysClk_Init+0x208>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d903      	bls.n	8005c08 <_SysClk_Init+0x120>
					return _SysClk_Backup();
 8005c00:	f000 f87c 	bl	8005cfc <_SysClk_Backup>
 8005c04:	4603      	mov	r3, r0
 8005c06:	e06d      	b.n	8005ce4 <_SysClk_Init+0x1fc>
			for (tot = 0; LL_RCC_HSE_IsReady(); ++tot)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	60fb      	str	r3, [r7, #12]
 8005c0e:	f7ff fd83 	bl	8005718 <LL_RCC_HSE_IsReady>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1ef      	bne.n	8005bf8 <_SysClk_Init+0x110>
			}
		}

		LL_RCC_HSE_EnableBypass();
 8005c18:	f7ff fd4e 	bl	80056b8 <LL_RCC_HSE_EnableBypass>
		LL_RCC_HSE_Enable();
 8005c1c:	f7ff fd5c 	bl	80056d8 <LL_RCC_HSE_Enable>

		for (tot = 0; LL_RCC_PLL_IsReady() && !LL_RCC_HSE_IsReady(); ++tot)
 8005c20:	2300      	movs	r3, #0
 8005c22:	60fb      	str	r3, [r7, #12]
 8005c24:	e00a      	b.n	8005c3c <_SysClk_Init+0x154>
		{
			if (tot > STRHAL_SYSCLK_START_TOT)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	4a31      	ldr	r2, [pc, #196]	; (8005cf0 <_SysClk_Init+0x208>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d903      	bls.n	8005c36 <_SysClk_Init+0x14e>
				return _SysClk_Backup();
 8005c2e:	f000 f865 	bl	8005cfc <_SysClk_Backup>
 8005c32:	4603      	mov	r3, r0
 8005c34:	e056      	b.n	8005ce4 <_SysClk_Init+0x1fc>
		for (tot = 0; LL_RCC_PLL_IsReady() && !LL_RCC_HSE_IsReady(); ++tot)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	60fb      	str	r3, [r7, #12]
 8005c3c:	f7ff fe38 	bl	80058b0 <LL_RCC_PLL_IsReady>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d004      	beq.n	8005c50 <_SysClk_Init+0x168>
 8005c46:	f7ff fd67 	bl	8005718 <LL_RCC_HSE_IsReady>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d0ea      	beq.n	8005c26 <_SysClk_Init+0x13e>
		}

		LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE,
 8005c50:	4a29      	ldr	r2, [pc, #164]	; (8005cf8 <_SysClk_Init+0x210>)
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c58:	2300      	movs	r3, #0
 8005c5a:	2100      	movs	r1, #0
 8005c5c:	2003      	movs	r0, #3
 8005c5e:	f7ff fe3b 	bl	80058d8 <LL_RCC_PLL_ConfigDomain_SYS>
		STRHAL_SYSCLK_EXT_PLL_M, 2 * STRHAL_SYSCLK_FREQ / freq,
		STRHAL_SYSCLK_EXT_PLL_R);

		LL_RCC_PLL_EnableDomain_SYS();
 8005c62:	f7ff fe59 	bl	8005918 <LL_RCC_PLL_EnableDomain_SYS>
		LL_RCC_PLL_Enable();
 8005c66:	f7ff fe03 	bl	8005870 <LL_RCC_PLL_Enable>

		for (tot = 0; !LL_RCC_PLL_IsReady(); ++tot)
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	60fb      	str	r3, [r7, #12]
 8005c6e:	e00a      	b.n	8005c86 <_SysClk_Init+0x19e>
		{
			if (tot > STRHAL_SYSCLK_START_TOT)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	4a1f      	ldr	r2, [pc, #124]	; (8005cf0 <_SysClk_Init+0x208>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d903      	bls.n	8005c80 <_SysClk_Init+0x198>
				return _SysClk_Backup();
 8005c78:	f000 f840 	bl	8005cfc <_SysClk_Backup>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	e031      	b.n	8005ce4 <_SysClk_Init+0x1fc>
		for (tot = 0; !LL_RCC_PLL_IsReady(); ++tot)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	3301      	adds	r3, #1
 8005c84:	60fb      	str	r3, [r7, #12]
 8005c86:	f7ff fe13 	bl	80058b0 <LL_RCC_PLL_IsReady>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d0ef      	beq.n	8005c70 <_SysClk_Init+0x188>
		}
		LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8005c90:	2003      	movs	r0, #3
 8005c92:	f7ff fd8f 	bl	80057b4 <LL_RCC_SetSysClkSource>

		for (tot = 0; LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL; ++tot)
 8005c96:	2300      	movs	r3, #0
 8005c98:	60fb      	str	r3, [r7, #12]
 8005c9a:	e00a      	b.n	8005cb2 <_SysClk_Init+0x1ca>
		{
			if (tot > STRHAL_SYSCLK_START_TOT)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	4a14      	ldr	r2, [pc, #80]	; (8005cf0 <_SysClk_Init+0x208>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d903      	bls.n	8005cac <_SysClk_Init+0x1c4>
				return _SysClk_Backup();
 8005ca4:	f000 f82a 	bl	8005cfc <_SysClk_Backup>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	e01b      	b.n	8005ce4 <_SysClk_Init+0x1fc>
		for (tot = 0; LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL; ++tot)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	3301      	adds	r3, #1
 8005cb0:	60fb      	str	r3, [r7, #12]
 8005cb2:	f7ff fd93 	bl	80057dc <LL_RCC_GetSysClkSource>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b0c      	cmp	r3, #12
 8005cba:	d1ef      	bne.n	8005c9c <_SysClk_Init+0x1b4>
		}

		LL_Init1msTick(STRHAL_SYSCLK_FREQ);
 8005cbc:	480b      	ldr	r0, [pc, #44]	; (8005cec <_SysClk_Init+0x204>)
 8005cbe:	f7ff fbfd 	bl	80054bc <LL_Init1msTick>
		LL_SetSystemCoreClock(STRHAL_SYSCLK_FREQ);
 8005cc2:	480a      	ldr	r0, [pc, #40]	; (8005cec <_SysClk_Init+0x204>)
 8005cc4:	f7ff fc30 	bl	8005528 <LL_SetSystemCoreClock>
		_SysClk_Src = STRHAL_SYSCLK_SRC_EXT;
 8005cc8:	4b0a      	ldr	r3, [pc, #40]	; (8005cf4 <_SysClk_Init+0x20c>)
 8005cca:	2202      	movs	r2, #2
 8005ccc:	701a      	strb	r2, [r3, #0]
	}

	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8005cce:	2000      	movs	r0, #0
 8005cd0:	f7ff fd92 	bl	80057f8 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8005cd4:	2000      	movs	r0, #0
 8005cd6:	f7ff fda3 	bl	8005820 <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8005cda:	2000      	movs	r0, #0
 8005cdc:	f7ff fdb4 	bl	8005848 <LL_RCC_SetAPB2Prescaler>
	return _SysClk_Src;
 8005ce0:	4b04      	ldr	r3, [pc, #16]	; (8005cf4 <_SysClk_Init+0x20c>)
 8005ce2:	781b      	ldrb	r3, [r3, #0]
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3710      	adds	r7, #16
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	09896800 	.word	0x09896800
 8005cf0:	00f42400 	.word	0x00f42400
 8005cf4:	20000a5c 	.word	0x20000a5c
 8005cf8:	1312d000 	.word	0x1312d000

08005cfc <_SysClk_Backup>:

inline STRHAL_SysClk_Src_t _SysClk_Backup()
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	af00      	add	r7, sp, #0
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8005d00:	2001      	movs	r0, #1
 8005d02:	f7ff fe31 	bl	8005968 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8005d06:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8005d0a:	f7ff fe15 	bl	8005938 <LL_APB1_GRP1_EnableClock>

	LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8005d0e:	2000      	movs	r0, #0
 8005d10:	f7ff fe7a 	bl	8005a08 <LL_FLASH_SetLatency>
	while (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0);
 8005d14:	bf00      	nop
 8005d16:	f7ff fe8b 	bl	8005a30 <LL_FLASH_GetLatency>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d1fa      	bne.n	8005d16 <_SysClk_Backup+0x1a>

	LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8005d20:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005d24:	f7ff fe38 	bl	8005998 <LL_PWR_SetRegulVoltageScaling>
	LL_PWR_DisableRange1BoostMode();
 8005d28:	f7ff fe5c 	bl	80059e4 <LL_PWR_DisableRange1BoostMode>

	LL_RCC_HSI_Enable();
 8005d2c:	f7ff fd08 	bl	8005740 <LL_RCC_HSI_Enable>
	while (!LL_RCC_HSI_IsReady());
 8005d30:	bf00      	nop
 8005d32:	f7ff fd15 	bl	8005760 <LL_RCC_HSI_IsReady>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d0fa      	beq.n	8005d32 <_SysClk_Backup+0x36>

	LL_RCC_HSI_SetCalibTrimming(64);
 8005d3c:	2040      	movs	r0, #64	; 0x40
 8005d3e:	f7ff fd23 	bl	8005788 <LL_RCC_HSI_SetCalibTrimming>

	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8005d42:	2001      	movs	r0, #1
 8005d44:	f7ff fd36 	bl	80057b4 <LL_RCC_SetSysClkSource>
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 8005d48:	bf00      	nop
 8005d4a:	f7ff fd47 	bl	80057dc <LL_RCC_GetSysClkSource>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b04      	cmp	r3, #4
 8005d52:	d1fa      	bne.n	8005d4a <_SysClk_Backup+0x4e>

	/* Set AHB prescaler*/
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8005d54:	2000      	movs	r0, #0
 8005d56:	f7ff fd4f 	bl	80057f8 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8005d5a:	2000      	movs	r0, #0
 8005d5c:	f7ff fd60 	bl	8005820 <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8005d60:	2000      	movs	r0, #0
 8005d62:	f7ff fd71 	bl	8005848 <LL_RCC_SetAPB2Prescaler>

	LL_Init1msTick(HSI_VALUE);
 8005d66:	4806      	ldr	r0, [pc, #24]	; (8005d80 <_SysClk_Backup+0x84>)
 8005d68:	f7ff fba8 	bl	80054bc <LL_Init1msTick>
	LL_SetSystemCoreClock(HSI_VALUE);
 8005d6c:	4804      	ldr	r0, [pc, #16]	; (8005d80 <_SysClk_Backup+0x84>)
 8005d6e:	f7ff fbdb 	bl	8005528 <LL_SetSystemCoreClock>

	_SysClk_Src = STRHAL_SYSCLK_SRC_BKP;
 8005d72:	4b04      	ldr	r3, [pc, #16]	; (8005d84 <_SysClk_Backup+0x88>)
 8005d74:	2200      	movs	r2, #0
 8005d76:	701a      	strb	r2, [r3, #0]

	return _SysClk_Src;
 8005d78:	4b02      	ldr	r3, [pc, #8]	; (8005d84 <_SysClk_Backup+0x88>)
 8005d7a:	781b      	ldrb	r3, [r3, #0]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	00f42400 	.word	0x00f42400
 8005d84:	20000a5c 	.word	0x20000a5c

08005d88 <LL_ADC_DMA_GetRegAddr>:
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  if (Register == LL_ADC_DMA_REG_REGULAR_DATA)
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d103      	bne.n	8005da0 <LL_ADC_DMA_GetRegAddr+0x18>
    data_reg_addr = (uint32_t) &(ADCx->DR);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	3340      	adds	r3, #64	; 0x40
 8005d9c:	60fb      	str	r3, [r7, #12]
 8005d9e:	e00c      	b.n	8005dba <LL_ADC_DMA_GetRegAddr+0x32>
    data_reg_addr = (uint32_t) &((__LL_ADC_COMMON_INSTANCE(ADCx))->CDR);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005da6:	d003      	beq.n	8005db0 <LL_ADC_DMA_GetRegAddr+0x28>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a07      	ldr	r2, [pc, #28]	; (8005dc8 <LL_ADC_DMA_GetRegAddr+0x40>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d101      	bne.n	8005db4 <LL_ADC_DMA_GetRegAddr+0x2c>
 8005db0:	4b06      	ldr	r3, [pc, #24]	; (8005dcc <LL_ADC_DMA_GetRegAddr+0x44>)
 8005db2:	e000      	b.n	8005db6 <LL_ADC_DMA_GetRegAddr+0x2e>
 8005db4:	4b06      	ldr	r3, [pc, #24]	; (8005dd0 <LL_ADC_DMA_GetRegAddr+0x48>)
 8005db6:	330c      	adds	r3, #12
 8005db8:	60fb      	str	r3, [r7, #12]
  return data_reg_addr;
 8005dba:	68fb      	ldr	r3, [r7, #12]
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3714      	adds	r7, #20
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr
 8005dc8:	50000100 	.word	0x50000100
 8005dcc:	50000300 	.word	0x50000300
 8005dd0:	50000700 	.word	0x50000700

08005dd4 <LL_ADC_SetGainCompensation>:
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005de4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005de8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005dec:	683a      	ldr	r2, [r7, #0]
 8005dee:	431a      	orrs	r2, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_CFGR2_GCOMP_Pos);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dfe:	683a      	ldr	r2, [r7, #0]
 8005e00:	2a00      	cmp	r2, #0
 8005e02:	d002      	beq.n	8005e0a <LL_ADC_SetGainCompensation+0x36>
 8005e04:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005e08:	e000      	b.n	8005e0c <LL_ADC_SetGainCompensation+0x38>
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	431a      	orrs	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	611a      	str	r2, [r3, #16]
}
 8005e12:	bf00      	nop
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <LL_ADC_REG_SetSequencerLength>:
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b083      	sub	sp, #12
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
 8005e26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2c:	f023 020f 	bic.w	r2, r3, #15
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	431a      	orrs	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <LL_ADC_REG_SetSequencerRanks>:
{
 8005e44:	b480      	push	{r7}
 8005e46:	b087      	sub	sp, #28
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	3330      	adds	r3, #48	; 0x30
 8005e54:	461a      	mov	r2, r3
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	0a1b      	lsrs	r3, r3, #8
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	f003 030c 	and.w	r3, r3, #12
 8005e60:	4413      	add	r3, r2
 8005e62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	f003 031f 	and.w	r3, r3, #31
 8005e6e:	211f      	movs	r1, #31
 8005e70:	fa01 f303 	lsl.w	r3, r1, r3
 8005e74:	43db      	mvns	r3, r3
 8005e76:	401a      	ands	r2, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	0e9b      	lsrs	r3, r3, #26
 8005e7c:	f003 011f 	and.w	r1, r3, #31
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	f003 031f 	and.w	r3, r3, #31
 8005e86:	fa01 f303 	lsl.w	r3, r1, r3
 8005e8a:	431a      	orrs	r2, r3
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	601a      	str	r2, [r3, #0]
}
 8005e90:	bf00      	nop
 8005e92:	371c      	adds	r7, #28
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <LL_ADC_SetChannelSamplingTime>:
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b087      	sub	sp, #28
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	3314      	adds	r3, #20
 8005eac:	461a      	mov	r2, r3
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	0e5b      	lsrs	r3, r3, #25
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	f003 0304 	and.w	r3, r3, #4
 8005eb8:	4413      	add	r3, r2
 8005eba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	0d1b      	lsrs	r3, r3, #20
 8005ec4:	f003 031f 	and.w	r3, r3, #31
 8005ec8:	2107      	movs	r1, #7
 8005eca:	fa01 f303 	lsl.w	r3, r1, r3
 8005ece:	43db      	mvns	r3, r3
 8005ed0:	401a      	ands	r2, r3
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	0d1b      	lsrs	r3, r3, #20
 8005ed6:	f003 031f 	and.w	r3, r3, #31
 8005eda:	6879      	ldr	r1, [r7, #4]
 8005edc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ee0:	431a      	orrs	r2, r3
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	601a      	str	r2, [r3, #0]
}
 8005ee6:	bf00      	nop
 8005ee8:	371c      	adds	r7, #28
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
	...

08005ef4 <LL_ADC_SetChannelSingleDiff>:
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a0f      	ldr	r2, [pc, #60]	; (8005f40 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d10a      	bne.n	8005f1e <LL_ADC_SetChannelSingleDiff+0x2a>
    SET_BIT(ADCx->DIFSEL,
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f14:	431a      	orrs	r2, r3
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8005f1c:	e00a      	b.n	8005f34 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f2a:	43db      	mvns	r3, r3
 8005f2c:	401a      	ands	r2, r3
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8005f34:	bf00      	nop
 8005f36:	3714      	adds	r7, #20
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr
 8005f40:	407f0000 	.word	0x407f0000

08005f44 <LL_ADC_SetOverSamplingScope>:
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f56:	f023 0303 	bic.w	r3, r3, #3
 8005f5a:	683a      	ldr	r2, [r7, #0]
 8005f5c:	431a      	orrs	r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	611a      	str	r2, [r3, #16]
}
 8005f62:	bf00      	nop
 8005f64:	370c      	adds	r7, #12
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr

08005f6e <LL_ADC_DisableDeepPowerDown>:
{
 8005f6e:	b480      	push	{r7}
 8005f70:	b083      	sub	sp, #12
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005f7e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	6093      	str	r3, [r2, #8]
}
 8005f86:	bf00      	nop
 8005f88:	370c      	adds	r7, #12
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr

08005f92 <LL_ADC_EnableInternalRegulator>:
{
 8005f92:	b480      	push	{r7}
 8005f94:	b083      	sub	sp, #12
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005fa2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005fa6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	609a      	str	r2, [r3, #8]
}
 8005fae:	bf00      	nop
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <LL_ADC_Enable>:
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b083      	sub	sp, #12
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005fca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005fce:	f043 0201 	orr.w	r2, r3, #1
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	609a      	str	r2, [r3, #8]
}
 8005fd6:	bf00      	nop
 8005fd8:	370c      	adds	r7, #12
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr

08005fe2 <LL_ADC_StartCalibration>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t SingleDiff)
{
 8005fe2:	b480      	push	{r7}
 8005fe4:	b083      	sub	sp, #12
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
 8005fea:	6039      	str	r1, [r7, #0]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005ff4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005ff8:	683a      	ldr	r2, [r7, #0]
 8005ffa:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005ffe:	4313      	orrs	r3, r2
 8006000:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	609a      	str	r2, [r3, #8]
             ADC_CR_ADCALDIF | ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL | (SingleDiff & ADC_SINGLEDIFF_CALIB_START_MASK));
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006024:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006028:	d101      	bne.n	800602e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800602a:	2301      	movs	r3, #1
 800602c:	e000      	b.n	8006030 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800602e:	2300      	movs	r3, #0
}
 8006030:	4618      	mov	r0, r3
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800604c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006050:	f043 0204 	orr.w	r2, r3, #4
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006058:	bf00      	nop
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <LL_ADC_IsActiveFlag_ADRDY>:
  * @rmtoll ISR      ADRDY          LL_ADC_IsActiveFlag_ADRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0301 	and.w	r3, r3, #1
 8006074:	2b01      	cmp	r3, #1
 8006076:	d101      	bne.n	800607c <LL_ADC_IsActiveFlag_ADRDY+0x18>
 8006078:	2301      	movs	r3, #1
 800607a:	e000      	b.n	800607e <LL_ADC_IsActiveFlag_ADRDY+0x1a>
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	370c      	adds	r7, #12
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr
	...

0800608c <LL_AHB1_GRP1_EnableClock>:
{
 800608c:	b480      	push	{r7}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8006094:	4b08      	ldr	r3, [pc, #32]	; (80060b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8006096:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006098:	4907      	ldr	r1, [pc, #28]	; (80060b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4313      	orrs	r3, r2
 800609e:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80060a0:	4b05      	ldr	r3, [pc, #20]	; (80060b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80060a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4013      	ands	r3, r2
 80060a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80060aa:	68fb      	ldr	r3, [r7, #12]
}
 80060ac:	bf00      	nop
 80060ae:	3714      	adds	r7, #20
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr
 80060b8:	40021000 	.word	0x40021000

080060bc <LL_AHB2_GRP1_EnableClock>:
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80060c4:	4b08      	ldr	r3, [pc, #32]	; (80060e8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80060c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060c8:	4907      	ldr	r1, [pc, #28]	; (80060e8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80060d0:	4b05      	ldr	r3, [pc, #20]	; (80060e8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80060d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4013      	ands	r3, r2
 80060d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80060da:	68fb      	ldr	r3, [r7, #12]
}
 80060dc:	bf00      	nop
 80060de:	3714      	adds	r7, #20
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr
 80060e8:	40021000 	.word	0x40021000

080060ec <LL_DMA_EnableChannel>:
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 80060fa:	4a0c      	ldr	r2, [pc, #48]	; (800612c <LL_DMA_EnableChannel+0x40>)
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	4413      	add	r3, r2
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	461a      	mov	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	4413      	add	r3, r2
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4908      	ldr	r1, [pc, #32]	; (800612c <LL_DMA_EnableChannel+0x40>)
 800610c:	683a      	ldr	r2, [r7, #0]
 800610e:	440a      	add	r2, r1
 8006110:	7812      	ldrb	r2, [r2, #0]
 8006112:	4611      	mov	r1, r2
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	440a      	add	r2, r1
 8006118:	f043 0301 	orr.w	r3, r3, #1
 800611c:	6013      	str	r3, [r2, #0]
}
 800611e:	bf00      	nop
 8006120:	3714      	adds	r7, #20
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	08009d24 	.word	0x08009d24

08006130 <LL_DMA_IsEnabledChannel>:
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	60fb      	str	r3, [r7, #12]
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 800613e:	4a0a      	ldr	r2, [pc, #40]	; (8006168 <LL_DMA_IsEnabledChannel+0x38>)
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	4413      	add	r3, r2
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	461a      	mov	r2, r3
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	4413      	add	r3, r2
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 0301 	and.w	r3, r3, #1
                    DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 8006152:	2b01      	cmp	r3, #1
 8006154:	d101      	bne.n	800615a <LL_DMA_IsEnabledChannel+0x2a>
 8006156:	2301      	movs	r3, #1
 8006158:	e000      	b.n	800615c <LL_DMA_IsEnabledChannel+0x2c>
 800615a:	2300      	movs	r3, #0
}
 800615c:	4618      	mov	r0, r3
 800615e:	3714      	adds	r7, #20
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr
 8006168:	08009d24 	.word	0x08009d24

0800616c <LL_DMA_SetDataLength>:
{
 800616c:	b480      	push	{r7}
 800616e:	b087      	sub	sp, #28
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 800617c:	4a0d      	ldr	r2, [pc, #52]	; (80061b4 <LL_DMA_SetDataLength+0x48>)
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	4413      	add	r3, r2
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	461a      	mov	r2, r3
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	4413      	add	r3, r2
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	0c1b      	lsrs	r3, r3, #16
 800618e:	041b      	lsls	r3, r3, #16
 8006190:	4908      	ldr	r1, [pc, #32]	; (80061b4 <LL_DMA_SetDataLength+0x48>)
 8006192:	68ba      	ldr	r2, [r7, #8]
 8006194:	440a      	add	r2, r1
 8006196:	7812      	ldrb	r2, [r2, #0]
 8006198:	4611      	mov	r1, r2
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	440a      	add	r2, r1
 800619e:	4611      	mov	r1, r2
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	604b      	str	r3, [r1, #4]
}
 80061a6:	bf00      	nop
 80061a8:	371c      	adds	r7, #28
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	08009d24 	.word	0x08009d24

080061b8 <LL_RCC_SetADCClockSource>:
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, 3U << ((ADCxSource & 0x001F0000U) >> 16U), ((ADCxSource & 0x000000FFU) << ((ADCxSource & 0x001F0000U) >> 16U)));
 80061c0:	4b0e      	ldr	r3, [pc, #56]	; (80061fc <LL_RCC_SetADCClockSource+0x44>)
 80061c2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	0c1b      	lsrs	r3, r3, #16
 80061ca:	f003 031f 	and.w	r3, r3, #31
 80061ce:	2103      	movs	r1, #3
 80061d0:	fa01 f303 	lsl.w	r3, r1, r3
 80061d4:	43db      	mvns	r3, r3
 80061d6:	401a      	ands	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	b2d9      	uxtb	r1, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	0c1b      	lsrs	r3, r3, #16
 80061e0:	f003 031f 	and.w	r3, r3, #31
 80061e4:	fa01 f303 	lsl.w	r3, r1, r3
 80061e8:	4904      	ldr	r1, [pc, #16]	; (80061fc <LL_RCC_SetADCClockSource+0x44>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	40021000 	.word	0x40021000

08006200 <STRHAL_ADC_RegInit>:
} adc1_buf, adc2_buf, adc3_buf, adc4_buf, adc5_buf;

static volatile uint64_t STRHAL_ADC_ChannelState[2] = { 0, 0 };

static void STRHAL_ADC_RegInit(ADC_TypeDef *ADCx)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b08c      	sub	sp, #48	; 0x30
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
	LL_ADC_InitTypeDef ADC_InitStruct =
 8006208:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800620c:	2200      	movs	r2, #0
 800620e:	601a      	str	r2, [r3, #0]
 8006210:	605a      	str	r2, [r3, #4]
 8006212:	609a      	str	r2, [r3, #8]
	{ 0 };
	LL_ADC_REG_InitTypeDef ADC_REG_InitStruct =
 8006214:	f107 030c 	add.w	r3, r7, #12
 8006218:	2200      	movs	r2, #0
 800621a:	601a      	str	r2, [r3, #0]
 800621c:	605a      	str	r2, [r3, #4]
 800621e:	609a      	str	r2, [r3, #8]
 8006220:	60da      	str	r2, [r3, #12]
 8006222:	611a      	str	r2, [r3, #16]
 8006224:	615a      	str	r2, [r3, #20]
	{ 0 };
	ADC_InitStruct.Resolution = STRHAL_ADC_RESOLUTION;
 8006226:	2300      	movs	r3, #0
 8006228:	627b      	str	r3, [r7, #36]	; 0x24
	ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 800622a:	2300      	movs	r3, #0
 800622c:	62bb      	str	r3, [r7, #40]	; 0x28
	ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 800622e:	2300      	movs	r3, #0
 8006230:	62fb      	str	r3, [r7, #44]	; 0x2c
	LL_ADC_Init(ADCx, &ADC_InitStruct);
 8006232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006236:	4619      	mov	r1, r3
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f7fd fceb 	bl	8003c14 <LL_ADC_Init>
	ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 800623e:	2300      	movs	r3, #0
 8006240:	60fb      	str	r3, [r7, #12]
	ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8006242:	2300      	movs	r3, #0
 8006244:	613b      	str	r3, [r7, #16]
	ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8006246:	2300      	movs	r3, #0
 8006248:	617b      	str	r3, [r7, #20]
	ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 800624a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800624e:	61bb      	str	r3, [r7, #24]
	//ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
	ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 8006250:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006254:	623b      	str	r3, [r7, #32]
	ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8006256:	2303      	movs	r3, #3
 8006258:	61fb      	str	r3, [r7, #28]
	LL_ADC_REG_Init(ADCx, &ADC_REG_InitStruct);
 800625a:	f107 030c 	add.w	r3, r7, #12
 800625e:	4619      	mov	r1, r3
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f7fd fcfd 	bl	8003c60 <LL_ADC_REG_Init>
	LL_ADC_SetGainCompensation(ADCx, 0);
 8006266:	2100      	movs	r1, #0
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f7ff fdb3 	bl	8005dd4 <LL_ADC_SetGainCompensation>
	LL_ADC_SetOverSamplingScope(ADCx, LL_ADC_OVS_DISABLE);
 800626e:	2100      	movs	r1, #0
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f7ff fe67 	bl	8005f44 <LL_ADC_SetOverSamplingScope>
	LL_ADC_DisableDeepPowerDown(ADCx);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f7ff fe79 	bl	8005f6e <LL_ADC_DisableDeepPowerDown>
}
 800627c:	bf00      	nop
 800627e:	3730      	adds	r7, #48	; 0x30
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <STRHAL_ADC_DmaInit>:

static void STRHAL_ADC_DmaInit(DMA_TypeDef *DMAx, uint32_t dmaChannel, uint32_t dest, uint32_t src, uint32_t periph)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b090      	sub	sp, #64	; 0x40
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	607a      	str	r2, [r7, #4]
 8006290:	603b      	str	r3, [r7, #0]
	LL_DMA_InitTypeDef DMA_InitStruct =
 8006292:	f107 0314 	add.w	r3, r7, #20
 8006296:	222c      	movs	r2, #44	; 0x2c
 8006298:	2100      	movs	r1, #0
 800629a:	4618      	mov	r0, r3
 800629c:	f003 faf8 	bl	8009890 <memset>
	{ 0 };

	DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 80062a0:	2300      	movs	r3, #0
 80062a2:	61fb      	str	r3, [r7, #28]
	DMA_InitStruct.MemoryOrM2MDstAddress = dest;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	61bb      	str	r3, [r7, #24]
	DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_HALFWORD;
 80062a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062ac:	633b      	str	r3, [r7, #48]	; 0x30
	DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 80062ae:	2380      	movs	r3, #128	; 0x80
 80062b0:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStruct.Mode = LL_DMA_MODE_CIRCULAR;
 80062b2:	2320      	movs	r3, #32
 80062b4:	623b      	str	r3, [r7, #32]
	DMA_InitStruct.NbData = 0;
 80062b6:	2300      	movs	r3, #0
 80062b8:	637b      	str	r3, [r7, #52]	; 0x34
	DMA_InitStruct.PeriphOrM2MSrcAddress = src;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	617b      	str	r3, [r7, #20]
	DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_HALFWORD;
 80062be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80062c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 80062c4:	2300      	movs	r3, #0
 80062c6:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStruct.PeriphRequest = periph;
 80062c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062ca:	63bb      	str	r3, [r7, #56]	; 0x38
	DMA_InitStruct.Priority = STRHAL_ADC_DMA_PRIORITY;
 80062cc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80062d0:	63fb      	str	r3, [r7, #60]	; 0x3c

	LL_DMA_Init(DMAx, dmaChannel, &DMA_InitStruct);
 80062d2:	f107 0314 	add.w	r3, r7, #20
 80062d6:	461a      	mov	r2, r3
 80062d8:	68b9      	ldr	r1, [r7, #8]
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f7fd fdb6 	bl	8003e4c <LL_DMA_Init>
}
 80062e0:	bf00      	nop
 80062e2:	3740      	adds	r7, #64	; 0x40
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <STRHAL_ADC_Calibrate>:

static void STRHAL_ADC_Calibrate()
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	af00      	add	r7, sp, #0
	LL_ADC_EnableInternalRegulator(ADC1);
 80062ec:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80062f0:	f7ff fe4f 	bl	8005f92 <LL_ADC_EnableInternalRegulator>
	LL_mDelay(100);
 80062f4:	2064      	movs	r0, #100	; 0x64
 80062f6:	f7ff f8ef 	bl	80054d8 <LL_mDelay>
	LL_ADC_StartCalibration(ADC1, STRHAL_ADC_SINGLEDIFF);
 80062fa:	217f      	movs	r1, #127	; 0x7f
 80062fc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006300:	f7ff fe6f 	bl	8005fe2 <LL_ADC_StartCalibration>
	while (LL_ADC_IsCalibrationOnGoing(ADC1));
 8006304:	bf00      	nop
 8006306:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800630a:	f7ff fe83 	bl	8006014 <LL_ADC_IsCalibrationOnGoing>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1f8      	bne.n	8006306 <STRHAL_ADC_Calibrate+0x1e>

	LL_ADC_EnableInternalRegulator(ADC2);
 8006314:	4823      	ldr	r0, [pc, #140]	; (80063a4 <STRHAL_ADC_Calibrate+0xbc>)
 8006316:	f7ff fe3c 	bl	8005f92 <LL_ADC_EnableInternalRegulator>
	LL_mDelay(100);
 800631a:	2064      	movs	r0, #100	; 0x64
 800631c:	f7ff f8dc 	bl	80054d8 <LL_mDelay>
	LL_ADC_StartCalibration(ADC2, STRHAL_ADC_SINGLEDIFF);
 8006320:	217f      	movs	r1, #127	; 0x7f
 8006322:	4820      	ldr	r0, [pc, #128]	; (80063a4 <STRHAL_ADC_Calibrate+0xbc>)
 8006324:	f7ff fe5d 	bl	8005fe2 <LL_ADC_StartCalibration>
	while (LL_ADC_IsCalibrationOnGoing(ADC2));
 8006328:	bf00      	nop
 800632a:	481e      	ldr	r0, [pc, #120]	; (80063a4 <STRHAL_ADC_Calibrate+0xbc>)
 800632c:	f7ff fe72 	bl	8006014 <LL_ADC_IsCalibrationOnGoing>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d1f9      	bne.n	800632a <STRHAL_ADC_Calibrate+0x42>

	LL_ADC_EnableInternalRegulator(ADC3);
 8006336:	481c      	ldr	r0, [pc, #112]	; (80063a8 <STRHAL_ADC_Calibrate+0xc0>)
 8006338:	f7ff fe2b 	bl	8005f92 <LL_ADC_EnableInternalRegulator>
	LL_mDelay(100);
 800633c:	2064      	movs	r0, #100	; 0x64
 800633e:	f7ff f8cb 	bl	80054d8 <LL_mDelay>
	LL_ADC_StartCalibration(ADC3, STRHAL_ADC_SINGLEDIFF);
 8006342:	217f      	movs	r1, #127	; 0x7f
 8006344:	4818      	ldr	r0, [pc, #96]	; (80063a8 <STRHAL_ADC_Calibrate+0xc0>)
 8006346:	f7ff fe4c 	bl	8005fe2 <LL_ADC_StartCalibration>
	while (LL_ADC_IsCalibrationOnGoing(ADC3));
 800634a:	bf00      	nop
 800634c:	4816      	ldr	r0, [pc, #88]	; (80063a8 <STRHAL_ADC_Calibrate+0xc0>)
 800634e:	f7ff fe61 	bl	8006014 <LL_ADC_IsCalibrationOnGoing>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d1f9      	bne.n	800634c <STRHAL_ADC_Calibrate+0x64>

	LL_ADC_EnableInternalRegulator(ADC4);
 8006358:	4814      	ldr	r0, [pc, #80]	; (80063ac <STRHAL_ADC_Calibrate+0xc4>)
 800635a:	f7ff fe1a 	bl	8005f92 <LL_ADC_EnableInternalRegulator>
	LL_mDelay(100);
 800635e:	2064      	movs	r0, #100	; 0x64
 8006360:	f7ff f8ba 	bl	80054d8 <LL_mDelay>
	LL_ADC_StartCalibration(ADC4, STRHAL_ADC_SINGLEDIFF);
 8006364:	217f      	movs	r1, #127	; 0x7f
 8006366:	4811      	ldr	r0, [pc, #68]	; (80063ac <STRHAL_ADC_Calibrate+0xc4>)
 8006368:	f7ff fe3b 	bl	8005fe2 <LL_ADC_StartCalibration>
	while (LL_ADC_IsCalibrationOnGoing(ADC4));
 800636c:	bf00      	nop
 800636e:	480f      	ldr	r0, [pc, #60]	; (80063ac <STRHAL_ADC_Calibrate+0xc4>)
 8006370:	f7ff fe50 	bl	8006014 <LL_ADC_IsCalibrationOnGoing>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1f9      	bne.n	800636e <STRHAL_ADC_Calibrate+0x86>

	LL_ADC_EnableInternalRegulator(ADC5);
 800637a:	480d      	ldr	r0, [pc, #52]	; (80063b0 <STRHAL_ADC_Calibrate+0xc8>)
 800637c:	f7ff fe09 	bl	8005f92 <LL_ADC_EnableInternalRegulator>
	LL_mDelay(100);
 8006380:	2064      	movs	r0, #100	; 0x64
 8006382:	f7ff f8a9 	bl	80054d8 <LL_mDelay>
	LL_ADC_StartCalibration(ADC5, STRHAL_ADC_SINGLEDIFF);
 8006386:	217f      	movs	r1, #127	; 0x7f
 8006388:	4809      	ldr	r0, [pc, #36]	; (80063b0 <STRHAL_ADC_Calibrate+0xc8>)
 800638a:	f7ff fe2a 	bl	8005fe2 <LL_ADC_StartCalibration>
	while (LL_ADC_IsCalibrationOnGoing(ADC5));
 800638e:	bf00      	nop
 8006390:	4807      	ldr	r0, [pc, #28]	; (80063b0 <STRHAL_ADC_Calibrate+0xc8>)
 8006392:	f7ff fe3f 	bl	8006014 <LL_ADC_IsCalibrationOnGoing>
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d1f9      	bne.n	8006390 <STRHAL_ADC_Calibrate+0xa8>
}
 800639c:	bf00      	nop
 800639e:	bf00      	nop
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	50000100 	.word	0x50000100
 80063a8:	50000400 	.word	0x50000400
 80063ac:	50000500 	.word	0x50000500
 80063b0:	50000600 	.word	0x50000600

080063b4 <STRHAL_ADC_Init>:

void STRHAL_ADC_Init()
{
 80063b4:	b590      	push	{r4, r7, lr}
 80063b6:	b087      	sub	sp, #28
 80063b8:	af02      	add	r7, sp, #8
	{
		LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
	}
	else if (STRHAL_ADC_DMA == DMA2)
	{
		LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 80063ba:	2002      	movs	r0, #2
 80063bc:	f7ff fe66 	bl	800608c <LL_AHB1_GRP1_EnableClock>
	}

	LL_RCC_SetADCClockSource(LL_RCC_ADC12_CLKSOURCE_SYSCLK);
 80063c0:	4846      	ldr	r0, [pc, #280]	; (80064dc <STRHAL_ADC_Init+0x128>)
 80063c2:	f7ff fef9 	bl	80061b8 <LL_RCC_SetADCClockSource>
	LL_RCC_SetADCClockSource(LL_RCC_ADC345_CLKSOURCE_SYSCLK);
 80063c6:	4846      	ldr	r0, [pc, #280]	; (80064e0 <STRHAL_ADC_Init+0x12c>)
 80063c8:	f7ff fef6 	bl	80061b8 <LL_RCC_SetADCClockSource>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMAMUX1);
 80063cc:	2004      	movs	r0, #4
 80063ce:	f7ff fe5d 	bl	800608c <LL_AHB1_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC12);
 80063d2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80063d6:	f7ff fe71 	bl	80060bc <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC345);
 80063da:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80063de:	f7ff fe6d 	bl	80060bc <LL_AHB2_GRP1_EnableClock>

	//Init DMA for ADC123
	STRHAL_ADC_DmaInit(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL, (uint32_t) adc1_buf.data, LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA), LL_DMAMUX_REQ_ADC1);
 80063e2:	4c40      	ldr	r4, [pc, #256]	; (80064e4 <STRHAL_ADC_Init+0x130>)
 80063e4:	2100      	movs	r1, #0
 80063e6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80063ea:	f7ff fccd 	bl	8005d88 <LL_ADC_DMA_GetRegAddr>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2205      	movs	r2, #5
 80063f2:	9200      	str	r2, [sp, #0]
 80063f4:	4622      	mov	r2, r4
 80063f6:	2100      	movs	r1, #0
 80063f8:	483b      	ldr	r0, [pc, #236]	; (80064e8 <STRHAL_ADC_Init+0x134>)
 80063fa:	f7ff ff43 	bl	8006284 <STRHAL_ADC_DmaInit>
	STRHAL_ADC_DmaInit(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 1, (uint32_t) adc2_buf.data, LL_ADC_DMA_GetRegAddr(ADC2, LL_ADC_DMA_REG_REGULAR_DATA), LL_DMAMUX_REQ_ADC2);
 80063fe:	4c3b      	ldr	r4, [pc, #236]	; (80064ec <STRHAL_ADC_Init+0x138>)
 8006400:	2100      	movs	r1, #0
 8006402:	483b      	ldr	r0, [pc, #236]	; (80064f0 <STRHAL_ADC_Init+0x13c>)
 8006404:	f7ff fcc0 	bl	8005d88 <LL_ADC_DMA_GetRegAddr>
 8006408:	4603      	mov	r3, r0
 800640a:	2224      	movs	r2, #36	; 0x24
 800640c:	9200      	str	r2, [sp, #0]
 800640e:	4622      	mov	r2, r4
 8006410:	2101      	movs	r1, #1
 8006412:	4835      	ldr	r0, [pc, #212]	; (80064e8 <STRHAL_ADC_Init+0x134>)
 8006414:	f7ff ff36 	bl	8006284 <STRHAL_ADC_DmaInit>
	STRHAL_ADC_DmaInit(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 2, (uint32_t) adc3_buf.data, LL_ADC_DMA_GetRegAddr(ADC3, LL_ADC_DMA_REG_REGULAR_DATA), LL_DMAMUX_REQ_ADC3);
 8006418:	4c36      	ldr	r4, [pc, #216]	; (80064f4 <STRHAL_ADC_Init+0x140>)
 800641a:	2100      	movs	r1, #0
 800641c:	4836      	ldr	r0, [pc, #216]	; (80064f8 <STRHAL_ADC_Init+0x144>)
 800641e:	f7ff fcb3 	bl	8005d88 <LL_ADC_DMA_GetRegAddr>
 8006422:	4603      	mov	r3, r0
 8006424:	2225      	movs	r2, #37	; 0x25
 8006426:	9200      	str	r2, [sp, #0]
 8006428:	4622      	mov	r2, r4
 800642a:	2102      	movs	r1, #2
 800642c:	482e      	ldr	r0, [pc, #184]	; (80064e8 <STRHAL_ADC_Init+0x134>)
 800642e:	f7ff ff29 	bl	8006284 <STRHAL_ADC_DmaInit>
	STRHAL_ADC_DmaInit(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 3, (uint32_t) adc4_buf.data, LL_ADC_DMA_GetRegAddr(ADC4, LL_ADC_DMA_REG_REGULAR_DATA), LL_DMAMUX_REQ_ADC4);
 8006432:	4c32      	ldr	r4, [pc, #200]	; (80064fc <STRHAL_ADC_Init+0x148>)
 8006434:	2100      	movs	r1, #0
 8006436:	4832      	ldr	r0, [pc, #200]	; (8006500 <STRHAL_ADC_Init+0x14c>)
 8006438:	f7ff fca6 	bl	8005d88 <LL_ADC_DMA_GetRegAddr>
 800643c:	4603      	mov	r3, r0
 800643e:	2226      	movs	r2, #38	; 0x26
 8006440:	9200      	str	r2, [sp, #0]
 8006442:	4622      	mov	r2, r4
 8006444:	2103      	movs	r1, #3
 8006446:	4828      	ldr	r0, [pc, #160]	; (80064e8 <STRHAL_ADC_Init+0x134>)
 8006448:	f7ff ff1c 	bl	8006284 <STRHAL_ADC_DmaInit>
	STRHAL_ADC_DmaInit(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 4, (uint32_t) adc5_buf.data, LL_ADC_DMA_GetRegAddr(ADC5, LL_ADC_DMA_REG_REGULAR_DATA), LL_DMAMUX_REQ_ADC5);
 800644c:	4c2d      	ldr	r4, [pc, #180]	; (8006504 <STRHAL_ADC_Init+0x150>)
 800644e:	2100      	movs	r1, #0
 8006450:	482d      	ldr	r0, [pc, #180]	; (8006508 <STRHAL_ADC_Init+0x154>)
 8006452:	f7ff fc99 	bl	8005d88 <LL_ADC_DMA_GetRegAddr>
 8006456:	4603      	mov	r3, r0
 8006458:	2227      	movs	r2, #39	; 0x27
 800645a:	9200      	str	r2, [sp, #0]
 800645c:	4622      	mov	r2, r4
 800645e:	2104      	movs	r1, #4
 8006460:	4821      	ldr	r0, [pc, #132]	; (80064e8 <STRHAL_ADC_Init+0x134>)
 8006462:	f7ff ff0f 	bl	8006284 <STRHAL_ADC_DmaInit>

	LL_ADC_CommonInitTypeDef ADC_CommonInitStruct =
 8006466:	463b      	mov	r3, r7
 8006468:	2200      	movs	r2, #0
 800646a:	601a      	str	r2, [r3, #0]
 800646c:	605a      	str	r2, [r3, #4]
 800646e:	609a      	str	r2, [r3, #8]
 8006470:	60da      	str	r2, [r3, #12]
	{ 0 };

	ADC_CommonInitStruct.CommonClock = STRHAL_ADC_COMMONCLOCK;
 8006472:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8006476:	603b      	str	r3, [r7, #0]
	ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8006478:	2300      	movs	r3, #0
 800647a:	607b      	str	r3, [r7, #4]
	LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 800647c:	463b      	mov	r3, r7
 800647e:	4619      	mov	r1, r3
 8006480:	4822      	ldr	r0, [pc, #136]	; (800650c <STRHAL_ADC_Init+0x158>)
 8006482:	f7fd fb63 	bl	8003b4c <LL_ADC_CommonInit>
	LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC2), &ADC_CommonInitStruct);
 8006486:	463b      	mov	r3, r7
 8006488:	4619      	mov	r1, r3
 800648a:	4820      	ldr	r0, [pc, #128]	; (800650c <STRHAL_ADC_Init+0x158>)
 800648c:	f7fd fb5e 	bl	8003b4c <LL_ADC_CommonInit>
	LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC3), &ADC_CommonInitStruct);
 8006490:	463b      	mov	r3, r7
 8006492:	4619      	mov	r1, r3
 8006494:	481e      	ldr	r0, [pc, #120]	; (8006510 <STRHAL_ADC_Init+0x15c>)
 8006496:	f7fd fb59 	bl	8003b4c <LL_ADC_CommonInit>
	LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC4), &ADC_CommonInitStruct);
 800649a:	463b      	mov	r3, r7
 800649c:	4619      	mov	r1, r3
 800649e:	481c      	ldr	r0, [pc, #112]	; (8006510 <STRHAL_ADC_Init+0x15c>)
 80064a0:	f7fd fb54 	bl	8003b4c <LL_ADC_CommonInit>
	LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC5), &ADC_CommonInitStruct);
 80064a4:	463b      	mov	r3, r7
 80064a6:	4619      	mov	r1, r3
 80064a8:	4819      	ldr	r0, [pc, #100]	; (8006510 <STRHAL_ADC_Init+0x15c>)
 80064aa:	f7fd fb4f 	bl	8003b4c <LL_ADC_CommonInit>

	STRHAL_ADC_RegInit(ADC1);
 80064ae:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80064b2:	f7ff fea5 	bl	8006200 <STRHAL_ADC_RegInit>
	STRHAL_ADC_RegInit(ADC2);
 80064b6:	480e      	ldr	r0, [pc, #56]	; (80064f0 <STRHAL_ADC_Init+0x13c>)
 80064b8:	f7ff fea2 	bl	8006200 <STRHAL_ADC_RegInit>
	STRHAL_ADC_RegInit(ADC3);
 80064bc:	480e      	ldr	r0, [pc, #56]	; (80064f8 <STRHAL_ADC_Init+0x144>)
 80064be:	f7ff fe9f 	bl	8006200 <STRHAL_ADC_RegInit>
	STRHAL_ADC_RegInit(ADC4);
 80064c2:	480f      	ldr	r0, [pc, #60]	; (8006500 <STRHAL_ADC_Init+0x14c>)
 80064c4:	f7ff fe9c 	bl	8006200 <STRHAL_ADC_RegInit>
	STRHAL_ADC_RegInit(ADC5);
 80064c8:	480f      	ldr	r0, [pc, #60]	; (8006508 <STRHAL_ADC_Init+0x154>)
 80064ca:	f7ff fe99 	bl	8006200 <STRHAL_ADC_RegInit>

	STRHAL_ADC_Calibrate();
 80064ce:	f7ff ff0b 	bl	80062e8 <STRHAL_ADC_Calibrate>
}
 80064d2:	bf00      	nop
 80064d4:	3714      	adds	r7, #20
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd90      	pop	{r4, r7, pc}
 80064da:	bf00      	nop
 80064dc:	001c0002 	.word	0x001c0002
 80064e0:	001e0002 	.word	0x001e0002
 80064e4:	20000a68 	.word	0x20000a68
 80064e8:	40020400 	.word	0x40020400
 80064ec:	20000a94 	.word	0x20000a94
 80064f0:	50000100 	.word	0x50000100
 80064f4:	20000ac0 	.word	0x20000ac0
 80064f8:	50000400 	.word	0x50000400
 80064fc:	20000aec 	.word	0x20000aec
 8006500:	50000500 	.word	0x50000500
 8006504:	20000b18 	.word	0x20000b18
 8006508:	50000600 	.word	0x50000600
 800650c:	50000300 	.word	0x50000300
 8006510:	50000700 	.word	0x50000700

08006514 <STRHAL_ADC_SubscribeChannel>:

STRHAL_ADC_Data_t* STRHAL_ADC_SubscribeChannel(STRHAL_ADC_Channel_t *channel, STRHAL_ADC_InType_t type)
{
 8006514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006518:	b097      	sub	sp, #92	; 0x5c
 800651a:	af00      	add	r7, sp, #0
 800651c:	60f8      	str	r0, [r7, #12]
 800651e:	460b      	mov	r3, r1
 8006520:	72fb      	strb	r3, [r7, #11]

	STRHAL_ADC_AnalogPin_t analogPin;
	STRHAL_ADC_Data_t *data_ptr = NULL;
 8006522:	2300      	movs	r3, #0
 8006524:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t *length_ptr = NULL;
 8006526:	2300      	movs	r3, #0
 8006528:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t dmaChannel = 0;
 800652a:	2300      	movs	r3, #0
 800652c:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint64_t adcChannelMsk[2] = { 0, 0 };
 800652e:	f04f 0200 	mov.w	r2, #0
 8006532:	f04f 0300 	mov.w	r3, #0
 8006536:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800653a:	f04f 0200 	mov.w	r2, #0
 800653e:	f04f 0300 	mov.w	r3, #0
 8006542:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	if (channel->ADCx == ADC1)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800654e:	d11a      	bne.n	8006586 <STRHAL_ADC_SubscribeChannel+0x72>
	{
		analogPin = gpioMapping[0][channel->channelId];
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	791b      	ldrb	r3, [r3, #4]
 8006554:	4a9c      	ldr	r2, [pc, #624]	; (80067c8 <STRHAL_ADC_SubscribeChannel+0x2b4>)
 8006556:	011b      	lsls	r3, r3, #4
 8006558:	4413      	add	r3, r2
 800655a:	f107 0638 	add.w	r6, r7, #56	; 0x38
 800655e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006560:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		data_ptr = adc1_buf.data;
 8006564:	4b99      	ldr	r3, [pc, #612]	; (80067cc <STRHAL_ADC_SubscribeChannel+0x2b8>)
 8006566:	657b      	str	r3, [r7, #84]	; 0x54
		length_ptr = &adc1_buf.length;
 8006568:	4b99      	ldr	r3, [pc, #612]	; (80067d0 <STRHAL_ADC_SubscribeChannel+0x2bc>)
 800656a:	653b      	str	r3, [r7, #80]	; 0x50
		dmaChannel = STRHAL_ADC_DMA_CHANNEL;
 800656c:	2300      	movs	r3, #0
 800656e:	64fb      	str	r3, [r7, #76]	; 0x4c
		adcChannelMsk[0] = (1U) << (channel->channelId);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	791b      	ldrb	r3, [r3, #4]
 8006574:	461a      	mov	r2, r3
 8006576:	2301      	movs	r3, #1
 8006578:	4093      	lsls	r3, r2
 800657a:	461a      	mov	r2, r3
 800657c:	f04f 0300 	mov.w	r3, #0
 8006580:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8006584:	e089      	b.n	800669a <STRHAL_ADC_SubscribeChannel+0x186>
	}
	else if (channel->ADCx == ADC2)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a92      	ldr	r2, [pc, #584]	; (80067d4 <STRHAL_ADC_SubscribeChannel+0x2c0>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d11c      	bne.n	80065ca <STRHAL_ADC_SubscribeChannel+0xb6>
	{
		analogPin = gpioMapping[1][channel->channelId];
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	791b      	ldrb	r3, [r3, #4]
 8006594:	4a8c      	ldr	r2, [pc, #560]	; (80067c8 <STRHAL_ADC_SubscribeChannel+0x2b4>)
 8006596:	3313      	adds	r3, #19
 8006598:	011b      	lsls	r3, r3, #4
 800659a:	4413      	add	r3, r2
 800659c:	f107 0638 	add.w	r6, r7, #56	; 0x38
 80065a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80065a2:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		data_ptr = adc2_buf.data;
 80065a6:	4b8c      	ldr	r3, [pc, #560]	; (80067d8 <STRHAL_ADC_SubscribeChannel+0x2c4>)
 80065a8:	657b      	str	r3, [r7, #84]	; 0x54
		length_ptr = &adc2_buf.length;
 80065aa:	4b8c      	ldr	r3, [pc, #560]	; (80067dc <STRHAL_ADC_SubscribeChannel+0x2c8>)
 80065ac:	653b      	str	r3, [r7, #80]	; 0x50
		dmaChannel = STRHAL_ADC_DMA_CHANNEL + 1;
 80065ae:	2301      	movs	r3, #1
 80065b0:	64fb      	str	r3, [r7, #76]	; 0x4c
		adcChannelMsk[0] = (1U) << (STRHAL_ADC_CHANNEL_LAST + channel->channelId);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	791b      	ldrb	r3, [r3, #4]
 80065b6:	3313      	adds	r3, #19
 80065b8:	2201      	movs	r2, #1
 80065ba:	fa02 f303 	lsl.w	r3, r2, r3
 80065be:	461a      	mov	r2, r3
 80065c0:	f04f 0300 	mov.w	r3, #0
 80065c4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80065c8:	e067      	b.n	800669a <STRHAL_ADC_SubscribeChannel+0x186>
	}
	else if (channel->ADCx == ADC3)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a84      	ldr	r2, [pc, #528]	; (80067e0 <STRHAL_ADC_SubscribeChannel+0x2cc>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d11c      	bne.n	800660e <STRHAL_ADC_SubscribeChannel+0xfa>
	{
		analogPin = gpioMapping[2][channel->channelId];
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	791b      	ldrb	r3, [r3, #4]
 80065d8:	4a7b      	ldr	r2, [pc, #492]	; (80067c8 <STRHAL_ADC_SubscribeChannel+0x2b4>)
 80065da:	3326      	adds	r3, #38	; 0x26
 80065dc:	011b      	lsls	r3, r3, #4
 80065de:	4413      	add	r3, r2
 80065e0:	f107 0638 	add.w	r6, r7, #56	; 0x38
 80065e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80065e6:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		data_ptr = adc3_buf.data;
 80065ea:	4b7e      	ldr	r3, [pc, #504]	; (80067e4 <STRHAL_ADC_SubscribeChannel+0x2d0>)
 80065ec:	657b      	str	r3, [r7, #84]	; 0x54
		length_ptr = &adc3_buf.length;
 80065ee:	4b7e      	ldr	r3, [pc, #504]	; (80067e8 <STRHAL_ADC_SubscribeChannel+0x2d4>)
 80065f0:	653b      	str	r3, [r7, #80]	; 0x50
		dmaChannel = STRHAL_ADC_DMA_CHANNEL + 2;
 80065f2:	2302      	movs	r3, #2
 80065f4:	64fb      	str	r3, [r7, #76]	; 0x4c
		adcChannelMsk[0] = (1U) << (2 * STRHAL_ADC_CHANNEL_LAST + channel->channelId);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	791b      	ldrb	r3, [r3, #4]
 80065fa:	3326      	adds	r3, #38	; 0x26
 80065fc:	2201      	movs	r2, #1
 80065fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006602:	461a      	mov	r2, r3
 8006604:	f04f 0300 	mov.w	r3, #0
 8006608:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800660c:	e045      	b.n	800669a <STRHAL_ADC_SubscribeChannel+0x186>
	}
	else if (channel->ADCx == ADC4)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a76      	ldr	r2, [pc, #472]	; (80067ec <STRHAL_ADC_SubscribeChannel+0x2d8>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d11c      	bne.n	8006652 <STRHAL_ADC_SubscribeChannel+0x13e>
	{
		analogPin = gpioMapping[3][channel->channelId];
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	791b      	ldrb	r3, [r3, #4]
 800661c:	4a6a      	ldr	r2, [pc, #424]	; (80067c8 <STRHAL_ADC_SubscribeChannel+0x2b4>)
 800661e:	3339      	adds	r3, #57	; 0x39
 8006620:	011b      	lsls	r3, r3, #4
 8006622:	4413      	add	r3, r2
 8006624:	f107 0638 	add.w	r6, r7, #56	; 0x38
 8006628:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800662a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		data_ptr = adc4_buf.data;
 800662e:	4b70      	ldr	r3, [pc, #448]	; (80067f0 <STRHAL_ADC_SubscribeChannel+0x2dc>)
 8006630:	657b      	str	r3, [r7, #84]	; 0x54
		length_ptr = &adc4_buf.length;
 8006632:	4b70      	ldr	r3, [pc, #448]	; (80067f4 <STRHAL_ADC_SubscribeChannel+0x2e0>)
 8006634:	653b      	str	r3, [r7, #80]	; 0x50
		dmaChannel = STRHAL_ADC_DMA_CHANNEL + 3;
 8006636:	2303      	movs	r3, #3
 8006638:	64fb      	str	r3, [r7, #76]	; 0x4c
		adcChannelMsk[1] = (1U) << (2 * STRHAL_ADC_CHANNEL_LAST + channel->channelId);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	791b      	ldrb	r3, [r3, #4]
 800663e:	3326      	adds	r3, #38	; 0x26
 8006640:	2201      	movs	r2, #1
 8006642:	fa02 f303 	lsl.w	r3, r2, r3
 8006646:	461a      	mov	r2, r3
 8006648:	f04f 0300 	mov.w	r3, #0
 800664c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8006650:	e023      	b.n	800669a <STRHAL_ADC_SubscribeChannel+0x186>
	}
	else if (channel->ADCx == ADC5)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a68      	ldr	r2, [pc, #416]	; (80067f8 <STRHAL_ADC_SubscribeChannel+0x2e4>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d11c      	bne.n	8006696 <STRHAL_ADC_SubscribeChannel+0x182>
	{
		analogPin = gpioMapping[4][channel->channelId];
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	791b      	ldrb	r3, [r3, #4]
 8006660:	4a59      	ldr	r2, [pc, #356]	; (80067c8 <STRHAL_ADC_SubscribeChannel+0x2b4>)
 8006662:	334c      	adds	r3, #76	; 0x4c
 8006664:	011b      	lsls	r3, r3, #4
 8006666:	4413      	add	r3, r2
 8006668:	f107 0638 	add.w	r6, r7, #56	; 0x38
 800666c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800666e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		data_ptr = adc5_buf.data;
 8006672:	4b62      	ldr	r3, [pc, #392]	; (80067fc <STRHAL_ADC_SubscribeChannel+0x2e8>)
 8006674:	657b      	str	r3, [r7, #84]	; 0x54
		length_ptr = &adc5_buf.length;
 8006676:	4b62      	ldr	r3, [pc, #392]	; (8006800 <STRHAL_ADC_SubscribeChannel+0x2ec>)
 8006678:	653b      	str	r3, [r7, #80]	; 0x50
		dmaChannel = STRHAL_ADC_DMA_CHANNEL + 4;
 800667a:	2304      	movs	r3, #4
 800667c:	64fb      	str	r3, [r7, #76]	; 0x4c
		adcChannelMsk[1] = (1U) << (2 * STRHAL_ADC_CHANNEL_LAST + channel->channelId);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	791b      	ldrb	r3, [r3, #4]
 8006682:	3326      	adds	r3, #38	; 0x26
 8006684:	2201      	movs	r2, #1
 8006686:	fa02 f303 	lsl.w	r3, r2, r3
 800668a:	461a      	mov	r2, r3
 800668c:	f04f 0300 	mov.w	r3, #0
 8006690:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8006694:	e001      	b.n	800669a <STRHAL_ADC_SubscribeChannel+0x186>
	}
	else
	{
		return NULL;
 8006696:	2300      	movs	r3, #0
 8006698:	e091      	b.n	80067be <STRHAL_ADC_SubscribeChannel+0x2aa>
	}

	// wrong input type passed
	if (analogPin.type != type)
 800669a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800669e:	7afa      	ldrb	r2, [r7, #11]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d001      	beq.n	80066a8 <STRHAL_ADC_SubscribeChannel+0x194>
	{
		return NULL;
 80066a4:	2300      	movs	r3, #0
 80066a6:	e08a      	b.n	80067be <STRHAL_ADC_SubscribeChannel+0x2aa>
	}

	// channel already initialized
	if ((STRHAL_ADC_ChannelState[0] & adcChannelMsk[0]) && (STRHAL_ADC_ChannelState[1] & adcChannelMsk[1]))
 80066a8:	4b56      	ldr	r3, [pc, #344]	; (8006804 <STRHAL_ADC_SubscribeChannel+0x2f0>)
 80066aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80066ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80066b2:	ea00 0602 	and.w	r6, r0, r2
 80066b6:	603e      	str	r6, [r7, #0]
 80066b8:	400b      	ands	r3, r1
 80066ba:	607b      	str	r3, [r7, #4]
 80066bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	d00d      	beq.n	80066e0 <STRHAL_ADC_SubscribeChannel+0x1cc>
 80066c4:	4b4f      	ldr	r3, [pc, #316]	; (8006804 <STRHAL_ADC_SubscribeChannel+0x2f0>)
 80066c6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80066ca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80066ce:	ea00 0a02 	and.w	sl, r0, r2
 80066d2:	ea01 0b03 	and.w	fp, r1, r3
 80066d6:	ea5a 030b 	orrs.w	r3, sl, fp
 80066da:	d001      	beq.n	80066e0 <STRHAL_ADC_SubscribeChannel+0x1cc>
	{
		return NULL;
 80066dc:	2300      	movs	r3, #0
 80066de:	e06e      	b.n	80067be <STRHAL_ADC_SubscribeChannel+0x2aa>
	}

	STRHAL_ADC_ChannelState[0] |= adcChannelMsk[0];
 80066e0:	4b48      	ldr	r3, [pc, #288]	; (8006804 <STRHAL_ADC_SubscribeChannel+0x2f0>)
 80066e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80066e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80066ea:	ea40 0802 	orr.w	r8, r0, r2
 80066ee:	ea41 0903 	orr.w	r9, r1, r3
 80066f2:	4b44      	ldr	r3, [pc, #272]	; (8006804 <STRHAL_ADC_SubscribeChannel+0x2f0>)
 80066f4:	e9c3 8900 	strd	r8, r9, [r3]
	STRHAL_ADC_ChannelState[1] |= adcChannelMsk[1];
 80066f8:	4b42      	ldr	r3, [pc, #264]	; (8006804 <STRHAL_ADC_SubscribeChannel+0x2f0>)
 80066fa:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80066fe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006702:	ea40 0402 	orr.w	r4, r0, r2
 8006706:	ea41 0503 	orr.w	r5, r1, r3
 800670a:	4b3e      	ldr	r3, [pc, #248]	; (8006804 <STRHAL_ADC_SubscribeChannel+0x2f0>)
 800670c:	e9c3 4502 	strd	r4, r5, [r3, #8]

	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8006710:	2004      	movs	r0, #4
 8006712:	f7ff fcd3 	bl	80060bc <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8006716:	2020      	movs	r0, #32
 8006718:	f7ff fcd0 	bl	80060bc <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800671c:	2001      	movs	r0, #1
 800671e:	f7ff fccd 	bl	80060bc <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8006722:	2002      	movs	r0, #2
 8006724:	f7ff fcca 	bl	80060bc <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 8006728:	2010      	movs	r0, #16
 800672a:	f7ff fcc7 	bl	80060bc <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 800672e:	2008      	movs	r0, #8
 8006730:	f7ff fcc4 	bl	80060bc <LL_AHB2_GRP1_EnableClock>

	if (type == STRHAL_ADC_INTYPE_REGULAR)
 8006734:	7afb      	ldrb	r3, [r7, #11]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d115      	bne.n	8006766 <STRHAL_ADC_SubscribeChannel+0x252>
	{
		LL_GPIO_InitTypeDef GPIO_InitStruct =
 800673a:	f107 0310 	add.w	r3, r7, #16
 800673e:	2200      	movs	r2, #0
 8006740:	601a      	str	r2, [r3, #0]
 8006742:	605a      	str	r2, [r3, #4]
 8006744:	609a      	str	r2, [r3, #8]
 8006746:	60da      	str	r2, [r3, #12]
 8006748:	611a      	str	r2, [r3, #16]
 800674a:	615a      	str	r2, [r3, #20]
		{ 0 };

		GPIO_InitStruct.Pin = analogPin.pin;
 800674c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800674e:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8006750:	2303      	movs	r3, #3
 8006752:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006754:	2300      	movs	r3, #0
 8006756:	623b      	str	r3, [r7, #32]
		LL_GPIO_Init(analogPin.port, &GPIO_InitStruct);
 8006758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675a:	f107 0210 	add.w	r2, r7, #16
 800675e:	4611      	mov	r1, r2
 8006760:	4618      	mov	r0, r3
 8006762:	f7fd fcfe 	bl	8004162 <LL_GPIO_Init>
	}

	LL_ADC_SetChannelSamplingTime(channel->ADCx, analogPin.channel, STRHAL_ADC_CHANNEL_SAMPLINGTIME);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800676c:	2206      	movs	r2, #6
 800676e:	4618      	mov	r0, r3
 8006770:	f7ff fb94 	bl	8005e9c <LL_ADC_SetChannelSamplingTime>
	LL_ADC_SetChannelSingleDiff(channel->ADCx, analogPin.channel, STRHAL_ADC_SINGLEDIFF);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800677a:	227f      	movs	r2, #127	; 0x7f
 800677c:	4618      	mov	r0, r3
 800677e:	f7ff fbb9 	bl	8005ef4 <LL_ADC_SetChannelSingleDiff>

	LL_ADC_REG_SetSequencerRanks(channel->ADCx, adcRanks[*length_ptr], analogPin.channel);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6818      	ldr	r0, [r3, #0]
 8006786:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a1f      	ldr	r2, [pc, #124]	; (8006808 <STRHAL_ADC_SubscribeChannel+0x2f4>)
 800678c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006790:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006792:	4619      	mov	r1, r3
 8006794:	f7ff fb56 	bl	8005e44 <LL_ADC_REG_SetSequencerRanks>
	uint32_t length = *length_ptr;
 8006798:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	64bb      	str	r3, [r7, #72]	; 0x48
	LL_DMA_SetDataLength(STRHAL_ADC_DMA, dmaChannel, length + 1);
 800679e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067a0:	3301      	adds	r3, #1
 80067a2:	461a      	mov	r2, r3
 80067a4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80067a6:	4819      	ldr	r0, [pc, #100]	; (800680c <STRHAL_ADC_SubscribeChannel+0x2f8>)
 80067a8:	f7ff fce0 	bl	800616c <LL_DMA_SetDataLength>
	(*length_ptr)++;
 80067ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	1c5a      	adds	r2, r3, #1
 80067b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067b4:	601a      	str	r2, [r3, #0]
	return &data_ptr[length];
 80067b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067b8:	005b      	lsls	r3, r3, #1
 80067ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80067bc:	4413      	add	r3, r2
}
 80067be:	4618      	mov	r0, r3
 80067c0:	375c      	adds	r7, #92	; 0x5c
 80067c2:	46bd      	mov	sp, r7
 80067c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067c8:	08009dac 	.word	0x08009dac
 80067cc:	20000a68 	.word	0x20000a68
 80067d0:	20000a90 	.word	0x20000a90
 80067d4:	50000100 	.word	0x50000100
 80067d8:	20000a94 	.word	0x20000a94
 80067dc:	20000abc 	.word	0x20000abc
 80067e0:	50000400 	.word	0x50000400
 80067e4:	20000ac0 	.word	0x20000ac0
 80067e8:	20000ae8 	.word	0x20000ae8
 80067ec:	50000500 	.word	0x50000500
 80067f0:	20000aec 	.word	0x20000aec
 80067f4:	20000b14 	.word	0x20000b14
 80067f8:	50000600 	.word	0x50000600
 80067fc:	20000b18 	.word	0x20000b18
 8006800:	20000b40 	.word	0x20000b40
 8006804:	20000b48 	.word	0x20000b48
 8006808:	08009d2c 	.word	0x08009d2c
 800680c:	40020400 	.word	0x40020400

08006810 <STRHAL_ADC_Run>:

void STRHAL_ADC_Run()
{
 8006810:	b580      	push	{r7, lr}
 8006812:	af00      	add	r7, sp, #0
	LL_ADC_REG_SetSequencerLength(ADC1, adcSeqRanks[adc1_buf.length - 1]);
 8006814:	4b5a      	ldr	r3, [pc, #360]	; (8006980 <STRHAL_ADC_Run+0x170>)
 8006816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006818:	3b01      	subs	r3, #1
 800681a:	4a5a      	ldr	r2, [pc, #360]	; (8006984 <STRHAL_ADC_Run+0x174>)
 800681c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006820:	4619      	mov	r1, r3
 8006822:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006826:	f7ff fafa 	bl	8005e1e <LL_ADC_REG_SetSequencerLength>
	LL_ADC_REG_SetSequencerLength(ADC2, adcSeqRanks[adc2_buf.length - 1]);
 800682a:	4b57      	ldr	r3, [pc, #348]	; (8006988 <STRHAL_ADC_Run+0x178>)
 800682c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800682e:	3b01      	subs	r3, #1
 8006830:	4a54      	ldr	r2, [pc, #336]	; (8006984 <STRHAL_ADC_Run+0x174>)
 8006832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006836:	4619      	mov	r1, r3
 8006838:	4854      	ldr	r0, [pc, #336]	; (800698c <STRHAL_ADC_Run+0x17c>)
 800683a:	f7ff faf0 	bl	8005e1e <LL_ADC_REG_SetSequencerLength>
	LL_ADC_REG_SetSequencerLength(ADC3, adcSeqRanks[adc3_buf.length - 1]);
 800683e:	4b54      	ldr	r3, [pc, #336]	; (8006990 <STRHAL_ADC_Run+0x180>)
 8006840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006842:	3b01      	subs	r3, #1
 8006844:	4a4f      	ldr	r2, [pc, #316]	; (8006984 <STRHAL_ADC_Run+0x174>)
 8006846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800684a:	4619      	mov	r1, r3
 800684c:	4851      	ldr	r0, [pc, #324]	; (8006994 <STRHAL_ADC_Run+0x184>)
 800684e:	f7ff fae6 	bl	8005e1e <LL_ADC_REG_SetSequencerLength>
	LL_ADC_REG_SetSequencerLength(ADC4, adcSeqRanks[adc4_buf.length - 1]);
 8006852:	4b51      	ldr	r3, [pc, #324]	; (8006998 <STRHAL_ADC_Run+0x188>)
 8006854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006856:	3b01      	subs	r3, #1
 8006858:	4a4a      	ldr	r2, [pc, #296]	; (8006984 <STRHAL_ADC_Run+0x174>)
 800685a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800685e:	4619      	mov	r1, r3
 8006860:	484e      	ldr	r0, [pc, #312]	; (800699c <STRHAL_ADC_Run+0x18c>)
 8006862:	f7ff fadc 	bl	8005e1e <LL_ADC_REG_SetSequencerLength>
	LL_ADC_REG_SetSequencerLength(ADC5, adcSeqRanks[adc5_buf.length - 1]);
 8006866:	4b4e      	ldr	r3, [pc, #312]	; (80069a0 <STRHAL_ADC_Run+0x190>)
 8006868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800686a:	3b01      	subs	r3, #1
 800686c:	4a45      	ldr	r2, [pc, #276]	; (8006984 <STRHAL_ADC_Run+0x174>)
 800686e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006872:	4619      	mov	r1, r3
 8006874:	484b      	ldr	r0, [pc, #300]	; (80069a4 <STRHAL_ADC_Run+0x194>)
 8006876:	f7ff fad2 	bl	8005e1e <LL_ADC_REG_SetSequencerLength>

	LL_DMA_EnableChannel(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL);
 800687a:	2100      	movs	r1, #0
 800687c:	484a      	ldr	r0, [pc, #296]	; (80069a8 <STRHAL_ADC_Run+0x198>)
 800687e:	f7ff fc35 	bl	80060ec <LL_DMA_EnableChannel>
	while (!LL_DMA_IsEnabledChannel(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL));
 8006882:	bf00      	nop
 8006884:	2100      	movs	r1, #0
 8006886:	4848      	ldr	r0, [pc, #288]	; (80069a8 <STRHAL_ADC_Run+0x198>)
 8006888:	f7ff fc52 	bl	8006130 <LL_DMA_IsEnabledChannel>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d0f8      	beq.n	8006884 <STRHAL_ADC_Run+0x74>
	LL_DMA_EnableChannel(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 1);
 8006892:	2101      	movs	r1, #1
 8006894:	4844      	ldr	r0, [pc, #272]	; (80069a8 <STRHAL_ADC_Run+0x198>)
 8006896:	f7ff fc29 	bl	80060ec <LL_DMA_EnableChannel>
	while (!LL_DMA_IsEnabledChannel(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 1));
 800689a:	bf00      	nop
 800689c:	2101      	movs	r1, #1
 800689e:	4842      	ldr	r0, [pc, #264]	; (80069a8 <STRHAL_ADC_Run+0x198>)
 80068a0:	f7ff fc46 	bl	8006130 <LL_DMA_IsEnabledChannel>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d0f8      	beq.n	800689c <STRHAL_ADC_Run+0x8c>
	LL_DMA_EnableChannel(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 2);
 80068aa:	2102      	movs	r1, #2
 80068ac:	483e      	ldr	r0, [pc, #248]	; (80069a8 <STRHAL_ADC_Run+0x198>)
 80068ae:	f7ff fc1d 	bl	80060ec <LL_DMA_EnableChannel>
	while (!LL_DMA_IsEnabledChannel(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 2));
 80068b2:	bf00      	nop
 80068b4:	2102      	movs	r1, #2
 80068b6:	483c      	ldr	r0, [pc, #240]	; (80069a8 <STRHAL_ADC_Run+0x198>)
 80068b8:	f7ff fc3a 	bl	8006130 <LL_DMA_IsEnabledChannel>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d0f8      	beq.n	80068b4 <STRHAL_ADC_Run+0xa4>
	LL_DMA_EnableChannel(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 3);
 80068c2:	2103      	movs	r1, #3
 80068c4:	4838      	ldr	r0, [pc, #224]	; (80069a8 <STRHAL_ADC_Run+0x198>)
 80068c6:	f7ff fc11 	bl	80060ec <LL_DMA_EnableChannel>
	while (!LL_DMA_IsEnabledChannel(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 3));
 80068ca:	bf00      	nop
 80068cc:	2103      	movs	r1, #3
 80068ce:	4836      	ldr	r0, [pc, #216]	; (80069a8 <STRHAL_ADC_Run+0x198>)
 80068d0:	f7ff fc2e 	bl	8006130 <LL_DMA_IsEnabledChannel>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d0f8      	beq.n	80068cc <STRHAL_ADC_Run+0xbc>
	LL_DMA_EnableChannel(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 4);
 80068da:	2104      	movs	r1, #4
 80068dc:	4832      	ldr	r0, [pc, #200]	; (80069a8 <STRHAL_ADC_Run+0x198>)
 80068de:	f7ff fc05 	bl	80060ec <LL_DMA_EnableChannel>
	while (!LL_DMA_IsEnabledChannel(STRHAL_ADC_DMA, STRHAL_ADC_DMA_CHANNEL + 4));
 80068e2:	bf00      	nop
 80068e4:	2104      	movs	r1, #4
 80068e6:	4830      	ldr	r0, [pc, #192]	; (80069a8 <STRHAL_ADC_Run+0x198>)
 80068e8:	f7ff fc22 	bl	8006130 <LL_DMA_IsEnabledChannel>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d0f8      	beq.n	80068e4 <STRHAL_ADC_Run+0xd4>

	LL_ADC_Enable(ADC1);
 80068f2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80068f6:	f7ff fb60 	bl	8005fba <LL_ADC_Enable>
	while (LL_ADC_IsActiveFlag_ADRDY(ADC1) == 0);
 80068fa:	bf00      	nop
 80068fc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006900:	f7ff fbb0 	bl	8006064 <LL_ADC_IsActiveFlag_ADRDY>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d0f8      	beq.n	80068fc <STRHAL_ADC_Run+0xec>
	LL_ADC_Enable(ADC2);
 800690a:	4820      	ldr	r0, [pc, #128]	; (800698c <STRHAL_ADC_Run+0x17c>)
 800690c:	f7ff fb55 	bl	8005fba <LL_ADC_Enable>
	while (LL_ADC_IsActiveFlag_ADRDY(ADC2) == 0);
 8006910:	bf00      	nop
 8006912:	481e      	ldr	r0, [pc, #120]	; (800698c <STRHAL_ADC_Run+0x17c>)
 8006914:	f7ff fba6 	bl	8006064 <LL_ADC_IsActiveFlag_ADRDY>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d0f9      	beq.n	8006912 <STRHAL_ADC_Run+0x102>
	LL_ADC_Enable(ADC3);
 800691e:	481d      	ldr	r0, [pc, #116]	; (8006994 <STRHAL_ADC_Run+0x184>)
 8006920:	f7ff fb4b 	bl	8005fba <LL_ADC_Enable>
	while (LL_ADC_IsActiveFlag_ADRDY(ADC3) == 0);
 8006924:	bf00      	nop
 8006926:	481b      	ldr	r0, [pc, #108]	; (8006994 <STRHAL_ADC_Run+0x184>)
 8006928:	f7ff fb9c 	bl	8006064 <LL_ADC_IsActiveFlag_ADRDY>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d0f9      	beq.n	8006926 <STRHAL_ADC_Run+0x116>
	LL_ADC_Enable(ADC4);
 8006932:	481a      	ldr	r0, [pc, #104]	; (800699c <STRHAL_ADC_Run+0x18c>)
 8006934:	f7ff fb41 	bl	8005fba <LL_ADC_Enable>
	while (LL_ADC_IsActiveFlag_ADRDY(ADC4) == 0);
 8006938:	bf00      	nop
 800693a:	4818      	ldr	r0, [pc, #96]	; (800699c <STRHAL_ADC_Run+0x18c>)
 800693c:	f7ff fb92 	bl	8006064 <LL_ADC_IsActiveFlag_ADRDY>
 8006940:	4603      	mov	r3, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d0f9      	beq.n	800693a <STRHAL_ADC_Run+0x12a>
	LL_ADC_Enable(ADC5);
 8006946:	4817      	ldr	r0, [pc, #92]	; (80069a4 <STRHAL_ADC_Run+0x194>)
 8006948:	f7ff fb37 	bl	8005fba <LL_ADC_Enable>
	while (LL_ADC_IsActiveFlag_ADRDY(ADC5) == 0);
 800694c:	bf00      	nop
 800694e:	4815      	ldr	r0, [pc, #84]	; (80069a4 <STRHAL_ADC_Run+0x194>)
 8006950:	f7ff fb88 	bl	8006064 <LL_ADC_IsActiveFlag_ADRDY>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d0f9      	beq.n	800694e <STRHAL_ADC_Run+0x13e>

	LL_ADC_REG_StartConversion(ADC1);
 800695a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800695e:	f7ff fb6d 	bl	800603c <LL_ADC_REG_StartConversion>
	LL_ADC_REG_StartConversion(ADC2);
 8006962:	480a      	ldr	r0, [pc, #40]	; (800698c <STRHAL_ADC_Run+0x17c>)
 8006964:	f7ff fb6a 	bl	800603c <LL_ADC_REG_StartConversion>
	LL_ADC_REG_StartConversion(ADC3);
 8006968:	480a      	ldr	r0, [pc, #40]	; (8006994 <STRHAL_ADC_Run+0x184>)
 800696a:	f7ff fb67 	bl	800603c <LL_ADC_REG_StartConversion>
	LL_ADC_REG_StartConversion(ADC4);
 800696e:	480b      	ldr	r0, [pc, #44]	; (800699c <STRHAL_ADC_Run+0x18c>)
 8006970:	f7ff fb64 	bl	800603c <LL_ADC_REG_StartConversion>
	LL_ADC_REG_StartConversion(ADC5);
 8006974:	480b      	ldr	r0, [pc, #44]	; (80069a4 <STRHAL_ADC_Run+0x194>)
 8006976:	f7ff fb61 	bl	800603c <LL_ADC_REG_StartConversion>
}
 800697a:	bf00      	nop
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	20000a68 	.word	0x20000a68
 8006984:	08009d6c 	.word	0x08009d6c
 8006988:	20000a94 	.word	0x20000a94
 800698c:	50000100 	.word	0x50000100
 8006990:	20000ac0 	.word	0x20000ac0
 8006994:	50000400 	.word	0x50000400
 8006998:	20000aec 	.word	0x20000aec
 800699c:	50000500 	.word	0x50000500
 80069a0:	20000b18 	.word	0x20000b18
 80069a4:	50000600 	.word	0x50000600
 80069a8:	40020400 	.word	0x40020400

080069ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80069ac:	b480      	push	{r7}
 80069ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80069b0:	4b04      	ldr	r3, [pc, #16]	; (80069c4 <__NVIC_GetPriorityGrouping+0x18>)
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	0a1b      	lsrs	r3, r3, #8
 80069b6:	f003 0307 	and.w	r3, r3, #7
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr
 80069c4:	e000ed00 	.word	0xe000ed00

080069c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	4603      	mov	r3, r0
 80069d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	db0b      	blt.n	80069f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80069da:	79fb      	ldrb	r3, [r7, #7]
 80069dc:	f003 021f 	and.w	r2, r3, #31
 80069e0:	4907      	ldr	r1, [pc, #28]	; (8006a00 <__NVIC_EnableIRQ+0x38>)
 80069e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069e6:	095b      	lsrs	r3, r3, #5
 80069e8:	2001      	movs	r0, #1
 80069ea:	fa00 f202 	lsl.w	r2, r0, r2
 80069ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80069f2:	bf00      	nop
 80069f4:	370c      	adds	r7, #12
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	e000e100 	.word	0xe000e100

08006a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	6039      	str	r1, [r7, #0]
 8006a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	db0a      	blt.n	8006a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	b2da      	uxtb	r2, r3
 8006a1c:	490c      	ldr	r1, [pc, #48]	; (8006a50 <__NVIC_SetPriority+0x4c>)
 8006a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a22:	0112      	lsls	r2, r2, #4
 8006a24:	b2d2      	uxtb	r2, r2
 8006a26:	440b      	add	r3, r1
 8006a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006a2c:	e00a      	b.n	8006a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	b2da      	uxtb	r2, r3
 8006a32:	4908      	ldr	r1, [pc, #32]	; (8006a54 <__NVIC_SetPriority+0x50>)
 8006a34:	79fb      	ldrb	r3, [r7, #7]
 8006a36:	f003 030f 	and.w	r3, r3, #15
 8006a3a:	3b04      	subs	r3, #4
 8006a3c:	0112      	lsls	r2, r2, #4
 8006a3e:	b2d2      	uxtb	r2, r2
 8006a40:	440b      	add	r3, r1
 8006a42:	761a      	strb	r2, [r3, #24]
}
 8006a44:	bf00      	nop
 8006a46:	370c      	adds	r7, #12
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr
 8006a50:	e000e100 	.word	0xe000e100
 8006a54:	e000ed00 	.word	0xe000ed00

08006a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b089      	sub	sp, #36	; 0x24
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f003 0307 	and.w	r3, r3, #7
 8006a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	f1c3 0307 	rsb	r3, r3, #7
 8006a72:	2b04      	cmp	r3, #4
 8006a74:	bf28      	it	cs
 8006a76:	2304      	movcs	r3, #4
 8006a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	3304      	adds	r3, #4
 8006a7e:	2b06      	cmp	r3, #6
 8006a80:	d902      	bls.n	8006a88 <NVIC_EncodePriority+0x30>
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	3b03      	subs	r3, #3
 8006a86:	e000      	b.n	8006a8a <NVIC_EncodePriority+0x32>
 8006a88:	2300      	movs	r3, #0
 8006a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	fa02 f303 	lsl.w	r3, r2, r3
 8006a96:	43da      	mvns	r2, r3
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	401a      	ands	r2, r3
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006aa0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8006aaa:	43d9      	mvns	r1, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ab0:	4313      	orrs	r3, r2
         );
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3724      	adds	r7, #36	; 0x24
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
	...

08006ac0 <LL_AHB2_GRP1_EnableClock>:
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b085      	sub	sp, #20
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006ac8:	4b08      	ldr	r3, [pc, #32]	; (8006aec <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006aca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006acc:	4907      	ldr	r1, [pc, #28]	; (8006aec <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006ad4:	4b05      	ldr	r3, [pc, #20]	; (8006aec <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006ad6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4013      	ands	r3, r2
 8006adc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006ade:	68fb      	ldr	r3, [r7, #12]
}
 8006ae0:	bf00      	nop
 8006ae2:	3714      	adds	r7, #20
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr
 8006aec:	40021000 	.word	0x40021000

08006af0 <LL_APB1_GRP1_EnableClock>:
{
 8006af0:	b480      	push	{r7}
 8006af2:	b085      	sub	sp, #20
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8006af8:	4b08      	ldr	r3, [pc, #32]	; (8006b1c <LL_APB1_GRP1_EnableClock+0x2c>)
 8006afa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006afc:	4907      	ldr	r1, [pc, #28]	; (8006b1c <LL_APB1_GRP1_EnableClock+0x2c>)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8006b04:	4b05      	ldr	r3, [pc, #20]	; (8006b1c <LL_APB1_GRP1_EnableClock+0x2c>)
 8006b06:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
}
 8006b10:	bf00      	nop
 8006b12:	3714      	adds	r7, #20
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr
 8006b1c:	40021000 	.word	0x40021000

08006b20 <LL_RCC_SetFDCANClockSource>:
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_FDCANSEL, FDCANxSource);
 8006b28:	4b07      	ldr	r3, [pc, #28]	; (8006b48 <LL_RCC_SetFDCANClockSource+0x28>)
 8006b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b2e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006b32:	4905      	ldr	r1, [pc, #20]	; (8006b48 <LL_RCC_SetFDCANClockSource+0x28>)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006b3c:	bf00      	nop
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr
 8006b48:	40021000 	.word	0x40021000

08006b4c <STRHAL_CAN_Init_GPIO>:
{ [STRHAL_FDCAN1] =
{ .can = FDCAN1, .can_ram = FDCAN1_MESSAGE_RAM, .state = STRHAL_CAN_STATE_0, .filter_n = 0, .fifo_sub_state = 0 }, [STRHAL_FDCAN2] =
{ .can = FDCAN2, .can_ram = FDCAN2_MESSAGE_RAM, .state = STRHAL_CAN_STATE_0, .filter_n = 0, .fifo_sub_state = 0 } };

static void STRHAL_CAN_Init_GPIO(void)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b086      	sub	sp, #24
 8006b50:	af00      	add	r7, sp, #0

	LL_GPIO_InitTypeDef GPIO_InitStruct =
 8006b52:	463b      	mov	r3, r7
 8006b54:	2200      	movs	r2, #0
 8006b56:	601a      	str	r2, [r3, #0]
 8006b58:	605a      	str	r2, [r3, #4]
 8006b5a:	609a      	str	r2, [r3, #8]
 8006b5c:	60da      	str	r2, [r3, #12]
 8006b5e:	611a      	str	r2, [r3, #16]
 8006b60:	615a      	str	r2, [r3, #20]
	{ 0 };

	LL_RCC_SetFDCANClockSource(LL_RCC_FDCAN_CLKSOURCE_PCLK1);
 8006b62:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8006b66:	f7ff ffdb 	bl	8006b20 <LL_RCC_SetFDCANClockSource>

	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_FDCAN);
 8006b6a:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8006b6e:	f7ff ffbf 	bl	8006af0 <LL_APB1_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8006b72:	2001      	movs	r0, #1
 8006b74:	f7ff ffa4 	bl	8006ac0 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8006b78:	2002      	movs	r0, #2
 8006b7a:	f7ff ffa1 	bl	8006ac0 <LL_AHB2_GRP1_EnableClock>

	//FDCAN1 GPIO Configuration
	//PA11     ------> FDCAN1_RX
	//PA12     ------> FDCAN1_TX

	GPIO_InitStruct.Pin = LL_GPIO_PIN_11 | LL_GPIO_PIN_12;
 8006b7e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006b82:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006b84:	2302      	movs	r3, #2
 8006b86:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006b90:	2303      	movs	r3, #3
 8006b92:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_9;
 8006b94:	2309      	movs	r3, #9
 8006b96:	617b      	str	r3, [r7, #20]

	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b98:	463b      	mov	r3, r7
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006ba0:	f7fd fadf 	bl	8004162 <LL_GPIO_Init>

	//FDCAN2 GPIO Configuration
	//PB5     ------> FDCAN2_RX
	//PB6     ------> FDCAN2_TX

	GPIO_InitStruct.Pin = LL_GPIO_PIN_5 | LL_GPIO_PIN_6;
 8006ba4:	2360      	movs	r3, #96	; 0x60
 8006ba6:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006ba8:	2302      	movs	r3, #2
 8006baa:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006bac:	2300      	movs	r3, #0
 8006bae:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_9;
 8006bb8:	2309      	movs	r3, #9
 8006bba:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006bbc:	463b      	mov	r3, r7
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	4803      	ldr	r0, [pc, #12]	; (8006bd0 <STRHAL_CAN_Init_GPIO+0x84>)
 8006bc2:	f7fd face 	bl	8004162 <LL_GPIO_Init>

}
 8006bc6:	bf00      	nop
 8006bc8:	3718      	adds	r7, #24
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	48000400 	.word	0x48000400

08006bd4 <STRHAL_CAN_Instance_Init>:

int STRHAL_CAN_Instance_Init(STRHAL_FDCAN_Id_t fdcan_id)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	4603      	mov	r3, r0
 8006bdc:	71fb      	strb	r3, [r7, #7]
	if (fdcan_id < 0 || fdcan_id >= STRHAL_N_FDCAN)
 8006bde:	79fb      	ldrb	r3, [r7, #7]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d902      	bls.n	8006bea <STRHAL_CAN_Instance_Init+0x16>
		return -1;
 8006be4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006be8:	e0e9      	b.n	8006dbe <STRHAL_CAN_Instance_Init+0x1ea>

	_fdcans[fdcan_id].state = STRHAL_CAN_STATE_INITIALISING;
 8006bea:	79fa      	ldrb	r2, [r7, #7]
 8006bec:	4976      	ldr	r1, [pc, #472]	; (8006dc8 <STRHAL_CAN_Instance_Init+0x1f4>)
 8006bee:	4613      	mov	r3, r2
 8006bf0:	005b      	lsls	r3, r3, #1
 8006bf2:	4413      	add	r3, r2
 8006bf4:	00db      	lsls	r3, r3, #3
 8006bf6:	440b      	add	r3, r1
 8006bf8:	3308      	adds	r3, #8
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	701a      	strb	r2, [r3, #0]

	FDCAN_GlobalTypeDef *can = _fdcans[fdcan_id].can;
 8006bfe:	79fa      	ldrb	r2, [r7, #7]
 8006c00:	4971      	ldr	r1, [pc, #452]	; (8006dc8 <STRHAL_CAN_Instance_Init+0x1f4>)
 8006c02:	4613      	mov	r3, r2
 8006c04:	005b      	lsls	r3, r3, #1
 8006c06:	4413      	add	r3, r2
 8006c08:	00db      	lsls	r3, r3, #3
 8006c0a:	440b      	add	r3, r1
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	60bb      	str	r3, [r7, #8]
	//Can_Message_RAM *can_ram = handles[can_handle_index].can_ram;
	LL_RCC_SetFDCANClockSource(LL_RCC_FDCAN_CLKSOURCE_PCLK1);
 8006c10:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8006c14:	f7ff ff84 	bl	8006b20 <LL_RCC_SetFDCANClockSource>

	CLEAR_BIT(can->CCCR, FDCAN_CCCR_CSR);
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	f023 0210 	bic.w	r2, r3, #16
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	619a      	str	r2, [r3, #24]

	uint32_t tot = 0;
 8006c24:	2300      	movs	r3, #0
 8006c26:	60fb      	str	r3, [r7, #12]

	// Check Sleep mode acknowledge
	while ((can->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006c28:	e009      	b.n	8006c3e <STRHAL_CAN_Instance_Init+0x6a>
	{
		tot++;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	60fb      	str	r3, [r7, #12]
		if (tot > STRHAL_CAN_START_TOT)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	4a66      	ldr	r2, [pc, #408]	; (8006dcc <STRHAL_CAN_Instance_Init+0x1f8>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d902      	bls.n	8006c3e <STRHAL_CAN_Instance_Init+0x6a>
			return -1;
 8006c38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c3c:	e0bf      	b.n	8006dbe <STRHAL_CAN_Instance_Init+0x1ea>
	while ((can->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	699b      	ldr	r3, [r3, #24]
 8006c42:	f003 0308 	and.w	r3, r3, #8
 8006c46:	2b08      	cmp	r3, #8
 8006c48:	d0ef      	beq.n	8006c2a <STRHAL_CAN_Instance_Init+0x56>
	}

	SET_BIT(can->CCCR, FDCAN_CCCR_INIT);
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	699b      	ldr	r3, [r3, #24]
 8006c4e:	f043 0201 	orr.w	r2, r3, #1
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	619a      	str	r2, [r3, #24]

	// Wait until the INIT bit into CCCR register is set
	while ((can->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006c56:	e009      	b.n	8006c6c <STRHAL_CAN_Instance_Init+0x98>
	{
		tot++;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	60fb      	str	r3, [r7, #12]
		if (tot > STRHAL_CAN_START_TOT)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	4a5a      	ldr	r2, [pc, #360]	; (8006dcc <STRHAL_CAN_Instance_Init+0x1f8>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d902      	bls.n	8006c6c <STRHAL_CAN_Instance_Init+0x98>
			return -1;
 8006c66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c6a:	e0a8      	b.n	8006dbe <STRHAL_CAN_Instance_Init+0x1ea>
	while ((can->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	699b      	ldr	r3, [r3, #24]
 8006c70:	f003 0301 	and.w	r3, r3, #1
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d0ef      	beq.n	8006c58 <STRHAL_CAN_Instance_Init+0x84>
	}

	// Enable configuration change
	SET_BIT(can->CCCR, FDCAN_CCCR_CCE);
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	699b      	ldr	r3, [r3, #24]
 8006c7c:	f043 0202 	orr.w	r2, r3, #2
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	619a      	str	r2, [r3, #24]
	// Wait until the CCE bit into CCCR register is set
	while ((can->CCCR & FDCAN_CCCR_CCE) == 0U)
 8006c84:	e009      	b.n	8006c9a <STRHAL_CAN_Instance_Init+0xc6>
	{
		tot++;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	60fb      	str	r3, [r7, #12]
		if (tot > STRHAL_CAN_START_TOT)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	4a4f      	ldr	r2, [pc, #316]	; (8006dcc <STRHAL_CAN_Instance_Init+0x1f8>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d902      	bls.n	8006c9a <STRHAL_CAN_Instance_Init+0xc6>
			return -1;
 8006c94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c98:	e091      	b.n	8006dbe <STRHAL_CAN_Instance_Init+0x1ea>
	while ((can->CCCR & FDCAN_CCCR_CCE) == 0U)
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	f003 0302 	and.w	r3, r3, #2
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d0ef      	beq.n	8006c86 <STRHAL_CAN_Instance_Init+0xb2>
	}

	//SET_BIT(can->CCCR, FDCAN_CCCR_DAR);  //AutoRetransmission Disabled
	CLEAR_BIT(can->CCCR, FDCAN_CCCR_DAR);  //AutoRetransmission Enabled
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	699b      	ldr	r3, [r3, #24]
 8006caa:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	619a      	str	r2, [r3, #24]

	CLEAR_BIT(can->CCCR, FDCAN_CCCR_TXP);  //transmit pause Disabled
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	619a      	str	r2, [r3, #24]

	SET_BIT(can->CCCR, FDCAN_CCCR_PXHD); //Protocol Exception Handling  Disabled
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	619a      	str	r2, [r3, #24]

	SET_BIT(can->CCCR, FDCAN_FRAME_FD_BRS); //FD mode with BitRate Switching
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	619a      	str	r2, [r3, #24]

	CLEAR_BIT(can->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	699b      	ldr	r3, [r3, #24]
 8006cda:	f023 02a4 	bic.w	r2, r3, #164	; 0xa4
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	619a      	str	r2, [r3, #24]
	CLEAR_BIT(can->TEST, FDCAN_TEST_LBCK);
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	f023 0210 	bic.w	r2, r3, #16
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	611a      	str	r2, [r3, #16]

	//if(fdcan_id == STRHAL_FDCAN1) { // TODO find out why this is here - it is here because the FDCAN_CONFIG reg needs only to be set once
	MODIFY_REG(FDCAN_CONFIG->CKDIV, FDCAN_CKDIV_PDIV, FDCAN_CLOCK_DIV2);
 8006cee:	4b38      	ldr	r3, [pc, #224]	; (8006dd0 <STRHAL_CAN_Instance_Init+0x1fc>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f023 030f 	bic.w	r3, r3, #15
 8006cf6:	4a36      	ldr	r2, [pc, #216]	; (8006dd0 <STRHAL_CAN_Instance_Init+0x1fc>)
 8006cf8:	f043 0301 	orr.w	r3, r3, #1
 8006cfc:	6013      	str	r3, [r2, #0]
	//}

	// Set the nominal bit timing register
	can->NBTP = ((((uint32_t) FDCAN_NOMINAL_SYNC_JUMP_WIDTH - 1U) << FDCAN_NBTP_NSJW_Pos) | (((uint32_t) FDCAN_NOMINAL_TIMESEG_1 - 1U) << FDCAN_NBTP_NTSEG1_Pos) | (((uint32_t) FDCAN_NOMINAL_TIMESEG_2 - 1U) << FDCAN_NBTP_NTSEG2_Pos) | (((uint32_t) FDCAN_NOMINAL_PRESCALER - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	4a34      	ldr	r2, [pc, #208]	; (8006dd4 <STRHAL_CAN_Instance_Init+0x200>)
 8006d02:	61da      	str	r2, [r3, #28]

	// Bit Rate Switching Enable
	can->DBTP = ((((uint32_t) FDCAN_DATA_SYNC_JUMP_WIDTH - 1U) << FDCAN_DBTP_DSJW_Pos) | (((uint32_t) FDCAN_DATA_TIMESEG_1 - 1U) << FDCAN_DBTP_DTSEG1_Pos) | (((uint32_t) FDCAN_DATA_TIMESEG_2 - 1U) << FDCAN_DBTP_DTSEG2_Pos) | (((uint32_t) FDCAN_DATA_PRESCALER - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	4a34      	ldr	r2, [pc, #208]	; (8006dd8 <STRHAL_CAN_Instance_Init+0x204>)
 8006d08:	60da      	str	r2, [r3, #12]

	MODIFY_REG(can->RXGFC, FDCAN_RXGFC_LSS, (STRHAL_CAN_STD_FILTER_NUMBER << FDCAN_RXGFC_LSS_Pos)); // Standard filter elements number
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d10:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	MODIFY_REG(can->RXGFC, FDCAN_RXGFC_LSE, (STRHAL_CAN_EXT_FILTER_NUMBER << FDCAN_RXGFC_LSE_Pos)); // Extended filter elements number
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d20:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	MODIFY_REG(can->RXGFC, FDCAN_RXGFC_F0OM, (FDCAN_RX_FIFO_BLOCKING << FDCAN_RXGFC_F0OM_Pos)); // FIFO 0 operation mode
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d30:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	MODIFY_REG(can->RXGFC, FDCAN_RXGFC_F1OM, (FDCAN_RX_FIFO_BLOCKING << FDCAN_RXGFC_F1OM_Pos)); // FIFO 1 operation mode
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	MODIFY_REG(can->RXGFC, FDCAN_RXGFC_ANFS, (FDCAN_REJECT << FDCAN_RXGFC_ANFS_Pos)); // Accept Non-matching Frames Standard
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d50:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006d54:	f043 0220 	orr.w	r2, r3, #32
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	MODIFY_REG(can->RXGFC, FDCAN_RXGFC_ANFE, (FDCAN_REJECT << FDCAN_RXGFC_ANFE_Pos)); // Accept Non-matching Frames Extended
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d64:	f023 030c 	bic.w	r3, r3, #12
 8006d68:	f043 0208 	orr.w	r2, r3, #8
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	MODIFY_REG(can->RXGFC, FDCAN_RXGFC_RRFS, (FDCAN_FILTER_REMOTE << FDCAN_RXGFC_RRFS_Pos)); // Reject Remote Frames Standard
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d78:	f023 0202 	bic.w	r2, r3, #2
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	MODIFY_REG(can->RXGFC, FDCAN_RXGFC_RRFE, (FDCAN_REJECT_REMOTE << FDCAN_RXGFC_RRFE_Pos)); // Reject Remote Frames Extended
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d88:	f043 0201 	orr.w	r2, r3, #1
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	CLEAR_BIT(can->TXBC, FDCAN_TXBC_TFQM); // Tx FIFO/Queue Mode
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006d98:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

	//Config TxDelayCompensation
	can->TDCR = ((FDCAN_TDC_FILTER << FDCAN_TDCR_TDCF_Pos) | (FDCAN_TDC_OFFSET << FDCAN_TDCR_TDCO_Pos));
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	f240 5206 	movw	r2, #1286	; 0x506
 8006da8:	649a      	str	r2, [r3, #72]	; 0x48

	// Enable transmitter delay compensation
	SET_BIT(can->DBTP, FDCAN_DBTP_TDC);
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	60da      	str	r2, [r3, #12]

	LL_mDelay(100);
 8006db6:	2064      	movs	r0, #100	; 0x64
 8006db8:	f7fe fb8e 	bl	80054d8 <LL_mDelay>

	return 0;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3710      	adds	r7, #16
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	20000004 	.word	0x20000004
 8006dcc:	00f42400 	.word	0x00f42400
 8006dd0:	40006500 	.word	0x40006500
 8006dd4:	0001160f 	.word	0x0001160f
 8006dd8:	00010611 	.word	0x00010611

08006ddc <STRHAL_CAN_Subscribe>:

int STRHAL_CAN_Subscribe(STRHAL_FDCAN_Id_t fdcan_id, STRHAL_FDCAN_Rx_Id_t rx_id, STRHAL_FDCAN_Filter_t *filter, uint8_t n, STRHAL_CAN_Receptor_t receptor)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b087      	sub	sp, #28
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	603a      	str	r2, [r7, #0]
 8006de4:	461a      	mov	r2, r3
 8006de6:	4603      	mov	r3, r0
 8006de8:	71fb      	strb	r3, [r7, #7]
 8006dea:	460b      	mov	r3, r1
 8006dec:	71bb      	strb	r3, [r7, #6]
 8006dee:	4613      	mov	r3, r2
 8006df0:	717b      	strb	r3, [r7, #5]
	/* Error handling for user inputs */
	if (fdcan_id < 0 || fdcan_id >= STRHAL_N_FDCAN) // invalid fdcan instance
 8006df2:	79fb      	ldrb	r3, [r7, #7]
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d902      	bls.n	8006dfe <STRHAL_CAN_Subscribe+0x22>
		return -1;
 8006df8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006dfc:	e0bd      	b.n	8006f7a <STRHAL_CAN_Subscribe+0x19e>

	STRHAL_CAN_Handle_t *fdcan = &_fdcans[fdcan_id];
 8006dfe:	79fa      	ldrb	r2, [r7, #7]
 8006e00:	4613      	mov	r3, r2
 8006e02:	005b      	lsls	r3, r3, #1
 8006e04:	4413      	add	r3, r2
 8006e06:	00db      	lsls	r3, r3, #3
 8006e08:	4a5f      	ldr	r2, [pc, #380]	; (8006f88 <STRHAL_CAN_Subscribe+0x1ac>)
 8006e0a:	4413      	add	r3, r2
 8006e0c:	613b      	str	r3, [r7, #16]
	if (fdcan->state != STRHAL_CAN_STATE_INITIALISING)	// fdcan not in init mode (Subscribe called in wrong order)
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	7a1b      	ldrb	r3, [r3, #8]
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d002      	beq.n	8006e1e <STRHAL_CAN_Subscribe+0x42>
		return -1;
 8006e18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e1c:	e0ad      	b.n	8006f7a <STRHAL_CAN_Subscribe+0x19e>

	if (filter == NULL || receptor == NULL) // Nullptr check
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d002      	beq.n	8006e2a <STRHAL_CAN_Subscribe+0x4e>
 8006e24:	6a3b      	ldr	r3, [r7, #32]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d101      	bne.n	8006e2e <STRHAL_CAN_Subscribe+0x52>
		return 0;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	e0a5      	b.n	8006f7a <STRHAL_CAN_Subscribe+0x19e>

	if (n > STRHAL_CAN_RAM_N_FILTER - fdcan->filter_n) // Correct Filter Nbr
 8006e2e:	797a      	ldrb	r2, [r7, #5]
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	7d1b      	ldrb	r3, [r3, #20]
 8006e34:	f1c3 031c 	rsb	r3, r3, #28
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	dd04      	ble.n	8006e46 <STRHAL_CAN_Subscribe+0x6a>
		n = fdcan->filter_n - n;
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	7d1a      	ldrb	r2, [r3, #20]
 8006e40:	797b      	ldrb	r3, [r7, #5]
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	717b      	strb	r3, [r7, #5]

	if (fdcan->fifo_sub_state & (1U << rx_id)) // Already subscribed to this fifo
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	7d5b      	ldrb	r3, [r3, #21]
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	79bb      	ldrb	r3, [r7, #6]
 8006e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e52:	f003 0301 	and.w	r3, r3, #1
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d002      	beq.n	8006e60 <STRHAL_CAN_Subscribe+0x84>
		return -1;
 8006e5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e5e:	e08c      	b.n	8006f7a <STRHAL_CAN_Subscribe+0x19e>

	Can_Message_RAM *can_ram = fdcan->can_ram;
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	60fb      	str	r3, [r7, #12]

	uint32_t sfec;

	switch (rx_id)
 8006e66:	79bb      	ldrb	r3, [r7, #6]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d002      	beq.n	8006e72 <STRHAL_CAN_Subscribe+0x96>
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d010      	beq.n	8006e92 <STRHAL_CAN_Subscribe+0xb6>
 8006e70:	e01b      	b.n	8006eaa <STRHAL_CAN_Subscribe+0xce>
	{
		case STRHAL_FDCAN_RX0:
			fdcan->rxReceptors[0] = receptor;
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	6a3a      	ldr	r2, [r7, #32]
 8006e76:	60da      	str	r2, [r3, #12]
			fdcan->fifo_sub_state |= 1U << STRHAL_FDCAN_RX0;
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	7d5b      	ldrb	r3, [r3, #21]
 8006e7c:	f043 0301 	orr.w	r3, r3, #1
 8006e80:	b2da      	uxtb	r2, r3
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	755a      	strb	r2, [r3, #21]
			sfec = FDCAN_FILTER_TO_RXFIFO0;
 8006e86:	2301      	movs	r3, #1
 8006e88:	60bb      	str	r3, [r7, #8]
			break;
 8006e8a:	bf00      	nop
		default:
			return -1;
	}

	uint8_t i;
	for (i = 0; i < n; i++, fdcan->filter_n++)
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	75fb      	strb	r3, [r7, #23]
 8006e90:	e05f      	b.n	8006f52 <STRHAL_CAN_Subscribe+0x176>
			fdcan->rxReceptors[1] = receptor;
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	6a3a      	ldr	r2, [r7, #32]
 8006e96:	611a      	str	r2, [r3, #16]
			fdcan->fifo_sub_state |= 1U << STRHAL_FDCAN_RX1;
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	7d5b      	ldrb	r3, [r3, #21]
 8006e9c:	f043 0302 	orr.w	r3, r3, #2
 8006ea0:	b2da      	uxtb	r2, r3
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	755a      	strb	r2, [r3, #21]
			sfec = FDCAN_FILTER_TO_RXFIFO1;
 8006ea6:	2302      	movs	r3, #2
 8006ea8:	60bb      	str	r3, [r7, #8]
			return -1;
 8006eaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006eae:	e064      	b.n	8006f7a <STRHAL_CAN_Subscribe+0x19e>
	{
		can_ram->std_filters[i].S0.bit.SFEC = sfec;
 8006eb0:	7df9      	ldrb	r1, [r7, #23]
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	f003 0307 	and.w	r3, r3, #7
 8006eb8:	b2d8      	uxtb	r0, r3
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006ec0:	f360 63dd 	bfi	r3, r0, #27, #3
 8006ec4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		can_ram->std_filters[i].S0.bit.SFID1 = filter[i].value_id1;
 8006ec8:	7dfa      	ldrb	r2, [r7, #23]
 8006eca:	4613      	mov	r3, r2
 8006ecc:	005b      	lsls	r3, r3, #1
 8006ece:	4413      	add	r3, r2
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	7df9      	ldrb	r1, [r7, #23]
 8006edc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ee0:	b298      	uxth	r0, r3
 8006ee2:	68fa      	ldr	r2, [r7, #12]
 8006ee4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006ee8:	f360 431a 	bfi	r3, r0, #16, #11
 8006eec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		can_ram->std_filters[i].S0.bit.SFID2 = filter[i].mask_id2;
 8006ef0:	7dfa      	ldrb	r2, [r7, #23]
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	005b      	lsls	r3, r3, #1
 8006ef6:	4413      	add	r3, r2
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	461a      	mov	r2, r3
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	4413      	add	r3, r2
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	7df9      	ldrb	r1, [r7, #23]
 8006f04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f08:	b298      	uxth	r0, r3
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f10:	f360 030a 	bfi	r3, r0, #0, #11
 8006f14:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		can_ram->std_filters[i].S0.bit.SFT = filter[i].type;
 8006f18:	7dfa      	ldrb	r2, [r7, #23]
 8006f1a:	4613      	mov	r3, r2
 8006f1c:	005b      	lsls	r3, r3, #1
 8006f1e:	4413      	add	r3, r2
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	461a      	mov	r2, r3
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	4413      	add	r3, r2
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	7df9      	ldrb	r1, [r7, #23]
 8006f2c:	f003 0303 	and.w	r3, r3, #3
 8006f30:	b2d8      	uxtb	r0, r3
 8006f32:	68fa      	ldr	r2, [r7, #12]
 8006f34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f38:	f360 739f 	bfi	r3, r0, #30, #2
 8006f3c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	for (i = 0; i < n; i++, fdcan->filter_n++)
 8006f40:	7dfb      	ldrb	r3, [r7, #23]
 8006f42:	3301      	adds	r3, #1
 8006f44:	75fb      	strb	r3, [r7, #23]
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	7d1b      	ldrb	r3, [r3, #20]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	b2da      	uxtb	r2, r3
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	751a      	strb	r2, [r3, #20]
 8006f52:	7dfa      	ldrb	r2, [r7, #23]
 8006f54:	797b      	ldrb	r3, [r7, #5]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d3aa      	bcc.n	8006eb0 <STRHAL_CAN_Subscribe+0xd4>
	}
	MODIFY_REG(fdcan->can->RXGFC, FDCAN_RXGFC_LSS, (fdcan->filter_n << FDCAN_RXGFC_LSS_Pos)); // Standard filter elements number
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f62:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	7d1b      	ldrb	r3, [r3, #20]
 8006f6a:	041b      	lsls	r3, r3, #16
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	430a      	orrs	r2, r1
 8006f74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	return n;
 8006f78:	797b      	ldrb	r3, [r7, #5]
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	371c      	adds	r7, #28
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	20000004 	.word	0x20000004

08006f8c <STRHAL_CAN_Init>:

STRHAL_Oof_t STRHAL_CAN_Init()
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
	STRHAL_Oof_t status = STRHAL_NOICE;
 8006f92:	2300      	movs	r3, #0
 8006f94:	71fb      	strb	r3, [r7, #7]
	STRHAL_CAN_Init_GPIO();
 8006f96:	f7ff fdd9 	bl	8006b4c <STRHAL_CAN_Init_GPIO>

	return status;
 8006f9a:	79fb      	ldrb	r3, [r7, #7]
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3708      	adds	r7, #8
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <STRHAL_CAN_Send>:
	*rxfXA = i & 0x7;
	return n;
}

int32_t STRHAL_CAN_Send(STRHAL_FDCAN_Id_t fdcan_id, uint32_t id, const uint8_t *data, uint32_t n)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b08b      	sub	sp, #44	; 0x2c
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60b9      	str	r1, [r7, #8]
 8006fac:	607a      	str	r2, [r7, #4]
 8006fae:	603b      	str	r3, [r7, #0]
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	73fb      	strb	r3, [r7, #15]
	if (fdcan_id < 0 || fdcan_id >= STRHAL_N_FDCAN)
 8006fb4:	7bfb      	ldrb	r3, [r7, #15]
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d902      	bls.n	8006fc0 <STRHAL_CAN_Send+0x1c>
		return -1;
 8006fba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006fbe:	e0b8      	b.n	8007132 <STRHAL_CAN_Send+0x18e>

	if (n == 0)
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d101      	bne.n	8006fca <STRHAL_CAN_Send+0x26>
		return 0;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	e0b3      	b.n	8007132 <STRHAL_CAN_Send+0x18e>

	FDCAN_GlobalTypeDef *can = _fdcans[fdcan_id].can;
 8006fca:	7bfa      	ldrb	r2, [r7, #15]
 8006fcc:	495c      	ldr	r1, [pc, #368]	; (8007140 <STRHAL_CAN_Send+0x19c>)
 8006fce:	4613      	mov	r3, r2
 8006fd0:	005b      	lsls	r3, r3, #1
 8006fd2:	4413      	add	r3, r2
 8006fd4:	00db      	lsls	r3, r3, #3
 8006fd6:	440b      	add	r3, r1
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	61fb      	str	r3, [r7, #28]
	Can_Message_RAM *can_ram = _fdcans[fdcan_id].can_ram;
 8006fdc:	7bfa      	ldrb	r2, [r7, #15]
 8006fde:	4958      	ldr	r1, [pc, #352]	; (8007140 <STRHAL_CAN_Send+0x19c>)
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	005b      	lsls	r3, r3, #1
 8006fe4:	4413      	add	r3, r2
 8006fe6:	00db      	lsls	r3, r3, #3
 8006fe8:	440b      	add	r3, r1
 8006fea:	3304      	adds	r3, #4
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	61bb      	str	r3, [r7, #24]

	if (!(can->TXFQS & FDCAN_TXFQS_TFFL))
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006ff6:	f003 0307 	and.w	r3, r3, #7
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d102      	bne.n	8007004 <STRHAL_CAN_Send+0x60>
		return -1;
 8006ffe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007002:	e096      	b.n	8007132 <STRHAL_CAN_Send+0x18e>

	if (n > FDCAN_ELMTS_ARRAY_SIZE)
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	2b40      	cmp	r3, #64	; 0x40
 8007008:	d901      	bls.n	800700e <STRHAL_CAN_Send+0x6a>
		n = FDCAN_ELMTS_ARRAY_SIZE;
 800700a:	2340      	movs	r3, #64	; 0x40
 800700c:	603b      	str	r3, [r7, #0]

	uint8_t i = ((can->TXFQS & FDCAN_TXFQS_TFQPI_Msk) >> FDCAN_TXFQS_TFQPI_Pos);
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8007014:	0c1b      	lsrs	r3, r3, #16
 8007016:	b2db      	uxtb	r3, r3
 8007018:	f003 0303 	and.w	r3, r3, #3
 800701c:	75fb      	strb	r3, [r7, #23]

	Can_Tx_Element *frame = &can_ram->tx_buffer[i];
 800701e:	7dfa      	ldrb	r2, [r7, #23]
 8007020:	4613      	mov	r3, r2
 8007022:	00db      	lsls	r3, r3, #3
 8007024:	4413      	add	r3, r2
 8007026:	00db      	lsls	r3, r3, #3
 8007028:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800702c:	69ba      	ldr	r2, [r7, #24]
 800702e:	4413      	add	r3, r2
 8007030:	613b      	str	r3, [r7, #16]
	frame->T0.bit.XTD = 0;
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	6813      	ldr	r3, [r2, #0]
 8007036:	f36f 739e 	bfc	r3, #30, #1
 800703a:	6013      	str	r3, [r2, #0]
	frame->T0.bit.ID = id << 18;
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	049b      	lsls	r3, r3, #18
 8007040:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007044:	693a      	ldr	r2, [r7, #16]
 8007046:	6813      	ldr	r3, [r2, #0]
 8007048:	f361 031c 	bfi	r3, r1, #0, #29
 800704c:	6013      	str	r3, [r2, #0]
	frame->T0.bit.RTR = 0;
 800704e:	693a      	ldr	r2, [r7, #16]
 8007050:	6813      	ldr	r3, [r2, #0]
 8007052:	f36f 735d 	bfc	r3, #29, #1
 8007056:	6013      	str	r3, [r2, #0]
	frame->T1.bit.FDF = 1;
 8007058:	693a      	ldr	r2, [r7, #16]
 800705a:	6853      	ldr	r3, [r2, #4]
 800705c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007060:	6053      	str	r3, [r2, #4]
	frame->T1.bit.BRS = 1;
 8007062:	693a      	ldr	r2, [r7, #16]
 8007064:	6853      	ldr	r3, [r2, #4]
 8007066:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800706a:	6053      	str	r3, [r2, #4]
	frame->T1.bit.DLC = Can_LengthToDlc[n];
 800706c:	4a35      	ldr	r2, [pc, #212]	; (8007144 <STRHAL_CAN_Send+0x1a0>)
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007074:	f003 030f 	and.w	r3, r3, #15
 8007078:	b2d9      	uxtb	r1, r3
 800707a:	693a      	ldr	r2, [r7, #16]
 800707c:	6853      	ldr	r3, [r2, #4]
 800707e:	f361 4313 	bfi	r3, r1, #16, #4
 8007082:	6053      	str	r3, [r2, #4]
	frame->T1.bit.EFCC = 0;
 8007084:	693a      	ldr	r2, [r7, #16]
 8007086:	6853      	ldr	r3, [r2, #4]
 8007088:	f36f 53d7 	bfc	r3, #23, #1
 800708c:	6053      	str	r3, [r2, #4]
	frame->T1.bit.MM = 0;
 800708e:	693a      	ldr	r2, [r7, #16]
 8007090:	6853      	ldr	r3, [r2, #4]
 8007092:	f36f 631f 	bfc	r3, #24, #8
 8007096:	6053      	str	r3, [r2, #4]
	/*if(frame->T0.bit.ID == 0 || frame->T1.bit.DLC == 0) {
	 uint8_t temp = 1;
	 (void) temp;
	 }*/

	uint32_t j = 0;
 8007098:	2300      	movs	r3, #0
 800709a:	627b      	str	r3, [r7, #36]	; 0x24
	for (uint32_t c = 0; c < n; c += 4)
 800709c:	2300      	movs	r3, #0
 800709e:	623b      	str	r3, [r7, #32]
 80070a0:	e025      	b.n	80070ee <STRHAL_CAN_Send+0x14a>
		frame->data.word[j++] = data[c] | data[c + 1] << 8 | data[c + 2] << 16 | data[c + 3] << 24;
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	6a3b      	ldr	r3, [r7, #32]
 80070a6:	4413      	add	r3, r2
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	4619      	mov	r1, r3
 80070ac:	6a3b      	ldr	r3, [r7, #32]
 80070ae:	3301      	adds	r3, #1
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	4413      	add	r3, r2
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	021b      	lsls	r3, r3, #8
 80070b8:	ea41 0203 	orr.w	r2, r1, r3
 80070bc:	6a3b      	ldr	r3, [r7, #32]
 80070be:	3302      	adds	r3, #2
 80070c0:	6879      	ldr	r1, [r7, #4]
 80070c2:	440b      	add	r3, r1
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	041b      	lsls	r3, r3, #16
 80070c8:	431a      	orrs	r2, r3
 80070ca:	6a3b      	ldr	r3, [r7, #32]
 80070cc:	3303      	adds	r3, #3
 80070ce:	6879      	ldr	r1, [r7, #4]
 80070d0:	440b      	add	r3, r1
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	061b      	lsls	r3, r3, #24
 80070d6:	ea42 0103 	orr.w	r1, r2, r3
 80070da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070dc:	1c5a      	adds	r2, r3, #1
 80070de:	627a      	str	r2, [r7, #36]	; 0x24
 80070e0:	693a      	ldr	r2, [r7, #16]
 80070e2:	3302      	adds	r3, #2
 80070e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint32_t c = 0; c < n; c += 4)
 80070e8:	6a3b      	ldr	r3, [r7, #32]
 80070ea:	3304      	adds	r3, #4
 80070ec:	623b      	str	r3, [r7, #32]
 80070ee:	6a3a      	ldr	r2, [r7, #32]
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d3d5      	bcc.n	80070a2 <STRHAL_CAN_Send+0xfe>
	while (j < Can_DlcToLength[Can_LengthToDlc[n]] / 4)
 80070f6:	e007      	b.n	8007108 <STRHAL_CAN_Send+0x164>
		frame->data.word[j++] = 0;
 80070f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fa:	1c5a      	adds	r2, r3, #1
 80070fc:	627a      	str	r2, [r7, #36]	; 0x24
 80070fe:	693a      	ldr	r2, [r7, #16]
 8007100:	3302      	adds	r3, #2
 8007102:	2100      	movs	r1, #0
 8007104:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	while (j < Can_DlcToLength[Can_LengthToDlc[n]] / 4)
 8007108:	4a0e      	ldr	r2, [pc, #56]	; (8007144 <STRHAL_CAN_Send+0x1a0>)
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007110:	4a0d      	ldr	r2, [pc, #52]	; (8007148 <STRHAL_CAN_Send+0x1a4>)
 8007112:	5cd3      	ldrb	r3, [r2, r3]
 8007114:	089b      	lsrs	r3, r3, #2
 8007116:	b2db      	uxtb	r3, r3
 8007118:	461a      	mov	r2, r3
 800711a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711c:	4293      	cmp	r3, r2
 800711e:	d3eb      	bcc.n	80070f8 <STRHAL_CAN_Send+0x154>

	can->TXBAR = (1 << i);
 8007120:	7dfb      	ldrb	r3, [r7, #23]
 8007122:	2201      	movs	r2, #1
 8007124:	fa02 f303 	lsl.w	r3, r2, r3
 8007128:	461a      	mov	r2, r3
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

	return n;
 8007130:	683b      	ldr	r3, [r7, #0]
}
 8007132:	4618      	mov	r0, r3
 8007134:	372c      	adds	r7, #44	; 0x2c
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	20000004 	.word	0x20000004
 8007144:	0800a3ac 	.word	0x0800a3ac
 8007148:	0800a39c 	.word	0x0800a39c

0800714c <STRHAL_CAN_Run>:

void STRHAL_CAN_Run()
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
	// End initialisation - start FDCANs
	STRHAL_CAN_Handle_t *fdcan1 = &_fdcans[STRHAL_FDCAN1];
 8007152:	4b55      	ldr	r3, [pc, #340]	; (80072a8 <STRHAL_CAN_Run+0x15c>)
 8007154:	607b      	str	r3, [r7, #4]
	STRHAL_CAN_Handle_t *fdcan2 = &_fdcans[STRHAL_FDCAN2];
 8007156:	4b55      	ldr	r3, [pc, #340]	; (80072ac <STRHAL_CAN_Run+0x160>)
 8007158:	603b      	str	r3, [r7, #0]
	if (fdcan1->state == STRHAL_CAN_STATE_INITIALISING)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	7a1b      	ldrb	r3, [r3, #8]
 800715e:	b2db      	uxtb	r3, r3
 8007160:	2b01      	cmp	r3, #1
 8007162:	d14b      	bne.n	80071fc <STRHAL_CAN_Run+0xb0>
	{
		if (fdcan1->fifo_sub_state & (1U << STRHAL_FDCAN_RX0))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	7d5b      	ldrb	r3, [r3, #21]
 8007168:	f003 0301 	and.w	r3, r3, #1
 800716c:	2b00      	cmp	r3, #0
 800716e:	d011      	beq.n	8007194 <STRHAL_CAN_Run+0x48>
		{
			CLEAR_BIT(FDCAN1->ILS, FDCAN_ILS_RXFIFO0);
 8007170:	4b4f      	ldr	r3, [pc, #316]	; (80072b0 <STRHAL_CAN_Run+0x164>)
 8007172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007174:	4a4e      	ldr	r2, [pc, #312]	; (80072b0 <STRHAL_CAN_Run+0x164>)
 8007176:	f023 0301 	bic.w	r3, r3, #1
 800717a:	6593      	str	r3, [r2, #88]	; 0x58
			SET_BIT(FDCAN1->ILE, FDCAN_ILE_EINT0);
 800717c:	4b4c      	ldr	r3, [pc, #304]	; (80072b0 <STRHAL_CAN_Run+0x164>)
 800717e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007180:	4a4b      	ldr	r2, [pc, #300]	; (80072b0 <STRHAL_CAN_Run+0x164>)
 8007182:	f043 0301 	orr.w	r3, r3, #1
 8007186:	65d3      	str	r3, [r2, #92]	; 0x5c
			SET_BIT(FDCAN1->IE, FDCAN_IE_RF0NE);
 8007188:	4b49      	ldr	r3, [pc, #292]	; (80072b0 <STRHAL_CAN_Run+0x164>)
 800718a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800718c:	4a48      	ldr	r2, [pc, #288]	; (80072b0 <STRHAL_CAN_Run+0x164>)
 800718e:	f043 0301 	orr.w	r3, r3, #1
 8007192:	6553      	str	r3, [r2, #84]	; 0x54
		}
		if (fdcan1->fifo_sub_state & (1U << STRHAL_FDCAN_RX1))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	7d5b      	ldrb	r3, [r3, #21]
 8007198:	f003 0302 	and.w	r3, r3, #2
 800719c:	2b00      	cmp	r3, #0
 800719e:	d011      	beq.n	80071c4 <STRHAL_CAN_Run+0x78>
		{
			CLEAR_BIT(FDCAN1->ILS, FDCAN_ILS_RXFIFO1);
 80071a0:	4b43      	ldr	r3, [pc, #268]	; (80072b0 <STRHAL_CAN_Run+0x164>)
 80071a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071a4:	4a42      	ldr	r2, [pc, #264]	; (80072b0 <STRHAL_CAN_Run+0x164>)
 80071a6:	f023 0302 	bic.w	r3, r3, #2
 80071aa:	6593      	str	r3, [r2, #88]	; 0x58
			SET_BIT(FDCAN1->ILE, FDCAN_ILE_EINT0);
 80071ac:	4b40      	ldr	r3, [pc, #256]	; (80072b0 <STRHAL_CAN_Run+0x164>)
 80071ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071b0:	4a3f      	ldr	r2, [pc, #252]	; (80072b0 <STRHAL_CAN_Run+0x164>)
 80071b2:	f043 0301 	orr.w	r3, r3, #1
 80071b6:	65d3      	str	r3, [r2, #92]	; 0x5c
			SET_BIT(FDCAN1->IE, FDCAN_IE_RF1NE);
 80071b8:	4b3d      	ldr	r3, [pc, #244]	; (80072b0 <STRHAL_CAN_Run+0x164>)
 80071ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071bc:	4a3c      	ldr	r2, [pc, #240]	; (80072b0 <STRHAL_CAN_Run+0x164>)
 80071be:	f043 0308 	orr.w	r3, r3, #8
 80071c2:	6553      	str	r3, [r2, #84]	; 0x54
		}

		NVIC_SetPriority(FDCAN1_IT0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 1));
 80071c4:	f7ff fbf2 	bl	80069ac <__NVIC_GetPriorityGrouping>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2201      	movs	r2, #1
 80071cc:	2100      	movs	r1, #0
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7ff fc42 	bl	8006a58 <NVIC_EncodePriority>
 80071d4:	4603      	mov	r3, r0
 80071d6:	4619      	mov	r1, r3
 80071d8:	2015      	movs	r0, #21
 80071da:	f7ff fc13 	bl	8006a04 <__NVIC_SetPriority>
		NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80071de:	2015      	movs	r0, #21
 80071e0:	f7ff fbf2 	bl	80069c8 <__NVIC_EnableIRQ>

		CLEAR_BIT(FDCAN1->CCCR, FDCAN_CCCR_INIT);
 80071e4:	4b32      	ldr	r3, [pc, #200]	; (80072b0 <STRHAL_CAN_Run+0x164>)
 80071e6:	699b      	ldr	r3, [r3, #24]
 80071e8:	4a31      	ldr	r2, [pc, #196]	; (80072b0 <STRHAL_CAN_Run+0x164>)
 80071ea:	f023 0301 	bic.w	r3, r3, #1
 80071ee:	6193      	str	r3, [r2, #24]

		_fdcans[STRHAL_FDCAN1].state = STRHAL_CAN_STATE_RUNNING;
 80071f0:	4b2d      	ldr	r3, [pc, #180]	; (80072a8 <STRHAL_CAN_Run+0x15c>)
 80071f2:	2202      	movs	r2, #2
 80071f4:	721a      	strb	r2, [r3, #8]
		LL_mDelay(100);
 80071f6:	2064      	movs	r0, #100	; 0x64
 80071f8:	f7fe f96e 	bl	80054d8 <LL_mDelay>
	}
	if (fdcan2->state == STRHAL_CAN_STATE_INITIALISING)
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	7a1b      	ldrb	r3, [r3, #8]
 8007200:	b2db      	uxtb	r3, r3
 8007202:	2b01      	cmp	r3, #1
 8007204:	d14c      	bne.n	80072a0 <STRHAL_CAN_Run+0x154>
	{
		if (fdcan2->fifo_sub_state & (1U << STRHAL_FDCAN_RX0))
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	7d5b      	ldrb	r3, [r3, #21]
 800720a:	f003 0301 	and.w	r3, r3, #1
 800720e:	2b00      	cmp	r3, #0
 8007210:	d011      	beq.n	8007236 <STRHAL_CAN_Run+0xea>
		{
			CLEAR_BIT(FDCAN2->ILS, FDCAN_ILS_RXFIFO0);
 8007212:	4b28      	ldr	r3, [pc, #160]	; (80072b4 <STRHAL_CAN_Run+0x168>)
 8007214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007216:	4a27      	ldr	r2, [pc, #156]	; (80072b4 <STRHAL_CAN_Run+0x168>)
 8007218:	f023 0301 	bic.w	r3, r3, #1
 800721c:	6593      	str	r3, [r2, #88]	; 0x58
			SET_BIT(FDCAN2->ILE, FDCAN_ILE_EINT0);
 800721e:	4b25      	ldr	r3, [pc, #148]	; (80072b4 <STRHAL_CAN_Run+0x168>)
 8007220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007222:	4a24      	ldr	r2, [pc, #144]	; (80072b4 <STRHAL_CAN_Run+0x168>)
 8007224:	f043 0301 	orr.w	r3, r3, #1
 8007228:	65d3      	str	r3, [r2, #92]	; 0x5c
			SET_BIT(FDCAN2->IE, FDCAN_IE_RF0NE);
 800722a:	4b22      	ldr	r3, [pc, #136]	; (80072b4 <STRHAL_CAN_Run+0x168>)
 800722c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800722e:	4a21      	ldr	r2, [pc, #132]	; (80072b4 <STRHAL_CAN_Run+0x168>)
 8007230:	f043 0301 	orr.w	r3, r3, #1
 8007234:	6553      	str	r3, [r2, #84]	; 0x54
		}
		if (fdcan2->fifo_sub_state & (1U << STRHAL_FDCAN_RX1))
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	7d5b      	ldrb	r3, [r3, #21]
 800723a:	f003 0302 	and.w	r3, r3, #2
 800723e:	2b00      	cmp	r3, #0
 8007240:	d011      	beq.n	8007266 <STRHAL_CAN_Run+0x11a>
		{
			CLEAR_BIT(FDCAN2->ILS, FDCAN_ILS_RXFIFO1);
 8007242:	4b1c      	ldr	r3, [pc, #112]	; (80072b4 <STRHAL_CAN_Run+0x168>)
 8007244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007246:	4a1b      	ldr	r2, [pc, #108]	; (80072b4 <STRHAL_CAN_Run+0x168>)
 8007248:	f023 0302 	bic.w	r3, r3, #2
 800724c:	6593      	str	r3, [r2, #88]	; 0x58
			SET_BIT(FDCAN2->ILE, FDCAN_ILE_EINT0);
 800724e:	4b19      	ldr	r3, [pc, #100]	; (80072b4 <STRHAL_CAN_Run+0x168>)
 8007250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007252:	4a18      	ldr	r2, [pc, #96]	; (80072b4 <STRHAL_CAN_Run+0x168>)
 8007254:	f043 0301 	orr.w	r3, r3, #1
 8007258:	65d3      	str	r3, [r2, #92]	; 0x5c
			SET_BIT(FDCAN2->IE, FDCAN_IE_RF1NE);
 800725a:	4b16      	ldr	r3, [pc, #88]	; (80072b4 <STRHAL_CAN_Run+0x168>)
 800725c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800725e:	4a15      	ldr	r2, [pc, #84]	; (80072b4 <STRHAL_CAN_Run+0x168>)
 8007260:	f043 0308 	orr.w	r3, r3, #8
 8007264:	6553      	str	r3, [r2, #84]	; 0x54
		}

		NVIC_SetPriority(FDCAN2_IT0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 2));
 8007266:	f7ff fba1 	bl	80069ac <__NVIC_GetPriorityGrouping>
 800726a:	4603      	mov	r3, r0
 800726c:	2202      	movs	r2, #2
 800726e:	2100      	movs	r1, #0
 8007270:	4618      	mov	r0, r3
 8007272:	f7ff fbf1 	bl	8006a58 <NVIC_EncodePriority>
 8007276:	4603      	mov	r3, r0
 8007278:	4619      	mov	r1, r3
 800727a:	2056      	movs	r0, #86	; 0x56
 800727c:	f7ff fbc2 	bl	8006a04 <__NVIC_SetPriority>
		NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8007280:	2056      	movs	r0, #86	; 0x56
 8007282:	f7ff fba1 	bl	80069c8 <__NVIC_EnableIRQ>

		CLEAR_BIT(FDCAN2->CCCR, FDCAN_CCCR_INIT);
 8007286:	4b0b      	ldr	r3, [pc, #44]	; (80072b4 <STRHAL_CAN_Run+0x168>)
 8007288:	699b      	ldr	r3, [r3, #24]
 800728a:	4a0a      	ldr	r2, [pc, #40]	; (80072b4 <STRHAL_CAN_Run+0x168>)
 800728c:	f023 0301 	bic.w	r3, r3, #1
 8007290:	6193      	str	r3, [r2, #24]
		_fdcans[STRHAL_FDCAN2].state = STRHAL_CAN_STATE_RUNNING;
 8007292:	4b05      	ldr	r3, [pc, #20]	; (80072a8 <STRHAL_CAN_Run+0x15c>)
 8007294:	2202      	movs	r2, #2
 8007296:	f883 2020 	strb.w	r2, [r3, #32]
		LL_mDelay(100);
 800729a:	2064      	movs	r0, #100	; 0x64
 800729c:	f7fe f91c 	bl	80054d8 <LL_mDelay>
	}

}
 80072a0:	bf00      	nop
 80072a2:	3708      	adds	r7, #8
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	20000004 	.word	0x20000004
 80072ac:	2000001c 	.word	0x2000001c
 80072b0:	40006400 	.word	0x40006400
 80072b4:	40006800 	.word	0x40006800

080072b8 <FDCAN1_IT0_IRQHandler>:

void FDCAN1_IT0_IRQHandler(void)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b08c      	sub	sp, #48	; 0x30
 80072bc:	af00      	add	r7, sp, #0
	if (FDCAN1->IR & FDCAN_IR_RF0N)
 80072be:	4b47      	ldr	r3, [pc, #284]	; (80073dc <FDCAN1_IT0_IRQHandler+0x124>)
 80072c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072c2:	f003 0301 	and.w	r3, r3, #1
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d03f      	beq.n	800734a <FDCAN1_IT0_IRQHandler+0x92>
	{
		SET_BIT(FDCAN1->IR, FDCAN_IR_RF0N);
 80072ca:	4b44      	ldr	r3, [pc, #272]	; (80073dc <FDCAN1_IT0_IRQHandler+0x124>)
 80072cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072ce:	4a43      	ldr	r2, [pc, #268]	; (80073dc <FDCAN1_IT0_IRQHandler+0x124>)
 80072d0:	f043 0301 	orr.w	r3, r3, #1
 80072d4:	6513      	str	r3, [r2, #80]	; 0x50

		STRHAL_CAN_Receptor_t rec = _fdcans[STRHAL_FDCAN1].rxReceptors[0];
 80072d6:	4b42      	ldr	r3, [pc, #264]	; (80073e0 <FDCAN1_IT0_IRQHandler+0x128>)
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	62fb      	str	r3, [r7, #44]	; 0x2c
		Can_Message_RAM *can_ram = _fdcans[STRHAL_FDCAN1].can_ram;
 80072dc:	4b40      	ldr	r3, [pc, #256]	; (80073e0 <FDCAN1_IT0_IRQHandler+0x128>)
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	62bb      	str	r3, [r7, #40]	; 0x28

		uint8_t i;
		uint32_t l;
		uint32_t id;

		i = ((FDCAN_RXF0S_F0GI_Msk & FDCAN1->RXF0S) >> FDCAN_RXF0S_F0GI_Pos);
 80072e2:	4b3e      	ldr	r3, [pc, #248]	; (80073dc <FDCAN1_IT0_IRQHandler+0x124>)
 80072e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072e8:	0a1b      	lsrs	r3, r3, #8
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	f003 0303 	and.w	r3, r3, #3
 80072f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		Can_Rx_Element *rx_fifo = &can_ram->rx_fifo0[i];
 80072f4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80072f8:	4613      	mov	r3, r2
 80072fa:	00db      	lsls	r3, r3, #3
 80072fc:	4413      	add	r3, r2
 80072fe:	00db      	lsls	r3, r3, #3
 8007300:	33b0      	adds	r3, #176	; 0xb0
 8007302:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007304:	4413      	add	r3, r2
 8007306:	623b      	str	r3, [r7, #32]

		id = rx_fifo->R0.bit.ID >> 18;
 8007308:	6a3b      	ldr	r3, [r7, #32]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f3c3 031c 	ubfx	r3, r3, #0, #29
 8007310:	149b      	asrs	r3, r3, #18
 8007312:	61fb      	str	r3, [r7, #28]
		l = Can_DlcToLength[rx_fifo->R1.bit.DLC];
 8007314:	6a3b      	ldr	r3, [r7, #32]
 8007316:	799b      	ldrb	r3, [r3, #6]
 8007318:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800731c:	b2db      	uxtb	r3, r3
 800731e:	461a      	mov	r2, r3
 8007320:	4b30      	ldr	r3, [pc, #192]	; (80073e4 <FDCAN1_IT0_IRQHandler+0x12c>)
 8007322:	5c9b      	ldrb	r3, [r3, r2]
 8007324:	61bb      	str	r3, [r7, #24]

		if (rec != NULL)
 8007326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007328:	2b00      	cmp	r3, #0
 800732a:	d007      	beq.n	800733c <FDCAN1_IT0_IRQHandler+0x84>
			rec(id, rx_fifo->data.byte, l - 2);
 800732c:	6a3b      	ldr	r3, [r7, #32]
 800732e:	f103 0108 	add.w	r1, r3, #8
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	1e9a      	subs	r2, r3, #2
 8007336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007338:	69f8      	ldr	r0, [r7, #28]
 800733a:	4798      	blx	r3

		FDCAN1->RXF0A = i & 0x7;
 800733c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007340:	4a26      	ldr	r2, [pc, #152]	; (80073dc <FDCAN1_IT0_IRQHandler+0x124>)
 8007342:	f003 0307 	and.w	r3, r3, #7
 8007346:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	}
	if (FDCAN1->IR & FDCAN_IR_RF1N)
 800734a:	4b24      	ldr	r3, [pc, #144]	; (80073dc <FDCAN1_IT0_IRQHandler+0x124>)
 800734c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800734e:	f003 0308 	and.w	r3, r3, #8
 8007352:	2b00      	cmp	r3, #0
 8007354:	d03d      	beq.n	80073d2 <FDCAN1_IT0_IRQHandler+0x11a>
	{
		SET_BIT(FDCAN1->IR, FDCAN_IR_RF1N);
 8007356:	4b21      	ldr	r3, [pc, #132]	; (80073dc <FDCAN1_IT0_IRQHandler+0x124>)
 8007358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800735a:	4a20      	ldr	r2, [pc, #128]	; (80073dc <FDCAN1_IT0_IRQHandler+0x124>)
 800735c:	f043 0308 	orr.w	r3, r3, #8
 8007360:	6513      	str	r3, [r2, #80]	; 0x50

		STRHAL_CAN_Receptor_t rec = _fdcans[STRHAL_FDCAN1].rxReceptors[1];
 8007362:	4b1f      	ldr	r3, [pc, #124]	; (80073e0 <FDCAN1_IT0_IRQHandler+0x128>)
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	617b      	str	r3, [r7, #20]
		Can_Message_RAM *can_ram = _fdcans[STRHAL_FDCAN1].can_ram;
 8007368:	4b1d      	ldr	r3, [pc, #116]	; (80073e0 <FDCAN1_IT0_IRQHandler+0x128>)
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	613b      	str	r3, [r7, #16]

		uint8_t i;
		uint32_t l;
		uint32_t id;

		i = ((FDCAN_RXF1S_F1GI_Msk & FDCAN1->RXF1S) >> FDCAN_RXF1S_F1GI_Pos);
 800736e:	4b1b      	ldr	r3, [pc, #108]	; (80073dc <FDCAN1_IT0_IRQHandler+0x124>)
 8007370:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007374:	0a1b      	lsrs	r3, r3, #8
 8007376:	b2db      	uxtb	r3, r3
 8007378:	f003 0303 	and.w	r3, r3, #3
 800737c:	73fb      	strb	r3, [r7, #15]

		Can_Rx_Element *rx_fifo = &can_ram->rx_fifo1[i];
 800737e:	7bfa      	ldrb	r2, [r7, #15]
 8007380:	4613      	mov	r3, r2
 8007382:	00db      	lsls	r3, r3, #3
 8007384:	4413      	add	r3, r2
 8007386:	00db      	lsls	r3, r3, #3
 8007388:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800738c:	693a      	ldr	r2, [r7, #16]
 800738e:	4413      	add	r3, r2
 8007390:	60bb      	str	r3, [r7, #8]

		id = rx_fifo->R0.bit.ID >> 18;
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f3c3 031c 	ubfx	r3, r3, #0, #29
 800739a:	149b      	asrs	r3, r3, #18
 800739c:	607b      	str	r3, [r7, #4]
		l = Can_DlcToLength[rx_fifo->R1.bit.DLC];
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	799b      	ldrb	r3, [r3, #6]
 80073a2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	461a      	mov	r2, r3
 80073aa:	4b0e      	ldr	r3, [pc, #56]	; (80073e4 <FDCAN1_IT0_IRQHandler+0x12c>)
 80073ac:	5c9b      	ldrb	r3, [r3, r2]
 80073ae:	603b      	str	r3, [r7, #0]

		//rec(id, rx_fifo->data.byte, l);
		if (rec != NULL)
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d007      	beq.n	80073c6 <FDCAN1_IT0_IRQHandler+0x10e>
			rec(id, rx_fifo->data.byte, l - 2);
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	f103 0108 	add.w	r1, r3, #8
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	1e9a      	subs	r2, r3, #2
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	4798      	blx	r3
		FDCAN1->RXF1A = i & 0x7;
 80073c6:	7bfb      	ldrb	r3, [r7, #15]
 80073c8:	4a04      	ldr	r2, [pc, #16]	; (80073dc <FDCAN1_IT0_IRQHandler+0x124>)
 80073ca:	f003 0307 	and.w	r3, r3, #7
 80073ce:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	}
}
 80073d2:	bf00      	nop
 80073d4:	3730      	adds	r7, #48	; 0x30
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	40006400 	.word	0x40006400
 80073e0:	20000004 	.word	0x20000004
 80073e4:	0800a39c 	.word	0x0800a39c

080073e8 <FDCAN2_IT0_IRQHandler>:

void FDCAN2_IT0_IRQHandler(void)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b08c      	sub	sp, #48	; 0x30
 80073ec:	af00      	add	r7, sp, #0
	if (FDCAN2->IR & FDCAN_IR_RF0N)
 80073ee:	4b47      	ldr	r3, [pc, #284]	; (800750c <FDCAN2_IT0_IRQHandler+0x124>)
 80073f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073f2:	f003 0301 	and.w	r3, r3, #1
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d03f      	beq.n	800747a <FDCAN2_IT0_IRQHandler+0x92>
	{
		CLEAR_BIT(FDCAN2->IR, FDCAN_IR_RF0N);
 80073fa:	4b44      	ldr	r3, [pc, #272]	; (800750c <FDCAN2_IT0_IRQHandler+0x124>)
 80073fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073fe:	4a43      	ldr	r2, [pc, #268]	; (800750c <FDCAN2_IT0_IRQHandler+0x124>)
 8007400:	f023 0301 	bic.w	r3, r3, #1
 8007404:	6513      	str	r3, [r2, #80]	; 0x50

		STRHAL_CAN_Receptor_t rec = _fdcans[STRHAL_FDCAN2].rxReceptors[0];
 8007406:	4b42      	ldr	r3, [pc, #264]	; (8007510 <FDCAN2_IT0_IRQHandler+0x128>)
 8007408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740a:	62fb      	str	r3, [r7, #44]	; 0x2c
		Can_Message_RAM *can_ram = _fdcans[STRHAL_FDCAN2].can_ram;
 800740c:	4b40      	ldr	r3, [pc, #256]	; (8007510 <FDCAN2_IT0_IRQHandler+0x128>)
 800740e:	69db      	ldr	r3, [r3, #28]
 8007410:	62bb      	str	r3, [r7, #40]	; 0x28

		uint8_t i;
		uint32_t l;
		uint32_t id;

		i = ((FDCAN_RXF0S_F0GI_Msk & FDCAN2->RXF0S) >> FDCAN_RXF0S_F0GI_Pos);
 8007412:	4b3e      	ldr	r3, [pc, #248]	; (800750c <FDCAN2_IT0_IRQHandler+0x124>)
 8007414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007418:	0a1b      	lsrs	r3, r3, #8
 800741a:	b2db      	uxtb	r3, r3
 800741c:	f003 0303 	and.w	r3, r3, #3
 8007420:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		Can_Rx_Element *rx_fifo = &can_ram->rx_fifo0[i];
 8007424:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007428:	4613      	mov	r3, r2
 800742a:	00db      	lsls	r3, r3, #3
 800742c:	4413      	add	r3, r2
 800742e:	00db      	lsls	r3, r3, #3
 8007430:	33b0      	adds	r3, #176	; 0xb0
 8007432:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007434:	4413      	add	r3, r2
 8007436:	623b      	str	r3, [r7, #32]

		id = rx_fifo->R0.bit.ID >> 18;
 8007438:	6a3b      	ldr	r3, [r7, #32]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f3c3 031c 	ubfx	r3, r3, #0, #29
 8007440:	149b      	asrs	r3, r3, #18
 8007442:	61fb      	str	r3, [r7, #28]
		l = Can_DlcToLength[rx_fifo->R1.bit.DLC];
 8007444:	6a3b      	ldr	r3, [r7, #32]
 8007446:	799b      	ldrb	r3, [r3, #6]
 8007448:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800744c:	b2db      	uxtb	r3, r3
 800744e:	461a      	mov	r2, r3
 8007450:	4b30      	ldr	r3, [pc, #192]	; (8007514 <FDCAN2_IT0_IRQHandler+0x12c>)
 8007452:	5c9b      	ldrb	r3, [r3, r2]
 8007454:	61bb      	str	r3, [r7, #24]

		//rec(id, rx_fifo->data.byte, l);
		if (rec != NULL)
 8007456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007458:	2b00      	cmp	r3, #0
 800745a:	d007      	beq.n	800746c <FDCAN2_IT0_IRQHandler+0x84>
			rec(id, rx_fifo->data.byte, l - 2);
 800745c:	6a3b      	ldr	r3, [r7, #32]
 800745e:	f103 0108 	add.w	r1, r3, #8
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	1e9a      	subs	r2, r3, #2
 8007466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007468:	69f8      	ldr	r0, [r7, #28]
 800746a:	4798      	blx	r3

		FDCAN2->RXF0A = i & 0x7;
 800746c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007470:	4a26      	ldr	r2, [pc, #152]	; (800750c <FDCAN2_IT0_IRQHandler+0x124>)
 8007472:	f003 0307 	and.w	r3, r3, #7
 8007476:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

	}
	if (FDCAN2->IR & FDCAN_IR_RF1N)
 800747a:	4b24      	ldr	r3, [pc, #144]	; (800750c <FDCAN2_IT0_IRQHandler+0x124>)
 800747c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800747e:	f003 0308 	and.w	r3, r3, #8
 8007482:	2b00      	cmp	r3, #0
 8007484:	d03d      	beq.n	8007502 <FDCAN2_IT0_IRQHandler+0x11a>
	{
		CLEAR_BIT(FDCAN2->IR, FDCAN_IR_RF1N);
 8007486:	4b21      	ldr	r3, [pc, #132]	; (800750c <FDCAN2_IT0_IRQHandler+0x124>)
 8007488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800748a:	4a20      	ldr	r2, [pc, #128]	; (800750c <FDCAN2_IT0_IRQHandler+0x124>)
 800748c:	f023 0308 	bic.w	r3, r3, #8
 8007490:	6513      	str	r3, [r2, #80]	; 0x50

		STRHAL_CAN_Receptor_t rec = _fdcans[STRHAL_FDCAN2].rxReceptors[1];
 8007492:	4b1f      	ldr	r3, [pc, #124]	; (8007510 <FDCAN2_IT0_IRQHandler+0x128>)
 8007494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007496:	617b      	str	r3, [r7, #20]
		Can_Message_RAM *can_ram = _fdcans[STRHAL_FDCAN2].can_ram;
 8007498:	4b1d      	ldr	r3, [pc, #116]	; (8007510 <FDCAN2_IT0_IRQHandler+0x128>)
 800749a:	69db      	ldr	r3, [r3, #28]
 800749c:	613b      	str	r3, [r7, #16]

		uint8_t i;
		uint32_t l;
		uint32_t id;

		i = ((FDCAN_RXF1S_F1GI_Msk & FDCAN2->RXF1S) >> FDCAN_RXF1S_F1GI_Pos);
 800749e:	4b1b      	ldr	r3, [pc, #108]	; (800750c <FDCAN2_IT0_IRQHandler+0x124>)
 80074a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80074a4:	0a1b      	lsrs	r3, r3, #8
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	f003 0303 	and.w	r3, r3, #3
 80074ac:	73fb      	strb	r3, [r7, #15]

		Can_Rx_Element *rx_fifo = &can_ram->rx_fifo1[i];
 80074ae:	7bfa      	ldrb	r2, [r7, #15]
 80074b0:	4613      	mov	r3, r2
 80074b2:	00db      	lsls	r3, r3, #3
 80074b4:	4413      	add	r3, r2
 80074b6:	00db      	lsls	r3, r3, #3
 80074b8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80074bc:	693a      	ldr	r2, [r7, #16]
 80074be:	4413      	add	r3, r2
 80074c0:	60bb      	str	r3, [r7, #8]

		id = rx_fifo->R0.bit.ID >> 18;
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f3c3 031c 	ubfx	r3, r3, #0, #29
 80074ca:	149b      	asrs	r3, r3, #18
 80074cc:	607b      	str	r3, [r7, #4]
		l = Can_DlcToLength[rx_fifo->R1.bit.DLC];
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	799b      	ldrb	r3, [r3, #6]
 80074d2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	461a      	mov	r2, r3
 80074da:	4b0e      	ldr	r3, [pc, #56]	; (8007514 <FDCAN2_IT0_IRQHandler+0x12c>)
 80074dc:	5c9b      	ldrb	r3, [r3, r2]
 80074de:	603b      	str	r3, [r7, #0]

		//rec(id, rx_fifo->data.byte, l);
		if (rec != NULL)
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d007      	beq.n	80074f6 <FDCAN2_IT0_IRQHandler+0x10e>
			rec(id, rx_fifo->data.byte, l - 2);
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	f103 0108 	add.w	r1, r3, #8
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	1e9a      	subs	r2, r3, #2
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	4798      	blx	r3
		FDCAN2->RXF1A = i & 0x7;
 80074f6:	7bfb      	ldrb	r3, [r7, #15]
 80074f8:	4a04      	ldr	r2, [pc, #16]	; (800750c <FDCAN2_IT0_IRQHandler+0x124>)
 80074fa:	f003 0307 	and.w	r3, r3, #7
 80074fe:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	}
}
 8007502:	bf00      	nop
 8007504:	3730      	adds	r7, #48	; 0x30
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	40006800 	.word	0x40006800
 8007510:	20000004 	.word	0x20000004
 8007514:	0800a39c 	.word	0x0800a39c

08007518 <STRHAL_Clock_Init>:
#include <STRHAL_Clock.h>

void STRHAL_Clock_Init()
{
 8007518:	b480      	push	{r7}
 800751a:	af00      	add	r7, sp, #0

}
 800751c:	bf00      	nop
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr

08007526 <LL_GPIO_ReadOutputPort>:
{
 8007526:	b480      	push	{r7}
 8007528:	b083      	sub	sp, #12
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->ODR));
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	695b      	ldr	r3, [r3, #20]
}
 8007532:	4618      	mov	r0, r3
 8007534:	370c      	adds	r7, #12
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr

0800753e <LL_GPIO_SetOutputPin>:
{
 800753e:	b480      	push	{r7}
 8007540:	b083      	sub	sp, #12
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
 8007546:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	683a      	ldr	r2, [r7, #0]
 800754c:	619a      	str	r2, [r3, #24]
}
 800754e:	bf00      	nop
 8007550:	370c      	adds	r7, #12
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr

0800755a <LL_GPIO_ResetOutputPin>:
{
 800755a:	b480      	push	{r7}
 800755c:	b083      	sub	sp, #12
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
 8007562:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	683a      	ldr	r2, [r7, #0]
 8007568:	629a      	str	r2, [r3, #40]	; 0x28
}
 800756a:	bf00      	nop
 800756c:	370c      	adds	r7, #12
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr
	...

08007578 <LL_AHB2_GRP1_EnableClock>:
{
 8007578:	b480      	push	{r7}
 800757a:	b085      	sub	sp, #20
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007580:	4b08      	ldr	r3, [pc, #32]	; (80075a4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007582:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007584:	4907      	ldr	r1, [pc, #28]	; (80075a4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4313      	orrs	r3, r2
 800758a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800758c:	4b05      	ldr	r3, [pc, #20]	; (80075a4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800758e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	4013      	ands	r3, r2
 8007594:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007596:	68fb      	ldr	r3, [r7, #12]
}
 8007598:	bf00      	nop
 800759a:	3714      	adds	r7, #20
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr
 80075a4:	40021000 	.word	0x40021000

080075a8 <STRHAL_GPIO_Init>:
#include <stm32g4xx_ll_gpio.h>
#include <stm32g4xx_ll_rcc.h>
#include <STRHAL_GPIO.h>

void STRHAL_GPIO_Init()
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	af00      	add	r7, sp, #0
	/* GPIO Ports Clock Enable */
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80075ac:	2001      	movs	r0, #1
 80075ae:	f7ff ffe3 	bl	8007578 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80075b2:	2002      	movs	r0, #2
 80075b4:	f7ff ffe0 	bl	8007578 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80075b8:	2004      	movs	r0, #4
 80075ba:	f7ff ffdd 	bl	8007578 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 80075be:	2008      	movs	r0, #8
 80075c0:	f7ff ffda 	bl	8007578 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 80075c4:	2010      	movs	r0, #16
 80075c6:	f7ff ffd7 	bl	8007578 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 80075ca:	2020      	movs	r0, #32
 80075cc:	f7ff ffd4 	bl	8007578 <LL_AHB2_GRP1_EnableClock>
}
 80075d0:	bf00      	nop
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <STRHAL_GPIO_SingleInit>:

// requires the type parameter and the gpio type to be the same TODO: find a better way to enforce that!
void STRHAL_GPIO_SingleInit(const STRHAL_GPIO_t *gpio, STRHAL_GPIO_Type_t type)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b088      	sub	sp, #32
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	460b      	mov	r3, r1
 80075de:	70fb      	strb	r3, [r7, #3]
	if (gpio->pin > 0x1F)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	791b      	ldrb	r3, [r3, #4]
 80075e4:	2b1f      	cmp	r3, #31
 80075e6:	d84d      	bhi.n	8007684 <STRHAL_GPIO_SingleInit+0xb0>
		return;

	LL_GPIO_InitTypeDef GPIO_InitStruct =
 80075e8:	f107 0308 	add.w	r3, r7, #8
 80075ec:	2200      	movs	r2, #0
 80075ee:	601a      	str	r2, [r3, #0]
 80075f0:	605a      	str	r2, [r3, #4]
 80075f2:	609a      	str	r2, [r3, #8]
 80075f4:	60da      	str	r2, [r3, #12]
 80075f6:	611a      	str	r2, [r3, #16]
 80075f8:	615a      	str	r2, [r3, #20]
	{ 0 };

	LL_GPIO_ResetOutputPin(gpio->port, (1 << gpio->pin));
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	791b      	ldrb	r3, [r3, #4]
 8007602:	4619      	mov	r1, r3
 8007604:	2301      	movs	r3, #1
 8007606:	408b      	lsls	r3, r1
 8007608:	4619      	mov	r1, r3
 800760a:	4610      	mov	r0, r2
 800760c:	f7ff ffa5 	bl	800755a <LL_GPIO_ResetOutputPin>

	GPIO_InitStruct.Pin = (1 << gpio->pin);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	791b      	ldrb	r3, [r3, #4]
 8007614:	461a      	mov	r2, r3
 8007616:	2301      	movs	r3, #1
 8007618:	4093      	lsls	r3, r2
 800761a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800761c:	2302      	movs	r3, #2
 800761e:	613b      	str	r3, [r7, #16]
	switch (type)
 8007620:	78fb      	ldrb	r3, [r7, #3]
 8007622:	2b04      	cmp	r3, #4
 8007624:	d825      	bhi.n	8007672 <STRHAL_GPIO_SingleInit+0x9e>
 8007626:	a201      	add	r2, pc, #4	; (adr r2, 800762c <STRHAL_GPIO_SingleInit+0x58>)
 8007628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800762c:	08007641 	.word	0x08007641
 8007630:	0800764b 	.word	0x0800764b
 8007634:	08007655 	.word	0x08007655
 8007638:	0800765f 	.word	0x0800765f
 800763c:	08007669 	.word	0x08007669
	{
		case STRHAL_GPIO_TYPE_OPP:
			GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007640:	2301      	movs	r3, #1
 8007642:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007644:	2300      	movs	r3, #0
 8007646:	617b      	str	r3, [r7, #20]
			break;
 8007648:	e013      	b.n	8007672 <STRHAL_GPIO_SingleInit+0x9e>

		case STRHAL_GPIO_TYPE_OOD:
			GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800764a:	2301      	movs	r3, #1
 800764c:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800764e:	2301      	movs	r3, #1
 8007650:	617b      	str	r3, [r7, #20]
			break;
 8007652:	e00e      	b.n	8007672 <STRHAL_GPIO_SingleInit+0x9e>

		case STRHAL_GPIO_TYPE_IHZ:
			GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8007654:	2300      	movs	r3, #0
 8007656:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007658:	2300      	movs	r3, #0
 800765a:	61bb      	str	r3, [r7, #24]
			break;
 800765c:	e009      	b.n	8007672 <STRHAL_GPIO_SingleInit+0x9e>

		case STRHAL_GPIO_TYPE_IPU:
			GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800765e:	2300      	movs	r3, #0
 8007660:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8007662:	2301      	movs	r3, #1
 8007664:	61bb      	str	r3, [r7, #24]
			break;
 8007666:	e004      	b.n	8007672 <STRHAL_GPIO_SingleInit+0x9e>

		case STRHAL_GPIO_TYPE_IPD:
			GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8007668:	2300      	movs	r3, #0
 800766a:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800766c:	2302      	movs	r3, #2
 800766e:	61bb      	str	r3, [r7, #24]
			break;
 8007670:	bf00      	nop
	}
	LL_GPIO_Init(gpio->port, &GPIO_InitStruct);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f107 0208 	add.w	r2, r7, #8
 800767a:	4611      	mov	r1, r2
 800767c:	4618      	mov	r0, r3
 800767e:	f7fc fd70 	bl	8004162 <LL_GPIO_Init>
 8007682:	e000      	b.n	8007686 <STRHAL_GPIO_SingleInit+0xb2>
		return;
 8007684:	bf00      	nop
	//gpio->type = type;
}
 8007686:	3720      	adds	r7, #32
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <STRHAL_GPIO_Write>:
		STRHAL_GPIO_SingleInit(&gpios->gpios[i], type);
	}
}

inline void STRHAL_GPIO_Write(const STRHAL_GPIO_t *gpio, STRHAL_GPIO_Value_t value)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b082      	sub	sp, #8
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	460b      	mov	r3, r1
 8007696:	70fb      	strb	r3, [r7, #3]
	if (gpio->pin > 0x1F)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	791b      	ldrb	r3, [r3, #4]
 800769c:	2b1f      	cmp	r3, #31
 800769e:	d81a      	bhi.n	80076d6 <STRHAL_GPIO_Write+0x4a>
		return;

	if (value == STRHAL_GPIO_VALUE_H)
 80076a0:	78fb      	ldrb	r3, [r7, #3]
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d10b      	bne.n	80076be <STRHAL_GPIO_Write+0x32>
	{
		LL_GPIO_SetOutputPin(gpio->port, (1 << gpio->pin));
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	791b      	ldrb	r3, [r3, #4]
 80076ae:	4619      	mov	r1, r3
 80076b0:	2301      	movs	r3, #1
 80076b2:	408b      	lsls	r3, r1
 80076b4:	4619      	mov	r1, r3
 80076b6:	4610      	mov	r0, r2
 80076b8:	f7ff ff41 	bl	800753e <LL_GPIO_SetOutputPin>
 80076bc:	e00c      	b.n	80076d8 <STRHAL_GPIO_Write+0x4c>
	}
	else
	{
		LL_GPIO_ResetOutputPin(gpio->port, (1 << gpio->pin));
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	791b      	ldrb	r3, [r3, #4]
 80076c6:	4619      	mov	r1, r3
 80076c8:	2301      	movs	r3, #1
 80076ca:	408b      	lsls	r3, r1
 80076cc:	4619      	mov	r1, r3
 80076ce:	4610      	mov	r0, r2
 80076d0:	f7ff ff43 	bl	800755a <LL_GPIO_ResetOutputPin>
 80076d4:	e000      	b.n	80076d8 <STRHAL_GPIO_Write+0x4c>
		return;
 80076d6:	bf00      	nop
	}

}
 80076d8:	3708      	adds	r7, #8
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <STRHAL_GPIO_ReadOutput>:

	return (LL_GPIO_ReadInputPort(gpio->port) & (1 << gpio->pin)) ? 1 : 0;
}

STRHAL_GPIO_Value_t STRHAL_GPIO_ReadOutput(const STRHAL_GPIO_t *gpio)
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b082      	sub	sp, #8
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
	if (gpio->pin > 0x1F)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	791b      	ldrb	r3, [r3, #4]
 80076ea:	2b1f      	cmp	r3, #31
 80076ec:	d901      	bls.n	80076f2 <STRHAL_GPIO_ReadOutput+0x14>
		return STRHAL_GPIO_VALUE_L;
 80076ee:	2300      	movs	r3, #0
 80076f0:	e010      	b.n	8007714 <STRHAL_GPIO_ReadOutput+0x36>

	return (LL_GPIO_ReadOutputPort(gpio->port) & (1 << gpio->pin)) ? 1 : 0;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4618      	mov	r0, r3
 80076f8:	f7ff ff15 	bl	8007526 <LL_GPIO_ReadOutputPort>
 80076fc:	4602      	mov	r2, r0
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	791b      	ldrb	r3, [r3, #4]
 8007702:	4619      	mov	r1, r3
 8007704:	2301      	movs	r3, #1
 8007706:	408b      	lsls	r3, r1
 8007708:	4013      	ands	r3, r2
 800770a:	2b00      	cmp	r3, #0
 800770c:	bf14      	ite	ne
 800770e:	2301      	movne	r3, #1
 8007710:	2300      	moveq	r3, #0
 8007712:	b2db      	uxtb	r3, r3
}
 8007714:	4618      	mov	r0, r3
 8007716:	3708      	adds	r7, #8
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <LL_AHB2_GRP1_EnableClock>:
{
 800771c:	b480      	push	{r7}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007724:	4b08      	ldr	r3, [pc, #32]	; (8007748 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007726:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007728:	4907      	ldr	r1, [pc, #28]	; (8007748 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4313      	orrs	r3, r2
 800772e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007730:	4b05      	ldr	r3, [pc, #20]	; (8007748 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007732:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4013      	ands	r3, r2
 8007738:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800773a:	68fb      	ldr	r3, [r7, #12]
}
 800773c:	bf00      	nop
 800773e:	3714      	adds	r7, #20
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr
 8007748:	40021000 	.word	0x40021000

0800774c <LL_APB2_GRP1_EnableClock>:
{
 800774c:	b480      	push	{r7}
 800774e:	b085      	sub	sp, #20
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8007754:	4b08      	ldr	r3, [pc, #32]	; (8007778 <LL_APB2_GRP1_EnableClock+0x2c>)
 8007756:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007758:	4907      	ldr	r1, [pc, #28]	; (8007778 <LL_APB2_GRP1_EnableClock+0x2c>)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4313      	orrs	r3, r2
 800775e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8007760:	4b05      	ldr	r3, [pc, #20]	; (8007778 <LL_APB2_GRP1_EnableClock+0x2c>)
 8007762:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	4013      	ands	r3, r2
 8007768:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800776a:	68fb      	ldr	r3, [r7, #12]
}
 800776c:	bf00      	nop
 800776e:	3714      	adds	r7, #20
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr
 8007778:	40021000 	.word	0x40021000

0800777c <LL_GPIO_SetPinMode>:
{
 800777c:	b480      	push	{r7}
 800777e:	b08b      	sub	sp, #44	; 0x2c
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	fa93 f3a3 	rbit	r3, r3
 8007796:	613b      	str	r3, [r7, #16]
  return result;
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d101      	bne.n	80077a6 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80077a2:	2320      	movs	r3, #32
 80077a4:	e003      	b.n	80077ae <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80077a6:	69bb      	ldr	r3, [r7, #24]
 80077a8:	fab3 f383 	clz	r3, r3
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	005b      	lsls	r3, r3, #1
 80077b0:	2103      	movs	r1, #3
 80077b2:	fa01 f303 	lsl.w	r3, r1, r3
 80077b6:	43db      	mvns	r3, r3
 80077b8:	401a      	ands	r2, r3
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077be:	6a3b      	ldr	r3, [r7, #32]
 80077c0:	fa93 f3a3 	rbit	r3, r3
 80077c4:	61fb      	str	r3, [r7, #28]
  return result;
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80077ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d101      	bne.n	80077d4 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80077d0:	2320      	movs	r3, #32
 80077d2:	e003      	b.n	80077dc <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80077d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d6:	fab3 f383 	clz	r3, r3
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	005b      	lsls	r3, r3, #1
 80077de:	6879      	ldr	r1, [r7, #4]
 80077e0:	fa01 f303 	lsl.w	r3, r1, r3
 80077e4:	431a      	orrs	r2, r3
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	601a      	str	r2, [r3, #0]
}
 80077ea:	bf00      	nop
 80077ec:	372c      	adds	r7, #44	; 0x2c
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr

080077f6 <LL_OPAMP_SetFunctionalMode>:
  *         @arg @ref LL_OPAMP_MODE_PGA_IO0_BIAS
  *         @arg @ref LL_OPAMP_MODE_PGA_IO0_IO1_BIAS
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_SetFunctionalMode(OPAMP_TypeDef *OPAMPx, uint32_t FunctionalMode)
{
 80077f6:	b480      	push	{r7}
 80077f8:	b083      	sub	sp, #12
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
 80077fe:	6039      	str	r1, [r7, #0]
  /* Note: Bit OPAMP_CSR_CALON reset to ensure to be in functional mode */
  MODIFY_REG(OPAMPx->CSR, OPAMP_CSR_PGGAIN_4 | OPAMP_CSR_PGGAIN_3 | OPAMP_CSR_VMSEL | OPAMP_CSR_CALON, FunctionalMode);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f423 23c1 	bic.w	r3, r3, #395264	; 0x60800
 8007808:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800780c:	683a      	ldr	r2, [r7, #0]
 800780e:	431a      	orrs	r2, r3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	601a      	str	r2, [r3, #0]
}
 8007814:	bf00      	nop
 8007816:	370c      	adds	r7, #12
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <LL_OPAMP_SetPGAGain>:
  *         @arg @ref LL_OPAMP_PGA_GAIN_32_OR_MINUS_31
  *         @arg @ref LL_OPAMP_PGA_GAIN_64_OR_MINUS_63
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_SetPGAGain(OPAMP_TypeDef *OPAMPx, uint32_t PGAGain)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
  MODIFY_REG(OPAMPx->CSR, OPAMP_CSR_PGGAIN_2 | OPAMP_CSR_PGGAIN_1 | OPAMP_CSR_PGGAIN_0, PGAGain);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f423 32e0 	bic.w	r2, r3, #114688	; 0x1c000
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	431a      	orrs	r2, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	601a      	str	r2, [r3, #0]
}
 800783a:	bf00      	nop
 800783c:	370c      	adds	r7, #12
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr

08007846 <LL_OPAMP_SetInputNonInverting>:
  *         @arg @ref LL_OPAMP_INPUT_NONINVERT_IO3
  *         @arg @ref LL_OPAMP_INPUT_NONINVERT_DAC
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_SetInputNonInverting(OPAMP_TypeDef *OPAMPx, uint32_t InputNonInverting)
{
 8007846:	b480      	push	{r7}
 8007848:	b083      	sub	sp, #12
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
 800784e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(OPAMPx->CSR, OPAMP_CSR_VPSEL, InputNonInverting);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f023 020c 	bic.w	r2, r3, #12
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	431a      	orrs	r2, r3
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	601a      	str	r2, [r3, #0]
}
 8007860:	bf00      	nop
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <LL_OPAMP_SetInputInverting>:
  *         @arg @ref LL_OPAMP_INPUT_INVERT_IO1
  *         @arg @ref LL_OPAMP_INPUT_INVERT_CONNECT_NO
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_SetInputInverting(OPAMP_TypeDef *OPAMPx, uint32_t InputInverting)
{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
  /* Manage cases of OPAMP inverting input not connected (0x10 and 0x11)      */
  /* to not modify OPAMP mode follower or PGA.                                */
  /* Bit OPAMP_CSR_VMSEL_1 is set by OPAMP mode (follower, PGA). */
  MODIFY_REG(OPAMPx->CSR, (~(InputInverting >> 1)) & OPAMP_CSR_VMSEL_0, InputInverting);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	085b      	lsrs	r3, r3, #1
 800787e:	43db      	mvns	r3, r3
 8007880:	f003 0320 	and.w	r3, r3, #32
 8007884:	43db      	mvns	r3, r3
 8007886:	401a      	ands	r2, r3
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	431a      	orrs	r2, r3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	601a      	str	r2, [r3, #0]
}
 8007890:	bf00      	nop
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <LL_OPAMP_SetInternalOutput>:
  *         @arg @ref LL_OPAMP_INTERNAL_OUPUT_DISABLED
  *         @arg @ref LL_OPAMP_INTERNAL_OUPUT_ENABLED
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_SetInternalOutput(OPAMP_TypeDef *OPAMPx, uint32_t InternalOutput)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(OPAMPx->CSR, OPAMP_CSR_OPAMPINTEN, InternalOutput);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	431a      	orrs	r2, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	601a      	str	r2, [r3, #0]
}
 80078b6:	bf00      	nop
 80078b8:	370c      	adds	r7, #12
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr

080078c2 <LL_OPAMP_Enable>:
  * @rmtoll CSR      OPAMPXEN       LL_OPAMP_Enable
  * @param  OPAMPx OPAMP instance
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_Enable(OPAMP_TypeDef *OPAMPx)
{
 80078c2:	b480      	push	{r7}
 80078c4:	b083      	sub	sp, #12
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
  SET_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f043 0201 	orr.w	r2, r3, #1
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	601a      	str	r2, [r3, #0]
}
 80078d6:	bf00      	nop
 80078d8:	370c      	adds	r7, #12
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr

080078e2 <LL_OPAMP_IsEnabled>:
  * @rmtoll CSR      OPAMPXEN       LL_OPAMP_IsEnabled
  * @param  OPAMPx OPAMP instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_OPAMP_IsEnabled(OPAMP_TypeDef *OPAMPx)
{
 80078e2:	b480      	push	{r7}
 80078e4:	b083      	sub	sp, #12
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN) == (OPAMP_CSR_OPAMPxEN)) ? 1UL : 0UL);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 0301 	and.w	r3, r3, #1
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d101      	bne.n	80078fa <LL_OPAMP_IsEnabled+0x18>
 80078f6:	2301      	movs	r3, #1
 80078f8:	e000      	b.n	80078fc <LL_OPAMP_IsEnabled+0x1a>
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <STRHAL_OPAMP_Init>:
#include <STRHAL_OPAMP.h>

void STRHAL_OPAMP_Init()
{
 8007908:	b580      	push	{r7, lr}
 800790a:	af00      	add	r7, sp, #0

	// GPIO init
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800790c:	2004      	movs	r0, #4
 800790e:	f7ff ff05 	bl	800771c <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8007912:	2020      	movs	r0, #32
 8007914:	f7ff ff02 	bl	800771c <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8007918:	2001      	movs	r0, #1
 800791a:	f7ff feff 	bl	800771c <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800791e:	2002      	movs	r0, #2
 8007920:	f7ff fefc 	bl	800771c <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 8007924:	2010      	movs	r0, #16
 8007926:	f7ff fef9 	bl	800771c <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 800792a:	2008      	movs	r0, #8
 800792c:	f7ff fef6 	bl	800771c <LL_AHB2_GRP1_EnableClock>

	LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_7, LL_GPIO_MODE_ANALOG);
 8007930:	2203      	movs	r2, #3
 8007932:	2180      	movs	r1, #128	; 0x80
 8007934:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007938:	f7ff ff20 	bl	800777c <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_0, LL_GPIO_MODE_ANALOG);
 800793c:	2203      	movs	r2, #3
 800793e:	2101      	movs	r1, #1
 8007940:	4819      	ldr	r0, [pc, #100]	; (80079a8 <STRHAL_OPAMP_Init+0xa0>)
 8007942:	f7ff ff1b 	bl	800777c <LL_GPIO_SetPinMode>

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8007946:	2001      	movs	r0, #1
 8007948:	f7ff ff00 	bl	800774c <LL_APB2_GRP1_EnableClock>

	LL_OPAMP_SetFunctionalMode(OPAMP2, LL_OPAMP_MODE_PGA);
 800794c:	2140      	movs	r1, #64	; 0x40
 800794e:	4817      	ldr	r0, [pc, #92]	; (80079ac <STRHAL_OPAMP_Init+0xa4>)
 8007950:	f7ff ff51 	bl	80077f6 <LL_OPAMP_SetFunctionalMode>
	LL_OPAMP_SetPGAGain(OPAMP2, LL_OPAMP_PGA_GAIN_32_OR_MINUS_31);
 8007954:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8007958:	4814      	ldr	r0, [pc, #80]	; (80079ac <STRHAL_OPAMP_Init+0xa4>)
 800795a:	f7ff ff61 	bl	8007820 <LL_OPAMP_SetPGAGain>
	LL_OPAMP_SetInputNonInverting(OPAMP2, LL_OPAMP_INPUT_NONINVERT_IO0);
 800795e:	2100      	movs	r1, #0
 8007960:	4812      	ldr	r0, [pc, #72]	; (80079ac <STRHAL_OPAMP_Init+0xa4>)
 8007962:	f7ff ff70 	bl	8007846 <LL_OPAMP_SetInputNonInverting>
	LL_OPAMP_SetInputInverting(OPAMP2, LL_OPAMP_INPUT_INVERT_CONNECT_NO);
 8007966:	2140      	movs	r1, #64	; 0x40
 8007968:	4810      	ldr	r0, [pc, #64]	; (80079ac <STRHAL_OPAMP_Init+0xa4>)
 800796a:	f7ff ff7f 	bl	800786c <LL_OPAMP_SetInputInverting>
	LL_OPAMP_SetInternalOutput(OPAMP2, LL_OPAMP_INTERNAL_OUPUT_ENABLED);
 800796e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007972:	480e      	ldr	r0, [pc, #56]	; (80079ac <STRHAL_OPAMP_Init+0xa4>)
 8007974:	f7ff ff92 	bl	800789c <LL_OPAMP_SetInternalOutput>
	LL_OPAMP_SetFunctionalMode(OPAMP3, LL_OPAMP_MODE_PGA);
 8007978:	2140      	movs	r1, #64	; 0x40
 800797a:	480d      	ldr	r0, [pc, #52]	; (80079b0 <STRHAL_OPAMP_Init+0xa8>)
 800797c:	f7ff ff3b 	bl	80077f6 <LL_OPAMP_SetFunctionalMode>
	LL_OPAMP_SetPGAGain(OPAMP3, LL_OPAMP_PGA_GAIN_32_OR_MINUS_31);
 8007980:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8007984:	480a      	ldr	r0, [pc, #40]	; (80079b0 <STRHAL_OPAMP_Init+0xa8>)
 8007986:	f7ff ff4b 	bl	8007820 <LL_OPAMP_SetPGAGain>
	LL_OPAMP_SetInputNonInverting(OPAMP3, LL_OPAMP_INPUT_NONINVERT_IO0);
 800798a:	2100      	movs	r1, #0
 800798c:	4808      	ldr	r0, [pc, #32]	; (80079b0 <STRHAL_OPAMP_Init+0xa8>)
 800798e:	f7ff ff5a 	bl	8007846 <LL_OPAMP_SetInputNonInverting>
	LL_OPAMP_SetInputInverting(OPAMP3, LL_OPAMP_INPUT_INVERT_CONNECT_NO);
 8007992:	2140      	movs	r1, #64	; 0x40
 8007994:	4806      	ldr	r0, [pc, #24]	; (80079b0 <STRHAL_OPAMP_Init+0xa8>)
 8007996:	f7ff ff69 	bl	800786c <LL_OPAMP_SetInputInverting>
	LL_OPAMP_SetInternalOutput(OPAMP3, LL_OPAMP_INTERNAL_OUPUT_ENABLED);
 800799a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800799e:	4804      	ldr	r0, [pc, #16]	; (80079b0 <STRHAL_OPAMP_Init+0xa8>)
 80079a0:	f7ff ff7c 	bl	800789c <LL_OPAMP_SetInternalOutput>
}
 80079a4:	bf00      	nop
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	48000400 	.word	0x48000400
 80079ac:	40010304 	.word	0x40010304
 80079b0:	40010308 	.word	0x40010308

080079b4 <STRHAL_OPAMP_Run>:

void STRHAL_OPAMP_Run()
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	af00      	add	r7, sp, #0
	LL_OPAMP_Enable(OPAMP2);
 80079b8:	480b      	ldr	r0, [pc, #44]	; (80079e8 <STRHAL_OPAMP_Run+0x34>)
 80079ba:	f7ff ff82 	bl	80078c2 <LL_OPAMP_Enable>
	while (!LL_OPAMP_IsEnabled(OPAMP2));
 80079be:	bf00      	nop
 80079c0:	4809      	ldr	r0, [pc, #36]	; (80079e8 <STRHAL_OPAMP_Run+0x34>)
 80079c2:	f7ff ff8e 	bl	80078e2 <LL_OPAMP_IsEnabled>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d0f9      	beq.n	80079c0 <STRHAL_OPAMP_Run+0xc>
	LL_OPAMP_Enable(OPAMP3);
 80079cc:	4807      	ldr	r0, [pc, #28]	; (80079ec <STRHAL_OPAMP_Run+0x38>)
 80079ce:	f7ff ff78 	bl	80078c2 <LL_OPAMP_Enable>
	while (!LL_OPAMP_IsEnabled(OPAMP3));
 80079d2:	bf00      	nop
 80079d4:	4805      	ldr	r0, [pc, #20]	; (80079ec <STRHAL_OPAMP_Run+0x38>)
 80079d6:	f7ff ff84 	bl	80078e2 <LL_OPAMP_IsEnabled>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d0f9      	beq.n	80079d4 <STRHAL_OPAMP_Run+0x20>
}
 80079e0:	bf00      	nop
 80079e2:	bf00      	nop
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	40010304 	.word	0x40010304
 80079ec:	40010308 	.word	0x40010308

080079f0 <LL_AHB2_GRP1_EnableClock>:
{
 80079f0:	b480      	push	{r7}
 80079f2:	b085      	sub	sp, #20
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80079f8:	4b08      	ldr	r3, [pc, #32]	; (8007a1c <LL_AHB2_GRP1_EnableClock+0x2c>)
 80079fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80079fc:	4907      	ldr	r1, [pc, #28]	; (8007a1c <LL_AHB2_GRP1_EnableClock+0x2c>)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007a04:	4b05      	ldr	r3, [pc, #20]	; (8007a1c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007a06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4013      	ands	r3, r2
 8007a0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
}
 8007a10:	bf00      	nop
 8007a12:	3714      	adds	r7, #20
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr
 8007a1c:	40021000 	.word	0x40021000

08007a20 <LL_AHB3_GRP1_EnableClock>:
{
 8007a20:	b480      	push	{r7}
 8007a22:	b085      	sub	sp, #20
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8007a28:	4b08      	ldr	r3, [pc, #32]	; (8007a4c <LL_AHB3_GRP1_EnableClock+0x2c>)
 8007a2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007a2c:	4907      	ldr	r1, [pc, #28]	; (8007a4c <LL_AHB3_GRP1_EnableClock+0x2c>)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4313      	orrs	r3, r2
 8007a32:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8007a34:	4b05      	ldr	r3, [pc, #20]	; (8007a4c <LL_AHB3_GRP1_EnableClock+0x2c>)
 8007a36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
}
 8007a40:	bf00      	nop
 8007a42:	3714      	adds	r7, #20
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr
 8007a4c:	40021000 	.word	0x40021000

08007a50 <_init_GPIO>:
static inline int _wait_for_status(uint32_t flag, uint16_t tot);
static inline int _wait_for_status_clear(uint32_t flag, uint16_t);
static inline void _clear_status(uint32_t flags);

static void _init_GPIO()
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b086      	sub	sp, #24
 8007a54:	af00      	add	r7, sp, #0
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 8007a56:	2010      	movs	r0, #16
 8007a58:	f7ff ffca 	bl	80079f0 <LL_AHB2_GRP1_EnableClock>

	LL_GPIO_InitTypeDef GPIO_InitStruct =
 8007a5c:	463b      	mov	r3, r7
 8007a5e:	2200      	movs	r2, #0
 8007a60:	601a      	str	r2, [r3, #0]
 8007a62:	605a      	str	r2, [r3, #4]
 8007a64:	609a      	str	r2, [r3, #8]
 8007a66:	60da      	str	r2, [r3, #12]
 8007a68:	611a      	str	r2, [r3, #16]
 8007a6a:	615a      	str	r2, [r3, #20]
	{ 0 };
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007a70:	2300      	movs	r3, #0
 8007a72:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8007a74:	2302      	movs	r3, #2
 8007a76:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pin = LL_GPIO_PIN_10 | LL_GPIO_PIN_11 | LL_GPIO_PIN_12 | LL_GPIO_PIN_13 | LL_GPIO_PIN_14 | LL_GPIO_PIN_15;
 8007a78:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8007a7c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007a7e:	2302      	movs	r3, #2
 8007a80:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_10;
 8007a82:	230a      	movs	r3, #10
 8007a84:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007a86:	463b      	mov	r3, r7
 8007a88:	4619      	mov	r1, r3
 8007a8a:	4803      	ldr	r0, [pc, #12]	; (8007a98 <_init_GPIO+0x48>)
 8007a8c:	f7fc fb69 	bl	8004162 <LL_GPIO_Init>
}
 8007a90:	bf00      	nop
 8007a92:	3718      	adds	r7, #24
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	48001000 	.word	0x48001000

08007a9c <STRHAL_QSPI_Init>:

void STRHAL_QSPI_Init()
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	af00      	add	r7, sp, #0
	LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_QSPI);
 8007aa0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007aa4:	f7ff ffbc 	bl	8007a20 <LL_AHB3_GRP1_EnableClock>
}
 8007aa8:	bf00      	nop
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <STRHAL_QSPI_Flash_Init>:

int STRHAL_QSPI_Flash_Init(const STRHAL_QSPI_Config_t *config)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
	STRHAL_QSPI_Reset();
 8007ab4:	f000 f848 	bl	8007b48 <STRHAL_QSPI_Reset>

	_init_GPIO();
 8007ab8:	f7ff ffca 	bl	8007a50 <_init_GPIO>

	QUADSPI->CR |= STRHAL_QSPI_FIFO_THRESH << QUADSPI_CR_FTHRES_Pos;
 8007abc:	4b21      	ldr	r3, [pc, #132]	; (8007b44 <STRHAL_QSPI_Flash_Init+0x98>)
 8007abe:	4a21      	ldr	r2, [pc, #132]	; (8007b44 <STRHAL_QSPI_Flash_Init+0x98>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	6013      	str	r3, [r2, #0]

	if (_wait_for_status_clear(QUADSPI_SR_BUSY, 100) < 0)
 8007ac4:	2164      	movs	r1, #100	; 0x64
 8007ac6:	2020      	movs	r0, #32
 8007ac8:	f000 fa1e 	bl	8007f08 <_wait_for_status_clear>
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	da02      	bge.n	8007ad8 <STRHAL_QSPI_Flash_Init+0x2c>
		return -1;
 8007ad2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ad6:	e031      	b.n	8007b3c <STRHAL_QSPI_Flash_Init+0x90>

	QUADSPI->CR |= config->psc << QUADSPI_CR_PRESCALER_Pos;
 8007ad8:	4b1a      	ldr	r3, [pc, #104]	; (8007b44 <STRHAL_QSPI_Flash_Init+0x98>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	7812      	ldrb	r2, [r2, #0]
 8007ae0:	f3c2 0204 	ubfx	r2, r2, #0, #5
 8007ae4:	b2d2      	uxtb	r2, r2
 8007ae6:	0612      	lsls	r2, r2, #24
 8007ae8:	4611      	mov	r1, r2
 8007aea:	4a16      	ldr	r2, [pc, #88]	; (8007b44 <STRHAL_QSPI_Flash_Init+0x98>)
 8007aec:	430b      	orrs	r3, r1
 8007aee:	6013      	str	r3, [r2, #0]
	QUADSPI->DCR |= config->flash_size << QUADSPI_DCR_FSIZE_Pos;
 8007af0:	4b14      	ldr	r3, [pc, #80]	; (8007b44 <STRHAL_QSPI_Flash_Init+0x98>)
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	7852      	ldrb	r2, [r2, #1]
 8007af8:	f3c2 0204 	ubfx	r2, r2, #0, #5
 8007afc:	b2d2      	uxtb	r2, r2
 8007afe:	0412      	lsls	r2, r2, #16
 8007b00:	4611      	mov	r1, r2
 8007b02:	4a10      	ldr	r2, [pc, #64]	; (8007b44 <STRHAL_QSPI_Flash_Init+0x98>)
 8007b04:	430b      	orrs	r3, r1
 8007b06:	6053      	str	r3, [r2, #4]
	QUADSPI->DCR |= config->ncs_high_time << QUADSPI_DCR_CSHT_Pos;
 8007b08:	4b0e      	ldr	r3, [pc, #56]	; (8007b44 <STRHAL_QSPI_Flash_Init+0x98>)
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	7852      	ldrb	r2, [r2, #1]
 8007b10:	f3c2 1242 	ubfx	r2, r2, #5, #3
 8007b14:	b2d2      	uxtb	r2, r2
 8007b16:	0212      	lsls	r2, r2, #8
 8007b18:	4611      	mov	r1, r2
 8007b1a:	4a0a      	ldr	r2, [pc, #40]	; (8007b44 <STRHAL_QSPI_Flash_Init+0x98>)
 8007b1c:	430b      	orrs	r3, r1
 8007b1e:	6053      	str	r3, [r2, #4]
	QUADSPI->DCR |= config->clk_level << QUADSPI_DCR_CKMODE_Pos;
 8007b20:	4b08      	ldr	r3, [pc, #32]	; (8007b44 <STRHAL_QSPI_Flash_Init+0x98>)
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	7892      	ldrb	r2, [r2, #2]
 8007b28:	f3c2 0200 	ubfx	r2, r2, #0, #1
 8007b2c:	b2d2      	uxtb	r2, r2
 8007b2e:	4611      	mov	r1, r2
 8007b30:	4a04      	ldr	r2, [pc, #16]	; (8007b44 <STRHAL_QSPI_Flash_Init+0x98>)
 8007b32:	430b      	orrs	r3, r1
 8007b34:	6053      	str	r3, [r2, #4]

	STRHAL_QSPI_Run();
 8007b36:	f000 f82b 	bl	8007b90 <STRHAL_QSPI_Run>

	return 0;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3708      	adds	r7, #8
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	a0001000 	.word	0xa0001000

08007b48 <STRHAL_QSPI_Reset>:

void STRHAL_QSPI_Reset()
{
 8007b48:	b480      	push	{r7}
 8007b4a:	af00      	add	r7, sp, #0
	if (QUADSPI->CR & QUADSPI_CR_EN)
 8007b4c:	4b0f      	ldr	r3, [pc, #60]	; (8007b8c <STRHAL_QSPI_Reset+0x44>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 0301 	and.w	r3, r3, #1
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d005      	beq.n	8007b64 <STRHAL_QSPI_Reset+0x1c>
		QUADSPI->CR &= ~QUADSPI_CR_EN;
 8007b58:	4b0c      	ldr	r3, [pc, #48]	; (8007b8c <STRHAL_QSPI_Reset+0x44>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a0b      	ldr	r2, [pc, #44]	; (8007b8c <STRHAL_QSPI_Reset+0x44>)
 8007b5e:	f023 0301 	bic.w	r3, r3, #1
 8007b62:	6013      	str	r3, [r2, #0]

	CLEAR_REG(QUADSPI->CR);
 8007b64:	4b09      	ldr	r3, [pc, #36]	; (8007b8c <STRHAL_QSPI_Reset+0x44>)
 8007b66:	2200      	movs	r2, #0
 8007b68:	601a      	str	r2, [r3, #0]
	CLEAR_REG(QUADSPI->DCR);
 8007b6a:	4b08      	ldr	r3, [pc, #32]	; (8007b8c <STRHAL_QSPI_Reset+0x44>)
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	605a      	str	r2, [r3, #4]
	CLEAR_REG(QUADSPI->CCR);
 8007b70:	4b06      	ldr	r3, [pc, #24]	; (8007b8c <STRHAL_QSPI_Reset+0x44>)
 8007b72:	2200      	movs	r2, #0
 8007b74:	615a      	str	r2, [r3, #20]

	QUADSPI->FCR |= (QUADSPI_FCR_CSMF | QUADSPI_FCR_CTCF | QUADSPI_FCR_CTEF | QUADSPI_FCR_CTOF);
 8007b76:	4b05      	ldr	r3, [pc, #20]	; (8007b8c <STRHAL_QSPI_Reset+0x44>)
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	4a04      	ldr	r2, [pc, #16]	; (8007b8c <STRHAL_QSPI_Reset+0x44>)
 8007b7c:	f043 031b 	orr.w	r3, r3, #27
 8007b80:	60d3      	str	r3, [r2, #12]
}
 8007b82:	bf00      	nop
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr
 8007b8c:	a0001000 	.word	0xa0001000

08007b90 <STRHAL_QSPI_Run>:

void STRHAL_QSPI_Run()
{
 8007b90:	b480      	push	{r7}
 8007b92:	af00      	add	r7, sp, #0
	QUADSPI->CR |= QUADSPI_CR_EN; // Enable QSPI
 8007b94:	4b05      	ldr	r3, [pc, #20]	; (8007bac <STRHAL_QSPI_Run+0x1c>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a04      	ldr	r2, [pc, #16]	; (8007bac <STRHAL_QSPI_Run+0x1c>)
 8007b9a:	f043 0301 	orr.w	r3, r3, #1
 8007b9e:	6013      	str	r3, [r2, #0]
}
 8007ba0:	bf00      	nop
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr
 8007baa:	bf00      	nop
 8007bac:	a0001000 	.word	0xa0001000

08007bb0 <STRHAL_QSPI_Indirect_Write>:
{
	QUADSPI->CR &= ~QUADSPI_CR_EN;  // Enable QSPI
}

uint32_t STRHAL_QSPI_Indirect_Write(const STRHAL_QSPI_Command_t *cmd, const uint8_t *data, uint32_t n, uint16_t tot)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b088      	sub	sp, #32
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	60b9      	str	r1, [r7, #8]
 8007bba:	607a      	str	r2, [r7, #4]
 8007bbc:	807b      	strh	r3, [r7, #2]
	if (_wait_for_status_clear(QUADSPI_SR_BUSY, tot) < 0)
 8007bbe:	887b      	ldrh	r3, [r7, #2]
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	2020      	movs	r0, #32
 8007bc4:	f000 f9a0 	bl	8007f08 <_wait_for_status_clear>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	da02      	bge.n	8007bd4 <STRHAL_QSPI_Indirect_Write+0x24>
		return -1;
 8007bce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007bd2:	e09e      	b.n	8007d12 <STRHAL_QSPI_Indirect_Write+0x162>

	__IO uint32_t *data_reg = &QUADSPI->DR;
 8007bd4:	4b51      	ldr	r3, [pc, #324]	; (8007d1c <STRHAL_QSPI_Indirect_Write+0x16c>)
 8007bd6:	617b      	str	r3, [r7, #20]
	_clear_status(QUADSPI_FCR_CSMF | QUADSPI_FCR_CTCF | QUADSPI_FCR_CTEF | QUADSPI_FCR_CTOF);
 8007bd8:	201b      	movs	r0, #27
 8007bda:	f000 f9bf 	bl	8007f5c <_clear_status>

	uint32_t ccr = 0x00000000;
 8007bde:	2300      	movs	r3, #0
 8007be0:	61fb      	str	r3, [r7, #28]

	if (n > 0)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d007      	beq.n	8007bf8 <STRHAL_QSPI_Indirect_Write+0x48>
	{
		ccr |= QUADSPI_CCR_DMODE_0;
 8007be8:	69fb      	ldr	r3, [r7, #28]
 8007bea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007bee:	61fb      	str	r3, [r7, #28]
		WRITE_REG(QUADSPI->DLR, n - 1U);
 8007bf0:	4a4b      	ldr	r2, [pc, #300]	; (8007d20 <STRHAL_QSPI_Indirect_Write+0x170>)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	3b01      	subs	r3, #1
 8007bf6:	6113      	str	r3, [r2, #16]
	}

	if (cmd->alt_size > 0)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	7a5b      	ldrb	r3, [r3, #9]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d010      	beq.n	8007c22 <STRHAL_QSPI_Indirect_Write+0x72>
	{
		ccr |= QUADSPI_CCR_ABMODE_0;
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007c06:	61fb      	str	r3, [r7, #28]
		ccr |= ((cmd->alt_size - 1) & 0x3) << QUADSPI_CCR_ABSIZE_Pos;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	7a5b      	ldrb	r3, [r3, #9]
 8007c0c:	3b01      	subs	r3, #1
 8007c0e:	041b      	lsls	r3, r3, #16
 8007c10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007c14:	69fa      	ldr	r2, [r7, #28]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	61fb      	str	r3, [r7, #28]
		WRITE_REG(QUADSPI->ABR, cmd->alt);
 8007c1a:	4a41      	ldr	r2, [pc, #260]	; (8007d20 <STRHAL_QSPI_Indirect_Write+0x170>)
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	61d3      	str	r3, [r2, #28]
	}

	ccr |= (cmd->dummy_size & 0x1F) << QUADSPI_CCR_DCYC_Pos;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	7c1b      	ldrb	r3, [r3, #16]
 8007c26:	049b      	lsls	r3, r3, #18
 8007c28:	f403 03f8 	and.w	r3, r3, #8126464	; 0x7c0000
 8007c2c:	69fa      	ldr	r2, [r7, #28]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	61fb      	str	r3, [r7, #28]

	if (cmd->instruction_size > 0)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	785b      	ldrb	r3, [r3, #1]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d026      	beq.n	8007c88 <STRHAL_QSPI_Indirect_Write+0xd8>
	{
		ccr |= QUADSPI_CCR_IMODE_0;
 8007c3a:	69fb      	ldr	r3, [r7, #28]
 8007c3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c40:	61fb      	str	r3, [r7, #28]
		ccr |= cmd->instruction << QUADSPI_CCR_INSTRUCTION_Pos;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	461a      	mov	r2, r3
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	61fb      	str	r3, [r7, #28]
		if (cmd->addr_size > 0)
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	7a1b      	ldrb	r3, [r3, #8]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d014      	beq.n	8007c80 <STRHAL_QSPI_Indirect_Write+0xd0>
		{
			ccr |= QUADSPI_CCR_ADMODE_0;
 8007c56:	69fb      	ldr	r3, [r7, #28]
 8007c58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007c5c:	61fb      	str	r3, [r7, #28]
			ccr |= ((cmd->addr_size - 1) & 0x3) << QUADSPI_CCR_ADSIZE_Pos;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	7a1b      	ldrb	r3, [r3, #8]
 8007c62:	3b01      	subs	r3, #1
 8007c64:	031b      	lsls	r3, r3, #12
 8007c66:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007c6a:	69fa      	ldr	r2, [r7, #28]
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	61fb      	str	r3, [r7, #28]
			WRITE_REG(QUADSPI->CCR, ccr);
 8007c70:	4a2b      	ldr	r2, [pc, #172]	; (8007d20 <STRHAL_QSPI_Indirect_Write+0x170>)
 8007c72:	69fb      	ldr	r3, [r7, #28]
 8007c74:	6153      	str	r3, [r2, #20]
			WRITE_REG(QUADSPI->AR, cmd->addr);
 8007c76:	4a2a      	ldr	r2, [pc, #168]	; (8007d20 <STRHAL_QSPI_Indirect_Write+0x170>)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	6193      	str	r3, [r2, #24]
 8007c7e:	e01f      	b.n	8007cc0 <STRHAL_QSPI_Indirect_Write+0x110>
		}
		else
		{
			WRITE_REG(QUADSPI->CCR, ccr);
 8007c80:	4a27      	ldr	r2, [pc, #156]	; (8007d20 <STRHAL_QSPI_Indirect_Write+0x170>)
 8007c82:	69fb      	ldr	r3, [r7, #28]
 8007c84:	6153      	str	r3, [r2, #20]
 8007c86:	e01b      	b.n	8007cc0 <STRHAL_QSPI_Indirect_Write+0x110>
		}
	}
	else
	{
		if (cmd->addr_size > 0)
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	7a1b      	ldrb	r3, [r3, #8]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d014      	beq.n	8007cba <STRHAL_QSPI_Indirect_Write+0x10a>
		{
			ccr |= QUADSPI_CCR_ADMODE_0;
 8007c90:	69fb      	ldr	r3, [r7, #28]
 8007c92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007c96:	61fb      	str	r3, [r7, #28]
			ccr |= ((cmd->addr_size - 1) & 0x3) << QUADSPI_CCR_ADSIZE_Pos;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	7a1b      	ldrb	r3, [r3, #8]
 8007c9c:	3b01      	subs	r3, #1
 8007c9e:	031b      	lsls	r3, r3, #12
 8007ca0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007ca4:	69fa      	ldr	r2, [r7, #28]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	61fb      	str	r3, [r7, #28]
			WRITE_REG(QUADSPI->CCR, ccr);
 8007caa:	4a1d      	ldr	r2, [pc, #116]	; (8007d20 <STRHAL_QSPI_Indirect_Write+0x170>)
 8007cac:	69fb      	ldr	r3, [r7, #28]
 8007cae:	6153      	str	r3, [r2, #20]
			WRITE_REG(QUADSPI->AR, cmd->addr);
 8007cb0:	4a1b      	ldr	r2, [pc, #108]	; (8007d20 <STRHAL_QSPI_Indirect_Write+0x170>)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	6193      	str	r3, [r2, #24]
 8007cb8:	e002      	b.n	8007cc0 <STRHAL_QSPI_Indirect_Write+0x110>
		}
		else
		{
			WRITE_REG(QUADSPI->CCR, ccr);
 8007cba:	4a19      	ldr	r2, [pc, #100]	; (8007d20 <STRHAL_QSPI_Indirect_Write+0x170>)
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	6153      	str	r3, [r2, #20]
		}
	}

	uint32_t i;
	for (i = 0; i < n; ++i)
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	61bb      	str	r3, [r7, #24]
 8007cc4:	e012      	b.n	8007cec <STRHAL_QSPI_Indirect_Write+0x13c>
	{
		if (_wait_for_status(QUADSPI_SR_FTF, tot) < 0)
 8007cc6:	887b      	ldrh	r3, [r7, #2]
 8007cc8:	4619      	mov	r1, r3
 8007cca:	2004      	movs	r0, #4
 8007ccc:	f000 f8f2 	bl	8007eb4 <_wait_for_status>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	da01      	bge.n	8007cda <STRHAL_QSPI_Indirect_Write+0x12a>
			return i;
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	e01b      	b.n	8007d12 <STRHAL_QSPI_Indirect_Write+0x162>

		*((__IO uint8_t*) data_reg) = data[i];
 8007cda:	68ba      	ldr	r2, [r7, #8]
 8007cdc:	69bb      	ldr	r3, [r7, #24]
 8007cde:	4413      	add	r3, r2
 8007ce0:	781a      	ldrb	r2, [r3, #0]
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n; ++i)
 8007ce6:	69bb      	ldr	r3, [r7, #24]
 8007ce8:	3301      	adds	r3, #1
 8007cea:	61bb      	str	r3, [r7, #24]
 8007cec:	69ba      	ldr	r2, [r7, #24]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d3e8      	bcc.n	8007cc6 <STRHAL_QSPI_Indirect_Write+0x116>

	}

	if (_wait_for_status(QUADSPI_SR_TCF, tot) == 0)
 8007cf4:	887b      	ldrh	r3, [r7, #2]
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	2002      	movs	r0, #2
 8007cfa:	f000 f8db 	bl	8007eb4 <_wait_for_status>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d105      	bne.n	8007d10 <STRHAL_QSPI_Indirect_Write+0x160>
	{
		SET_BIT(QUADSPI->FCR, QUADSPI_FCR_CTCF);
 8007d04:	4b06      	ldr	r3, [pc, #24]	; (8007d20 <STRHAL_QSPI_Indirect_Write+0x170>)
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	4a05      	ldr	r2, [pc, #20]	; (8007d20 <STRHAL_QSPI_Indirect_Write+0x170>)
 8007d0a:	f043 0302 	orr.w	r3, r3, #2
 8007d0e:	60d3      	str	r3, [r2, #12]
	}

	return i;
 8007d10:	69bb      	ldr	r3, [r7, #24]
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3720      	adds	r7, #32
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop
 8007d1c:	a0001020 	.word	0xa0001020
 8007d20:	a0001000 	.word	0xa0001000

08007d24 <STRHAL_QSPI_Indirect_Read>:

uint32_t STRHAL_QSPI_Indirect_Read(const STRHAL_QSPI_Command_t *cmd, uint8_t *data, uint32_t n, uint16_t tot)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b088      	sub	sp, #32
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	60b9      	str	r1, [r7, #8]
 8007d2e:	607a      	str	r2, [r7, #4]
 8007d30:	807b      	strh	r3, [r7, #2]
	if (_wait_for_status_clear(QUADSPI_SR_BUSY, tot) < 0)
 8007d32:	887b      	ldrh	r3, [r7, #2]
 8007d34:	4619      	mov	r1, r3
 8007d36:	2020      	movs	r0, #32
 8007d38:	f000 f8e6 	bl	8007f08 <_wait_for_status_clear>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	da02      	bge.n	8007d48 <STRHAL_QSPI_Indirect_Read+0x24>
		return -1;
 8007d42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d46:	e0ad      	b.n	8007ea4 <STRHAL_QSPI_Indirect_Read+0x180>

	__IO uint32_t *data_reg = &QUADSPI->DR;
 8007d48:	4b58      	ldr	r3, [pc, #352]	; (8007eac <STRHAL_QSPI_Indirect_Read+0x188>)
 8007d4a:	617b      	str	r3, [r7, #20]
	_clear_status(QUADSPI_FCR_CSMF | QUADSPI_FCR_CTCF | QUADSPI_FCR_CTEF | QUADSPI_FCR_CTOF);
 8007d4c:	201b      	movs	r0, #27
 8007d4e:	f000 f905 	bl	8007f5c <_clear_status>

	uint32_t ccr = 0x00000000;
 8007d52:	2300      	movs	r3, #0
 8007d54:	61fb      	str	r3, [r7, #28]

	ccr |= QUADSPI_CCR_FMODE_0;
 8007d56:	69fb      	ldr	r3, [r7, #28]
 8007d58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007d5c:	61fb      	str	r3, [r7, #28]

	if (n > 0)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d007      	beq.n	8007d74 <STRHAL_QSPI_Indirect_Read+0x50>
	{
		ccr |= QUADSPI_CCR_DMODE_0;
 8007d64:	69fb      	ldr	r3, [r7, #28]
 8007d66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d6a:	61fb      	str	r3, [r7, #28]
		WRITE_REG(QUADSPI->DLR, n - 1U);
 8007d6c:	4a50      	ldr	r2, [pc, #320]	; (8007eb0 <STRHAL_QSPI_Indirect_Read+0x18c>)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	3b01      	subs	r3, #1
 8007d72:	6113      	str	r3, [r2, #16]
	}
	if (cmd->alt_size > 0)
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	7a5b      	ldrb	r3, [r3, #9]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d010      	beq.n	8007d9e <STRHAL_QSPI_Indirect_Read+0x7a>
	{
		ccr |= QUADSPI_CCR_ABMODE_0;
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d82:	61fb      	str	r3, [r7, #28]
		ccr |= ((cmd->alt_size - 1) & 0x3) << QUADSPI_CCR_ABSIZE_Pos;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	7a5b      	ldrb	r3, [r3, #9]
 8007d88:	3b01      	subs	r3, #1
 8007d8a:	041b      	lsls	r3, r3, #16
 8007d8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007d90:	69fa      	ldr	r2, [r7, #28]
 8007d92:	4313      	orrs	r3, r2
 8007d94:	61fb      	str	r3, [r7, #28]
		WRITE_REG(QUADSPI->ABR, cmd->alt);
 8007d96:	4a46      	ldr	r2, [pc, #280]	; (8007eb0 <STRHAL_QSPI_Indirect_Read+0x18c>)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	61d3      	str	r3, [r2, #28]
	}

	ccr |= (cmd->dummy_size & 0x1F) << QUADSPI_CCR_DCYC_Pos;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	7c1b      	ldrb	r3, [r3, #16]
 8007da2:	049b      	lsls	r3, r3, #18
 8007da4:	f403 03f8 	and.w	r3, r3, #8126464	; 0x7c0000
 8007da8:	69fa      	ldr	r2, [r7, #28]
 8007daa:	4313      	orrs	r3, r2
 8007dac:	61fb      	str	r3, [r7, #28]

	if (cmd->instruction_size > 0)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	785b      	ldrb	r3, [r3, #1]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d026      	beq.n	8007e04 <STRHAL_QSPI_Indirect_Read+0xe0>
	{
		ccr |= QUADSPI_CCR_IMODE_0;
 8007db6:	69fb      	ldr	r3, [r7, #28]
 8007db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007dbc:	61fb      	str	r3, [r7, #28]
		ccr |= cmd->instruction << QUADSPI_CCR_INSTRUCTION_Pos;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	61fb      	str	r3, [r7, #28]
		if (cmd->addr_size > 0)
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	7a1b      	ldrb	r3, [r3, #8]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d014      	beq.n	8007dfc <STRHAL_QSPI_Indirect_Read+0xd8>
		{
			ccr |= QUADSPI_CCR_ADMODE_0;
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007dd8:	61fb      	str	r3, [r7, #28]
			ccr |= ((cmd->addr_size - 1) & 0x3) << QUADSPI_CCR_ADSIZE_Pos;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	7a1b      	ldrb	r3, [r3, #8]
 8007dde:	3b01      	subs	r3, #1
 8007de0:	031b      	lsls	r3, r3, #12
 8007de2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007de6:	69fa      	ldr	r2, [r7, #28]
 8007de8:	4313      	orrs	r3, r2
 8007dea:	61fb      	str	r3, [r7, #28]
			WRITE_REG(QUADSPI->CCR, ccr);
 8007dec:	4a30      	ldr	r2, [pc, #192]	; (8007eb0 <STRHAL_QSPI_Indirect_Read+0x18c>)
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	6153      	str	r3, [r2, #20]
			WRITE_REG(QUADSPI->AR, cmd->addr);
 8007df2:	4a2f      	ldr	r2, [pc, #188]	; (8007eb0 <STRHAL_QSPI_Indirect_Read+0x18c>)
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	6193      	str	r3, [r2, #24]
 8007dfa:	e01f      	b.n	8007e3c <STRHAL_QSPI_Indirect_Read+0x118>
		}
		else
		{
			WRITE_REG(QUADSPI->CCR, ccr);
 8007dfc:	4a2c      	ldr	r2, [pc, #176]	; (8007eb0 <STRHAL_QSPI_Indirect_Read+0x18c>)
 8007dfe:	69fb      	ldr	r3, [r7, #28]
 8007e00:	6153      	str	r3, [r2, #20]
 8007e02:	e01b      	b.n	8007e3c <STRHAL_QSPI_Indirect_Read+0x118>
		}
	}
	else
	{
		if (cmd->addr_size > 0)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	7a1b      	ldrb	r3, [r3, #8]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d014      	beq.n	8007e36 <STRHAL_QSPI_Indirect_Read+0x112>
		{
			ccr |= QUADSPI_CCR_ADMODE_0;
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007e12:	61fb      	str	r3, [r7, #28]
			ccr |= ((cmd->addr_size - 1) & 0x3) << QUADSPI_CCR_ADSIZE_Pos;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	7a1b      	ldrb	r3, [r3, #8]
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	031b      	lsls	r3, r3, #12
 8007e1c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007e20:	69fa      	ldr	r2, [r7, #28]
 8007e22:	4313      	orrs	r3, r2
 8007e24:	61fb      	str	r3, [r7, #28]
			WRITE_REG(QUADSPI->CCR, ccr);
 8007e26:	4a22      	ldr	r2, [pc, #136]	; (8007eb0 <STRHAL_QSPI_Indirect_Read+0x18c>)
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	6153      	str	r3, [r2, #20]
			WRITE_REG(QUADSPI->AR, cmd->addr);
 8007e2c:	4a20      	ldr	r2, [pc, #128]	; (8007eb0 <STRHAL_QSPI_Indirect_Read+0x18c>)
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	6193      	str	r3, [r2, #24]
 8007e34:	e002      	b.n	8007e3c <STRHAL_QSPI_Indirect_Read+0x118>
		}
		else
		{
			WRITE_REG(QUADSPI->CCR, ccr);
 8007e36:	4a1e      	ldr	r2, [pc, #120]	; (8007eb0 <STRHAL_QSPI_Indirect_Read+0x18c>)
 8007e38:	69fb      	ldr	r3, [r7, #28]
 8007e3a:	6153      	str	r3, [r2, #20]
		}
	}

	if (_wait_for_status(QUADSPI_SR_BUSY, tot) < 0)
 8007e3c:	887b      	ldrh	r3, [r7, #2]
 8007e3e:	4619      	mov	r1, r3
 8007e40:	2020      	movs	r0, #32
 8007e42:	f000 f837 	bl	8007eb4 <_wait_for_status>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	da01      	bge.n	8007e50 <STRHAL_QSPI_Indirect_Read+0x12c>
		return 0;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	e029      	b.n	8007ea4 <STRHAL_QSPI_Indirect_Read+0x180>

	uint32_t i;
	for (i = 0; i < n; ++i)
 8007e50:	2300      	movs	r3, #0
 8007e52:	61bb      	str	r3, [r7, #24]
 8007e54:	e016      	b.n	8007e84 <STRHAL_QSPI_Indirect_Read+0x160>
	{
		if (_wait_for_status(QUADSPI_SR_FTF | QUADSPI_SR_TCF, tot) < 0)
 8007e56:	887b      	ldrh	r3, [r7, #2]
 8007e58:	4619      	mov	r1, r3
 8007e5a:	2006      	movs	r0, #6
 8007e5c:	f000 f82a 	bl	8007eb4 <_wait_for_status>
 8007e60:	4603      	mov	r3, r0
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	da04      	bge.n	8007e70 <STRHAL_QSPI_Indirect_Read+0x14c>
		{
			_clear_status(QUADSPI_SR_TCF);
 8007e66:	2002      	movs	r0, #2
 8007e68:	f000 f878 	bl	8007f5c <_clear_status>
			return i;
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	e019      	b.n	8007ea4 <STRHAL_QSPI_Indirect_Read+0x180>
		}
		data[i] = *((__IO uint8_t*) data_reg);
 8007e70:	68ba      	ldr	r2, [r7, #8]
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	4413      	add	r3, r2
 8007e76:	697a      	ldr	r2, [r7, #20]
 8007e78:	7812      	ldrb	r2, [r2, #0]
 8007e7a:	b2d2      	uxtb	r2, r2
 8007e7c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n; ++i)
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	3301      	adds	r3, #1
 8007e82:	61bb      	str	r3, [r7, #24]
 8007e84:	69ba      	ldr	r2, [r7, #24]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d3e4      	bcc.n	8007e56 <STRHAL_QSPI_Indirect_Read+0x132>
	}

	if (_wait_for_status(QUADSPI_SR_TCF, tot) == 0)
 8007e8c:	887b      	ldrh	r3, [r7, #2]
 8007e8e:	4619      	mov	r1, r3
 8007e90:	2002      	movs	r0, #2
 8007e92:	f000 f80f 	bl	8007eb4 <_wait_for_status>
 8007e96:	4603      	mov	r3, r0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d102      	bne.n	8007ea2 <STRHAL_QSPI_Indirect_Read+0x17e>
	{
		_clear_status(QUADSPI_SR_TCF);
 8007e9c:	2002      	movs	r0, #2
 8007e9e:	f000 f85d 	bl	8007f5c <_clear_status>
	}
	return i;
 8007ea2:	69bb      	ldr	r3, [r7, #24]
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3720      	adds	r7, #32
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	a0001020 	.word	0xa0001020
 8007eb0:	a0001000 	.word	0xa0001000

08007eb4 <_wait_for_status>:

int _wait_for_status(uint32_t flag, uint16_t tot)
{
 8007eb4:	b5b0      	push	{r4, r5, r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	807b      	strh	r3, [r7, #2]
	uint64_t start = STRHAL_Systick_GetTick();
 8007ec0:	f000 f91c 	bl	80080fc <STRHAL_Systick_GetTick>
 8007ec4:	e9c7 0102 	strd	r0, r1, [r7, #8]

	while (!(QUADSPI->SR & flag))
 8007ec8:	e010      	b.n	8007eec <_wait_for_status+0x38>
	{
		if (STRHAL_Systick_GetTick() - start > tot)
 8007eca:	f000 f917 	bl	80080fc <STRHAL_Systick_GetTick>
 8007ece:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007ed2:	1a84      	subs	r4, r0, r2
 8007ed4:	eb61 0503 	sbc.w	r5, r1, r3
 8007ed8:	887a      	ldrh	r2, [r7, #2]
 8007eda:	f04f 0300 	mov.w	r3, #0
 8007ede:	42ab      	cmp	r3, r5
 8007ee0:	bf08      	it	eq
 8007ee2:	42a2      	cmpeq	r2, r4
 8007ee4:	d202      	bcs.n	8007eec <_wait_for_status+0x38>
			return -1;
 8007ee6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007eea:	e006      	b.n	8007efa <_wait_for_status+0x46>
	while (!(QUADSPI->SR & flag))
 8007eec:	4b05      	ldr	r3, [pc, #20]	; (8007f04 <_wait_for_status+0x50>)
 8007eee:	689a      	ldr	r2, [r3, #8]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	4013      	ands	r3, r2
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d0e8      	beq.n	8007eca <_wait_for_status+0x16>
	}
	return 0;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3710      	adds	r7, #16
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bdb0      	pop	{r4, r5, r7, pc}
 8007f02:	bf00      	nop
 8007f04:	a0001000 	.word	0xa0001000

08007f08 <_wait_for_status_clear>:

int _wait_for_status_clear(uint32_t flag, uint16_t tot)
{
 8007f08:	b5b0      	push	{r4, r5, r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	460b      	mov	r3, r1
 8007f12:	807b      	strh	r3, [r7, #2]
	uint64_t start = STRHAL_Systick_GetTick();
 8007f14:	f000 f8f2 	bl	80080fc <STRHAL_Systick_GetTick>
 8007f18:	e9c7 0102 	strd	r0, r1, [r7, #8]

	while (QUADSPI->SR & flag)
 8007f1c:	e010      	b.n	8007f40 <_wait_for_status_clear+0x38>
	{
		if (STRHAL_Systick_GetTick() - start > tot)
 8007f1e:	f000 f8ed 	bl	80080fc <STRHAL_Systick_GetTick>
 8007f22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f26:	1a84      	subs	r4, r0, r2
 8007f28:	eb61 0503 	sbc.w	r5, r1, r3
 8007f2c:	887a      	ldrh	r2, [r7, #2]
 8007f2e:	f04f 0300 	mov.w	r3, #0
 8007f32:	42ab      	cmp	r3, r5
 8007f34:	bf08      	it	eq
 8007f36:	42a2      	cmpeq	r2, r4
 8007f38:	d202      	bcs.n	8007f40 <_wait_for_status_clear+0x38>
			return -1;
 8007f3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f3e:	e006      	b.n	8007f4e <_wait_for_status_clear+0x46>
	while (QUADSPI->SR & flag)
 8007f40:	4b05      	ldr	r3, [pc, #20]	; (8007f58 <_wait_for_status_clear+0x50>)
 8007f42:	689a      	ldr	r2, [r3, #8]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	4013      	ands	r3, r2
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d1e8      	bne.n	8007f1e <_wait_for_status_clear+0x16>
	}
	return 0;
 8007f4c:	2300      	movs	r3, #0
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3710      	adds	r7, #16
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bdb0      	pop	{r4, r5, r7, pc}
 8007f56:	bf00      	nop
 8007f58:	a0001000 	.word	0xa0001000

08007f5c <_clear_status>:

void _clear_status(uint32_t flags)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
	QUADSPI->FCR |= (flags);
 8007f64:	4b05      	ldr	r3, [pc, #20]	; (8007f7c <_clear_status+0x20>)
 8007f66:	68da      	ldr	r2, [r3, #12]
 8007f68:	4904      	ldr	r1, [pc, #16]	; (8007f7c <_clear_status+0x20>)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	60cb      	str	r3, [r1, #12]
}
 8007f70:	bf00      	nop
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr
 8007f7c:	a0001000 	.word	0xa0001000

08007f80 <LL_AHB2_GRP1_EnableClock>:
{
 8007f80:	b480      	push	{r7}
 8007f82:	b085      	sub	sp, #20
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007f88:	4b08      	ldr	r3, [pc, #32]	; (8007fac <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007f8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f8c:	4907      	ldr	r1, [pc, #28]	; (8007fac <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007f94:	4b05      	ldr	r3, [pc, #20]	; (8007fac <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007f96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4013      	ands	r3, r2
 8007f9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
}
 8007fa0:	bf00      	nop
 8007fa2:	3714      	adds	r7, #20
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr
 8007fac:	40021000 	.word	0x40021000

08007fb0 <LL_APB1_GRP1_EnableClock>:
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b085      	sub	sp, #20
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8007fb8:	4b08      	ldr	r3, [pc, #32]	; (8007fdc <LL_APB1_GRP1_EnableClock+0x2c>)
 8007fba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007fbc:	4907      	ldr	r1, [pc, #28]	; (8007fdc <LL_APB1_GRP1_EnableClock+0x2c>)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8007fc4:	4b05      	ldr	r3, [pc, #20]	; (8007fdc <LL_APB1_GRP1_EnableClock+0x2c>)
 8007fc6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	4013      	ands	r3, r2
 8007fcc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007fce:	68fb      	ldr	r3, [r7, #12]
}
 8007fd0:	bf00      	nop
 8007fd2:	3714      	adds	r7, #20
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr
 8007fdc:	40021000 	.word	0x40021000

08007fe0 <LL_APB2_GRP1_EnableClock>:
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b085      	sub	sp, #20
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8007fe8:	4b08      	ldr	r3, [pc, #32]	; (800800c <LL_APB2_GRP1_EnableClock+0x2c>)
 8007fea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007fec:	4907      	ldr	r1, [pc, #28]	; (800800c <LL_APB2_GRP1_EnableClock+0x2c>)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8007ff4:	4b05      	ldr	r3, [pc, #20]	; (800800c <LL_APB2_GRP1_EnableClock+0x2c>)
 8007ff6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	4013      	ands	r3, r2
 8007ffc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
}
 8008000:	bf00      	nop
 8008002:	3714      	adds	r7, #20
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr
 800800c:	40021000 	.word	0x40021000

08008010 <LL_SPI_Disable>:
  * @rmtoll CR1          SPE           LL_SPI_Disable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Disable(SPI_TypeDef *SPIx)
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	601a      	str	r2, [r3, #0]
}
 8008024:	bf00      	nop
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <STRHAL_SPI_Init>:
static inline int _wait_for_rxtxend(SPI_TypeDef *spix, uint16_t tot);
static inline int _wait_for_rxne(SPI_TypeDef *spix, uint16_t tot);
static inline int _rx_flush(SPI_TypeDef *spix, uint16_t tot);

void STRHAL_SPI_Init()
{
 8008030:	b580      	push	{r7, lr}
 8008032:	af00      	add	r7, sp, #0
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8008034:	2004      	movs	r0, #4
 8008036:	f7ff ffa3 	bl	8007f80 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 800803a:	2020      	movs	r0, #32
 800803c:	f7ff ffa0 	bl	8007f80 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8008040:	2001      	movs	r0, #1
 8008042:	f7ff ff9d 	bl	8007f80 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8008046:	2002      	movs	r0, #2
 8008048:	f7ff ff9a 	bl	8007f80 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 800804c:	2010      	movs	r0, #16
 800804e:	f7ff ff97 	bl	8007f80 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 8008052:	2008      	movs	r0, #8
 8008054:	f7ff ff94 	bl	8007f80 <LL_AHB2_GRP1_EnableClock>

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8008058:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800805c:	f7ff ffc0 	bl	8007fe0 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8008060:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8008064:	f7ff ffa4 	bl	8007fb0 <LL_APB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8008068:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800806c:	f7ff ffa0 	bl	8007fb0 <LL_APB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI4);
 8008070:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008074:	f7ff ff9c 	bl	8007fb0 <LL_APB1_GRP1_EnableClock>

	LL_SPI_DeInit(SPI1);
 8008078:	480c      	ldr	r0, [pc, #48]	; (80080ac <STRHAL_SPI_Init+0x7c>)
 800807a:	f7fc fbdb 	bl	8004834 <LL_SPI_DeInit>
	LL_SPI_DeInit(SPI2);
 800807e:	480c      	ldr	r0, [pc, #48]	; (80080b0 <STRHAL_SPI_Init+0x80>)
 8008080:	f7fc fbd8 	bl	8004834 <LL_SPI_DeInit>
	LL_SPI_DeInit(SPI3);
 8008084:	480b      	ldr	r0, [pc, #44]	; (80080b4 <STRHAL_SPI_Init+0x84>)
 8008086:	f7fc fbd5 	bl	8004834 <LL_SPI_DeInit>
	LL_SPI_DeInit(SPI4);
 800808a:	480b      	ldr	r0, [pc, #44]	; (80080b8 <STRHAL_SPI_Init+0x88>)
 800808c:	f7fc fbd2 	bl	8004834 <LL_SPI_DeInit>

	LL_SPI_Disable(SPI1);
 8008090:	4806      	ldr	r0, [pc, #24]	; (80080ac <STRHAL_SPI_Init+0x7c>)
 8008092:	f7ff ffbd 	bl	8008010 <LL_SPI_Disable>
	LL_SPI_Disable(SPI2);
 8008096:	4806      	ldr	r0, [pc, #24]	; (80080b0 <STRHAL_SPI_Init+0x80>)
 8008098:	f7ff ffba 	bl	8008010 <LL_SPI_Disable>
	LL_SPI_Disable(SPI3);
 800809c:	4805      	ldr	r0, [pc, #20]	; (80080b4 <STRHAL_SPI_Init+0x84>)
 800809e:	f7ff ffb7 	bl	8008010 <LL_SPI_Disable>
	LL_SPI_Disable(SPI4);
 80080a2:	4805      	ldr	r0, [pc, #20]	; (80080b8 <STRHAL_SPI_Init+0x88>)
 80080a4:	f7ff ffb4 	bl	8008010 <LL_SPI_Disable>
}
 80080a8:	bf00      	nop
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	40013000 	.word	0x40013000
 80080b0:	40003800 	.word	0x40003800
 80080b4:	40003c00 	.word	0x40003c00
 80080b8:	40013c00 	.word	0x40013c00

080080bc <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 80080bc:	b480      	push	{r7}
 80080be:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80080c0:	4b05      	ldr	r3, [pc, #20]	; (80080d8 <LL_SYSTICK_EnableIT+0x1c>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a04      	ldr	r2, [pc, #16]	; (80080d8 <LL_SYSTICK_EnableIT+0x1c>)
 80080c6:	f043 0302 	orr.w	r3, r3, #2
 80080ca:	6013      	str	r3, [r2, #0]
}
 80080cc:	bf00      	nop
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	e000e010 	.word	0xe000e010

080080dc <STRHAL_SysTick_Init>:
#include <STRHAL_SysTick.h>

static volatile uint64_t systick_count = 0;

void STRHAL_SysTick_Init()
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	af00      	add	r7, sp, #0
	//LL_Init1msTick(SystemCoreClock);
	//1ms tick already in STRHAL.c sysclock init
	LL_SYSTICK_EnableIT();
 80080e0:	f7ff ffec 	bl	80080bc <LL_SYSTICK_EnableIT>
	systick_count = 0;
 80080e4:	4904      	ldr	r1, [pc, #16]	; (80080f8 <STRHAL_SysTick_Init+0x1c>)
 80080e6:	f04f 0200 	mov.w	r2, #0
 80080ea:	f04f 0300 	mov.w	r3, #0
 80080ee:	e9c1 2300 	strd	r2, r3, [r1]
}
 80080f2:	bf00      	nop
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	20000b58 	.word	0x20000b58

080080fc <STRHAL_Systick_GetTick>:
	uint64_t end = systick_count + ticks;
	while (systick_count < end);
}

uint64_t STRHAL_Systick_GetTick()
{
 80080fc:	b480      	push	{r7}
 80080fe:	af00      	add	r7, sp, #0
	return systick_count;
 8008100:	4b04      	ldr	r3, [pc, #16]	; (8008114 <STRHAL_Systick_GetTick+0x18>)
 8008102:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8008106:	4610      	mov	r0, r2
 8008108:	4619      	mov	r1, r3
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop
 8008114:	20000b58 	.word	0x20000b58

08008118 <SysTick_Handler>:

void SysTick_Handler()
{
 8008118:	b480      	push	{r7}
 800811a:	af00      	add	r7, sp, #0
	systick_count++;
 800811c:	4b06      	ldr	r3, [pc, #24]	; (8008138 <SysTick_Handler+0x20>)
 800811e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008122:	1c50      	adds	r0, r2, #1
 8008124:	f143 0100 	adc.w	r1, r3, #0
 8008128:	4b03      	ldr	r3, [pc, #12]	; (8008138 <SysTick_Handler+0x20>)
 800812a:	e9c3 0100 	strd	r0, r1, [r3]
}
 800812e:	bf00      	nop
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr
 8008138:	20000b58 	.word	0x20000b58

0800813c <__NVIC_GetPriorityGrouping>:
{
 800813c:	b480      	push	{r7}
 800813e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008140:	4b04      	ldr	r3, [pc, #16]	; (8008154 <__NVIC_GetPriorityGrouping+0x18>)
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	0a1b      	lsrs	r3, r3, #8
 8008146:	f003 0307 	and.w	r3, r3, #7
}
 800814a:	4618      	mov	r0, r3
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr
 8008154:	e000ed00 	.word	0xe000ed00

08008158 <__NVIC_EnableIRQ>:
{
 8008158:	b480      	push	{r7}
 800815a:	b083      	sub	sp, #12
 800815c:	af00      	add	r7, sp, #0
 800815e:	4603      	mov	r3, r0
 8008160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008166:	2b00      	cmp	r3, #0
 8008168:	db0b      	blt.n	8008182 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800816a:	79fb      	ldrb	r3, [r7, #7]
 800816c:	f003 021f 	and.w	r2, r3, #31
 8008170:	4907      	ldr	r1, [pc, #28]	; (8008190 <__NVIC_EnableIRQ+0x38>)
 8008172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008176:	095b      	lsrs	r3, r3, #5
 8008178:	2001      	movs	r0, #1
 800817a:	fa00 f202 	lsl.w	r2, r0, r2
 800817e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008182:	bf00      	nop
 8008184:	370c      	adds	r7, #12
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr
 800818e:	bf00      	nop
 8008190:	e000e100 	.word	0xe000e100

08008194 <__NVIC_SetPriority>:
{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
 800819a:	4603      	mov	r3, r0
 800819c:	6039      	str	r1, [r7, #0]
 800819e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80081a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	db0a      	blt.n	80081be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	b2da      	uxtb	r2, r3
 80081ac:	490c      	ldr	r1, [pc, #48]	; (80081e0 <__NVIC_SetPriority+0x4c>)
 80081ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081b2:	0112      	lsls	r2, r2, #4
 80081b4:	b2d2      	uxtb	r2, r2
 80081b6:	440b      	add	r3, r1
 80081b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80081bc:	e00a      	b.n	80081d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	b2da      	uxtb	r2, r3
 80081c2:	4908      	ldr	r1, [pc, #32]	; (80081e4 <__NVIC_SetPriority+0x50>)
 80081c4:	79fb      	ldrb	r3, [r7, #7]
 80081c6:	f003 030f 	and.w	r3, r3, #15
 80081ca:	3b04      	subs	r3, #4
 80081cc:	0112      	lsls	r2, r2, #4
 80081ce:	b2d2      	uxtb	r2, r2
 80081d0:	440b      	add	r3, r1
 80081d2:	761a      	strb	r2, [r3, #24]
}
 80081d4:	bf00      	nop
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr
 80081e0:	e000e100 	.word	0xe000e100
 80081e4:	e000ed00 	.word	0xe000ed00

080081e8 <NVIC_EncodePriority>:
{
 80081e8:	b480      	push	{r7}
 80081ea:	b089      	sub	sp, #36	; 0x24
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	60f8      	str	r0, [r7, #12]
 80081f0:	60b9      	str	r1, [r7, #8]
 80081f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f003 0307 	and.w	r3, r3, #7
 80081fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80081fc:	69fb      	ldr	r3, [r7, #28]
 80081fe:	f1c3 0307 	rsb	r3, r3, #7
 8008202:	2b04      	cmp	r3, #4
 8008204:	bf28      	it	cs
 8008206:	2304      	movcs	r3, #4
 8008208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800820a:	69fb      	ldr	r3, [r7, #28]
 800820c:	3304      	adds	r3, #4
 800820e:	2b06      	cmp	r3, #6
 8008210:	d902      	bls.n	8008218 <NVIC_EncodePriority+0x30>
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	3b03      	subs	r3, #3
 8008216:	e000      	b.n	800821a <NVIC_EncodePriority+0x32>
 8008218:	2300      	movs	r3, #0
 800821a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800821c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008220:	69bb      	ldr	r3, [r7, #24]
 8008222:	fa02 f303 	lsl.w	r3, r2, r3
 8008226:	43da      	mvns	r2, r3
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	401a      	ands	r2, r3
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008230:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	fa01 f303 	lsl.w	r3, r1, r3
 800823a:	43d9      	mvns	r1, r3
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008240:	4313      	orrs	r3, r2
}
 8008242:	4618      	mov	r0, r3
 8008244:	3724      	adds	r7, #36	; 0x24
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr
	...

08008250 <LL_AHB2_GRP1_EnableClock>:
{
 8008250:	b480      	push	{r7}
 8008252:	b085      	sub	sp, #20
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8008258:	4b08      	ldr	r3, [pc, #32]	; (800827c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800825a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800825c:	4907      	ldr	r1, [pc, #28]	; (800827c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	4313      	orrs	r3, r2
 8008262:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8008264:	4b05      	ldr	r3, [pc, #20]	; (800827c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8008266:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	4013      	ands	r3, r2
 800826c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800826e:	68fb      	ldr	r3, [r7, #12]
}
 8008270:	bf00      	nop
 8008272:	3714      	adds	r7, #20
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr
 800827c:	40021000 	.word	0x40021000

08008280 <LL_APB1_GRP1_EnableClock>:
{
 8008280:	b480      	push	{r7}
 8008282:	b085      	sub	sp, #20
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8008288:	4b08      	ldr	r3, [pc, #32]	; (80082ac <LL_APB1_GRP1_EnableClock+0x2c>)
 800828a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800828c:	4907      	ldr	r1, [pc, #28]	; (80082ac <LL_APB1_GRP1_EnableClock+0x2c>)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	4313      	orrs	r3, r2
 8008292:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8008294:	4b05      	ldr	r3, [pc, #20]	; (80082ac <LL_APB1_GRP1_EnableClock+0x2c>)
 8008296:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	4013      	ands	r3, r2
 800829c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800829e:	68fb      	ldr	r3, [r7, #12]
}
 80082a0:	bf00      	nop
 80082a2:	3714      	adds	r7, #20
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr
 80082ac:	40021000 	.word	0x40021000

080082b0 <LL_APB2_GRP1_EnableClock>:
{
 80082b0:	b480      	push	{r7}
 80082b2:	b085      	sub	sp, #20
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80082b8:	4b08      	ldr	r3, [pc, #32]	; (80082dc <LL_APB2_GRP1_EnableClock+0x2c>)
 80082ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80082bc:	4907      	ldr	r1, [pc, #28]	; (80082dc <LL_APB2_GRP1_EnableClock+0x2c>)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	4313      	orrs	r3, r2
 80082c2:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80082c4:	4b05      	ldr	r3, [pc, #20]	; (80082dc <LL_APB2_GRP1_EnableClock+0x2c>)
 80082c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4013      	ands	r3, r2
 80082cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80082ce:	68fb      	ldr	r3, [r7, #12]
}
 80082d0:	bf00      	nop
 80082d2:	3714      	adds	r7, #20
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr
 80082dc:	40021000 	.word	0x40021000

080082e0 <LL_TIM_EnableCounter>:
{
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f043 0201 	orr.w	r2, r3, #1
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	601a      	str	r2, [r3, #0]
}
 80082f4:	bf00      	nop
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <LL_TIM_IsEnabledCounter>:
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->CR1, TIM_CR1_CEN) == (TIM_CR1_CEN)) ? 1UL : 0UL);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f003 0301 	and.w	r3, r3, #1
 8008310:	2b01      	cmp	r3, #1
 8008312:	d101      	bne.n	8008318 <LL_TIM_IsEnabledCounter+0x18>
 8008314:	2301      	movs	r3, #1
 8008316:	e000      	b.n	800831a <LL_TIM_IsEnabledCounter+0x1a>
 8008318:	2300      	movs	r3, #0
}
 800831a:	4618      	mov	r0, r3
 800831c:	370c      	adds	r7, #12
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr

08008326 <LL_TIM_EnableARRPreload>:
{
 8008326:	b480      	push	{r7}
 8008328:	b083      	sub	sp, #12
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	601a      	str	r2, [r3, #0]
}
 800833a:	bf00      	nop
 800833c:	370c      	adds	r7, #12
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr

08008346 <LL_TIM_CC_EnableChannel>:
{
 8008346:	b480      	push	{r7}
 8008348:	b083      	sub	sp, #12
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
 800834e:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6a1a      	ldr	r2, [r3, #32]
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	431a      	orrs	r2, r3
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	621a      	str	r2, [r3, #32]
}
 800835c:	bf00      	nop
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <LL_TIM_CC_DisableChannel>:
{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6a1a      	ldr	r2, [r3, #32]
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	43db      	mvns	r3, r3
 800837a:	401a      	ands	r2, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	621a      	str	r2, [r3, #32]
}
 8008380:	bf00      	nop
 8008382:	370c      	adds	r7, #12
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <LL_TIM_OC_DisableFast>:
{
 800838c:	b480      	push	{r7}
 800838e:	b085      	sub	sp, #20
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	2b01      	cmp	r3, #1
 800839a:	d02e      	beq.n	80083fa <LL_TIM_OC_DisableFast+0x6e>
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	2b04      	cmp	r3, #4
 80083a0:	d029      	beq.n	80083f6 <LL_TIM_OC_DisableFast+0x6a>
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	2b10      	cmp	r3, #16
 80083a6:	d024      	beq.n	80083f2 <LL_TIM_OC_DisableFast+0x66>
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	2b40      	cmp	r3, #64	; 0x40
 80083ac:	d01f      	beq.n	80083ee <LL_TIM_OC_DisableFast+0x62>
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083b4:	d019      	beq.n	80083ea <LL_TIM_OC_DisableFast+0x5e>
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083bc:	d013      	beq.n	80083e6 <LL_TIM_OC_DisableFast+0x5a>
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083c4:	d00d      	beq.n	80083e2 <LL_TIM_OC_DisableFast+0x56>
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083cc:	d007      	beq.n	80083de <LL_TIM_OC_DisableFast+0x52>
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083d4:	d101      	bne.n	80083da <LL_TIM_OC_DisableFast+0x4e>
 80083d6:	2308      	movs	r3, #8
 80083d8:	e010      	b.n	80083fc <LL_TIM_OC_DisableFast+0x70>
 80083da:	2309      	movs	r3, #9
 80083dc:	e00e      	b.n	80083fc <LL_TIM_OC_DisableFast+0x70>
 80083de:	2307      	movs	r3, #7
 80083e0:	e00c      	b.n	80083fc <LL_TIM_OC_DisableFast+0x70>
 80083e2:	2306      	movs	r3, #6
 80083e4:	e00a      	b.n	80083fc <LL_TIM_OC_DisableFast+0x70>
 80083e6:	2305      	movs	r3, #5
 80083e8:	e008      	b.n	80083fc <LL_TIM_OC_DisableFast+0x70>
 80083ea:	2304      	movs	r3, #4
 80083ec:	e006      	b.n	80083fc <LL_TIM_OC_DisableFast+0x70>
 80083ee:	2303      	movs	r3, #3
 80083f0:	e004      	b.n	80083fc <LL_TIM_OC_DisableFast+0x70>
 80083f2:	2302      	movs	r3, #2
 80083f4:	e002      	b.n	80083fc <LL_TIM_OC_DisableFast+0x70>
 80083f6:	2301      	movs	r3, #1
 80083f8:	e000      	b.n	80083fc <LL_TIM_OC_DisableFast+0x70>
 80083fa:	2300      	movs	r3, #0
 80083fc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	3318      	adds	r3, #24
 8008402:	4619      	mov	r1, r3
 8008404:	7bfb      	ldrb	r3, [r7, #15]
 8008406:	4a0b      	ldr	r2, [pc, #44]	; (8008434 <LL_TIM_OC_DisableFast+0xa8>)
 8008408:	5cd3      	ldrb	r3, [r2, r3]
 800840a:	440b      	add	r3, r1
 800840c:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	7bfb      	ldrb	r3, [r7, #15]
 8008414:	4908      	ldr	r1, [pc, #32]	; (8008438 <LL_TIM_OC_DisableFast+0xac>)
 8008416:	5ccb      	ldrb	r3, [r1, r3]
 8008418:	4619      	mov	r1, r3
 800841a:	2304      	movs	r3, #4
 800841c:	408b      	lsls	r3, r1
 800841e:	43db      	mvns	r3, r3
 8008420:	401a      	ands	r2, r3
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	601a      	str	r2, [r3, #0]
}
 8008426:	bf00      	nop
 8008428:	3714      	adds	r7, #20
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr
 8008432:	bf00      	nop
 8008434:	0800a4b0 	.word	0x0800a4b0
 8008438:	0800a4bc 	.word	0x0800a4bc

0800843c <LL_TIM_OC_EnablePreload>:
{
 800843c:	b480      	push	{r7}
 800843e:	b085      	sub	sp, #20
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	2b01      	cmp	r3, #1
 800844a:	d02e      	beq.n	80084aa <LL_TIM_OC_EnablePreload+0x6e>
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	2b04      	cmp	r3, #4
 8008450:	d029      	beq.n	80084a6 <LL_TIM_OC_EnablePreload+0x6a>
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	2b10      	cmp	r3, #16
 8008456:	d024      	beq.n	80084a2 <LL_TIM_OC_EnablePreload+0x66>
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	2b40      	cmp	r3, #64	; 0x40
 800845c:	d01f      	beq.n	800849e <LL_TIM_OC_EnablePreload+0x62>
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008464:	d019      	beq.n	800849a <LL_TIM_OC_EnablePreload+0x5e>
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800846c:	d013      	beq.n	8008496 <LL_TIM_OC_EnablePreload+0x5a>
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008474:	d00d      	beq.n	8008492 <LL_TIM_OC_EnablePreload+0x56>
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800847c:	d007      	beq.n	800848e <LL_TIM_OC_EnablePreload+0x52>
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008484:	d101      	bne.n	800848a <LL_TIM_OC_EnablePreload+0x4e>
 8008486:	2308      	movs	r3, #8
 8008488:	e010      	b.n	80084ac <LL_TIM_OC_EnablePreload+0x70>
 800848a:	2309      	movs	r3, #9
 800848c:	e00e      	b.n	80084ac <LL_TIM_OC_EnablePreload+0x70>
 800848e:	2307      	movs	r3, #7
 8008490:	e00c      	b.n	80084ac <LL_TIM_OC_EnablePreload+0x70>
 8008492:	2306      	movs	r3, #6
 8008494:	e00a      	b.n	80084ac <LL_TIM_OC_EnablePreload+0x70>
 8008496:	2305      	movs	r3, #5
 8008498:	e008      	b.n	80084ac <LL_TIM_OC_EnablePreload+0x70>
 800849a:	2304      	movs	r3, #4
 800849c:	e006      	b.n	80084ac <LL_TIM_OC_EnablePreload+0x70>
 800849e:	2303      	movs	r3, #3
 80084a0:	e004      	b.n	80084ac <LL_TIM_OC_EnablePreload+0x70>
 80084a2:	2302      	movs	r3, #2
 80084a4:	e002      	b.n	80084ac <LL_TIM_OC_EnablePreload+0x70>
 80084a6:	2301      	movs	r3, #1
 80084a8:	e000      	b.n	80084ac <LL_TIM_OC_EnablePreload+0x70>
 80084aa:	2300      	movs	r3, #0
 80084ac:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	3318      	adds	r3, #24
 80084b2:	4619      	mov	r1, r3
 80084b4:	7bfb      	ldrb	r3, [r7, #15]
 80084b6:	4a0a      	ldr	r2, [pc, #40]	; (80084e0 <LL_TIM_OC_EnablePreload+0xa4>)
 80084b8:	5cd3      	ldrb	r3, [r2, r3]
 80084ba:	440b      	add	r3, r1
 80084bc:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	7bfb      	ldrb	r3, [r7, #15]
 80084c4:	4907      	ldr	r1, [pc, #28]	; (80084e4 <LL_TIM_OC_EnablePreload+0xa8>)
 80084c6:	5ccb      	ldrb	r3, [r1, r3]
 80084c8:	4619      	mov	r1, r3
 80084ca:	2308      	movs	r3, #8
 80084cc:	408b      	lsls	r3, r1
 80084ce:	431a      	orrs	r2, r3
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	601a      	str	r2, [r3, #0]
}
 80084d4:	bf00      	nop
 80084d6:	3714      	adds	r7, #20
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr
 80084e0:	0800a4b0 	.word	0x0800a4b0
 80084e4:	0800a4bc 	.word	0x0800a4bc

080084e8 <LL_TIM_DisableMasterSlaveMode>:
{
 80084e8:	b480      	push	{r7}
 80084ea:	b083      	sub	sp, #12
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	609a      	str	r2, [r3, #8]
}
 80084fc:	bf00      	nop
 80084fe:	370c      	adds	r7, #12
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr

08008508 <LL_TIM_EnableAutomaticOutput>:
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_AOE);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008514:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	645a      	str	r2, [r3, #68]	; 0x44
}
 800851c:	bf00      	nop
 800851e:	370c      	adds	r7, #12
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr

08008528 <LL_TIM_ClearFlag_UPDATE>:
{
 8008528:	b480      	push	{r7}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f06f 0201 	mvn.w	r2, #1
 8008536:	611a      	str	r2, [r3, #16]
}
 8008538:	bf00      	nop
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	691b      	ldr	r3, [r3, #16]
 8008550:	f003 0301 	and.w	r3, r3, #1
 8008554:	2b01      	cmp	r3, #1
 8008556:	d101      	bne.n	800855c <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8008558:	2301      	movs	r3, #1
 800855a:	e000      	b.n	800855e <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800855c:	2300      	movs	r3, #0
}
 800855e:	4618      	mov	r0, r3
 8008560:	370c      	adds	r7, #12
 8008562:	46bd      	mov	sp, r7
 8008564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008568:	4770      	bx	lr

0800856a <LL_TIM_EnableIT_UPDATE>:
{
 800856a:	b480      	push	{r7}
 800856c:	b083      	sub	sp, #12
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	f043 0201 	orr.w	r2, r3, #1
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	60da      	str	r2, [r3, #12]
}
 800857e:	bf00      	nop
 8008580:	370c      	adds	r7, #12
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr

0800858a <STRHAL_TIM_Init>:
 [STRHAL_TIM_TIM8_CH4N_PC13] = { .tim = &_tims[STRHAL_TIM_TIM8], .port = GPIOC, .pin = LL_GPIO_PIN_13, .afn = LL_GPIO_AF_4,  .n = LL_TIM_CHANNEL_CH4N, .ccr = &TIM8->CCR4, },
 [STRHAL_TIM_TIM8_CH4N_PD0]  = { .tim = &_tims[STRHAL_TIM_TIM8], .port = GPIOC, .pin = LL_GPIO_PIN_0,  .afn = LL_GPIO_AF_6,  .n = LL_TIM_CHANNEL_CH4N, .ccr = &TIM8->CCR4, },
 [STRHAL_TIM_TIM8_CH4_PD1]   = { .tim = &_tims[STRHAL_TIM_TIM8], .port = GPIOC, .pin = LL_GPIO_PIN_1,  .afn = LL_GPIO_AF_4,  .n = LL_TIM_CHANNEL_CH4,  .ccr = &TIM8->CCR4, }, };

void STRHAL_TIM_Init()
{
 800858a:	b580      	push	{r7, lr}
 800858c:	af00      	add	r7, sp, #0
	/* GPIO Ports Clock Enable */
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800858e:	2001      	movs	r0, #1
 8008590:	f7ff fe5e 	bl	8008250 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8008594:	2002      	movs	r0, #2
 8008596:	f7ff fe5b 	bl	8008250 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800859a:	2004      	movs	r0, #4
 800859c:	f7ff fe58 	bl	8008250 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 80085a0:	2008      	movs	r0, #8
 80085a2:	f7ff fe55 	bl	8008250 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 80085a6:	2010      	movs	r0, #16
 80085a8:	f7ff fe52 	bl	8008250 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 80085ac:	2020      	movs	r0, #32
 80085ae:	f7ff fe4f 	bl	8008250 <LL_AHB2_GRP1_EnableClock>

	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80085b2:	2001      	movs	r0, #1
 80085b4:	f7ff fe64 	bl	8008280 <LL_APB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80085b8:	2002      	movs	r0, #2
 80085ba:	f7ff fe61 	bl	8008280 <LL_APB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 80085be:	2004      	movs	r0, #4
 80085c0:	f7ff fe5e 	bl	8008280 <LL_APB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 80085c4:	2010      	movs	r0, #16
 80085c6:	f7ff fe5b 	bl	8008280 <LL_APB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 80085ca:	2020      	movs	r0, #32
 80085cc:	f7ff fe58 	bl	8008280 <LL_APB1_GRP1_EnableClock>

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 80085d0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80085d4:	f7ff fe6c 	bl	80082b0 <LL_APB2_GRP1_EnableClock>
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM8);
 80085d8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80085dc:	f7ff fe68 	bl	80082b0 <LL_APB2_GRP1_EnableClock>

	NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80085e0:	2036      	movs	r0, #54	; 0x36
 80085e2:	f7ff fdb9 	bl	8008158 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(TIM7_DAC_IRQn);
 80085e6:	2037      	movs	r0, #55	; 0x37
 80085e8:	f7ff fdb6 	bl	8008158 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM6_DAC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 1, 3));
 80085ec:	f7ff fda6 	bl	800813c <__NVIC_GetPriorityGrouping>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2203      	movs	r2, #3
 80085f4:	2101      	movs	r1, #1
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7ff fdf6 	bl	80081e8 <NVIC_EncodePriority>
 80085fc:	4603      	mov	r3, r0
 80085fe:	4619      	mov	r1, r3
 8008600:	2036      	movs	r0, #54	; 0x36
 8008602:	f7ff fdc7 	bl	8008194 <__NVIC_SetPriority>
	NVIC_SetPriority(TIM7_DAC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 1, 2)); //TODO check priorities
 8008606:	f7ff fd99 	bl	800813c <__NVIC_GetPriorityGrouping>
 800860a:	4603      	mov	r3, r0
 800860c:	2202      	movs	r2, #2
 800860e:	2101      	movs	r1, #1
 8008610:	4618      	mov	r0, r3
 8008612:	f7ff fde9 	bl	80081e8 <NVIC_EncodePriority>
 8008616:	4603      	mov	r3, r0
 8008618:	4619      	mov	r1, r3
 800861a:	2037      	movs	r0, #55	; 0x37
 800861c:	f7ff fdba 	bl	8008194 <__NVIC_SetPriority>
}
 8008620:	bf00      	nop
 8008622:	bd80      	pop	{r7, pc}

08008624 <STRHAL_TIM_PWM_Init>:

int32_t STRHAL_TIM_PWM_Init(STRHAL_TIM_TimerId_t id, uint16_t psc, uint16_t res)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b08a      	sub	sp, #40	; 0x28
 8008628:	af00      	add	r7, sp, #0
 800862a:	4603      	mov	r3, r0
 800862c:	71fb      	strb	r3, [r7, #7]
 800862e:	460b      	mov	r3, r1
 8008630:	80bb      	strh	r3, [r7, #4]
 8008632:	4613      	mov	r3, r2
 8008634:	807b      	strh	r3, [r7, #2]
	if (id > STRHAL_TIM_N_TIM || id < 0)
 8008636:	79fb      	ldrb	r3, [r7, #7]
 8008638:	2b05      	cmp	r3, #5
 800863a:	d902      	bls.n	8008642 <STRHAL_TIM_PWM_Init+0x1e>
		return -1;
 800863c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008640:	e06e      	b.n	8008720 <STRHAL_TIM_PWM_Init+0xfc>

	STRHAL_TIM_Timer_t *tim = &_tims[id];
 8008642:	79fb      	ldrb	r3, [r7, #7]
 8008644:	00db      	lsls	r3, r3, #3
 8008646:	4a38      	ldr	r2, [pc, #224]	; (8008728 <STRHAL_TIM_PWM_Init+0x104>)
 8008648:	4413      	add	r3, r2
 800864a:	627b      	str	r3, [r7, #36]	; 0x24
	if (tim->utype == STRHAL_TIM_USAGE_PWM)
 800864c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864e:	79db      	ldrb	r3, [r3, #7]
 8008650:	2b02      	cmp	r3, #2
 8008652:	d101      	bne.n	8008658 <STRHAL_TIM_PWM_Init+0x34>
		return 0; //TODO: return actual hardware Frequency
 8008654:	2300      	movs	r3, #0
 8008656:	e063      	b.n	8008720 <STRHAL_TIM_PWM_Init+0xfc>

	if (tim->utype != STRHAL_TIM_USAGE_000)
 8008658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865a:	79db      	ldrb	r3, [r3, #7]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d002      	beq.n	8008666 <STRHAL_TIM_PWM_Init+0x42>
		return -1;
 8008660:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008664:	e05c      	b.n	8008720 <STRHAL_TIM_PWM_Init+0xfc>

	LL_TIM_InitTypeDef TIM_InitStruct =
 8008666:	f107 030c 	add.w	r3, r7, #12
 800866a:	2200      	movs	r2, #0
 800866c:	601a      	str	r2, [r3, #0]
 800866e:	605a      	str	r2, [r3, #4]
 8008670:	609a      	str	r2, [r3, #8]
 8008672:	60da      	str	r2, [r3, #12]
 8008674:	611a      	str	r2, [r3, #16]
	{ 0 };
	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8008676:	2300      	movs	r3, #0
 8008678:	61bb      	str	r3, [r7, #24]
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERDIRECTION_UP;
 800867a:	2300      	movs	r3, #0
 800867c:	613b      	str	r3, [r7, #16]
	TIM_InitStruct.Autoreload = res - 1;
 800867e:	887b      	ldrh	r3, [r7, #2]
 8008680:	3b01      	subs	r3, #1
 8008682:	617b      	str	r3, [r7, #20]
	TIM_InitStruct.Prescaler = psc > 0 ? psc - 1 : psc;
 8008684:	88bb      	ldrh	r3, [r7, #4]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d003      	beq.n	8008692 <STRHAL_TIM_PWM_Init+0x6e>
 800868a:	88bb      	ldrh	r3, [r7, #4]
 800868c:	3b01      	subs	r3, #1
 800868e:	b29b      	uxth	r3, r3
 8008690:	e000      	b.n	8008694 <STRHAL_TIM_PWM_Init+0x70>
 8008692:	88bb      	ldrh	r3, [r7, #4]
 8008694:	81bb      	strh	r3, [r7, #12]
	LL_TIM_Init(tim->timx, &TIM_InitStruct);
 8008696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f107 020c 	add.w	r2, r7, #12
 800869e:	4611      	mov	r1, r2
 80086a0:	4618      	mov	r0, r3
 80086a2:	f7fc f9a3 	bl	80049ec <LL_TIM_Init>

	LL_TIM_EnableARRPreload(tim->timx);
 80086a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4618      	mov	r0, r3
 80086ac:	f7ff fe3b 	bl	8008326 <LL_TIM_EnableARRPreload>
	if (IS_TIM_BREAK_INSTANCE(tim->timx))
 80086b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a1d      	ldr	r2, [pc, #116]	; (800872c <STRHAL_TIM_PWM_Init+0x108>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d018      	beq.n	80086ec <STRHAL_TIM_PWM_Init+0xc8>
 80086ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a1c      	ldr	r2, [pc, #112]	; (8008730 <STRHAL_TIM_PWM_Init+0x10c>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d013      	beq.n	80086ec <STRHAL_TIM_PWM_Init+0xc8>
 80086c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a1a      	ldr	r2, [pc, #104]	; (8008734 <STRHAL_TIM_PWM_Init+0x110>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d00e      	beq.n	80086ec <STRHAL_TIM_PWM_Init+0xc8>
 80086ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a19      	ldr	r2, [pc, #100]	; (8008738 <STRHAL_TIM_PWM_Init+0x114>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d009      	beq.n	80086ec <STRHAL_TIM_PWM_Init+0xc8>
 80086d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a17      	ldr	r2, [pc, #92]	; (800873c <STRHAL_TIM_PWM_Init+0x118>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d004      	beq.n	80086ec <STRHAL_TIM_PWM_Init+0xc8>
 80086e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a16      	ldr	r2, [pc, #88]	; (8008740 <STRHAL_TIM_PWM_Init+0x11c>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d104      	bne.n	80086f6 <STRHAL_TIM_PWM_Init+0xd2>
		LL_TIM_EnableAutomaticOutput(tim->timx);
 80086ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4618      	mov	r0, r3
 80086f2:	f7ff ff09 	bl	8008508 <LL_TIM_EnableAutomaticOutput>

	LL_TIM_DisableMasterSlaveMode(tim->timx);
 80086f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4618      	mov	r0, r3
 80086fc:	f7ff fef4 	bl	80084e8 <LL_TIM_DisableMasterSlaveMode>

	tim->cfreq = 0;
 8008700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008702:	2200      	movs	r2, #0
 8008704:	809a      	strh	r2, [r3, #4]
	tim->utype = STRHAL_TIM_USAGE_PWM;
 8008706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008708:	2202      	movs	r2, #2
 800870a:	71da      	strb	r2, [r3, #7]

	uint16_t freq = SystemCoreClock / (res * psc);
 800870c:	4b0d      	ldr	r3, [pc, #52]	; (8008744 <STRHAL_TIM_PWM_Init+0x120>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	887a      	ldrh	r2, [r7, #2]
 8008712:	88b9      	ldrh	r1, [r7, #4]
 8008714:	fb01 f202 	mul.w	r2, r1, r2
 8008718:	fbb3 f3f2 	udiv	r3, r3, r2
 800871c:	847b      	strh	r3, [r7, #34]	; 0x22
	return freq;
 800871e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
}
 8008720:	4618      	mov	r0, r3
 8008722:	3728      	adds	r7, #40	; 0x28
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}
 8008728:	2000004c 	.word	0x2000004c
 800872c:	40012c00 	.word	0x40012c00
 8008730:	40013400 	.word	0x40013400
 8008734:	40014000 	.word	0x40014000
 8008738:	40014400 	.word	0x40014400
 800873c:	40014800 	.word	0x40014800
 8008740:	40015000 	.word	0x40015000
 8008744:	20000000 	.word	0x20000000

08008748 <STRHAL_TIM_PWM_AddChannel>:

int STRHAL_TIM_PWM_AddChannel(STRHAL_TIM_PWM_Channel_t *pwmChannel, STRHAL_TIM_ChannelId_t channelId, STRHAL_TIM_PWM_ChannelType_t pwmType)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b092      	sub	sp, #72	; 0x48
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	460b      	mov	r3, r1
 8008752:	70fb      	strb	r3, [r7, #3]
 8008754:	4613      	mov	r3, r2
 8008756:	70bb      	strb	r3, [r7, #2]
	if (channelId > STRHAL_TIM_N_TIM_CHANNELS)
 8008758:	78fb      	ldrb	r3, [r7, #3]
 800875a:	2b5b      	cmp	r3, #91	; 0x5b
 800875c:	d902      	bls.n	8008764 <STRHAL_TIM_PWM_AddChannel+0x1c>
		return -1;
 800875e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008762:	e060      	b.n	8008826 <STRHAL_TIM_PWM_AddChannel+0xde>

	const STRHAL_TIM_Channel_t *ch = &_tim_channels[channelId];
 8008764:	78fa      	ldrb	r2, [r7, #3]
 8008766:	4613      	mov	r3, r2
 8008768:	005b      	lsls	r3, r3, #1
 800876a:	4413      	add	r3, r2
 800876c:	00db      	lsls	r3, r3, #3
 800876e:	4a30      	ldr	r2, [pc, #192]	; (8008830 <STRHAL_TIM_PWM_AddChannel+0xe8>)
 8008770:	4413      	add	r3, r2
 8008772:	647b      	str	r3, [r7, #68]	; 0x44
	if (pwmType == STRHAL_TIM_PWM_CHANNELTYPE_SO)
 8008774:	78bb      	ldrb	r3, [r7, #2]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d14e      	bne.n	8008818 <STRHAL_TIM_PWM_AddChannel+0xd0>
	{

		LL_GPIO_InitTypeDef GPIO_InitStruct =
 800877a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800877e:	2200      	movs	r2, #0
 8008780:	601a      	str	r2, [r3, #0]
 8008782:	605a      	str	r2, [r3, #4]
 8008784:	609a      	str	r2, [r3, #8]
 8008786:	60da      	str	r2, [r3, #12]
 8008788:	611a      	str	r2, [r3, #16]
 800878a:	615a      	str	r2, [r3, #20]
		{ 0 };
		GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800878c:	2302      	movs	r3, #2
 800878e:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = ch->afn;
 8008790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	643b      	str	r3, [r7, #64]	; 0x40
		GPIO_InitStruct.Pin = ch->pin;
 8008796:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800879c:	2300      	movs	r3, #0
 800879e:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80087a0:	2300      	movs	r3, #0
 80087a2:	63fb      	str	r3, [r7, #60]	; 0x3c
		GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80087a4:	2302      	movs	r3, #2
 80087a6:	637b      	str	r3, [r7, #52]	; 0x34
		LL_GPIO_Init(ch->port, &GPIO_InitStruct);
 80087a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80087b0:	4611      	mov	r1, r2
 80087b2:	4618      	mov	r0, r3
 80087b4:	f7fb fcd5 	bl	8004162 <LL_GPIO_Init>

		LL_TIM_OC_InitTypeDef OC_InitStruct =
 80087b8:	f107 030c 	add.w	r3, r7, #12
 80087bc:	2220      	movs	r2, #32
 80087be:	2100      	movs	r1, #0
 80087c0:	4618      	mov	r0, r3
 80087c2:	f001 f865 	bl	8009890 <memset>
		{ 0 };
		OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80087c6:	2360      	movs	r3, #96	; 0x60
 80087c8:	60fb      	str	r3, [r7, #12]
		OC_InitStruct.OCState = LL_TIM_OCSTATE_ENABLE;
 80087ca:	2301      	movs	r3, #1
 80087cc:	613b      	str	r3, [r7, #16]
		OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80087ce:	2300      	movs	r3, #0
 80087d0:	61fb      	str	r3, [r7, #28]
		OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_LOW;
 80087d2:	2302      	movs	r3, #2
 80087d4:	623b      	str	r3, [r7, #32]
		OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 80087d6:	2300      	movs	r3, #0
 80087d8:	627b      	str	r3, [r7, #36]	; 0x24
		OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_HIGH;
 80087da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087de:	62bb      	str	r3, [r7, #40]	; 0x28
		LL_TIM_OC_Init(ch->tim->timx, ch->n, &OC_InitStruct);
 80087e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	6818      	ldr	r0, [r3, #0]
 80087e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087e8:	691b      	ldr	r3, [r3, #16]
 80087ea:	f107 020c 	add.w	r2, r7, #12
 80087ee:	4619      	mov	r1, r3
 80087f0:	f7fc f99e 	bl	8004b30 <LL_TIM_OC_Init>
		LL_TIM_OC_EnablePreload(ch->tim->timx, ch->n);
 80087f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087fc:	691b      	ldr	r3, [r3, #16]
 80087fe:	4619      	mov	r1, r3
 8008800:	4610      	mov	r0, r2
 8008802:	f7ff fe1b 	bl	800843c <LL_TIM_OC_EnablePreload>
		LL_TIM_OC_DisableFast(ch->tim->timx, ch->n);
 8008806:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800880e:	691b      	ldr	r3, [r3, #16]
 8008810:	4619      	mov	r1, r3
 8008812:	4610      	mov	r0, r2
 8008814:	f7ff fdba 	bl	800838c <LL_TIM_OC_DisableFast>
	else if (pwmType == STRHAL_TIM_PWM_CHANNELTYPE_IN)
	{
		//LL_TIM_IC_InitTypeDef IC_InitStruct = {0};
	}

	pwmChannel->channelId = channelId;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	78fa      	ldrb	r2, [r7, #3]
 800881c:	701a      	strb	r2, [r3, #0]
	pwmChannel->type = pwmType;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	78ba      	ldrb	r2, [r7, #2]
 8008822:	705a      	strb	r2, [r3, #1]
	return 0;
 8008824:	2300      	movs	r3, #0
}
 8008826:	4618      	mov	r0, r3
 8008828:	3748      	adds	r7, #72	; 0x48
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	0800a4c8 	.word	0x0800a4c8

08008834 <STRHAL_TIM_PWM_SetDuty>:
	LL_TIM_SetAutoReload(tim->timx, res - 1);
	return SystemCoreClock / (psc * res);
}

int32_t STRHAL_TIM_PWM_SetDuty(STRHAL_TIM_PWM_Channel_t *pwmChannel, uint16_t duty)
{
 8008834:	b480      	push	{r7}
 8008836:	b085      	sub	sp, #20
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	460b      	mov	r3, r1
 800883e:	807b      	strh	r3, [r7, #2]
	if (pwmChannel->channelId > STRHAL_TIM_N_TIM_CHANNELS)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	2b5b      	cmp	r3, #91	; 0x5b
 8008846:	d902      	bls.n	800884e <STRHAL_TIM_PWM_SetDuty+0x1a>
		return -1;
 8008848:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800884c:	e016      	b.n	800887c <STRHAL_TIM_PWM_SetDuty+0x48>

	const STRHAL_TIM_Channel_t *ch = &_tim_channels[pwmChannel->channelId];
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	781b      	ldrb	r3, [r3, #0]
 8008852:	461a      	mov	r2, r3
 8008854:	4613      	mov	r3, r2
 8008856:	005b      	lsls	r3, r3, #1
 8008858:	4413      	add	r3, r2
 800885a:	00db      	lsls	r3, r3, #3
 800885c:	4a0a      	ldr	r2, [pc, #40]	; (8008888 <STRHAL_TIM_PWM_SetDuty+0x54>)
 800885e:	4413      	add	r3, r2
 8008860:	60fb      	str	r3, [r7, #12]
	if (ch->tim->utype != STRHAL_TIM_USAGE_PWM)
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	79db      	ldrb	r3, [r3, #7]
 8008868:	2b02      	cmp	r3, #2
 800886a:	d002      	beq.n	8008872 <STRHAL_TIM_PWM_SetDuty+0x3e>
		return -1;
 800886c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008870:	e004      	b.n	800887c <STRHAL_TIM_PWM_SetDuty+0x48>

	*ch->ccr = duty;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	695b      	ldr	r3, [r3, #20]
 8008876:	887a      	ldrh	r2, [r7, #2]
 8008878:	601a      	str	r2, [r3, #0]
	return duty;
 800887a:	887b      	ldrh	r3, [r7, #2]
}
 800887c:	4618      	mov	r0, r3
 800887e:	3714      	adds	r7, #20
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr
 8008888:	0800a4c8 	.word	0x0800a4c8

0800888c <STRHAL_TIM_PWM_Enable>:

int STRHAL_TIM_PWM_Enable(STRHAL_TIM_PWM_Channel_t *pwmChannel, int enable)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b084      	sub	sp, #16
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
	if (pwmChannel->channelId > STRHAL_TIM_N_TIM_CHANNELS)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	2b5b      	cmp	r3, #91	; 0x5b
 800889c:	d902      	bls.n	80088a4 <STRHAL_TIM_PWM_Enable+0x18>
		return -1;
 800889e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80088a2:	e037      	b.n	8008914 <STRHAL_TIM_PWM_Enable+0x88>

	const STRHAL_TIM_Channel_t *ch = &_tim_channels[pwmChannel->channelId];
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	461a      	mov	r2, r3
 80088aa:	4613      	mov	r3, r2
 80088ac:	005b      	lsls	r3, r3, #1
 80088ae:	4413      	add	r3, r2
 80088b0:	00db      	lsls	r3, r3, #3
 80088b2:	4a1a      	ldr	r2, [pc, #104]	; (800891c <STRHAL_TIM_PWM_Enable+0x90>)
 80088b4:	4413      	add	r3, r2
 80088b6:	60fb      	str	r3, [r7, #12]
	if (ch->tim->utype != STRHAL_TIM_USAGE_PWM)
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	79db      	ldrb	r3, [r3, #7]
 80088be:	2b02      	cmp	r3, #2
 80088c0:	d002      	beq.n	80088c8 <STRHAL_TIM_PWM_Enable+0x3c>
		return -1;
 80088c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80088c6:	e025      	b.n	8008914 <STRHAL_TIM_PWM_Enable+0x88>

	if (enable)
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d018      	beq.n	8008900 <STRHAL_TIM_PWM_Enable+0x74>
	{
		LL_TIM_CC_EnableChannel(ch->tim->timx, ch->n);
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	681a      	ldr	r2, [r3, #0]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	691b      	ldr	r3, [r3, #16]
 80088d8:	4619      	mov	r1, r3
 80088da:	4610      	mov	r0, r2
 80088dc:	f7ff fd33 	bl	8008346 <LL_TIM_CC_EnableChannel>
		if (!LL_TIM_IsEnabledCounter(ch->tim->timx))
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4618      	mov	r0, r3
 80088e8:	f7ff fd0a 	bl	8008300 <LL_TIM_IsEnabledCounter>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d10f      	bne.n	8008912 <STRHAL_TIM_PWM_Enable+0x86>
			LL_TIM_EnableCounter(ch->tim->timx);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4618      	mov	r0, r3
 80088fa:	f7ff fcf1 	bl	80082e0 <LL_TIM_EnableCounter>
 80088fe:	e008      	b.n	8008912 <STRHAL_TIM_PWM_Enable+0x86>
	}
	else
	{
		LL_TIM_CC_DisableChannel(ch->tim->timx, ch->n);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	681a      	ldr	r2, [r3, #0]
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	691b      	ldr	r3, [r3, #16]
 800890a:	4619      	mov	r1, r3
 800890c:	4610      	mov	r0, r2
 800890e:	f7ff fd2b 	bl	8008368 <LL_TIM_CC_DisableChannel>
	}

	return enable;
 8008912:	683b      	ldr	r3, [r7, #0]
}
 8008914:	4618      	mov	r0, r3
 8008916:	3710      	adds	r7, #16
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}
 800891c:	0800a4c8 	.word	0x0800a4c8

08008920 <STRHAL_TIM_Heartbeat_Init>:

int32_t STRHAL_TIM_Heartbeat_Init(STRHAL_TIM_BasicTimerId_t id, uint16_t psc, uint16_t res)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b08a      	sub	sp, #40	; 0x28
 8008924:	af00      	add	r7, sp, #0
 8008926:	4603      	mov	r3, r0
 8008928:	71fb      	strb	r3, [r7, #7]
 800892a:	460b      	mov	r3, r1
 800892c:	80bb      	strh	r3, [r7, #4]
 800892e:	4613      	mov	r3, r2
 8008930:	807b      	strh	r3, [r7, #2]
	if (id > STRHAL_TIM_N_BASICTIM || id < 0)
 8008932:	79fb      	ldrb	r3, [r7, #7]
 8008934:	2b02      	cmp	r3, #2
 8008936:	d902      	bls.n	800893e <STRHAL_TIM_Heartbeat_Init+0x1e>
		return -1;
 8008938:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800893c:	e043      	b.n	80089c6 <STRHAL_TIM_Heartbeat_Init+0xa6>

	STRHAL_TIM_BasicTimer_t *tim = &_basicTims[id];
 800893e:	79fa      	ldrb	r2, [r7, #7]
 8008940:	4613      	mov	r3, r2
 8008942:	005b      	lsls	r3, r3, #1
 8008944:	4413      	add	r3, r2
 8008946:	009b      	lsls	r3, r3, #2
 8008948:	4a21      	ldr	r2, [pc, #132]	; (80089d0 <STRHAL_TIM_Heartbeat_Init+0xb0>)
 800894a:	4413      	add	r3, r2
 800894c:	627b      	str	r3, [r7, #36]	; 0x24
	if (tim->utype != STRHAL_TIM_USAGE_000)
 800894e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008950:	799b      	ldrb	r3, [r3, #6]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d002      	beq.n	800895c <STRHAL_TIM_Heartbeat_Init+0x3c>
		return -1;
 8008956:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800895a:	e034      	b.n	80089c6 <STRHAL_TIM_Heartbeat_Init+0xa6>

	LL_TIM_InitTypeDef TIM_InitStruct =
 800895c:	f107 030c 	add.w	r3, r7, #12
 8008960:	2200      	movs	r2, #0
 8008962:	601a      	str	r2, [r3, #0]
 8008964:	605a      	str	r2, [r3, #4]
 8008966:	609a      	str	r2, [r3, #8]
 8008968:	60da      	str	r2, [r3, #12]
 800896a:	611a      	str	r2, [r3, #16]
	{ 0 };
	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800896c:	2300      	movs	r3, #0
 800896e:	61bb      	str	r3, [r7, #24]
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERDIRECTION_UP;
 8008970:	2300      	movs	r3, #0
 8008972:	613b      	str	r3, [r7, #16]
	TIM_InitStruct.Autoreload = res - 1;
 8008974:	887b      	ldrh	r3, [r7, #2]
 8008976:	3b01      	subs	r3, #1
 8008978:	617b      	str	r3, [r7, #20]
	TIM_InitStruct.Prescaler = psc > 0 ? psc - 1 : psc;
 800897a:	88bb      	ldrh	r3, [r7, #4]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d003      	beq.n	8008988 <STRHAL_TIM_Heartbeat_Init+0x68>
 8008980:	88bb      	ldrh	r3, [r7, #4]
 8008982:	3b01      	subs	r3, #1
 8008984:	b29b      	uxth	r3, r3
 8008986:	e000      	b.n	800898a <STRHAL_TIM_Heartbeat_Init+0x6a>
 8008988:	88bb      	ldrh	r3, [r7, #4]
 800898a:	81bb      	strh	r3, [r7, #12]
	LL_TIM_Init(tim->timx, &TIM_InitStruct);
 800898c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f107 020c 	add.w	r2, r7, #12
 8008994:	4611      	mov	r1, r2
 8008996:	4618      	mov	r0, r3
 8008998:	f7fc f828 	bl	80049ec <LL_TIM_Init>

	LL_TIM_EnableARRPreload(tim->timx);
 800899c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4618      	mov	r0, r3
 80089a2:	f7ff fcc0 	bl	8008326 <LL_TIM_EnableARRPreload>

	tim->cfreq = 0;
 80089a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a8:	2200      	movs	r2, #0
 80089aa:	809a      	strh	r2, [r3, #4]
	tim->utype = STRHAL_TIM_USAGE_BRN;
 80089ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ae:	2203      	movs	r2, #3
 80089b0:	719a      	strb	r2, [r3, #6]

	uint16_t freq = SystemCoreClock / (res * psc);
 80089b2:	4b08      	ldr	r3, [pc, #32]	; (80089d4 <STRHAL_TIM_Heartbeat_Init+0xb4>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	887a      	ldrh	r2, [r7, #2]
 80089b8:	88b9      	ldrh	r1, [r7, #4]
 80089ba:	fb01 f202 	mul.w	r2, r1, r2
 80089be:	fbb3 f3f2 	udiv	r3, r3, r2
 80089c2:	847b      	strh	r3, [r7, #34]	; 0x22
	return freq;
 80089c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3728      	adds	r7, #40	; 0x28
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	bf00      	nop
 80089d0:	20000034 	.word	0x20000034
 80089d4:	20000000 	.word	0x20000000

080089d8 <STRHAL_TIM_Heartbeat_Subscribe>:

int STRHAL_TIM_Heartbeat_Subscribe(STRHAL_TIM_BasicTimerId_t id, STRHAL_TIM_Burnable_t burn)
{
 80089d8:	b480      	push	{r7}
 80089da:	b085      	sub	sp, #20
 80089dc:	af00      	add	r7, sp, #0
 80089de:	4603      	mov	r3, r0
 80089e0:	6039      	str	r1, [r7, #0]
 80089e2:	71fb      	strb	r3, [r7, #7]
	if (id > STRHAL_TIM_N_BASICTIM || id < 0)
 80089e4:	79fb      	ldrb	r3, [r7, #7]
 80089e6:	2b02      	cmp	r3, #2
 80089e8:	d902      	bls.n	80089f0 <STRHAL_TIM_Heartbeat_Subscribe+0x18>
		return -1;
 80089ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80089ee:	e012      	b.n	8008a16 <STRHAL_TIM_Heartbeat_Subscribe+0x3e>

	STRHAL_TIM_BasicTimer_t *tim = &_basicTims[id];
 80089f0:	79fa      	ldrb	r2, [r7, #7]
 80089f2:	4613      	mov	r3, r2
 80089f4:	005b      	lsls	r3, r3, #1
 80089f6:	4413      	add	r3, r2
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	4a0a      	ldr	r2, [pc, #40]	; (8008a24 <STRHAL_TIM_Heartbeat_Subscribe+0x4c>)
 80089fc:	4413      	add	r3, r2
 80089fe:	60fb      	str	r3, [r7, #12]
	if (tim->utype != STRHAL_TIM_USAGE_BRN)
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	799b      	ldrb	r3, [r3, #6]
 8008a04:	2b03      	cmp	r3, #3
 8008a06:	d002      	beq.n	8008a0e <STRHAL_TIM_Heartbeat_Subscribe+0x36>
		return -1;
 8008a08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a0c:	e003      	b.n	8008a16 <STRHAL_TIM_Heartbeat_Subscribe+0x3e>

	tim->burnie = burn;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	683a      	ldr	r2, [r7, #0]
 8008a12:	609a      	str	r2, [r3, #8]
	return 0;
 8008a14:	2300      	movs	r3, #0
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3714      	adds	r7, #20
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr
 8008a22:	bf00      	nop
 8008a24:	20000034 	.word	0x20000034

08008a28 <STRHAL_TIM_Heartbeat_StartHeartbeat>:

int STRHAL_TIM_Heartbeat_StartHeartbeat(STRHAL_TIM_BasicTimerId_t id)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b084      	sub	sp, #16
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	4603      	mov	r3, r0
 8008a30:	71fb      	strb	r3, [r7, #7]
	if (id > STRHAL_TIM_N_BASICTIM || id < 0)
 8008a32:	79fb      	ldrb	r3, [r7, #7]
 8008a34:	2b02      	cmp	r3, #2
 8008a36:	d902      	bls.n	8008a3e <STRHAL_TIM_Heartbeat_StartHeartbeat+0x16>
		return -1;
 8008a38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a3c:	e01e      	b.n	8008a7c <STRHAL_TIM_Heartbeat_StartHeartbeat+0x54>

	STRHAL_TIM_BasicTimer_t *tim = &_basicTims[id];
 8008a3e:	79fa      	ldrb	r2, [r7, #7]
 8008a40:	4613      	mov	r3, r2
 8008a42:	005b      	lsls	r3, r3, #1
 8008a44:	4413      	add	r3, r2
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	4a0e      	ldr	r2, [pc, #56]	; (8008a84 <STRHAL_TIM_Heartbeat_StartHeartbeat+0x5c>)
 8008a4a:	4413      	add	r3, r2
 8008a4c:	60fb      	str	r3, [r7, #12]
	if (tim->utype != STRHAL_TIM_USAGE_BRN)
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	799b      	ldrb	r3, [r3, #6]
 8008a52:	2b03      	cmp	r3, #3
 8008a54:	d002      	beq.n	8008a5c <STRHAL_TIM_Heartbeat_StartHeartbeat+0x34>
		return -1;
 8008a56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a5a:	e00f      	b.n	8008a7c <STRHAL_TIM_Heartbeat_StartHeartbeat+0x54>

	LL_TIM_ClearFlag_UPDATE(tim->timx);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4618      	mov	r0, r3
 8008a62:	f7ff fd61 	bl	8008528 <LL_TIM_ClearFlag_UPDATE>
	LL_TIM_EnableIT_UPDATE(tim->timx);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f7ff fd7d 	bl	800856a <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(tim->timx);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4618      	mov	r0, r3
 8008a76:	f7ff fc33 	bl	80082e0 <LL_TIM_EnableCounter>
	return 0;
 8008a7a:	2300      	movs	r3, #0
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3710      	adds	r7, #16
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}
 8008a84:	20000034 	.word	0x20000034

08008a88 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
	if (LL_TIM_IsActiveFlag_UPDATE(TIM6))
 8008a8e:	480b      	ldr	r0, [pc, #44]	; (8008abc <TIM6_DAC_IRQHandler+0x34>)
 8008a90:	f7ff fd58 	bl	8008544 <LL_TIM_IsActiveFlag_UPDATE>
 8008a94:	4603      	mov	r3, r0
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d00b      	beq.n	8008ab2 <TIM6_DAC_IRQHandler+0x2a>
	{
		STRHAL_TIM_BasicTimer_t *tim = &_basicTims[STRHAL_TIM_TIM6];
 8008a9a:	4b09      	ldr	r3, [pc, #36]	; (8008ac0 <TIM6_DAC_IRQHandler+0x38>)
 8008a9c:	607b      	str	r3, [r7, #4]

		if (tim->burnie != NULL)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d002      	beq.n	8008aac <TIM6_DAC_IRQHandler+0x24>
			tim->burnie();
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	4798      	blx	r3

		LL_TIM_ClearFlag_UPDATE(TIM6);
 8008aac:	4803      	ldr	r0, [pc, #12]	; (8008abc <TIM6_DAC_IRQHandler+0x34>)
 8008aae:	f7ff fd3b 	bl	8008528 <LL_TIM_ClearFlag_UPDATE>
	}
}
 8008ab2:	bf00      	nop
 8008ab4:	3708      	adds	r7, #8
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	bf00      	nop
 8008abc:	40001000 	.word	0x40001000
 8008ac0:	20000034 	.word	0x20000034

08008ac4 <TIM7_IRQHandler>:

void TIM7_IRQHandler(void)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b082      	sub	sp, #8
 8008ac8:	af00      	add	r7, sp, #0
	if (LL_TIM_IsActiveFlag_UPDATE(TIM7))
 8008aca:	480b      	ldr	r0, [pc, #44]	; (8008af8 <TIM7_IRQHandler+0x34>)
 8008acc:	f7ff fd3a 	bl	8008544 <LL_TIM_IsActiveFlag_UPDATE>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d00b      	beq.n	8008aee <TIM7_IRQHandler+0x2a>
	{
		STRHAL_TIM_BasicTimer_t *tim = &_basicTims[STRHAL_TIM_TIM7];
 8008ad6:	4b09      	ldr	r3, [pc, #36]	; (8008afc <TIM7_IRQHandler+0x38>)
 8008ad8:	607b      	str	r3, [r7, #4]

		if (tim->burnie != NULL)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d002      	beq.n	8008ae8 <TIM7_IRQHandler+0x24>
			tim->burnie();
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	4798      	blx	r3

		LL_TIM_ClearFlag_UPDATE(TIM7);
 8008ae8:	4803      	ldr	r0, [pc, #12]	; (8008af8 <TIM7_IRQHandler+0x34>)
 8008aea:	f7ff fd1d 	bl	8008528 <LL_TIM_ClearFlag_UPDATE>
	}
}
 8008aee:	bf00      	nop
 8008af0:	3708      	adds	r7, #8
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	40001400 	.word	0x40001400
 8008afc:	20000040 	.word	0x20000040

08008b00 <__NVIC_GetPriorityGrouping>:
{
 8008b00:	b480      	push	{r7}
 8008b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008b04:	4b04      	ldr	r3, [pc, #16]	; (8008b18 <__NVIC_GetPriorityGrouping+0x18>)
 8008b06:	68db      	ldr	r3, [r3, #12]
 8008b08:	0a1b      	lsrs	r3, r3, #8
 8008b0a:	f003 0307 	and.w	r3, r3, #7
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr
 8008b18:	e000ed00 	.word	0xe000ed00

08008b1c <__NVIC_EnableIRQ>:
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b083      	sub	sp, #12
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	4603      	mov	r3, r0
 8008b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	db0b      	blt.n	8008b46 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008b2e:	79fb      	ldrb	r3, [r7, #7]
 8008b30:	f003 021f 	and.w	r2, r3, #31
 8008b34:	4907      	ldr	r1, [pc, #28]	; (8008b54 <__NVIC_EnableIRQ+0x38>)
 8008b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b3a:	095b      	lsrs	r3, r3, #5
 8008b3c:	2001      	movs	r0, #1
 8008b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8008b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008b46:	bf00      	nop
 8008b48:	370c      	adds	r7, #12
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b50:	4770      	bx	lr
 8008b52:	bf00      	nop
 8008b54:	e000e100 	.word	0xe000e100

08008b58 <__NVIC_SetPriority>:
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b083      	sub	sp, #12
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	4603      	mov	r3, r0
 8008b60:	6039      	str	r1, [r7, #0]
 8008b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	db0a      	blt.n	8008b82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	b2da      	uxtb	r2, r3
 8008b70:	490c      	ldr	r1, [pc, #48]	; (8008ba4 <__NVIC_SetPriority+0x4c>)
 8008b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b76:	0112      	lsls	r2, r2, #4
 8008b78:	b2d2      	uxtb	r2, r2
 8008b7a:	440b      	add	r3, r1
 8008b7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008b80:	e00a      	b.n	8008b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	b2da      	uxtb	r2, r3
 8008b86:	4908      	ldr	r1, [pc, #32]	; (8008ba8 <__NVIC_SetPriority+0x50>)
 8008b88:	79fb      	ldrb	r3, [r7, #7]
 8008b8a:	f003 030f 	and.w	r3, r3, #15
 8008b8e:	3b04      	subs	r3, #4
 8008b90:	0112      	lsls	r2, r2, #4
 8008b92:	b2d2      	uxtb	r2, r2
 8008b94:	440b      	add	r3, r1
 8008b96:	761a      	strb	r2, [r3, #24]
}
 8008b98:	bf00      	nop
 8008b9a:	370c      	adds	r7, #12
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr
 8008ba4:	e000e100 	.word	0xe000e100
 8008ba8:	e000ed00 	.word	0xe000ed00

08008bac <NVIC_EncodePriority>:
{
 8008bac:	b480      	push	{r7}
 8008bae:	b089      	sub	sp, #36	; 0x24
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f003 0307 	and.w	r3, r3, #7
 8008bbe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008bc0:	69fb      	ldr	r3, [r7, #28]
 8008bc2:	f1c3 0307 	rsb	r3, r3, #7
 8008bc6:	2b04      	cmp	r3, #4
 8008bc8:	bf28      	it	cs
 8008bca:	2304      	movcs	r3, #4
 8008bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008bce:	69fb      	ldr	r3, [r7, #28]
 8008bd0:	3304      	adds	r3, #4
 8008bd2:	2b06      	cmp	r3, #6
 8008bd4:	d902      	bls.n	8008bdc <NVIC_EncodePriority+0x30>
 8008bd6:	69fb      	ldr	r3, [r7, #28]
 8008bd8:	3b03      	subs	r3, #3
 8008bda:	e000      	b.n	8008bde <NVIC_EncodePriority+0x32>
 8008bdc:	2300      	movs	r3, #0
 8008bde:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008be0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008be4:	69bb      	ldr	r3, [r7, #24]
 8008be6:	fa02 f303 	lsl.w	r3, r2, r3
 8008bea:	43da      	mvns	r2, r3
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	401a      	ands	r2, r3
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008bf4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8008bfe:	43d9      	mvns	r1, r3
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008c04:	4313      	orrs	r3, r2
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3724      	adds	r7, #36	; 0x24
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr
	...

08008c14 <LL_AHB1_GRP1_EnableClock>:
{
 8008c14:	b480      	push	{r7}
 8008c16:	b085      	sub	sp, #20
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8008c1c:	4b08      	ldr	r3, [pc, #32]	; (8008c40 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008c1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c20:	4907      	ldr	r1, [pc, #28]	; (8008c40 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	4313      	orrs	r3, r2
 8008c26:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8008c28:	4b05      	ldr	r3, [pc, #20]	; (8008c40 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008c2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	4013      	ands	r3, r2
 8008c30:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008c32:	68fb      	ldr	r3, [r7, #12]
}
 8008c34:	bf00      	nop
 8008c36:	3714      	adds	r7, #20
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr
 8008c40:	40021000 	.word	0x40021000

08008c44 <LL_AHB2_GRP1_EnableClock>:
{
 8008c44:	b480      	push	{r7}
 8008c46:	b085      	sub	sp, #20
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8008c4c:	4b08      	ldr	r3, [pc, #32]	; (8008c70 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8008c4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c50:	4907      	ldr	r1, [pc, #28]	; (8008c70 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	4313      	orrs	r3, r2
 8008c56:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8008c58:	4b05      	ldr	r3, [pc, #20]	; (8008c70 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8008c5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	4013      	ands	r3, r2
 8008c60:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008c62:	68fb      	ldr	r3, [r7, #12]
}
 8008c64:	bf00      	nop
 8008c66:	3714      	adds	r7, #20
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr
 8008c70:	40021000 	.word	0x40021000

08008c74 <LL_APB1_GRP1_EnableClock>:
{
 8008c74:	b480      	push	{r7}
 8008c76:	b085      	sub	sp, #20
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8008c7c:	4b08      	ldr	r3, [pc, #32]	; (8008ca0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8008c7e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008c80:	4907      	ldr	r1, [pc, #28]	; (8008ca0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	4313      	orrs	r3, r2
 8008c86:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8008c88:	4b05      	ldr	r3, [pc, #20]	; (8008ca0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8008c8a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	4013      	ands	r3, r2
 8008c90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008c92:	68fb      	ldr	r3, [r7, #12]
}
 8008c94:	bf00      	nop
 8008c96:	3714      	adds	r7, #20
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr
 8008ca0:	40021000 	.word	0x40021000

08008ca4 <LL_DMA_GetDataLength>:
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b085      	sub	sp, #20
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	60fb      	str	r3, [r7, #12]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 8008cb2:	4a07      	ldr	r2, [pc, #28]	; (8008cd0 <LL_DMA_GetDataLength+0x2c>)
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	461a      	mov	r2, r3
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	4413      	add	r3, r2
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	b29b      	uxth	r3, r3
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3714      	adds	r7, #20
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr
 8008cd0:	0800ad50 	.word	0x0800ad50

08008cd4 <LL_DMA_IsActiveFlag_TC1>:
  * @rmtoll ISR          TCIF1         LL_DMA_IsActiveFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC1(DMA_TypeDef *DMAx)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1)) ? 1UL : 0UL);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f003 0302 	and.w	r3, r3, #2
 8008ce4:	2b02      	cmp	r3, #2
 8008ce6:	d101      	bne.n	8008cec <LL_DMA_IsActiveFlag_TC1+0x18>
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e000      	b.n	8008cee <LL_DMA_IsActiveFlag_TC1+0x1a>
 8008cec:	2300      	movs	r3, #0
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	370c      	adds	r7, #12
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr

08008cfa <LL_DMA_IsActiveFlag_TC2>:
  * @rmtoll ISR          TCIF2         LL_DMA_IsActiveFlag_TC2
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC2(DMA_TypeDef *DMAx)
{
 8008cfa:	b480      	push	{r7}
 8008cfc:	b083      	sub	sp, #12
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF2) == (DMA_ISR_TCIF2)) ? 1UL : 0UL);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f003 0320 	and.w	r3, r3, #32
 8008d0a:	2b20      	cmp	r3, #32
 8008d0c:	d101      	bne.n	8008d12 <LL_DMA_IsActiveFlag_TC2+0x18>
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e000      	b.n	8008d14 <LL_DMA_IsActiveFlag_TC2+0x1a>
 8008d12:	2300      	movs	r3, #0
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	370c      	adds	r7, #12
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <LL_DMA_IsActiveFlag_TE1>:
  * @rmtoll ISR          TEIF1         LL_DMA_IsActiveFlag_TE1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE1(DMA_TypeDef *DMAx)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b083      	sub	sp, #12
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF1) == (DMA_ISR_TEIF1)) ? 1UL : 0UL);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f003 0308 	and.w	r3, r3, #8
 8008d30:	2b08      	cmp	r3, #8
 8008d32:	d101      	bne.n	8008d38 <LL_DMA_IsActiveFlag_TE1+0x18>
 8008d34:	2301      	movs	r3, #1
 8008d36:	e000      	b.n	8008d3a <LL_DMA_IsActiveFlag_TE1+0x1a>
 8008d38:	2300      	movs	r3, #0
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	370c      	adds	r7, #12
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr

08008d46 <LL_DMA_IsActiveFlag_TE2>:
  * @rmtoll ISR          TEIF2         LL_DMA_IsActiveFlag_TE2
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE2(DMA_TypeDef *DMAx)
{
 8008d46:	b480      	push	{r7}
 8008d48:	b083      	sub	sp, #12
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF2) == (DMA_ISR_TEIF2)) ? 1UL : 0UL);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d56:	2b80      	cmp	r3, #128	; 0x80
 8008d58:	d101      	bne.n	8008d5e <LL_DMA_IsActiveFlag_TE2+0x18>
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	e000      	b.n	8008d60 <LL_DMA_IsActiveFlag_TE2+0x1a>
 8008d5e:	2300      	movs	r3, #0
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	370c      	adds	r7, #12
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <LL_DMA_ClearFlag_TC1>:
  * @rmtoll IFCR         CTCIF1        LL_DMA_ClearFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b083      	sub	sp, #12
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2202      	movs	r2, #2
 8008d78:	605a      	str	r2, [r3, #4]
}
 8008d7a:	bf00      	nop
 8008d7c:	370c      	adds	r7, #12
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr

08008d86 <LL_DMA_ClearFlag_TC2>:
  * @rmtoll IFCR         CTCIF2        LL_DMA_ClearFlag_TC2
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC2(DMA_TypeDef *DMAx)
{
 8008d86:	b480      	push	{r7}
 8008d88:	b083      	sub	sp, #12
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF2);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2220      	movs	r2, #32
 8008d92:	605a      	str	r2, [r3, #4]
}
 8008d94:	bf00      	nop
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <LL_DMA_ClearFlag_TE1>:
  * @rmtoll IFCR         CTEIF1        LL_DMA_ClearFlag_TE1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE1(DMA_TypeDef *DMAx)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b083      	sub	sp, #12
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF1);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2208      	movs	r2, #8
 8008dac:	605a      	str	r2, [r3, #4]
}
 8008dae:	bf00      	nop
 8008db0:	370c      	adds	r7, #12
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr

08008dba <LL_DMA_ClearFlag_TE2>:
  * @rmtoll IFCR         CTEIF2        LL_DMA_ClearFlag_TE2
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE2(DMA_TypeDef *DMAx)
{
 8008dba:	b480      	push	{r7}
 8008dbc:	b083      	sub	sp, #12
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF2);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2280      	movs	r2, #128	; 0x80
 8008dc6:	605a      	str	r2, [r3, #4]
}
 8008dc8:	bf00      	nop
 8008dca:	370c      	adds	r7, #12
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b085      	sub	sp, #20
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 8008de2:	4a0c      	ldr	r2, [pc, #48]	; (8008e14 <LL_DMA_EnableIT_TC+0x40>)
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	4413      	add	r3, r2
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	461a      	mov	r2, r3
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	4413      	add	r3, r2
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4908      	ldr	r1, [pc, #32]	; (8008e14 <LL_DMA_EnableIT_TC+0x40>)
 8008df4:	683a      	ldr	r2, [r7, #0]
 8008df6:	440a      	add	r2, r1
 8008df8:	7812      	ldrb	r2, [r2, #0]
 8008dfa:	4611      	mov	r1, r2
 8008dfc:	68fa      	ldr	r2, [r7, #12]
 8008dfe:	440a      	add	r2, r1
 8008e00:	f043 0302 	orr.w	r3, r3, #2
 8008e04:	6013      	str	r3, [r2, #0]
}
 8008e06:	bf00      	nop
 8008e08:	3714      	adds	r7, #20
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr
 8008e12:	bf00      	nop
 8008e14:	0800ad50 	.word	0x0800ad50

08008e18 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b085      	sub	sp, #20
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TEIE);
 8008e26:	4a0c      	ldr	r2, [pc, #48]	; (8008e58 <LL_DMA_EnableIT_TE+0x40>)
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	4413      	add	r3, r2
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	461a      	mov	r2, r3
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	4413      	add	r3, r2
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4908      	ldr	r1, [pc, #32]	; (8008e58 <LL_DMA_EnableIT_TE+0x40>)
 8008e38:	683a      	ldr	r2, [r7, #0]
 8008e3a:	440a      	add	r2, r1
 8008e3c:	7812      	ldrb	r2, [r2, #0]
 8008e3e:	4611      	mov	r1, r2
 8008e40:	68fa      	ldr	r2, [r7, #12]
 8008e42:	440a      	add	r2, r1
 8008e44:	f043 0308 	orr.w	r3, r3, #8
 8008e48:	6013      	str	r3, [r2, #0]
}
 8008e4a:	bf00      	nop
 8008e4c:	3714      	adds	r7, #20
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr
 8008e56:	bf00      	nop
 8008e58:	0800ad50 	.word	0x0800ad50

08008e5c <LL_DMA_IsEnabledIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b085      	sub	sp, #20
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	60fb      	str	r3, [r7, #12]
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8008e6a:	4a0a      	ldr	r2, [pc, #40]	; (8008e94 <LL_DMA_IsEnabledIT_TC+0x38>)
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	4413      	add	r3, r2
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	461a      	mov	r2, r3
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	4413      	add	r3, r2
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f003 0302 	and.w	r3, r3, #2
                    DMA_CCR_TCIE) == (DMA_CCR_TCIE)) ? 1UL : 0UL);
 8008e7e:	2b02      	cmp	r3, #2
 8008e80:	d101      	bne.n	8008e86 <LL_DMA_IsEnabledIT_TC+0x2a>
 8008e82:	2301      	movs	r3, #1
 8008e84:	e000      	b.n	8008e88 <LL_DMA_IsEnabledIT_TC+0x2c>
 8008e86:	2300      	movs	r3, #0
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3714      	adds	r7, #20
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr
 8008e94:	0800ad50 	.word	0x0800ad50

08008e98 <LL_DMA_IsEnabledIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b085      	sub	sp, #20
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	60fb      	str	r3, [r7, #12]
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8008ea6:	4a0a      	ldr	r2, [pc, #40]	; (8008ed0 <LL_DMA_IsEnabledIT_TE+0x38>)
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	4413      	add	r3, r2
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	461a      	mov	r2, r3
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	4413      	add	r3, r2
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f003 0308 	and.w	r3, r3, #8
                    DMA_CCR_TEIE) == (DMA_CCR_TEIE)) ? 1UL : 0UL);
 8008eba:	2b08      	cmp	r3, #8
 8008ebc:	d101      	bne.n	8008ec2 <LL_DMA_IsEnabledIT_TE+0x2a>
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e000      	b.n	8008ec4 <LL_DMA_IsEnabledIT_TE+0x2c>
 8008ec2:	2300      	movs	r3, #0
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3714      	adds	r7, #20
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr
 8008ed0:	0800ad50 	.word	0x0800ad50

08008ed4 <LL_USART_Enable>:
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f043 0201 	orr.w	r2, r3, #1
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	601a      	str	r2, [r3, #0]
}
 8008ee8:	bf00      	nop
 8008eea:	370c      	adds	r7, #12
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <LL_USART_Disable>:
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f023 0201 	bic.w	r2, r3, #1
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	601a      	str	r2, [r3, #0]
}
 8008f08:	bf00      	nop
 8008f0a:	370c      	adds	r7, #12
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <LL_USART_DisableFIFO>:
{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	601a      	str	r2, [r3, #0]
}
 8008f28:	bf00      	nop
 8008f2a:	370c      	adds	r7, #12
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr

08008f34 <LL_USART_SetTXFIFOThreshold>:
{
 8008f34:	b480      	push	{r7}
 8008f36:	b089      	sub	sp, #36	; 0x24
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	3308      	adds	r3, #8
 8008f42:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	e853 3f00 	ldrex	r3, [r3]
 8008f4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	075b      	lsls	r3, r3, #29
 8008f56:	4313      	orrs	r3, r2
 8008f58:	61fb      	str	r3, [r7, #28]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	3308      	adds	r3, #8
 8008f5e:	69fa      	ldr	r2, [r7, #28]
 8008f60:	61ba      	str	r2, [r7, #24]
 8008f62:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f64:	6979      	ldr	r1, [r7, #20]
 8008f66:	69ba      	ldr	r2, [r7, #24]
 8008f68:	e841 2300 	strex	r3, r2, [r1]
 8008f6c:	613b      	str	r3, [r7, #16]
   return(result);
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d1e4      	bne.n	8008f3e <LL_USART_SetTXFIFOThreshold+0xa>
}
 8008f74:	bf00      	nop
 8008f76:	bf00      	nop
 8008f78:	3724      	adds	r7, #36	; 0x24
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr

08008f82 <LL_USART_SetRXFIFOThreshold>:
{
 8008f82:	b480      	push	{r7}
 8008f84:	b089      	sub	sp, #36	; 0x24
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
 8008f8a:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	3308      	adds	r3, #8
 8008f90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	e853 3f00 	ldrex	r3, [r3]
 8008f98:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	065b      	lsls	r3, r3, #25
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	61fb      	str	r3, [r7, #28]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	3308      	adds	r3, #8
 8008fac:	69fa      	ldr	r2, [r7, #28]
 8008fae:	61ba      	str	r2, [r7, #24]
 8008fb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb2:	6979      	ldr	r1, [r7, #20]
 8008fb4:	69ba      	ldr	r2, [r7, #24]
 8008fb6:	e841 2300 	strex	r3, r2, [r1]
 8008fba:	613b      	str	r3, [r7, #16]
   return(result);
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d1e4      	bne.n	8008f8c <LL_USART_SetRXFIFOThreshold+0xa>
}
 8008fc2:	bf00      	nop
 8008fc4:	bf00      	nop
 8008fc6:	3724      	adds	r7, #36	; 0x24
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr

08008fd0 <LL_USART_EnableDirectionRx>:
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b089      	sub	sp, #36	; 0x24
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RE);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	e853 3f00 	ldrex	r3, [r3]
 8008fe2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	f043 0304 	orr.w	r3, r3, #4
 8008fea:	61fb      	str	r3, [r7, #28]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	69fa      	ldr	r2, [r7, #28]
 8008ff0:	61ba      	str	r2, [r7, #24]
 8008ff2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff4:	6979      	ldr	r1, [r7, #20]
 8008ff6:	69ba      	ldr	r2, [r7, #24]
 8008ff8:	e841 2300 	strex	r3, r2, [r1]
 8008ffc:	613b      	str	r3, [r7, #16]
   return(result);
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d1e9      	bne.n	8008fd8 <LL_USART_EnableDirectionRx+0x8>
}
 8009004:	bf00      	nop
 8009006:	bf00      	nop
 8009008:	3724      	adds	r7, #36	; 0x24
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr

08009012 <LL_USART_EnableDirectionTx>:
{
 8009012:	b480      	push	{r7}
 8009014:	b089      	sub	sp, #36	; 0x24
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TE);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	e853 3f00 	ldrex	r3, [r3]
 8009024:	60bb      	str	r3, [r7, #8]
   return(result);
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	f043 0308 	orr.w	r3, r3, #8
 800902c:	61fb      	str	r3, [r7, #28]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	69fa      	ldr	r2, [r7, #28]
 8009032:	61ba      	str	r2, [r7, #24]
 8009034:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009036:	6979      	ldr	r1, [r7, #20]
 8009038:	69ba      	ldr	r2, [r7, #24]
 800903a:	e841 2300 	strex	r3, r2, [r1]
 800903e:	613b      	str	r3, [r7, #16]
   return(result);
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d1e9      	bne.n	800901a <LL_USART_EnableDirectionTx+0x8>
}
 8009046:	bf00      	nop
 8009048:	bf00      	nop
 800904a:	3724      	adds	r7, #36	; 0x24
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr

08009054 <LL_USART_SetTXRXSwap>:
{
 8009054:	b480      	push	{r7}
 8009056:	b083      	sub	sp, #12
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_SWAP, SwapConfig);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	431a      	orrs	r2, r3
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	605a      	str	r2, [r3, #4]
}
 800906e:	bf00      	nop
 8009070:	370c      	adds	r7, #12
 8009072:	46bd      	mov	sp, r7
 8009074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009078:	4770      	bx	lr

0800907a <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800907a:	b480      	push	{r7}
 800907c:	b083      	sub	sp, #12
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	689b      	ldr	r3, [r3, #8]
 8009092:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	609a      	str	r2, [r3, #8]
}
 800909a:	bf00      	nop
 800909c:	370c      	adds	r7, #12
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr

080090a6 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 80090a6:	b480      	push	{r7}
 80090a8:	b083      	sub	sp, #12
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	69db      	ldr	r3, [r3, #28]
 80090b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090b6:	2b40      	cmp	r3, #64	; 0x40
 80090b8:	d101      	bne.n	80090be <LL_USART_IsActiveFlag_TC+0x18>
 80090ba:	2301      	movs	r3, #1
 80090bc:	e000      	b.n	80090c0 <LL_USART_IsActiveFlag_TC+0x1a>
 80090be:	2300      	movs	r3, #0
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	370c      	adds	r7, #12
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr

080090cc <LL_USART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_USART_IsActiveFlag_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(USART_TypeDef *USARTx)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b083      	sub	sp, #12
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	69db      	ldr	r3, [r3, #28]
 80090d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090dc:	2b80      	cmp	r3, #128	; 0x80
 80090de:	d101      	bne.n	80090e4 <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 80090e0:	2301      	movs	r3, #1
 80090e2:	e000      	b.n	80090e6 <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	370c      	adds	r7, #12
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr

080090f2 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 80090f2:	b480      	push	{r7}
 80090f4:	b089      	sub	sp, #36	; 0x24
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	3308      	adds	r3, #8
 80090fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	e853 3f00 	ldrex	r3, [r3]
 8009106:	60bb      	str	r3, [r7, #8]
   return(result);
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800910e:	61fb      	str	r3, [r7, #28]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	3308      	adds	r3, #8
 8009114:	69fa      	ldr	r2, [r7, #28]
 8009116:	61ba      	str	r2, [r7, #24]
 8009118:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911a:	6979      	ldr	r1, [r7, #20]
 800911c:	69ba      	ldr	r2, [r7, #24]
 800911e:	e841 2300 	strex	r3, r2, [r1]
 8009122:	613b      	str	r3, [r7, #16]
   return(result);
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d1e7      	bne.n	80090fa <LL_USART_EnableDMAReq_RX+0x8>
}
 800912a:	bf00      	nop
 800912c:	bf00      	nop
 800912e:	3724      	adds	r7, #36	; 0x24
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr

08009138 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8009138:	b480      	push	{r7}
 800913a:	b089      	sub	sp, #36	; 0x24
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	3308      	adds	r3, #8
 8009144:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	e853 3f00 	ldrex	r3, [r3]
 800914c:	60bb      	str	r3, [r7, #8]
   return(result);
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009154:	61fb      	str	r3, [r7, #28]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	3308      	adds	r3, #8
 800915a:	69fa      	ldr	r2, [r7, #28]
 800915c:	61ba      	str	r2, [r7, #24]
 800915e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009160:	6979      	ldr	r1, [r7, #20]
 8009162:	69ba      	ldr	r2, [r7, #24]
 8009164:	e841 2300 	strex	r3, r2, [r1]
 8009168:	613b      	str	r3, [r7, #16]
   return(result);
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d1e7      	bne.n	8009140 <LL_USART_EnableDMAReq_TX+0x8>
}
 8009170:	bf00      	nop
 8009172:	bf00      	nop
 8009174:	3724      	adds	r7, #36	; 0x24
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr
	...

08009180 <STRHAL_UART_Init>:
//{ .uart = USART3, .dma_rx_channel = LL_DMA_CHANNEL_1, .dma_tx_channel = LL_DMA_CHANNEL_2, .dma_rx_request = LL_DMAMUX_REQ_USART3_RX, .dma_tx_request = LL_DMAMUX_REQ_USART3_TX, .it_rx_handler = DMA1_Channel3_IRQn, .it_tx_handler = DMA1_Channel4_IRQn, .baud_rate = 115200, .swap = 0 },
[STRHAL_UART4] =
{ .uart = UART4, .dma_rx_channel = LL_DMA_CHANNEL_1, .dma_tx_channel = LL_DMA_CHANNEL_2, .dma_rx_request = LL_DMAMUX_REQ_UART4_RX, .dma_tx_request = LL_DMAMUX_REQ_UART4_TX, .it_rx_handler = DMA1_Channel3_IRQn, .it_tx_handler = DMA1_Channel4_IRQn, .baud_rate = 115200, .swap = 0 } };

void STRHAL_UART_Init()
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b086      	sub	sp, #24
 8009184:	af00      	add	r7, sp, #0
	//LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART3);
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8009186:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800918a:	f7ff fd73 	bl	8008c74 <LL_APB1_GRP1_EnableClock>
	//LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800918e:	2004      	movs	r0, #4
 8009190:	f7ff fd58 	bl	8008c44 <LL_AHB2_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMAMUX1);
 8009194:	2004      	movs	r0, #4
 8009196:	f7ff fd3d 	bl	8008c14 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 800919a:	2001      	movs	r0, #1
 800919c:	f7ff fd3a 	bl	8008c14 <LL_AHB1_GRP1_EnableClock>

	LL_GPIO_InitTypeDef GPIO_InitStruct =
 80091a0:	463b      	mov	r3, r7
 80091a2:	2200      	movs	r2, #0
 80091a4:	601a      	str	r2, [r3, #0]
 80091a6:	605a      	str	r2, [r3, #4]
 80091a8:	609a      	str	r2, [r3, #8]
 80091aa:	60da      	str	r2, [r3, #12]
 80091ac:	611a      	str	r2, [r3, #16]
 80091ae:	615a      	str	r2, [r3, #20]
	{ 0 };
	GPIO_InitStruct.Pin = LL_GPIO_PIN_10 | LL_GPIO_PIN_11;
 80091b0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80091b4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80091b6:	2302      	movs	r3, #2
 80091b8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80091ba:	2302      	movs	r3, #2
 80091bc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80091be:	2300      	movs	r3, #0
 80091c0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80091c2:	2301      	movs	r3, #1
 80091c4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80091c6:	2305      	movs	r3, #5
 80091c8:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80091ca:	463b      	mov	r3, r7
 80091cc:	4619      	mov	r1, r3
 80091ce:	4803      	ldr	r0, [pc, #12]	; (80091dc <STRHAL_UART_Init+0x5c>)
 80091d0:	f7fa ffc7 	bl	8004162 <LL_GPIO_Init>

//	GPIO_InitStruct.Pin = LL_GPIO_PIN_3 | LL_GPIO_PIN_4;
//	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}
 80091d4:	bf00      	nop
 80091d6:	3718      	adds	r7, #24
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}
 80091dc:	48000800 	.word	0x48000800

080091e0 <STRHAL_UART_Instance_Init>:

int STRHAL_UART_Instance_Init(STRHAL_UART_Id_t uart_id)
{
 80091e0:	b590      	push	{r4, r7, lr}
 80091e2:	b097      	sub	sp, #92	; 0x5c
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	4603      	mov	r3, r0
 80091e8:	71fb      	strb	r3, [r7, #7]
	if (uart_id < 0 || uart_id >= STRHAL_N_UART)
 80091ea:	79fb      	ldrb	r3, [r7, #7]
 80091ec:	2b02      	cmp	r3, #2
 80091ee:	d902      	bls.n	80091f6 <STRHAL_UART_Instance_Init+0x16>
		return -1;
 80091f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80091f4:	e126      	b.n	8009444 <STRHAL_UART_Instance_Init+0x264>

	STRHAL_UART_Handle_t *_uart = &_uarts[uart_id];
 80091f6:	79fb      	ldrb	r3, [r7, #7]
 80091f8:	f44f 720e 	mov.w	r2, #568	; 0x238
 80091fc:	fb02 f303 	mul.w	r3, r2, r3
 8009200:	4a92      	ldr	r2, [pc, #584]	; (800944c <STRHAL_UART_Instance_Init+0x26c>)
 8009202:	4413      	add	r3, r2
 8009204:	657b      	str	r3, [r7, #84]	; 0x54

	LL_USART_Disable(_uart->uart);
 8009206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4618      	mov	r0, r3
 800920c:	f7ff fe72 	bl	8008ef4 <LL_USART_Disable>

	LL_USART_InitTypeDef UART_InitStruct =
 8009210:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009214:	2220      	movs	r2, #32
 8009216:	2100      	movs	r1, #0
 8009218:	4618      	mov	r0, r3
 800921a:	f000 fb39 	bl	8009890 <memset>
	{ 0 };
	UART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800921e:	2300      	movs	r3, #0
 8009220:	63fb      	str	r3, [r7, #60]	; 0x3c
	UART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8009222:	2300      	movs	r3, #0
 8009224:	643b      	str	r3, [r7, #64]	; 0x40
	UART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8009226:	2300      	movs	r3, #0
 8009228:	647b      	str	r3, [r7, #68]	; 0x44
	UART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800922a:	230c      	movs	r3, #12
 800922c:	64bb      	str	r3, [r7, #72]	; 0x48
	UART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800922e:	2300      	movs	r3, #0
 8009230:	64fb      	str	r3, [r7, #76]	; 0x4c
	UART_InitStruct.BaudRate = _uart->baud_rate;
 8009232:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009234:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8009238:	63bb      	str	r3, [r7, #56]	; 0x38
	UART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 800923a:	2300      	movs	r3, #0
 800923c:	637b      	str	r3, [r7, #52]	; 0x34
	UART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800923e:	2300      	movs	r3, #0
 8009240:	653b      	str	r3, [r7, #80]	; 0x50
	LL_USART_Init(_uart->uart, &UART_InitStruct);
 8009242:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800924a:	4611      	mov	r1, r2
 800924c:	4618      	mov	r0, r3
 800924e:	f7fc f865 	bl	800531c <LL_USART_Init>

	LL_USART_SetTXFIFOThreshold(_uart->uart, LL_USART_FIFOTHRESHOLD_1_8);
 8009252:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	2100      	movs	r1, #0
 8009258:	4618      	mov	r0, r3
 800925a:	f7ff fe6b 	bl	8008f34 <LL_USART_SetTXFIFOThreshold>
	LL_USART_SetRXFIFOThreshold(_uart->uart, LL_USART_FIFOTHRESHOLD_1_8);
 800925e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	2100      	movs	r1, #0
 8009264:	4618      	mov	r0, r3
 8009266:	f7ff fe8c 	bl	8008f82 <LL_USART_SetRXFIFOThreshold>
	LL_USART_DisableFIFO(_uart->uart);
 800926a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4618      	mov	r0, r3
 8009270:	f7ff fe50 	bl	8008f14 <LL_USART_DisableFIFO>
	LL_USART_ConfigAsyncMode(_uart->uart);
 8009274:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4618      	mov	r0, r3
 800927a:	f7ff fefe 	bl	800907a <LL_USART_ConfigAsyncMode>
	if (_uart->swap)
 800927e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009280:	f893 3234 	ldrb.w	r3, [r3, #564]	; 0x234
 8009284:	2b00      	cmp	r3, #0
 8009286:	d006      	beq.n	8009296 <STRHAL_UART_Instance_Init+0xb6>
		LL_USART_SetTXRXSwap(_uart->uart, LL_USART_TXRX_SWAPPED);
 8009288:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009290:	4618      	mov	r0, r3
 8009292:	f7ff fedf 	bl	8009054 <LL_USART_SetTXRXSwap>

	LL_DMA_InitTypeDef DMA_InitStruct =
 8009296:	f107 0308 	add.w	r3, r7, #8
 800929a:	222c      	movs	r2, #44	; 0x2c
 800929c:	2100      	movs	r1, #0
 800929e:	4618      	mov	r0, r3
 80092a0:	f000 faf6 	bl	8009890 <memset>
	{ 0 };

	DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 80092a4:	2300      	movs	r3, #0
 80092a6:	613b      	str	r3, [r7, #16]
	DMA_InitStruct.MemoryOrM2MDstAddress = (uint32_t) _uart->rx_buf.data;
 80092a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092aa:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80092ae:	60fb      	str	r3, [r7, #12]
	DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 80092b0:	2300      	movs	r3, #0
 80092b2:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 80092b4:	2380      	movs	r3, #128	; 0x80
 80092b6:	61fb      	str	r3, [r7, #28]
	DMA_InitStruct.Mode = LL_DMA_MODE_CIRCULAR;
 80092b8:	2320      	movs	r3, #32
 80092ba:	617b      	str	r3, [r7, #20]
	DMA_InitStruct.NbData = STRHAL_UART_BUF_SIZE;
 80092bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092c0:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStruct.PeriphOrM2MSrcAddress = (uint32_t) &(_uart->uart->RDR);
 80092c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	3324      	adds	r3, #36	; 0x24
 80092c8:	60bb      	str	r3, [r7, #8]
	DMA_InitStruct.PeriphOrM2MSrcDataSize = (uint32_t) LL_DMA_PDATAALIGN_BYTE;
 80092ca:	2300      	movs	r3, #0
 80092cc:	623b      	str	r3, [r7, #32]
	DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_MEMORY_NOINCREMENT;
 80092ce:	2300      	movs	r3, #0
 80092d0:	61bb      	str	r3, [r7, #24]
	DMA_InitStruct.PeriphRequest = _uart->dma_rx_request;
 80092d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092d4:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80092d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMA_InitStruct.Priority = LL_DMA_PRIORITY_HIGH;
 80092da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80092de:	633b      	str	r3, [r7, #48]	; 0x30

	LL_DMA_Init(DMA1, _uart->dma_rx_channel, &DMA_InitStruct);
 80092e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092e2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80092e6:	f107 0208 	add.w	r2, r7, #8
 80092ea:	4619      	mov	r1, r3
 80092ec:	4858      	ldr	r0, [pc, #352]	; (8009450 <STRHAL_UART_Instance_Init+0x270>)
 80092ee:	f7fa fdad 	bl	8003e4c <LL_DMA_Init>

	LL_USART_EnableDMAReq_RX(_uart->uart);
 80092f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7ff fefb 	bl	80090f2 <LL_USART_EnableDMAReq_RX>

	LL_DMA_EnableIT_TC(DMA1, _uart->dma_rx_channel);
 80092fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092fe:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009302:	4619      	mov	r1, r3
 8009304:	4852      	ldr	r0, [pc, #328]	; (8009450 <STRHAL_UART_Instance_Init+0x270>)
 8009306:	f7ff fd65 	bl	8008dd4 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableIT_TE(DMA1, _uart->dma_rx_channel);
 800930a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800930c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009310:	4619      	mov	r1, r3
 8009312:	484f      	ldr	r0, [pc, #316]	; (8009450 <STRHAL_UART_Instance_Init+0x270>)
 8009314:	f7ff fd80 	bl	8008e18 <LL_DMA_EnableIT_TE>

	NVIC_SetPriority(_uart->it_rx_handler, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 1, 1));
 8009318:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800931a:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800931e:	b25c      	sxtb	r4, r3
 8009320:	f7ff fbee 	bl	8008b00 <__NVIC_GetPriorityGrouping>
 8009324:	4603      	mov	r3, r0
 8009326:	2201      	movs	r2, #1
 8009328:	2101      	movs	r1, #1
 800932a:	4618      	mov	r0, r3
 800932c:	f7ff fc3e 	bl	8008bac <NVIC_EncodePriority>
 8009330:	4603      	mov	r3, r0
 8009332:	4619      	mov	r1, r3
 8009334:	4620      	mov	r0, r4
 8009336:	f7ff fc0f 	bl	8008b58 <__NVIC_SetPriority>
	NVIC_EnableIRQ(_uart->it_rx_handler);
 800933a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800933c:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8009340:	b25b      	sxtb	r3, r3
 8009342:	4618      	mov	r0, r3
 8009344:	f7ff fbea 	bl	8008b1c <__NVIC_EnableIRQ>

	/*DMA configuration for TX */
	DMA_InitStruct.Direction = LL_DMA_DIRECTION_MEMORY_TO_PERIPH;
 8009348:	2310      	movs	r3, #16
 800934a:	613b      	str	r3, [r7, #16]
	DMA_InitStruct.MemoryOrM2MDstAddress = (uint32_t) _uart->tx_buf.data;
 800934c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800934e:	3304      	adds	r3, #4
 8009350:	60fb      	str	r3, [r7, #12]
	DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 8009352:	2300      	movs	r3, #0
 8009354:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 8009356:	2380      	movs	r3, #128	; 0x80
 8009358:	61fb      	str	r3, [r7, #28]
	DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 800935a:	2300      	movs	r3, #0
 800935c:	617b      	str	r3, [r7, #20]
	DMA_InitStruct.NbData = STRHAL_UART_BUF_SIZE;
 800935e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009362:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStruct.PeriphOrM2MSrcAddress = (uint32_t) &(_uart->uart->TDR);
 8009364:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	3328      	adds	r3, #40	; 0x28
 800936a:	60bb      	str	r3, [r7, #8]
	DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 800936c:	2300      	movs	r3, #0
 800936e:	623b      	str	r3, [r7, #32]
	DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_MEMORY_NOINCREMENT;
 8009370:	2300      	movs	r3, #0
 8009372:	61bb      	str	r3, [r7, #24]
	DMA_InitStruct.PeriphRequest = _uart->dma_tx_request;
 8009374:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009376:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800937a:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMA_InitStruct.Priority = LL_DMA_PRIORITY_HIGH;
 800937c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009380:	633b      	str	r3, [r7, #48]	; 0x30
	LL_DMA_Init(DMA1, _uart->dma_tx_channel, &DMA_InitStruct);
 8009382:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009384:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8009388:	f107 0208 	add.w	r2, r7, #8
 800938c:	4619      	mov	r1, r3
 800938e:	4830      	ldr	r0, [pc, #192]	; (8009450 <STRHAL_UART_Instance_Init+0x270>)
 8009390:	f7fa fd5c 	bl	8003e4c <LL_DMA_Init>

	LL_USART_EnableDMAReq_TX(_uart->uart);
 8009394:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4618      	mov	r0, r3
 800939a:	f7ff fecd 	bl	8009138 <LL_USART_EnableDMAReq_TX>

	LL_DMA_EnableIT_TC(DMA1, _uart->dma_tx_channel);
 800939e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093a0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80093a4:	4619      	mov	r1, r3
 80093a6:	482a      	ldr	r0, [pc, #168]	; (8009450 <STRHAL_UART_Instance_Init+0x270>)
 80093a8:	f7ff fd14 	bl	8008dd4 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableIT_TE(DMA1, _uart->dma_tx_channel);
 80093ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093ae:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80093b2:	4619      	mov	r1, r3
 80093b4:	4826      	ldr	r0, [pc, #152]	; (8009450 <STRHAL_UART_Instance_Init+0x270>)
 80093b6:	f7ff fd2f 	bl	8008e18 <LL_DMA_EnableIT_TE>

	NVIC_SetPriority(_uart->it_tx_handler, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 1, 2));
 80093ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093bc:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80093c0:	b25c      	sxtb	r4, r3
 80093c2:	f7ff fb9d 	bl	8008b00 <__NVIC_GetPriorityGrouping>
 80093c6:	4603      	mov	r3, r0
 80093c8:	2202      	movs	r2, #2
 80093ca:	2101      	movs	r1, #1
 80093cc:	4618      	mov	r0, r3
 80093ce:	f7ff fbed 	bl	8008bac <NVIC_EncodePriority>
 80093d2:	4603      	mov	r3, r0
 80093d4:	4619      	mov	r1, r3
 80093d6:	4620      	mov	r0, r4
 80093d8:	f7ff fbbe 	bl	8008b58 <__NVIC_SetPriority>
	NVIC_EnableIRQ(_uart->it_tx_handler);
 80093dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093de:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80093e2:	b25b      	sxtb	r3, r3
 80093e4:	4618      	mov	r0, r3
 80093e6:	f7ff fb99 	bl	8008b1c <__NVIC_EnableIRQ>

	LL_USART_EnableDirectionTx(_uart->uart);
 80093ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7ff fe0f 	bl	8009012 <LL_USART_EnableDirectionTx>
	LL_USART_EnableDirectionRx(_uart->uart);
 80093f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4618      	mov	r0, r3
 80093fa:	f7ff fde9 	bl	8008fd0 <LL_USART_EnableDirectionRx>
	LL_USART_Enable(_uart->uart);
 80093fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4618      	mov	r0, r3
 8009404:	f7ff fd66 	bl	8008ed4 <LL_USART_Enable>

	_uart->state = STRHAL_UART_STATE_00;
 8009408:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800940a:	2200      	movs	r2, #0
 800940c:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	_uart->rx_buf.h = _uart->rx_buf.n = _uart->tx_buf.n = 0;
 8009410:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009412:	2200      	movs	r2, #0
 8009414:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8009418:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800941a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800941e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009420:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8009424:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009426:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800942a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800942c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	_uart->rx_buf.n_dma = STRHAL_UART_BUF_SIZE;
 8009430:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009432:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009436:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	_uart->tx_buf.n = 0;
 800943a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800943c:	2200      	movs	r2, #0
 800943e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	return 0;
 8009442:	2300      	movs	r3, #0
}
 8009444:	4618      	mov	r0, r3
 8009446:	375c      	adds	r7, #92	; 0x5c
 8009448:	46bd      	mov	sp, r7
 800944a:	bd90      	pop	{r4, r7, pc}
 800944c:	20000074 	.word	0x20000074
 8009450:	40020000 	.word	0x40020000

08009454 <STRHAL_UART_Debug_Write_Blocking>:
{
	return STRHAL_UART_Write_DMA(STRHAL_UART_DEBUG, data, n);
}

int32_t STRHAL_UART_Debug_Write_Blocking(const char *data, uint32_t n, uint16_t timeout)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	af00      	add	r7, sp, #0
 800945a:	60f8      	str	r0, [r7, #12]
 800945c:	60b9      	str	r1, [r7, #8]
 800945e:	4613      	mov	r3, r2
 8009460:	80fb      	strh	r3, [r7, #6]
	return STRHAL_UART_Write_Blocking(STRHAL_UART_DEBUG, data, n, timeout);
 8009462:	88fb      	ldrh	r3, [r7, #6]
 8009464:	68ba      	ldr	r2, [r7, #8]
 8009466:	68f9      	ldr	r1, [r7, #12]
 8009468:	2002      	movs	r0, #2
 800946a:	f000 f805 	bl	8009478 <STRHAL_UART_Write_Blocking>
 800946e:	4603      	mov	r3, r0
}
 8009470:	4618      	mov	r0, r3
 8009472:	3710      	adds	r7, #16
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <STRHAL_UART_Write_Blocking>:

	return n;
}

int32_t STRHAL_UART_Write_Blocking(STRHAL_UART_Id_t uart_id, const char *data, uint32_t n, uint16_t timeout)
{
 8009478:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800947c:	b08a      	sub	sp, #40	; 0x28
 800947e:	af00      	add	r7, sp, #0
 8009480:	60b9      	str	r1, [r7, #8]
 8009482:	607a      	str	r2, [r7, #4]
 8009484:	461a      	mov	r2, r3
 8009486:	4603      	mov	r3, r0
 8009488:	73fb      	strb	r3, [r7, #15]
 800948a:	4613      	mov	r3, r2
 800948c:	81bb      	strh	r3, [r7, #12]
	if (uart_id < 0 || uart_id >= STRHAL_N_UART)
 800948e:	7bfb      	ldrb	r3, [r7, #15]
 8009490:	2b02      	cmp	r3, #2
 8009492:	d902      	bls.n	800949a <STRHAL_UART_Write_Blocking+0x22>
		return -1;
 8009494:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009498:	e0a1      	b.n	80095de <STRHAL_UART_Write_Blocking+0x166>

	STRHAL_UART_Handle_t *_uart = &_uarts[uart_id];
 800949a:	7bfb      	ldrb	r3, [r7, #15]
 800949c:	f44f 720e 	mov.w	r2, #568	; 0x238
 80094a0:	fb02 f303 	mul.w	r3, r2, r3
 80094a4:	4a50      	ldr	r2, [pc, #320]	; (80095e8 <STRHAL_UART_Write_Blocking+0x170>)
 80094a6:	4413      	add	r3, r2
 80094a8:	61fb      	str	r3, [r7, #28]

	if (_uart->state & (STRHAL_UART_STATE_TX | STRHAL_UART_STATE_TE) || n > STRHAL_UART_BUF_SIZE)
 80094aa:	69fb      	ldr	r3, [r7, #28]
 80094ac:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 80094b0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d103      	bne.n	80094c0 <STRHAL_UART_Write_Blocking+0x48>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094be:	d901      	bls.n	80094c4 <STRHAL_UART_Write_Blocking+0x4c>
		return 0;
 80094c0:	2300      	movs	r3, #0
 80094c2:	e08c      	b.n	80095de <STRHAL_UART_Write_Blocking+0x166>

	uint32_t i;
	for (i = 0; i < n; ++i)
 80094c4:	2300      	movs	r3, #0
 80094c6:	627b      	str	r3, [r7, #36]	; 0x24
 80094c8:	e00c      	b.n	80094e4 <STRHAL_UART_Write_Blocking+0x6c>
		_uart->tx_buf.data[i] = data[i];
 80094ca:	68ba      	ldr	r2, [r7, #8]
 80094cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ce:	4413      	add	r3, r2
 80094d0:	7819      	ldrb	r1, [r3, #0]
 80094d2:	69fa      	ldr	r2, [r7, #28]
 80094d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d6:	4413      	add	r3, r2
 80094d8:	3304      	adds	r3, #4
 80094da:	460a      	mov	r2, r1
 80094dc:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n; ++i)
 80094de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e0:	3301      	adds	r3, #1
 80094e2:	627b      	str	r3, [r7, #36]	; 0x24
 80094e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d3ee      	bcc.n	80094ca <STRHAL_UART_Write_Blocking+0x52>

	_uart->tx_buf.n = n;
 80094ec:	69fb      	ldr	r3, [r7, #28]
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

	_uart->state &= ~STRHAL_UART_STATE_TC;
 80094f4:	69fb      	ldr	r3, [r7, #28]
 80094f6:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 80094fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094fe:	b2da      	uxtb	r2, r3
 8009500:	69fb      	ldr	r3, [r7, #28]
 8009502:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	_uart->state |= STRHAL_UART_STATE_TX;
 8009506:	69fb      	ldr	r3, [r7, #28]
 8009508:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 800950c:	f043 0320 	orr.w	r3, r3, #32
 8009510:	b2da      	uxtb	r2, r3
 8009512:	69fb      	ldr	r3, [r7, #28]
 8009514:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214

	uint8_t *tx_data = (uint8_t*) _uart->tx_buf.data;
 8009518:	69fb      	ldr	r3, [r7, #28]
 800951a:	3304      	adds	r3, #4
 800951c:	623b      	str	r3, [r7, #32]

	uint64_t tx_starttime = STRHAL_Systick_GetTick();
 800951e:	f7fe fded 	bl	80080fc <STRHAL_Systick_GetTick>
 8009522:	e9c7 0104 	strd	r0, r1, [r7, #16]

	while (_uart->tx_buf.n > 0)
 8009526:	e028      	b.n	800957a <STRHAL_UART_Write_Blocking+0x102>
	{
		// wait until byte transmitted, or timeout
		while (!LL_USART_IsActiveFlag_TXE_TXFNF(_uart->uart))
		{
			if (STRHAL_Systick_GetTick() - tx_starttime > timeout)
 8009528:	f7fe fde8 	bl	80080fc <STRHAL_Systick_GetTick>
 800952c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009530:	ebb0 0802 	subs.w	r8, r0, r2
 8009534:	eb61 0903 	sbc.w	r9, r1, r3
 8009538:	89ba      	ldrh	r2, [r7, #12]
 800953a:	f04f 0300 	mov.w	r3, #0
 800953e:	454b      	cmp	r3, r9
 8009540:	bf08      	it	eq
 8009542:	4542      	cmpeq	r2, r8
 8009544:	d202      	bcs.n	800954c <STRHAL_UART_Write_Blocking+0xd4>
				return -1;
 8009546:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800954a:	e048      	b.n	80095de <STRHAL_UART_Write_Blocking+0x166>
		while (!LL_USART_IsActiveFlag_TXE_TXFNF(_uart->uart))
 800954c:	69fb      	ldr	r3, [r7, #28]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4618      	mov	r0, r3
 8009552:	f7ff fdbb 	bl	80090cc <LL_USART_IsActiveFlag_TXE_TXFNF>
 8009556:	4603      	mov	r3, r0
 8009558:	2b00      	cmp	r3, #0
 800955a:	d0e5      	beq.n	8009528 <STRHAL_UART_Write_Blocking+0xb0>
		}
		_uart->uart->TDR = (uint8_t) (*tx_data & 0xFFU);
 800955c:	6a3b      	ldr	r3, [r7, #32]
 800955e:	781a      	ldrb	r2, [r3, #0]
 8009560:	69fb      	ldr	r3, [r7, #28]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	629a      	str	r2, [r3, #40]	; 0x28
		tx_data++;
 8009566:	6a3b      	ldr	r3, [r7, #32]
 8009568:	3301      	adds	r3, #1
 800956a:	623b      	str	r3, [r7, #32]
		_uart->tx_buf.n--;
 800956c:	69fb      	ldr	r3, [r7, #28]
 800956e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8009572:	1e5a      	subs	r2, r3, #1
 8009574:	69fb      	ldr	r3, [r7, #28]
 8009576:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	while (_uart->tx_buf.n > 0)
 800957a:	69fb      	ldr	r3, [r7, #28]
 800957c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8009580:	2b00      	cmp	r3, #0
 8009582:	d1e3      	bne.n	800954c <STRHAL_UART_Write_Blocking+0xd4>
	}

	// wait until transmission complete, or timeout
	while (!LL_USART_IsActiveFlag_TC(_uart->uart))
 8009584:	e010      	b.n	80095a8 <STRHAL_UART_Write_Blocking+0x130>
	{
		if (STRHAL_Systick_GetTick() - tx_starttime > timeout)
 8009586:	f7fe fdb9 	bl	80080fc <STRHAL_Systick_GetTick>
 800958a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800958e:	1a84      	subs	r4, r0, r2
 8009590:	eb61 0503 	sbc.w	r5, r1, r3
 8009594:	89ba      	ldrh	r2, [r7, #12]
 8009596:	f04f 0300 	mov.w	r3, #0
 800959a:	42ab      	cmp	r3, r5
 800959c:	bf08      	it	eq
 800959e:	42a2      	cmpeq	r2, r4
 80095a0:	d202      	bcs.n	80095a8 <STRHAL_UART_Write_Blocking+0x130>
			return -1;
 80095a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80095a6:	e01a      	b.n	80095de <STRHAL_UART_Write_Blocking+0x166>
	while (!LL_USART_IsActiveFlag_TC(_uart->uart))
 80095a8:	69fb      	ldr	r3, [r7, #28]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4618      	mov	r0, r3
 80095ae:	f7ff fd7a 	bl	80090a6 <LL_USART_IsActiveFlag_TC>
 80095b2:	4603      	mov	r3, r0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d0e6      	beq.n	8009586 <STRHAL_UART_Write_Blocking+0x10e>
	}

	_uart->state &= ~STRHAL_UART_STATE_TX;
 80095b8:	69fb      	ldr	r3, [r7, #28]
 80095ba:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 80095be:	f023 0320 	bic.w	r3, r3, #32
 80095c2:	b2da      	uxtb	r2, r3
 80095c4:	69fb      	ldr	r3, [r7, #28]
 80095c6:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	_uart->state |= STRHAL_UART_STATE_TC;
 80095ca:	69fb      	ldr	r3, [r7, #28]
 80095cc:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 80095d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095d4:	b2da      	uxtb	r2, r3
 80095d6:	69fb      	ldr	r3, [r7, #28]
 80095d8:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214

	return n;
 80095dc:	687b      	ldr	r3, [r7, #4]
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3728      	adds	r7, #40	; 0x28
 80095e2:	46bd      	mov	sp, r7
 80095e4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80095e8:	20000074 	.word	0x20000074

080095ec <DMA1_Channel1_IRQHandler>:
{
	return _uarts[uart_id].state;
}

void DMA1_Channel1_IRQHandler(void)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b082      	sub	sp, #8
 80095f0:	af00      	add	r7, sp, #0
	STRHAL_UART_Handle_t *_uart = &_uarts[STRHAL_UART4];
 80095f2:	4b3f      	ldr	r3, [pc, #252]	; (80096f0 <DMA1_Channel1_IRQHandler+0x104>)
 80095f4:	607b      	str	r3, [r7, #4]
	if (LL_DMA_IsEnabledIT_TC(DMA1, LL_DMA_CHANNEL_1) && LL_DMA_IsActiveFlag_TC1(DMA1))
 80095f6:	2100      	movs	r1, #0
 80095f8:	483e      	ldr	r0, [pc, #248]	; (80096f4 <DMA1_Channel1_IRQHandler+0x108>)
 80095fa:	f7ff fc2f 	bl	8008e5c <LL_DMA_IsEnabledIT_TC>
 80095fe:	4603      	mov	r3, r0
 8009600:	2b00      	cmp	r3, #0
 8009602:	d037      	beq.n	8009674 <DMA1_Channel1_IRQHandler+0x88>
 8009604:	483b      	ldr	r0, [pc, #236]	; (80096f4 <DMA1_Channel1_IRQHandler+0x108>)
 8009606:	f7ff fb65 	bl	8008cd4 <LL_DMA_IsActiveFlag_TC1>
 800960a:	4603      	mov	r3, r0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d031      	beq.n	8009674 <DMA1_Channel1_IRQHandler+0x88>
	{
		LL_DMA_ClearFlag_TC1(DMA1);
 8009610:	4838      	ldr	r0, [pc, #224]	; (80096f4 <DMA1_Channel1_IRQHandler+0x108>)
 8009612:	f7ff fbab 	bl	8008d6c <LL_DMA_ClearFlag_TC1>
		_uart->rx_buf.n += _uart->rx_buf.n_dma;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009622:	441a      	add	r2, r3
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		_uart->rx_buf.n_dma = STRHAL_UART_BUF_SIZE;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009630:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (_uart->rx_buf.n > STRHAL_UART_BUF_SIZE)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800963a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800963e:	d953      	bls.n	80096e8 <DMA1_Channel1_IRQHandler+0xfc>
		{
			_uart->rx_buf.h += _uart->rx_buf.n % STRHAL_UART_BUF_SIZE;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800964c:	b2db      	uxtb	r3, r3
 800964e:	441a      	add	r2, r3
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			_uart->rx_buf.n = STRHAL_UART_BUF_SIZE;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f44f 7280 	mov.w	r2, #256	; 0x100
 800965c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

			_uart->state |= STRHAL_UART_STATE_RO;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 8009666:	f043 0308 	orr.w	r3, r3, #8
 800966a:	b2da      	uxtb	r2, r3
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
		if (_uart->rx_buf.n > STRHAL_UART_BUF_SIZE)
 8009672:	e039      	b.n	80096e8 <DMA1_Channel1_IRQHandler+0xfc>
		}
	}

	else if (LL_DMA_IsEnabledIT_TE(DMA1, LL_DMA_CHANNEL_1) && LL_DMA_IsActiveFlag_TE1(DMA1))
 8009674:	2100      	movs	r1, #0
 8009676:	481f      	ldr	r0, [pc, #124]	; (80096f4 <DMA1_Channel1_IRQHandler+0x108>)
 8009678:	f7ff fc0e 	bl	8008e98 <LL_DMA_IsEnabledIT_TE>
 800967c:	4603      	mov	r3, r0
 800967e:	2b00      	cmp	r3, #0
 8009680:	d032      	beq.n	80096e8 <DMA1_Channel1_IRQHandler+0xfc>
 8009682:	481c      	ldr	r0, [pc, #112]	; (80096f4 <DMA1_Channel1_IRQHandler+0x108>)
 8009684:	f7ff fb4c 	bl	8008d20 <LL_DMA_IsActiveFlag_TE1>
 8009688:	4603      	mov	r3, r0
 800968a:	2b00      	cmp	r3, #0
 800968c:	d02c      	beq.n	80096e8 <DMA1_Channel1_IRQHandler+0xfc>
	{
		LL_DMA_ClearFlag_TE1(DMA1);
 800968e:	4819      	ldr	r0, [pc, #100]	; (80096f4 <DMA1_Channel1_IRQHandler+0x108>)
 8009690:	f7ff fb86 	bl	8008da0 <LL_DMA_ClearFlag_TE1>
		_uart->rx_buf.n = STRHAL_UART_BUF_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_1);
 8009694:	2100      	movs	r1, #0
 8009696:	4817      	ldr	r0, [pc, #92]	; (80096f4 <DMA1_Channel1_IRQHandler+0x108>)
 8009698:	f7ff fb04 	bl	8008ca4 <LL_DMA_GetDataLength>
 800969c:	4603      	mov	r3, r0
 800969e:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

		_uart->state &= ~STRHAL_UART_STATE_RX;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 80096ae:	f023 0302 	bic.w	r3, r3, #2
 80096b2:	b2da      	uxtb	r2, r3
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
		_uart->state &= ~STRHAL_UART_STATE_RC;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 80096c0:	f023 0304 	bic.w	r3, r3, #4
 80096c4:	b2da      	uxtb	r2, r3
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
		_uart->state |= STRHAL_UART_STATE_RE;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 80096d2:	f043 0310 	orr.w	r3, r3, #16
 80096d6:	b2da      	uxtb	r2, r3
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214

		STRHAL_OofHandler(STRHAL_OOF_UART, "DMA FAIL");
 80096de:	4906      	ldr	r1, [pc, #24]	; (80096f8 <DMA1_Channel1_IRQHandler+0x10c>)
 80096e0:	2008      	movs	r0, #8
 80096e2:	f7f7 fe39 	bl	8001358 <STRHAL_OofHandler>
	}
}
 80096e6:	e7ff      	b.n	80096e8 <DMA1_Channel1_IRQHandler+0xfc>
 80096e8:	bf00      	nop
 80096ea:	3708      	adds	r7, #8
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}
 80096f0:	200004e4 	.word	0x200004e4
 80096f4:	40020000 	.word	0x40020000
 80096f8:	08009b30 	.word	0x08009b30

080096fc <DMA1_Channel2_IRQHandler>:

void DMA1_Channel2_IRQHandler(void)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0
	STRHAL_UART_Handle_t *_uart = &_uarts[STRHAL_UART4];
 8009702:	4b2a      	ldr	r3, [pc, #168]	; (80097ac <DMA1_Channel2_IRQHandler+0xb0>)
 8009704:	607b      	str	r3, [r7, #4]
	if (LL_DMA_IsEnabledIT_TC(DMA1, LL_DMA_CHANNEL_2) && LL_DMA_IsActiveFlag_TC2(DMA1))
 8009706:	2101      	movs	r1, #1
 8009708:	4829      	ldr	r0, [pc, #164]	; (80097b0 <DMA1_Channel2_IRQHandler+0xb4>)
 800970a:	f7ff fba7 	bl	8008e5c <LL_DMA_IsEnabledIT_TC>
 800970e:	4603      	mov	r3, r0
 8009710:	2b00      	cmp	r3, #0
 8009712:	d01b      	beq.n	800974c <DMA1_Channel2_IRQHandler+0x50>
 8009714:	4826      	ldr	r0, [pc, #152]	; (80097b0 <DMA1_Channel2_IRQHandler+0xb4>)
 8009716:	f7ff faf0 	bl	8008cfa <LL_DMA_IsActiveFlag_TC2>
 800971a:	4603      	mov	r3, r0
 800971c:	2b00      	cmp	r3, #0
 800971e:	d015      	beq.n	800974c <DMA1_Channel2_IRQHandler+0x50>
	{
		LL_DMA_ClearFlag_TC2(DMA1);
 8009720:	4823      	ldr	r0, [pc, #140]	; (80097b0 <DMA1_Channel2_IRQHandler+0xb4>)
 8009722:	f7ff fb30 	bl	8008d86 <LL_DMA_ClearFlag_TC2>
		_uart->state &= ~STRHAL_UART_STATE_TX;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 800972c:	f023 0320 	bic.w	r3, r3, #32
 8009730:	b2da      	uxtb	r2, r3
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
		_uart->state |= STRHAL_UART_STATE_TC;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 800973e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009742:	b2da      	uxtb	r2, r3
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
		LL_DMA_ClearFlag_TE2(DMA1);
		_uart->state &= ~STRHAL_UART_STATE_TX;
		_uart->state &= ~STRHAL_UART_STATE_TC;
		_uart->state |= STRHAL_UART_STATE_TE;
	}
}
 800974a:	e02a      	b.n	80097a2 <DMA1_Channel2_IRQHandler+0xa6>
	else if (LL_DMA_IsEnabledIT_TE(DMA1, LL_DMA_CHANNEL_2) && LL_DMA_IsActiveFlag_TE2(DMA1))
 800974c:	2101      	movs	r1, #1
 800974e:	4818      	ldr	r0, [pc, #96]	; (80097b0 <DMA1_Channel2_IRQHandler+0xb4>)
 8009750:	f7ff fba2 	bl	8008e98 <LL_DMA_IsEnabledIT_TE>
 8009754:	4603      	mov	r3, r0
 8009756:	2b00      	cmp	r3, #0
 8009758:	d023      	beq.n	80097a2 <DMA1_Channel2_IRQHandler+0xa6>
 800975a:	4815      	ldr	r0, [pc, #84]	; (80097b0 <DMA1_Channel2_IRQHandler+0xb4>)
 800975c:	f7ff faf3 	bl	8008d46 <LL_DMA_IsActiveFlag_TE2>
 8009760:	4603      	mov	r3, r0
 8009762:	2b00      	cmp	r3, #0
 8009764:	d01d      	beq.n	80097a2 <DMA1_Channel2_IRQHandler+0xa6>
		LL_DMA_ClearFlag_TE2(DMA1);
 8009766:	4812      	ldr	r0, [pc, #72]	; (80097b0 <DMA1_Channel2_IRQHandler+0xb4>)
 8009768:	f7ff fb27 	bl	8008dba <LL_DMA_ClearFlag_TE2>
		_uart->state &= ~STRHAL_UART_STATE_TX;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 8009772:	f023 0320 	bic.w	r3, r3, #32
 8009776:	b2da      	uxtb	r2, r3
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
		_uart->state &= ~STRHAL_UART_STATE_TC;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 8009784:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009788:	b2da      	uxtb	r2, r3
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
		_uart->state |= STRHAL_UART_STATE_TE;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 8009796:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800979a:	b2da      	uxtb	r2, r3
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
}
 80097a2:	bf00      	nop
 80097a4:	3708      	adds	r7, #8
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
 80097aa:	bf00      	nop
 80097ac:	200004e4 	.word	0x200004e4
 80097b0:	40020000 	.word	0x40020000

080097b4 <_ZdlPvj>:
 80097b4:	f000 b812 	b.w	80097dc <_ZdlPv>

080097b8 <__cxa_guard_acquire>:
 80097b8:	6803      	ldr	r3, [r0, #0]
 80097ba:	07db      	lsls	r3, r3, #31
 80097bc:	d406      	bmi.n	80097cc <__cxa_guard_acquire+0x14>
 80097be:	7843      	ldrb	r3, [r0, #1]
 80097c0:	b103      	cbz	r3, 80097c4 <__cxa_guard_acquire+0xc>
 80097c2:	deff      	udf	#255	; 0xff
 80097c4:	2301      	movs	r3, #1
 80097c6:	7043      	strb	r3, [r0, #1]
 80097c8:	4618      	mov	r0, r3
 80097ca:	4770      	bx	lr
 80097cc:	2000      	movs	r0, #0
 80097ce:	4770      	bx	lr

080097d0 <__cxa_guard_release>:
 80097d0:	2301      	movs	r3, #1
 80097d2:	6003      	str	r3, [r0, #0]
 80097d4:	4770      	bx	lr

080097d6 <__cxa_pure_virtual>:
 80097d6:	b508      	push	{r3, lr}
 80097d8:	f000 f80e 	bl	80097f8 <_ZSt9terminatev>

080097dc <_ZdlPv>:
 80097dc:	f000 b842 	b.w	8009864 <free>

080097e0 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80097e0:	b508      	push	{r3, lr}
 80097e2:	4780      	blx	r0
 80097e4:	f000 f80d 	bl	8009802 <abort>

080097e8 <_ZSt13get_terminatev>:
 80097e8:	4b02      	ldr	r3, [pc, #8]	; (80097f4 <_ZSt13get_terminatev+0xc>)
 80097ea:	6818      	ldr	r0, [r3, #0]
 80097ec:	f3bf 8f5b 	dmb	ish
 80097f0:	4770      	bx	lr
 80097f2:	bf00      	nop
 80097f4:	2000071c 	.word	0x2000071c

080097f8 <_ZSt9terminatev>:
 80097f8:	b508      	push	{r3, lr}
 80097fa:	f7ff fff5 	bl	80097e8 <_ZSt13get_terminatev>
 80097fe:	f7ff ffef 	bl	80097e0 <_ZN10__cxxabiv111__terminateEPFvvE>

08009802 <abort>:
 8009802:	b508      	push	{r3, lr}
 8009804:	2006      	movs	r0, #6
 8009806:	f000 f8c3 	bl	8009990 <raise>
 800980a:	2001      	movs	r0, #1
 800980c:	f7f7 fe06 	bl	800141c <_exit>

08009810 <__errno>:
 8009810:	4b01      	ldr	r3, [pc, #4]	; (8009818 <__errno+0x8>)
 8009812:	6818      	ldr	r0, [r3, #0]
 8009814:	4770      	bx	lr
 8009816:	bf00      	nop
 8009818:	20000720 	.word	0x20000720

0800981c <__libc_init_array>:
 800981c:	b570      	push	{r4, r5, r6, lr}
 800981e:	4d0d      	ldr	r5, [pc, #52]	; (8009854 <__libc_init_array+0x38>)
 8009820:	4c0d      	ldr	r4, [pc, #52]	; (8009858 <__libc_init_array+0x3c>)
 8009822:	1b64      	subs	r4, r4, r5
 8009824:	10a4      	asrs	r4, r4, #2
 8009826:	2600      	movs	r6, #0
 8009828:	42a6      	cmp	r6, r4
 800982a:	d109      	bne.n	8009840 <__libc_init_array+0x24>
 800982c:	4d0b      	ldr	r5, [pc, #44]	; (800985c <__libc_init_array+0x40>)
 800982e:	4c0c      	ldr	r4, [pc, #48]	; (8009860 <__libc_init_array+0x44>)
 8009830:	f000 f8d8 	bl	80099e4 <_init>
 8009834:	1b64      	subs	r4, r4, r5
 8009836:	10a4      	asrs	r4, r4, #2
 8009838:	2600      	movs	r6, #0
 800983a:	42a6      	cmp	r6, r4
 800983c:	d105      	bne.n	800984a <__libc_init_array+0x2e>
 800983e:	bd70      	pop	{r4, r5, r6, pc}
 8009840:	f855 3b04 	ldr.w	r3, [r5], #4
 8009844:	4798      	blx	r3
 8009846:	3601      	adds	r6, #1
 8009848:	e7ee      	b.n	8009828 <__libc_init_array+0xc>
 800984a:	f855 3b04 	ldr.w	r3, [r5], #4
 800984e:	4798      	blx	r3
 8009850:	3601      	adds	r6, #1
 8009852:	e7f2      	b.n	800983a <__libc_init_array+0x1e>
 8009854:	0800ad58 	.word	0x0800ad58
 8009858:	0800ad58 	.word	0x0800ad58
 800985c:	0800ad58 	.word	0x0800ad58
 8009860:	0800ad5c 	.word	0x0800ad5c

08009864 <free>:
 8009864:	4b02      	ldr	r3, [pc, #8]	; (8009870 <free+0xc>)
 8009866:	4601      	mov	r1, r0
 8009868:	6818      	ldr	r0, [r3, #0]
 800986a:	f000 b819 	b.w	80098a0 <_free_r>
 800986e:	bf00      	nop
 8009870:	20000720 	.word	0x20000720

08009874 <memcpy>:
 8009874:	440a      	add	r2, r1
 8009876:	4291      	cmp	r1, r2
 8009878:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800987c:	d100      	bne.n	8009880 <memcpy+0xc>
 800987e:	4770      	bx	lr
 8009880:	b510      	push	{r4, lr}
 8009882:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009886:	f803 4f01 	strb.w	r4, [r3, #1]!
 800988a:	4291      	cmp	r1, r2
 800988c:	d1f9      	bne.n	8009882 <memcpy+0xe>
 800988e:	bd10      	pop	{r4, pc}

08009890 <memset>:
 8009890:	4402      	add	r2, r0
 8009892:	4603      	mov	r3, r0
 8009894:	4293      	cmp	r3, r2
 8009896:	d100      	bne.n	800989a <memset+0xa>
 8009898:	4770      	bx	lr
 800989a:	f803 1b01 	strb.w	r1, [r3], #1
 800989e:	e7f9      	b.n	8009894 <memset+0x4>

080098a0 <_free_r>:
 80098a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098a2:	2900      	cmp	r1, #0
 80098a4:	d048      	beq.n	8009938 <_free_r+0x98>
 80098a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098aa:	9001      	str	r0, [sp, #4]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	f1a1 0404 	sub.w	r4, r1, #4
 80098b2:	bfb8      	it	lt
 80098b4:	18e4      	addlt	r4, r4, r3
 80098b6:	f000 f887 	bl	80099c8 <__malloc_lock>
 80098ba:	4a20      	ldr	r2, [pc, #128]	; (800993c <_free_r+0x9c>)
 80098bc:	9801      	ldr	r0, [sp, #4]
 80098be:	6813      	ldr	r3, [r2, #0]
 80098c0:	4615      	mov	r5, r2
 80098c2:	b933      	cbnz	r3, 80098d2 <_free_r+0x32>
 80098c4:	6063      	str	r3, [r4, #4]
 80098c6:	6014      	str	r4, [r2, #0]
 80098c8:	b003      	add	sp, #12
 80098ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80098ce:	f000 b881 	b.w	80099d4 <__malloc_unlock>
 80098d2:	42a3      	cmp	r3, r4
 80098d4:	d90b      	bls.n	80098ee <_free_r+0x4e>
 80098d6:	6821      	ldr	r1, [r4, #0]
 80098d8:	1862      	adds	r2, r4, r1
 80098da:	4293      	cmp	r3, r2
 80098dc:	bf04      	itt	eq
 80098de:	681a      	ldreq	r2, [r3, #0]
 80098e0:	685b      	ldreq	r3, [r3, #4]
 80098e2:	6063      	str	r3, [r4, #4]
 80098e4:	bf04      	itt	eq
 80098e6:	1852      	addeq	r2, r2, r1
 80098e8:	6022      	streq	r2, [r4, #0]
 80098ea:	602c      	str	r4, [r5, #0]
 80098ec:	e7ec      	b.n	80098c8 <_free_r+0x28>
 80098ee:	461a      	mov	r2, r3
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	b10b      	cbz	r3, 80098f8 <_free_r+0x58>
 80098f4:	42a3      	cmp	r3, r4
 80098f6:	d9fa      	bls.n	80098ee <_free_r+0x4e>
 80098f8:	6811      	ldr	r1, [r2, #0]
 80098fa:	1855      	adds	r5, r2, r1
 80098fc:	42a5      	cmp	r5, r4
 80098fe:	d10b      	bne.n	8009918 <_free_r+0x78>
 8009900:	6824      	ldr	r4, [r4, #0]
 8009902:	4421      	add	r1, r4
 8009904:	1854      	adds	r4, r2, r1
 8009906:	42a3      	cmp	r3, r4
 8009908:	6011      	str	r1, [r2, #0]
 800990a:	d1dd      	bne.n	80098c8 <_free_r+0x28>
 800990c:	681c      	ldr	r4, [r3, #0]
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	6053      	str	r3, [r2, #4]
 8009912:	4421      	add	r1, r4
 8009914:	6011      	str	r1, [r2, #0]
 8009916:	e7d7      	b.n	80098c8 <_free_r+0x28>
 8009918:	d902      	bls.n	8009920 <_free_r+0x80>
 800991a:	230c      	movs	r3, #12
 800991c:	6003      	str	r3, [r0, #0]
 800991e:	e7d3      	b.n	80098c8 <_free_r+0x28>
 8009920:	6825      	ldr	r5, [r4, #0]
 8009922:	1961      	adds	r1, r4, r5
 8009924:	428b      	cmp	r3, r1
 8009926:	bf04      	itt	eq
 8009928:	6819      	ldreq	r1, [r3, #0]
 800992a:	685b      	ldreq	r3, [r3, #4]
 800992c:	6063      	str	r3, [r4, #4]
 800992e:	bf04      	itt	eq
 8009930:	1949      	addeq	r1, r1, r5
 8009932:	6021      	streq	r1, [r4, #0]
 8009934:	6054      	str	r4, [r2, #4]
 8009936:	e7c7      	b.n	80098c8 <_free_r+0x28>
 8009938:	b003      	add	sp, #12
 800993a:	bd30      	pop	{r4, r5, pc}
 800993c:	20000b60 	.word	0x20000b60

08009940 <_raise_r>:
 8009940:	291f      	cmp	r1, #31
 8009942:	b538      	push	{r3, r4, r5, lr}
 8009944:	4604      	mov	r4, r0
 8009946:	460d      	mov	r5, r1
 8009948:	d904      	bls.n	8009954 <_raise_r+0x14>
 800994a:	2316      	movs	r3, #22
 800994c:	6003      	str	r3, [r0, #0]
 800994e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009952:	bd38      	pop	{r3, r4, r5, pc}
 8009954:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009956:	b112      	cbz	r2, 800995e <_raise_r+0x1e>
 8009958:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800995c:	b94b      	cbnz	r3, 8009972 <_raise_r+0x32>
 800995e:	4620      	mov	r0, r4
 8009960:	f000 f830 	bl	80099c4 <_getpid_r>
 8009964:	462a      	mov	r2, r5
 8009966:	4601      	mov	r1, r0
 8009968:	4620      	mov	r0, r4
 800996a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800996e:	f000 b817 	b.w	80099a0 <_kill_r>
 8009972:	2b01      	cmp	r3, #1
 8009974:	d00a      	beq.n	800998c <_raise_r+0x4c>
 8009976:	1c59      	adds	r1, r3, #1
 8009978:	d103      	bne.n	8009982 <_raise_r+0x42>
 800997a:	2316      	movs	r3, #22
 800997c:	6003      	str	r3, [r0, #0]
 800997e:	2001      	movs	r0, #1
 8009980:	e7e7      	b.n	8009952 <_raise_r+0x12>
 8009982:	2400      	movs	r4, #0
 8009984:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009988:	4628      	mov	r0, r5
 800998a:	4798      	blx	r3
 800998c:	2000      	movs	r0, #0
 800998e:	e7e0      	b.n	8009952 <_raise_r+0x12>

08009990 <raise>:
 8009990:	4b02      	ldr	r3, [pc, #8]	; (800999c <raise+0xc>)
 8009992:	4601      	mov	r1, r0
 8009994:	6818      	ldr	r0, [r3, #0]
 8009996:	f7ff bfd3 	b.w	8009940 <_raise_r>
 800999a:	bf00      	nop
 800999c:	20000720 	.word	0x20000720

080099a0 <_kill_r>:
 80099a0:	b538      	push	{r3, r4, r5, lr}
 80099a2:	4d07      	ldr	r5, [pc, #28]	; (80099c0 <_kill_r+0x20>)
 80099a4:	2300      	movs	r3, #0
 80099a6:	4604      	mov	r4, r0
 80099a8:	4608      	mov	r0, r1
 80099aa:	4611      	mov	r1, r2
 80099ac:	602b      	str	r3, [r5, #0]
 80099ae:	f7f7 fd25 	bl	80013fc <_kill>
 80099b2:	1c43      	adds	r3, r0, #1
 80099b4:	d102      	bne.n	80099bc <_kill_r+0x1c>
 80099b6:	682b      	ldr	r3, [r5, #0]
 80099b8:	b103      	cbz	r3, 80099bc <_kill_r+0x1c>
 80099ba:	6023      	str	r3, [r4, #0]
 80099bc:	bd38      	pop	{r3, r4, r5, pc}
 80099be:	bf00      	nop
 80099c0:	20000b64 	.word	0x20000b64

080099c4 <_getpid_r>:
 80099c4:	f7f7 bd12 	b.w	80013ec <_getpid>

080099c8 <__malloc_lock>:
 80099c8:	4801      	ldr	r0, [pc, #4]	; (80099d0 <__malloc_lock+0x8>)
 80099ca:	f000 b809 	b.w	80099e0 <__retarget_lock_acquire_recursive>
 80099ce:	bf00      	nop
 80099d0:	20000b6c 	.word	0x20000b6c

080099d4 <__malloc_unlock>:
 80099d4:	4801      	ldr	r0, [pc, #4]	; (80099dc <__malloc_unlock+0x8>)
 80099d6:	f000 b804 	b.w	80099e2 <__retarget_lock_release_recursive>
 80099da:	bf00      	nop
 80099dc:	20000b6c 	.word	0x20000b6c

080099e0 <__retarget_lock_acquire_recursive>:
 80099e0:	4770      	bx	lr

080099e2 <__retarget_lock_release_recursive>:
 80099e2:	4770      	bx	lr

080099e4 <_init>:
 80099e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099e6:	bf00      	nop
 80099e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099ea:	bc08      	pop	{r3}
 80099ec:	469e      	mov	lr, r3
 80099ee:	4770      	bx	lr

080099f0 <_fini>:
 80099f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099f2:	bf00      	nop
 80099f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099f6:	bc08      	pop	{r3}
 80099f8:	469e      	mov	lr, r3
 80099fa:	4770      	bx	lr
